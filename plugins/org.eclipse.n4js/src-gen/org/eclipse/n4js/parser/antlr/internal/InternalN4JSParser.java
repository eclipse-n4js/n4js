package org.eclipse.n4js.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.n4js.services.N4JSGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "QuestionMarkFullStop", "QuestionMarkQuestionMark", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_VERSION", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=77;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_VERSION=164;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_STRUCTMODSUFFIX=146;
    public static final int RULE_EOL=152;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int Out=61;
    public static final int RULE_ZWNJ=161;
    public static final int Project=20;
    public static final int EqualsSignEqualsSign=76;
    public static final int Switch=27;
    public static final int RULE_OCTAL_INT=121;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=148;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=150;
    public static final int LeftSquareBracket=107;
    public static final int LessThanSignLessThanSign=74;
    public static final int If=84;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int QuestionMarkQuestionMark=79;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=156;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int QuestionMarkFullStop=78;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int Target=28;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int LessThanSignEqualsSign=75;
    public static final int CommercialAtCommercialAt=80;
    public static final int Solidus=99;
    public static final int RightCurlyBracket=112;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Constructor=5;
    public static final int Abstract=11;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int Semicolon=101;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=155;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=160;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=73;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=147;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=153;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Try=63;
    public static final int Ampersand=91;
    public static final int AsteriskEqualsSign=69;
    public static final int Void=51;
    public static final int VerticalLineEqualsSign=87;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=158;
    public static final int Public=24;
    public static final int Do=83;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int RULE_DOT_DOT=163;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=149;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int With=52;
    public static final int RULE_SL_COMMENT=151;
    public static final int Function=15;
    public static final int EqualsSign=103;
    public static final int RULE_ZWJ=162;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=159;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=154;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int While=40;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=157;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;


        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }
    protected void setInRegularExpression() {}
    protected void setInTemplateSegment() {}
    protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    protected void promoteEOL() {} // overridden in subtype
    protected void addASIMessage() {} // overridden in subtype
    protected boolean hasDisallowedEOL() { return false; } // overridden in subtype

     	private N4JSGrammarAccess grammarAccess;

        public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Script";
       	}

       	@Override
       	protected N4JSGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}
    public final EObject entryRuleScript() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScript = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScript=ruleScript();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScript; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScript() throws RecognitionException {
        EObject current = null;

        EObject lv_annotations_1_0 = null;

        EObject lv_scriptElements_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getScriptAccess().getScriptAction_0(),
              					current);
              			
            }

            }
            loop1:
            do {
                int alt1=3;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }
                else if ( ((LA1_0>=Intersection && LA1_0<=Implements)||(LA1_0>=Promisify && LA1_0<=Function)||(LA1_0>=Private && LA1_0<=Break)||(LA1_0>=Class && LA1_0<=This)||(LA1_0>=Enum && LA1_0<=With)||(LA1_0>=For && LA1_0<=Var)||LA1_0==PlusSignPlusSign||(LA1_0>=HyphenMinusHyphenMinus && LA1_0<=SolidusEqualsSign)||(LA1_0>=As && LA1_0<=If)||LA1_0==Of||LA1_0==ExclamationMark||LA1_0==LeftParenthesis||LA1_0==PlusSign||LA1_0==HyphenMinus||LA1_0==Solidus||(LA1_0>=Semicolon && LA1_0<=LessThanSign)||(LA1_0>=CommercialAt && LA1_0<=LeftSquareBracket)||LA1_0==LeftCurlyBracket||LA1_0==Tilde||LA1_0==RULE_DOUBLE||(LA1_0>=RULE_HEX_INT && LA1_0<=RULE_LEGACY_OCTAL_INT)||LA1_0==RULE_SCIENTIFIC_INT||LA1_0==RULE_IDENTIFIER||LA1_0==RULE_STRING||(LA1_0>=RULE_TEMPLATE_HEAD && LA1_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA1_0==RULE_INT) ) {
                    alt1=2;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getScriptAccess().getAnnotationsScriptAnnotationParserRuleCall_1_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_annotations_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getScriptRule());
            	      						}
            	      						add(
            	      							current,
            	      							"annotations",
            	      							lv_annotations_1_0,
            	      							"org.eclipse.n4js.N4JS.ScriptAnnotation");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getScriptAccess().getScriptElementsScriptElementParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_scriptElements_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getScriptRule());
            	      						}
            	      						add(
            	      							current,
            	      							"scriptElements",
            	      							lv_scriptElements_2_0,
            	      							"org.eclipse.n4js.N4JS.ScriptElement");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScriptElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptElement=ruleScriptElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptElement() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedScriptElement_0 = null;

        EObject this_N4ClassDeclaration_1 = null;

        EObject this_N4InterfaceDeclaration_2 = null;

        EObject this_N4EnumDeclaration_3 = null;

        EObject this_ImportDeclaration_4 = null;

        EObject this_ExportDeclaration_5 = null;

        EObject this_RootStatement_6 = null;



        	enterRule();

        try {
            {
            int alt2=7;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedScriptElement_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AnnotatedScriptElement_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4ClassDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4InterfaceDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4EnumDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclaration_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ImportDeclaration_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExportDeclaration_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RootStatement_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedScriptElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedScriptElement=ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;

        Token otherlv_11=null;
        Token otherlv_19=null;
        Token otherlv_28=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        EObject this_AnnotationList_0 = null;

        EObject this_ExportDeclarationImpl_2 = null;

        EObject this_ImportDeclarationImpl_4 = null;

        Enumerator lv_declaredModifiers_6_0 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject this_FunctionImpl_8 = null;

        Enumerator lv_declaredModifiers_10_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_12_0 = null;

        AntlrDatatypeRuleToken lv_name_13_0 = null;

        EObject this_VersionDeclaration_14 = null;

        EObject this_TypeVariables_15 = null;

        EObject this_ClassExtendsImplements_16 = null;

        Enumerator lv_declaredModifiers_18_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_20_0 = null;

        AntlrDatatypeRuleToken lv_name_21_0 = null;

        EObject this_VersionDeclaration_22 = null;

        EObject this_TypeVariables_23 = null;

        EObject this_InterfaceExtendsList_24 = null;

        EObject this_Members_25 = null;

        Enumerator lv_declaredModifiers_27_0 = null;

        AntlrDatatypeRuleToken lv_name_29_0 = null;

        EObject this_VersionDeclaration_30 = null;

        EObject lv_literals_32_0 = null;

        EObject lv_literals_34_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_4);
            this_AnnotationList_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
              			
            }

            }
            int alt18=5;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationAnnotationListAction_1_0_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclarationImpl_2=ruleExportDeclarationImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ExportDeclarationImpl_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationAnnotationListAction_1_1_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclarationImpl_4=ruleImportDeclarationImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ImportDeclarationImpl_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getFunctionDeclarationAnnotationListAction_1_2_0(),
                      							current);
                      					
                    }

                    }
                    {
                    {
                    loop3:
                    do {
                        int alt3=2;
                        int LA3_0 = input.LA(1);

                        if ( ((LA3_0>=Protected && LA3_0<=Abstract)||LA3_0==External||(LA3_0>=Private && LA3_0<=Project)||LA3_0==Public||LA3_0==Static||LA3_0==Const) ) {
                            alt3=1;
                        }


                        switch (alt3) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_1_0_0_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_6_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop3;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1());
                      						
                    }
                    pushFollow(FOLLOW_5);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      								}
                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2());
                      							
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=ruleFunctionImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_FunctionImpl_8;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt14=2;
                    alt14 = dfa14.predict(input);
                    switch (alt14) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4ClassDeclarationAnnotationListAction_1_3_0_0_0(),
                              									current);
                              							
                            }

                            }
                            loop4:
                            do {
                                int alt4=2;
                                int LA4_0 = input.LA(1);

                                if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                                    alt4=1;
                                }


                                switch (alt4) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_0_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_6);
                            	    lv_declaredModifiers_10_0=ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_10_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop4;
                                }
                            } while (true);

                            otherlv_11=(Token)match(input,Class,FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_11, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                              						
                            }
                            int alt5=2;
                            int LA5_0 = input.LA(1);

                            if ( (LA5_0==Tilde) ) {
                                alt5=1;
                            }
                            switch (alt5) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_8);
                                    lv_typingStrategy_12_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_12_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_0_4_0());
                              								
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_13_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_13_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==RULE_VERSION) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_3_0_0_5());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_VersionDeclaration_14=ruleVersionDeclaration(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_VersionDeclaration_14;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==LessThanSign) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_6());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_TypeVariables_15=ruleTypeVariables(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_TypeVariables_15;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt8=2;
                            int LA8_0 = input.LA(1);

                            if ( (LA8_0==Implements||LA8_0==Extends) ) {
                                alt8=1;
                            }
                            switch (alt8) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsImplementsParserRuleCall_1_3_0_0_7());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_ClassExtendsImplements_16=ruleClassExtendsImplements(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_ClassExtendsImplements_16;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_3_0_1_0(),
                              									current);
                              							
                            }

                            }
                            loop9:
                            do {
                                int alt9=2;
                                int LA9_0 = input.LA(1);

                                if ( ((LA9_0>=Protected && LA9_0<=Abstract)||LA9_0==External||(LA9_0>=Private && LA9_0<=Project)||LA9_0==Public||LA9_0==Static||LA9_0==Const) ) {
                                    alt9=1;
                                }


                                switch (alt9) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_1_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_18_0=ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_18_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop9;
                                }
                            } while (true);

                            otherlv_19=(Token)match(input,Interface,FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_19, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                              						
                            }
                            int alt10=2;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==Tilde) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_8);
                                    lv_typingStrategy_20_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_20_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_1_4_0());
                              								
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_21_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_21_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt11=2;
                            int LA11_0 = input.LA(1);

                            if ( (LA11_0==RULE_VERSION) ) {
                                alt11=1;
                            }
                            switch (alt11) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_3_0_1_5());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_VersionDeclaration_22=ruleVersionDeclaration(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_VersionDeclaration_22;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);

                            if ( (LA12_0==LessThanSign) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_6());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_TypeVariables_23=ruleTypeVariables(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_TypeVariables_23;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt13=2;
                            int LA13_0 = input.LA(1);

                            if ( (LA13_0==Implements||LA13_0==Extends) ) {
                                alt13=1;
                            }
                            switch (alt13) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getInterfaceExtendsListParserRuleCall_1_3_0_1_7());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_InterfaceExtendsList_24=ruleInterfaceExtendsList(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_InterfaceExtendsList_24;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_25=ruleMembers(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Members_25;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getN4EnumDeclarationAnnotationListAction_1_4_0(),
                      							current);
                      					
                    }

                    }
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);

                        if ( ((LA15_0>=Protected && LA15_0<=Abstract)||LA15_0==External||(LA15_0>=Private && LA15_0<=Project)||LA15_0==Public||LA15_0==Static||LA15_0==Const) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_4_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_declaredModifiers_27_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_27_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);

                    otherlv_28=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_28, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_4_3_0());
                      						
                    }
                    pushFollow(FOLLOW_12);
                    lv_name_29_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_29_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt16=2;
                    int LA16_0 = input.LA(1);

                    if ( (LA16_0==RULE_VERSION) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_4_4());
                              					
                            }
                            pushFollow(FOLLOW_13);
                            this_VersionDeclaration_30=ruleVersionDeclaration(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_VersionDeclaration_30;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }

                    otherlv_31=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_31, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_5());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_6_0());
                      						
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_32_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_32_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==Comma) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    {
                    	    otherlv_33=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_33, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_7_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_34_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_34_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);

                    otherlv_35=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_8());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportDeclaration=ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_ExportDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExportDeclarationAccess().getExportDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_ExportDeclarationImpl_1=ruleExportDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_wildcardExport_1_0=null;
        Token lv_defaultExport_8_0=null;
        EObject this_ExportFromClause_2 = null;

        EObject this_ExportClause_4 = null;

        EObject this_ExportFromClause_5 = null;

        EObject lv_exportedElement_7_0 = null;

        EObject lv_exportedElement_9_0 = null;

        EObject lv_defaultExportedExpression_10_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Export,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
              		
            }
            int alt21=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt21=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt21=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt21=3;
                }
                break;
            case Default:
                {
                alt21=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_wildcardExport_1_0=(Token)match(input,Asterisk,FOLLOW_17); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_wildcardExport_1_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "wildcardExport", true, "*");
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    this_ExportFromClause_2=ruleExportFromClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ExportFromClause_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0());
                      				
                    }
                    pushFollow(FOLLOW_19);
                    this_ExportClause_4=ruleExportClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_ExportClause_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==From) && (synpred9_InternalN4JSParser())) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                              						}
                              						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1());
                              					
                            }
                            pushFollow(FOLLOW_18);
                            this_ExportFromClause_5=ruleExportFromClause(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ExportFromClause_5;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_exportedElement_7_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"exportedElement",
                      							lv_exportedElement_7_0,
                      							"org.eclipse.n4js.N4JS.ExportableElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    lv_defaultExport_8_0=(Token)match(input,Default,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_defaultExport_8_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "defaultExport", true, "default");
                      						
                    }

                    }


                    }
                    int alt20=2;
                    alt20 = dfa20.predict(input);
                    switch (alt20) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_3_1_0_0());
                              							
                            }
                            pushFollow(FOLLOW_2);
                            lv_exportedElement_9_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              								}
                              								set(
                              									current,
                              									"exportedElement",
                              									lv_exportedElement_9_0,
                              									"org.eclipse.n4js.N4JS.ExportableElement");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0());
                              								
                            }
                            pushFollow(FOLLOW_18);
                            lv_defaultExportedExpression_10_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              									}
                              									set(
                              										current,
                              										"defaultExportedExpression",
                              										lv_defaultExportedExpression_10_0,
                              										"org.eclipse.n4js.N4JS.AssignmentExpression");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }

                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            ruleSemi();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportFromClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;


        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,From,FOLLOW_21); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getExportFromClauseRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportFromClauseAccess().getReexportedFromTModuleCrossReference_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_namedExports_1_0 = null;

        EObject lv_namedExports_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( ((LA24_0>=Intersection && LA24_0<=Implements)||(LA24_0>=Promisify && LA24_0<=Abstract)||LA24_0==External||(LA24_0>=Private && LA24_0<=Project)||LA24_0==Public||LA24_0==Static||LA24_0==Target||(LA24_0>=Async && LA24_0<=Await)||LA24_0==Union||(LA24_0>=Yield && LA24_0<=This)||LA24_0==From||LA24_0==Type||(LA24_0>=Get && LA24_0<=Let)||(LA24_0>=Out && LA24_0<=Set)||LA24_0==As||LA24_0==Of||LA24_0==RULE_IDENTIFIER) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExportClauseAccess().getNamedExportsExportSpecifierParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_namedExports_1_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportClauseRule());
                      						}
                      						add(
                      							current,
                      							"namedExports",
                      							lv_namedExports_1_0,
                      							"org.eclipse.n4js.N4JS.ExportSpecifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);

                        if ( (LA22_0==Comma) ) {
                            int LA22_1 = input.LA(2);

                            if ( ((LA22_1>=Intersection && LA22_1<=Implements)||(LA22_1>=Promisify && LA22_1<=Abstract)||LA22_1==External||(LA22_1>=Private && LA22_1<=Project)||LA22_1==Public||LA22_1==Static||LA22_1==Target||(LA22_1>=Async && LA22_1<=Await)||LA22_1==Union||(LA22_1>=Yield && LA22_1<=This)||LA22_1==From||LA22_1==Type||(LA22_1>=Get && LA22_1<=Let)||(LA22_1>=Out && LA22_1<=Set)||LA22_1==As||LA22_1==Of||LA22_1==RULE_IDENTIFIER) ) {
                                alt22=1;
                            }


                        }


                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExportClauseAccess().getNamedExportsExportSpecifierParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_namedExports_3_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExportClauseRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"namedExports",
                    	      								lv_namedExports_3_0,
                    	      								"org.eclipse.n4js.N4JS.ExportSpecifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==Comma) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            {
                            otherlv_4=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_4, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportSpecifier() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportSpecifier=ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportSpecifier() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_element_0_0 = null;

        AntlrDatatypeRuleToken lv_alias_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportSpecifierAccess().getElementIdentifierRefParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_element_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportSpecifierRule());
              					}
              					set(
              						current,
              						"element",
              						lv_element_0_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==As) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,As,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExportSpecifierAccess().getAliasIdentifierNameParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_2_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_2_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportableElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportableElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportableElement=ruleExportableElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportableElement() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedExportableElement_0 = null;

        EObject this_N4ClassDeclaration_1 = null;

        EObject this_N4InterfaceDeclaration_2 = null;

        EObject this_N4EnumDeclaration_3 = null;

        EObject this_FunctionDeclaration_4 = null;

        EObject this_ExportedVariableStatement_5 = null;



        	enterRule();

        try {
            {
            int alt26=6;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExportableElement_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AnnotatedExportableElement_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4ClassDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4InterfaceDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4EnumDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportableElementAccess().getFunctionDeclarationParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_4=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_FunctionDeclaration_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableStatement_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExportedVariableStatement_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedExportableElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExportableElement=ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;

        Token otherlv_9=null;
        Token otherlv_14=null;
        Token otherlv_21=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        EObject this_AnnotationList_0 = null;

        Enumerator lv_declaredModifiers_2_0 = null;

        EObject this_AsyncNoTrailingLineBreak_3 = null;

        EObject this_FunctionImpl_4 = null;

        Enumerator lv_declaredModifiers_6_0 = null;

        Enumerator lv_varStmtKeyword_7_0 = null;

        EObject lv_varDeclsOrBindings_8_0 = null;

        EObject lv_varDeclsOrBindings_10_0 = null;

        Enumerator lv_declaredModifiers_13_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_15_0 = null;

        AntlrDatatypeRuleToken lv_name_16_0 = null;

        EObject this_TypeVariables_17 = null;

        EObject this_ClassExtendsImplements_18 = null;

        Enumerator lv_declaredModifiers_20_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_22_0 = null;

        AntlrDatatypeRuleToken lv_name_23_0 = null;

        EObject this_TypeVariables_24 = null;

        EObject this_InterfaceExtendsList_25 = null;

        EObject this_Members_26 = null;

        Enumerator lv_declaredModifiers_28_0 = null;

        AntlrDatatypeRuleToken lv_name_30_0 = null;

        EObject lv_literals_32_0 = null;

        EObject lv_literals_34_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_25);
            this_AnnotationList_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
              			
            }

            }
            int alt41=4;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getFunctionDeclarationAnnotationListAction_1_0_0(),
                      							current);
                      					
                    }

                    }
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( ((LA27_0>=Protected && LA27_0<=Abstract)||LA27_0==External||(LA27_0>=Private && LA27_0<=Project)||LA27_0==Public||LA27_0==Static||LA27_0==Const) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_2_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_5);
                    this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AsyncNoTrailingLineBreak_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_4=ruleFunctionImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionImpl_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getExportedVariableStatementAnnotationListAction_1_1_0(),
                      							current);
                      					
                    }

                    }
                    loop28:
                    do {
                        int alt28=2;
                        alt28 = dfa28.predict(input);
                        switch (alt28) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_26);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_6_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop28;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_1_1_2_0());
                      						
                    }
                    pushFollow(FOLLOW_27);
                    lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"varStmtKeyword",
                      								lv_varStmtKeyword_7_0,
                      								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_28);
                    lv_varDeclsOrBindings_8_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"varDeclsOrBindings",
                      								lv_varDeclsOrBindings_8_0,
                      								"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    loop29:
                    do {
                        int alt29=2;
                        int LA29_0 = input.LA(1);

                        if ( (LA29_0==Comma) ) {
                            alt29=1;
                        }


                        switch (alt29) {
                    	case 1 :
                    	    {
                    	    otherlv_9=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_9, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_28);
                    	    lv_varDeclsOrBindings_10_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"varDeclsOrBindings",
                    	      									lv_varDeclsOrBindings_10_0,
                    	      									"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop29;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt38=2;
                    alt38 = dfa38.predict(input);
                    switch (alt38) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4ClassDeclarationAnnotationListAction_1_2_0_0_0(),
                              									current);
                              							
                            }

                            }
                            loop30:
                            do {
                                int alt30=2;
                                int LA30_0 = input.LA(1);

                                if ( ((LA30_0>=Protected && LA30_0<=Abstract)||LA30_0==External||(LA30_0>=Private && LA30_0<=Project)||LA30_0==Public||LA30_0==Static||LA30_0==Const) ) {
                                    alt30=1;
                                }


                                switch (alt30) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_6);
                            	    lv_declaredModifiers_13_0=ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_13_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop30;
                                }
                            } while (true);

                            otherlv_14=(Token)match(input,Class,FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_14, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                              						
                            }
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==Tilde) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_8);
                                    lv_typingStrategy_15_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_15_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_0_4_0());
                              								
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_16_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_16_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt32=2;
                            int LA32_0 = input.LA(1);

                            if ( (LA32_0==LessThanSign) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_TypeVariables_17=ruleTypeVariables(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_TypeVariables_17;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt33=2;
                            int LA33_0 = input.LA(1);

                            if ( (LA33_0==Implements||LA33_0==Extends) ) {
                                alt33=1;
                            }
                            switch (alt33) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsImplementsParserRuleCall_1_2_0_0_6());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_ClassExtendsImplements_18=ruleClassExtendsImplements(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_ClassExtendsImplements_18;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_2_0_1_0(),
                              									current);
                              							
                            }

                            }
                            loop34:
                            do {
                                int alt34=2;
                                int LA34_0 = input.LA(1);

                                if ( ((LA34_0>=Protected && LA34_0<=Abstract)||LA34_0==External||(LA34_0>=Private && LA34_0<=Project)||LA34_0==Public||LA34_0==Static||LA34_0==Const) ) {
                                    alt34=1;
                                }


                                switch (alt34) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_1_1_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_20_0=ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_20_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop34;
                                }
                            } while (true);

                            otherlv_21=(Token)match(input,Interface,FOLLOW_7); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_21, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                              						
                            }
                            int alt35=2;
                            int LA35_0 = input.LA(1);

                            if ( (LA35_0==Tilde) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_8);
                                    lv_typingStrategy_22_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_22_0,
                                      										"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_1_4_0());
                              								
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_23_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_23_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt36=2;
                            int LA36_0 = input.LA(1);

                            if ( (LA36_0==LessThanSign) ) {
                                alt36=1;
                            }
                            switch (alt36) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_TypeVariables_24=ruleTypeVariables(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_TypeVariables_24;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }
                            int alt37=2;
                            int LA37_0 = input.LA(1);

                            if ( (LA37_0==Implements||LA37_0==Extends) ) {
                                alt37=1;
                            }
                            switch (alt37) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getInterfaceExtendsListParserRuleCall_1_2_0_1_6());
                                      							
                                    }
                                    pushFollow(FOLLOW_9);
                                    this_InterfaceExtendsList_25=ruleInterfaceExtendsList(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								current = this_InterfaceExtendsList_25;
                                      								afterParserOrEnumRuleCall();
                                      							
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_26=ruleMembers(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Members_26;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getN4EnumDeclarationAnnotationListAction_1_3_0(),
                      							current);
                      					
                    }

                    }
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( ((LA39_0>=Protected && LA39_0<=Abstract)||LA39_0==External||(LA39_0>=Private && LA39_0<=Project)||LA39_0==Public||LA39_0==Static||LA39_0==Const) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_11);
                    	    lv_declaredModifiers_28_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_28_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    otherlv_29=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_29, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_3_3_0());
                      						
                    }
                    pushFollow(FOLLOW_13);
                    lv_name_30_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_30_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_31=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_31, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_5_0());
                      						
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_32_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_32_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==Comma) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    {
                    	    otherlv_33=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_33, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_34_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_34_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);

                    otherlv_35=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleImportDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportDeclaration=ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_ImportDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getImportDeclarationAccess().getImportDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_ImportDeclarationImpl_1=ruleImportDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ImportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_importFrom_2_0=null;
        EObject this_ImportClause_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_29); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
              		
            }
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( ((LA42_0>=Intersection && LA42_0<=Implements)||(LA42_0>=Promisify && LA42_0<=Abstract)||LA42_0==External||(LA42_0>=Private && LA42_0<=Project)||LA42_0==Public||LA42_0==Static||LA42_0==Target||(LA42_0>=Async && LA42_0<=Await)||LA42_0==Union||(LA42_0>=Yield && LA42_0<=This)||LA42_0==From||LA42_0==Type||(LA42_0>=Get && LA42_0<=Let)||(LA42_0>=Out && LA42_0<=Set)||LA42_0==As||LA42_0==Of||LA42_0==Asterisk||LA42_0==LeftCurlyBracket||LA42_0==RULE_IDENTIFIER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_17);
                    this_ImportClause_1=ruleImportClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ImportClause_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    {
                    {
                    lv_importFrom_2_0=(Token)match(input,From,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_importFrom_2_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      						}
                      						setWithLastConsumed(current, "importFrom", true, "from");
                      					
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getImportDeclarationImplRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getModuleTModuleCrossReference_2_0());
              				
            }
            pushFollow(FOLLOW_18);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_importSpecifiers_0_0 = null;

        EObject this_ImportSpecifiersExceptDefault_2 = null;

        EObject this_ImportSpecifiersExceptDefault_3 = null;



        	enterRule();

        try {
            {
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( ((LA44_0>=Intersection && LA44_0<=Implements)||(LA44_0>=Promisify && LA44_0<=Abstract)||LA44_0==External||(LA44_0>=Private && LA44_0<=Project)||LA44_0==Public||LA44_0==Static||LA44_0==Target||(LA44_0>=Async && LA44_0<=Await)||LA44_0==Union||(LA44_0>=Yield && LA44_0<=This)||LA44_0==From||LA44_0==Type||(LA44_0>=Get && LA44_0<=Let)||(LA44_0>=Out && LA44_0<=Set)||LA44_0==As||LA44_0==Of||LA44_0==RULE_IDENTIFIER) ) {
                alt44=1;
            }
            else if ( (LA44_0==Asterisk||LA44_0==LeftCurlyBracket) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_30);
                    lv_importSpecifiers_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getImportClauseRule());
                      						}
                      						add(
                      							current,
                      							"importSpecifiers",
                      							lv_importSpecifiers_0_0,
                      							"org.eclipse.n4js.N4JS.DefaultImportSpecifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==Comma) ) {
                        alt43=1;
                    }
                    switch (alt43) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                              				
                            }
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getImportClauseRule());
                              					}
                              					newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            this_ImportSpecifiersExceptDefault_2=ruleImportSpecifiersExceptDefault(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ImportSpecifiersExceptDefault_2;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getImportClauseRule());
                      			}
                      			newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportSpecifiersExceptDefault_3=ruleImportSpecifiersExceptDefault(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ImportSpecifiersExceptDefault_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportSpecifiersExceptDefault(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_importSpecifiers_0_0 = null;

        EObject lv_importSpecifiers_2_0 = null;

        EObject lv_importSpecifiers_4_0 = null;



        	enterRule();

        try {
            {
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==Asterisk) ) {
                alt48=1;
            }
            else if ( (LA48_0==LeftCurlyBracket) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_importSpecifiers_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                      					}
                      					add(
                      						current,
                      						"importSpecifiers",
                      						lv_importSpecifiers_0_0,
                      						"org.eclipse.n4js.N4JS.NamespaceImportSpecifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_32); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                      			
                    }
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( ((LA47_0>=Intersection && LA47_0<=With)||(LA47_0>=For && LA47_0<=Var)||(LA47_0>=As && LA47_0<=Of)||LA47_0==RULE_IDENTIFIER) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0());
                              						
                            }
                            pushFollow(FOLLOW_15);
                            lv_importSpecifiers_2_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                              							}
                              							add(
                              								current,
                              								"importSpecifiers",
                              								lv_importSpecifiers_2_0,
                              								"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            loop45:
                            do {
                                int alt45=2;
                                int LA45_0 = input.LA(1);

                                if ( (LA45_0==Comma) ) {
                                    int LA45_1 = input.LA(2);

                                    if ( ((LA45_1>=Intersection && LA45_1<=With)||(LA45_1>=For && LA45_1<=Var)||(LA45_1>=As && LA45_1<=Of)||LA45_1==RULE_IDENTIFIER) ) {
                                        alt45=1;
                                    }


                                }


                                switch (alt45) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_3, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	      					
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_15);
                            	    lv_importSpecifiers_4_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"importSpecifiers",
                            	      									lv_importSpecifiers_4_0,
                            	      									"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop45;
                                }
                            } while (true);
                            int alt46=2;
                            int LA46_0 = input.LA(1);

                            if ( (LA46_0==Comma) ) {
                                alt46=1;
                            }
                            switch (alt46) {
                                case 1 :
                                    {
                                    otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						newLeafNode(otherlv_5, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                      					
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNamedImportSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamedImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamedImportSpecifier=ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamedImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;



        	enterRule();

        try {
            {
            int alt49=2;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_33);
                    ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_2=(Token)match(input,As,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNamedImportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDefaultImportSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultImportSpecifier=ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getDefaultImportSpecifierRule());
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getDefaultImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0());
              			
            }
            pushFollow(FOLLOW_2);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNamespaceImportSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceImportSpecifier=ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_declaredDynamic_4_0=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNamespaceImportSpecifierAccess().getNamespaceImportSpecifierAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Asterisk,FOLLOW_33); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,As,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNamespaceImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_34);
            lv_alias_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNamespaceImportSpecifierRule());
              					}
              					set(
              						current,
              						"alias",
              						lv_alias_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==PlusSign) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    {
                    lv_declaredDynamic_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredDynamic_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamespaceImportSpecifierRule());
                      					}
                      					setWithLastConsumed(current, "declaredDynamic", true, "+");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleModuleSpecifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleModuleSpecifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModuleSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleModuleSpecifier=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModuleSpecifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleModuleSpecifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_0=null;


        	enterRule();

        try {
            {
            this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_STRING_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_STRING_0, grammarAccess.getModuleSpecifierAccess().getSTRINGTerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionDeclaration=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_AsyncNoTrailingLineBreak_2 = null;

        EObject this_FunctionImpl_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( ((LA51_0>=Protected && LA51_0<=Abstract)||LA51_0==External||(LA51_0>=Private && LA51_0<=Project)||LA51_0==Public||LA51_0==Static||LA51_0==Const) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_5);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
              				
            }
            {
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
              					
            }
            pushFollow(FOLLOW_35);
            this_FunctionImpl_3=ruleFunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }
            int alt52=2;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionDeclaration() throws RecognitionException {
        EObject current = null;

        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_AsyncNoTrailingLineBreak_2 = null;

        EObject this_FunctionImpl_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( ((LA53_0>=Protected && LA53_0<=Abstract)||LA53_0==External||(LA53_0>=Private && LA53_0<=Project)||LA53_0==Public||LA53_0==Static||LA53_0==Const) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_36);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
              				
            }
            {
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
              					
            }
            pushFollow(FOLLOW_35);
            this_FunctionImpl_3=norm3_FunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==Semicolon) ) {
                int LA54_1 = input.LA(2);

                if ( (synpred22_InternalN4JSParser()) ) {
                    alt54=1;
                }
            }
            else if ( (LA54_0==EOF||LA54_0==RULE_ML_COMMENT||LA54_0==RULE_EOL) && (synpred22_InternalN4JSParser())) {
                alt54=1;
            }
            else if ( (LA54_0==RightCurlyBracket) ) {
                int LA54_3 = input.LA(2);

                if ( (synpred22_InternalN4JSParser()) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncNoTrailingLineBreak(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_declaredAsync_0_0=null;
        EObject this_NoLineTerminator_1 = null;



        	enterRule();

        try {
            {
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Async) ) {
                int LA55_1 = input.LA(2);

                if ( ((LA55_1>=Intersection && LA55_1<=With)||(LA55_1>=For && LA55_1<=Var)||(LA55_1>=As && LA55_1<=Of)||LA55_1==LeftSquareBracket||LA55_1==RULE_DOUBLE||LA55_1==RULE_HEX_INT||LA55_1==RULE_OCTAL_INT||LA55_1==RULE_SCIENTIFIC_INT||LA55_1==RULE_IDENTIFIER||LA55_1==RULE_STRING||LA55_1==RULE_NO_LINE_TERMINATOR||LA55_1==RULE_INT) ) {
                    alt55=1;
                }
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_37); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      					}
                      					setWithLastConsumed(current, "declaredAsync", true, "async");
                      				
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      			}
                      			newCompositeNode(grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NoLineTerminator_1=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NoLineTerminator_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_generator_1_0=null;
        EObject this_FunctionHeader_2 = null;

        EObject this_FunctionBody_3 = null;

        EObject this_FunctionHeader_4 = null;

        EObject this_FunctionBody_5 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              		
            }
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Asterisk) ) {
                alt56=1;
            }
            else if ( ((LA56_0>=Intersection && LA56_0<=Implements)||(LA56_0>=Promisify && LA56_0<=Abstract)||LA56_0==External||(LA56_0>=Private && LA56_0<=Project)||LA56_0==Public||LA56_0==Static||LA56_0==Target||(LA56_0>=Async && LA56_0<=Await)||LA56_0==Union||(LA56_0>=Yield && LA56_0<=This)||LA56_0==From||LA56_0==Type||(LA56_0>=Get && LA56_0<=Let)||(LA56_0>=Out && LA56_0<=Set)||LA56_0==As||LA56_0==Of||LA56_0==LeftParenthesis||LA56_0==LessThanSign||LA56_0==RULE_IDENTIFIER||LA56_0==RULE_VERSION) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_1_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_generator_1_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getFunctionImplRule());
                      							}
                      							setWithLastConsumed(current, "generator", true, "*");
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_2=norm2_FunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_3=norm1_FunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_4=ruleFunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_5=ruleFunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_generator_1_0=null;
        EObject this_FunctionHeader_2 = null;

        EObject this_FunctionBody_3 = null;

        EObject this_FunctionHeader_4 = null;

        EObject this_FunctionBody_5 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              		
            }
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Asterisk) ) {
                alt57=1;
            }
            else if ( ((LA57_0>=Intersection && LA57_0<=Implements)||(LA57_0>=Promisify && LA57_0<=Abstract)||LA57_0==External||(LA57_0>=Private && LA57_0<=Project)||LA57_0==Public||LA57_0==Static||LA57_0==Target||(LA57_0>=Async && LA57_0<=Await)||LA57_0==Union||LA57_0==This||LA57_0==From||LA57_0==Type||(LA57_0>=Get && LA57_0<=Let)||(LA57_0>=Out && LA57_0<=Set)||LA57_0==As||LA57_0==Of||LA57_0==LeftParenthesis||LA57_0==LessThanSign||LA57_0==RULE_IDENTIFIER||LA57_0==RULE_VERSION) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_1_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_generator_1_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getFunctionImplRule());
                      							}
                      							setWithLastConsumed(current, "generator", true, "*");
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_2=norm3_FunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_3=norm1_FunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_4=norm1_FunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_5=ruleFunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_generator_1_0=null;
        EObject this_FunctionHeader_2 = null;

        EObject this_FunctionBody_3 = null;

        EObject this_FunctionHeader_4 = null;

        EObject this_FunctionBody_5 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              		
            }
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==Asterisk) ) {
                alt58=1;
            }
            else if ( ((LA58_0>=Intersection && LA58_0<=Implements)||(LA58_0>=Promisify && LA58_0<=Abstract)||LA58_0==External||(LA58_0>=Private && LA58_0<=Project)||LA58_0==Public||LA58_0==Static||LA58_0==Target||(LA58_0>=Async && LA58_0<=Await)||LA58_0==Union||(LA58_0>=Yield && LA58_0<=This)||LA58_0==From||LA58_0==Type||(LA58_0>=Get && LA58_0<=Let)||(LA58_0>=Out && LA58_0<=Set)||LA58_0==As||LA58_0==Of||LA58_0==LeftParenthesis||LA58_0==LessThanSign||LA58_0==RULE_IDENTIFIER||LA58_0==RULE_VERSION) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_1_0=(Token)match(input,Asterisk,FOLLOW_39); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_generator_1_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getFunctionImplRule());
                      							}
                      							setWithLastConsumed(current, "generator", true, "*");
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_2=norm3_FunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_3=norm3_FunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0());
                      				
                    }
                    pushFollow(FOLLOW_13);
                    this_FunctionHeader_4=ruleFunctionHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionHeader_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFunctionImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_5=norm2_FunctionBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionBody_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeVariables_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_VersionDeclaration_2 = null;

        EObject this_StrictFormalParameters_3 = null;

        EObject this_ColonSepReturnTypeRef_4 = null;



        	enterRule();

        try {
            {
            {
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==LessThanSign) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_40);
                    this_TypeVariables_0=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( ((LA60_0>=Intersection && LA60_0<=Implements)||(LA60_0>=Promisify && LA60_0<=Abstract)||LA60_0==External||(LA60_0>=Private && LA60_0<=Project)||LA60_0==Public||LA60_0==Static||LA60_0==Target||(LA60_0>=Async && LA60_0<=Await)||LA60_0==Union||(LA60_0>=Yield && LA60_0<=This)||LA60_0==From||LA60_0==Type||(LA60_0>=Get && LA60_0<=Let)||(LA60_0>=Out && LA60_0<=Set)||LA60_0==As||LA60_0==Of||LA60_0==RULE_IDENTIFIER) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_41);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==RULE_VERSION) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_42);
                    this_VersionDeclaration_2=ruleVersionDeclaration(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VersionDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_3=ruleStrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_3;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==Colon) && (synpred23_InternalN4JSParser())) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_4=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeVariables_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_VersionDeclaration_2 = null;

        EObject this_StrictFormalParameters_3 = null;

        EObject this_ColonSepReturnTypeRef_4 = null;



        	enterRule();

        try {
            {
            {
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LessThanSign) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_40);
                    this_TypeVariables_0=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( ((LA64_0>=Intersection && LA64_0<=Implements)||(LA64_0>=Promisify && LA64_0<=Abstract)||LA64_0==External||(LA64_0>=Private && LA64_0<=Project)||LA64_0==Public||LA64_0==Static||LA64_0==Target||(LA64_0>=Async && LA64_0<=Await)||LA64_0==Union||LA64_0==This||LA64_0==From||LA64_0==Type||(LA64_0>=Get && LA64_0<=Let)||(LA64_0>=Out && LA64_0<=Set)||LA64_0==As||LA64_0==Of||LA64_0==RULE_IDENTIFIER) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_41);
                    lv_name_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==RULE_VERSION) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_42);
                    this_VersionDeclaration_2=ruleVersionDeclaration(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VersionDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_3=ruleStrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_3;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Colon) && (synpred24_InternalN4JSParser())) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_4=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeVariables_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_VersionDeclaration_2 = null;

        EObject this_StrictFormalParameters_3 = null;

        EObject this_ColonSepReturnTypeRef_4 = null;



        	enterRule();

        try {
            {
            {
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LessThanSign) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_39);
                    this_TypeVariables_0=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=Intersection && LA68_0<=Implements)||(LA68_0>=Promisify && LA68_0<=Abstract)||LA68_0==External||(LA68_0>=Private && LA68_0<=Project)||LA68_0==Public||LA68_0==Static||LA68_0==Target||(LA68_0>=Async && LA68_0<=Await)||LA68_0==Union||(LA68_0>=Yield && LA68_0<=This)||LA68_0==From||LA68_0==Type||(LA68_0>=Get && LA68_0<=Let)||(LA68_0>=Out && LA68_0<=Set)||LA68_0==As||LA68_0==Of||LA68_0==RULE_IDENTIFIER) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_39);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==RULE_VERSION) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_39);
                    this_VersionDeclaration_2=ruleVersionDeclaration(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VersionDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_3=norm1_StrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_3;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==Colon) && (synpred25_InternalN4JSParser())) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_4=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_TypeVariables_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_VersionDeclaration_2 = null;

        EObject this_StrictFormalParameters_3 = null;

        EObject this_ColonSepReturnTypeRef_4 = null;



        	enterRule();

        try {
            {
            {
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==LessThanSign) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_39);
                    this_TypeVariables_0=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( ((LA72_0>=Intersection && LA72_0<=Implements)||(LA72_0>=Promisify && LA72_0<=Abstract)||LA72_0==External||(LA72_0>=Private && LA72_0<=Project)||LA72_0==Public||LA72_0==Static||LA72_0==Target||(LA72_0>=Async && LA72_0<=Await)||LA72_0==Union||LA72_0==This||LA72_0==From||LA72_0==Type||(LA72_0>=Get && LA72_0<=Let)||(LA72_0>=Out && LA72_0<=Set)||LA72_0==As||LA72_0==Of||LA72_0==RULE_IDENTIFIER) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_39);
                    lv_name_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==RULE_VERSION) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_39);
                    this_VersionDeclaration_2=ruleVersionDeclaration(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VersionDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_43);
            this_StrictFormalParameters_3=norm1_StrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_3;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==Colon) && (synpred26_InternalN4JSParser())) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepReturnTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_4=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_body_0_0 = null;



        	enterRule();

        try {
            {
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_body_0_0 = null;



        	enterRule();

        try {
            {
            int alt76=2;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_body_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_body_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedFunctionDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedFunctionDeclaration=ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_annotationList_0_0 = null;

        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_AsyncNoTrailingLineBreak_2 = null;

        EObject this_FunctionImpl_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_annotationList_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( ((LA77_0>=Protected && LA77_0<=Abstract)||LA77_0==External||(LA77_0>=Private && LA77_0<=Project)||LA77_0==Public||LA77_0==Static||LA77_0==Const) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_5);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=ruleFunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;

        EObject lv_annotationList_0_0 = null;

        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_AsyncNoTrailingLineBreak_2 = null;

        EObject this_FunctionImpl_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_annotationList_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0>=Protected && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Const) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_36);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=norm3_FunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionExpression=ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionExpression() throws RecognitionException {
        EObject current = null;

        EObject this_FunctionImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFunctionExpressionAccess().getFunctionExpressionAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_1=norm6_FunctionImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAsyncFunctionExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAsyncFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAsyncFunctionExpression=ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAsyncFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_0_0=null;
        Token otherlv_2=null;
        EObject this_NoLineTerminator_1 = null;

        EObject this_FunctionHeader_3 = null;

        EObject this_FunctionBody_4 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            {
            lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_44); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
              						
            }
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              							}
              							setWithLastConsumed(current, "declaredAsync", true, "async");
              						
            }

            }


            }

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1());
              				
            }
            pushFollow(FOLLOW_45);
            this_NoLineTerminator_1=ruleNoLineTerminator(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_NoLineTerminator_1;
              					afterParserOrEnumRuleCall();
              				
            }
            otherlv_2=(Token)match(input,Function,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_13);
            this_FunctionHeader_3=ruleFunctionHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionHeader_3;
              			afterParserOrEnumRuleCall();
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_FunctionBody_4=norm2_FunctionBody(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FunctionBody_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrowExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowExpression=ruleArrowExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject this_NoLineTerminator_3 = null;

        EObject this_StrictFormalParameters_4 = null;

        EObject this_ColonSepReturnTypeRef_5 = null;

        EObject lv_fpars_6_0 = null;

        EObject lv_body_9_0 = null;

        EObject lv_body_11_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            int alt81=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt81=1;
                }
                break;
            case Async:
                {
                int LA81_2 = input.LA(2);

                if ( (LA81_2==EqualsSignGreaterThanSign) ) {
                    alt81=3;
                }
                else if ( (LA81_2==RULE_NO_LINE_TERMINATOR) && (synpred37_InternalN4JSParser())) {
                    alt81=2;
                }
                else if ( (LA81_2==LeftParenthesis) && (synpred37_InternalN4JSParser())) {
                    alt81=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt81=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }

            switch (alt81) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==Colon) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      										
                    }
                    if ( state.backtracking==0 ) {

                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                      										
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                      								
                    }
                    pushFollow(FOLLOW_42);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                      								
                    }
                    {
                    if ( state.backtracking==0 ) {

                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                      									
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                      									
                    }

                    }


                    }


                    }
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==Colon) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              				
            }

            }


            }
            int alt82=2;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrowExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject this_NoLineTerminator_3 = null;

        EObject this_StrictFormalParameters_4 = null;

        EObject this_ColonSepReturnTypeRef_5 = null;

        EObject lv_fpars_6_0 = null;

        EObject lv_body_9_0 = null;

        EObject lv_body_11_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            int alt85=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt85=1;
                }
                break;
            case Async:
                {
                int LA85_2 = input.LA(2);

                if ( (LA85_2==EqualsSignGreaterThanSign) ) {
                    alt85=3;
                }
                else if ( (LA85_2==RULE_NO_LINE_TERMINATOR) && (synpred43_InternalN4JSParser())) {
                    alt85=2;
                }
                else if ( (LA85_2==LeftParenthesis) && (synpred43_InternalN4JSParser())) {
                    alt85=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt85=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==Colon) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      										
                    }
                    if ( state.backtracking==0 ) {

                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                      										
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                      								
                    }
                    pushFollow(FOLLOW_42);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                      								
                    }
                    {
                    if ( state.backtracking==0 ) {

                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                      									
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                      									
                    }

                    }


                    }


                    }
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==Colon) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              				
            }

            }


            }
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ArrowExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject this_NoLineTerminator_3 = null;

        EObject this_StrictFormalParameters_4 = null;

        EObject this_ColonSepReturnTypeRef_5 = null;

        EObject lv_fpars_6_0 = null;

        EObject lv_body_9_0 = null;

        EObject lv_body_11_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            int alt89=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt89=1;
                }
                break;
            case Async:
                {
                int LA89_2 = input.LA(2);

                if ( (LA89_2==RULE_NO_LINE_TERMINATOR) && (synpred49_InternalN4JSParser())) {
                    alt89=2;
                }
                else if ( (LA89_2==LeftParenthesis) && (synpred49_InternalN4JSParser())) {
                    alt89=2;
                }
                else if ( (LA89_2==EqualsSignGreaterThanSign) ) {
                    alt89=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt89=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }

            switch (alt89) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==Colon) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      										
                    }
                    if ( state.backtracking==0 ) {

                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                      										
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                      								
                    }
                    pushFollow(FOLLOW_39);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                      								
                    }
                    {
                    if ( state.backtracking==0 ) {

                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                      									
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                      									
                    }

                    }


                    }


                    }
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==Colon) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              				
            }

            }


            }
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ArrowExpression() throws RecognitionException {
        EObject current = null;

        Token lv_declaredAsync_2_0=null;
        Token otherlv_7=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject this_NoLineTerminator_3 = null;

        EObject this_StrictFormalParameters_4 = null;

        EObject this_ColonSepReturnTypeRef_5 = null;

        EObject lv_fpars_6_0 = null;

        EObject lv_body_9_0 = null;

        EObject lv_body_11_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            int alt93=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt93=1;
                }
                break;
            case Async:
                {
                int LA93_2 = input.LA(2);

                if ( (LA93_2==RULE_NO_LINE_TERMINATOR) && (synpred55_InternalN4JSParser())) {
                    alt93=2;
                }
                else if ( (LA93_2==LeftParenthesis) && (synpred55_InternalN4JSParser())) {
                    alt93=2;
                }
                else if ( (LA93_2==EqualsSignGreaterThanSign) ) {
                    alt93=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt93=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==Colon) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      										
                    }
                    if ( state.backtracking==0 ) {

                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", true, "async");
                      										
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                      								
                    }
                    pushFollow(FOLLOW_39);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                      								
                    }
                    {
                    if ( state.backtracking==0 ) {

                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                      									
                    }
                    pushFollow(FOLLOW_46);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                      									
                    }

                    }


                    }


                    }
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==Colon) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepReturnTypeRefParserRuleCall_0_0_0_1_1());
                              							
                            }
                            pushFollow(FOLLOW_47);
                            this_ColonSepReturnTypeRef_5=ruleColonSepReturnTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_ColonSepReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_47);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_7=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_7, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              				
            }

            }


            }
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", true, "{");
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_23);
                    lv_body_9_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;

        EObject lv_fpars_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
              		
            }
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( ((LA96_0>=Intersection && LA96_0<=Implements)||(LA96_0>=Promisify && LA96_0<=Abstract)||LA96_0==External||LA96_0==Default||(LA96_0>=Private && LA96_0<=Project)||LA96_0==Public||LA96_0==Static||LA96_0==Target||(LA96_0>=Async && LA96_0<=Await)||LA96_0==Union||(LA96_0>=Yield && LA96_0<=This)||LA96_0==From||LA96_0==This_1||(LA96_0>=Type && LA96_0<=Void)||LA96_0==FullStopFullStopFullStop||(LA96_0>=Get && LA96_0<=Let)||(LA96_0>=Out && LA96_0<=Set)||LA96_0==As||LA96_0==Of||(LA96_0>=CommercialAt && LA96_0<=LeftSquareBracket)||LA96_0==LeftCurlyBracket||LA96_0==Tilde||LA96_0==RULE_IDENTIFIER) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_fpars_1_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);

                        if ( (LA95_0==Comma) ) {
                            alt95=1;
                        }


                        switch (alt95) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_54);
                    	    lv_fpars_3_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop95;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_StrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;

        EObject lv_fpars_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
              		
            }
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( ((LA98_0>=Intersection && LA98_0<=Implements)||(LA98_0>=Promisify && LA98_0<=Abstract)||LA98_0==External||LA98_0==Default||(LA98_0>=Private && LA98_0<=Project)||LA98_0==Public||LA98_0==Static||LA98_0==Target||(LA98_0>=Async && LA98_0<=Await)||LA98_0==Union||LA98_0==This||LA98_0==From||LA98_0==This_1||(LA98_0>=Type && LA98_0<=Void)||LA98_0==FullStopFullStopFullStop||(LA98_0>=Get && LA98_0<=Let)||(LA98_0>=Out && LA98_0<=Set)||LA98_0==As||LA98_0==Of||(LA98_0>=CommercialAt && LA98_0<=LeftSquareBracket)||LA98_0==LeftCurlyBracket||LA98_0==Tilde||LA98_0==RULE_IDENTIFIER) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_54);
                    lv_fpars_1_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);

                        if ( (LA97_0==Comma) ) {
                            alt97=1;
                        }


                        switch (alt97) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_54);
                    	    lv_fpars_3_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop97;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingIdentifierAsFormalParameter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsFormalParameter=ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlockMinusBraces() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBlockMinusBraces = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockMinusBracesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlockMinusBraces=ruleBlockMinusBraces();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlockMinusBraces; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlockMinusBraces() throws RecognitionException {
        EObject current = null;

        EObject lv_statements_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
              			
            }

            }
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( ((LA99_0>=Intersection && LA99_0<=Implements)||(LA99_0>=Promisify && LA99_0<=Function)||(LA99_0>=Private && LA99_0<=Delete)||(LA99_0>=Import && LA99_0<=Break)||(LA99_0>=Class && LA99_0<=This)||(LA99_0>=From && LA99_0<=With)||(LA99_0>=For && LA99_0<=Var)||LA99_0==PlusSignPlusSign||(LA99_0>=HyphenMinusHyphenMinus && LA99_0<=SolidusEqualsSign)||(LA99_0>=As && LA99_0<=If)||LA99_0==Of||LA99_0==ExclamationMark||LA99_0==LeftParenthesis||LA99_0==PlusSign||LA99_0==HyphenMinus||LA99_0==Solidus||(LA99_0>=Semicolon && LA99_0<=LessThanSign)||(LA99_0>=CommercialAt && LA99_0<=LeftSquareBracket)||LA99_0==LeftCurlyBracket||LA99_0==Tilde||LA99_0==RULE_DOUBLE||(LA99_0>=RULE_HEX_INT && LA99_0<=RULE_LEGACY_OCTAL_INT)||LA99_0==RULE_SCIENTIFIC_INT||LA99_0==RULE_IDENTIFIER||LA99_0==RULE_STRING||(LA99_0>=RULE_TEMPLATE_HEAD && LA99_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA99_0==RULE_INT) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BlockMinusBraces() throws RecognitionException {
        EObject current = null;

        EObject lv_statements_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
              			
            }

            }
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( ((LA100_0>=Intersection && LA100_0<=Implements)||(LA100_0>=Promisify && LA100_0<=Function)||(LA100_0>=Private && LA100_0<=Delete)||(LA100_0>=Import && LA100_0<=Break)||(LA100_0>=Class && LA100_0<=This)||(LA100_0>=From && LA100_0<=With)||(LA100_0>=For && LA100_0<=Var)||LA100_0==PlusSignPlusSign||(LA100_0>=HyphenMinusHyphenMinus && LA100_0<=SolidusEqualsSign)||(LA100_0>=As && LA100_0<=If)||LA100_0==Of||LA100_0==ExclamationMark||LA100_0==LeftParenthesis||LA100_0==PlusSign||LA100_0==HyphenMinus||LA100_0==Solidus||(LA100_0>=Semicolon && LA100_0<=LessThanSign)||(LA100_0>=CommercialAt && LA100_0<=LeftSquareBracket)||LA100_0==LeftCurlyBracket||LA100_0==Tilde||LA100_0==RULE_DOUBLE||(LA100_0>=RULE_HEX_INT && LA100_0<=RULE_LEGACY_OCTAL_INT)||LA100_0==RULE_SCIENTIFIC_INT||LA100_0==RULE_IDENTIFIER||LA100_0==RULE_STRING||(LA100_0>=RULE_TEMPLATE_HEAD && LA100_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA100_0==RULE_INT) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_56);
            	    lv_statements_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionDisguisedAsBlock = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionDisguisedAsBlock=ruleExpressionDisguisedAsBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionDisguisedAsBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;

        EObject lv_statements_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
              			
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;

        EObject lv_statements_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
              			
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=norm1_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAssignmentExpressionStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpressionStatement=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExpression=ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject this_ClassExtendsImplements_4 = null;

        EObject this_Members_5 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject this_FunctionImpl_8 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_57);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==Class) ) {
                alt103=1;
            }
            else if ( (LA103_0==Function||LA103_0==Async) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_2=(Token)match(input,Class,FOLLOW_58); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                      				
                    }
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( ((LA101_0>=Intersection && LA101_0<=Constructor)||(LA101_0>=Promisify && LA101_0<=Abstract)||LA101_0==External||(LA101_0>=Private && LA101_0<=Project)||LA101_0==Public||LA101_0==Static||LA101_0==Target||(LA101_0>=Async && LA101_0<=Await)||LA101_0==Union||(LA101_0>=Yield && LA101_0<=This)||LA101_0==From||LA101_0==Type||(LA101_0>=Get && LA101_0<=Let)||(LA101_0>=Out && LA101_0<=Set)||LA101_0==As||LA101_0==Of||LA101_0==RULE_IDENTIFIER) ) {
                        alt101=1;
                    }
                    else if ( (LA101_0==Implements) ) {
                        int LA101_2 = input.LA(2);

                        if ( (LA101_2==Implements||LA101_2==Extends||LA101_2==LeftCurlyBracket) ) {
                            alt101=1;
                        }
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                              						
                            }
                            pushFollow(FOLLOW_9);
                            lv_name_3_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==Implements||LA102_0==Extends) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3());
                              					
                            }
                            pushFollow(FOLLOW_9);
                            this_ClassExtendsImplements_4=ruleClassExtendsImplements(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ClassExtendsImplements_4;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=ruleMembers(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_45);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject this_ClassExtendsImplements_4 = null;

        EObject this_Members_5 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject this_FunctionImpl_8 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_57);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==Class) ) {
                alt106=1;
            }
            else if ( (LA106_0==Function||LA106_0==Async) ) {
                alt106=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_2=(Token)match(input,Class,FOLLOW_59); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                      				
                    }
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( ((LA104_0>=Intersection && LA104_0<=Constructor)||(LA104_0>=Promisify && LA104_0<=Abstract)||LA104_0==External||(LA104_0>=Private && LA104_0<=Project)||LA104_0==Public||LA104_0==Static||LA104_0==Target||(LA104_0>=Async && LA104_0<=Await)||LA104_0==Union||LA104_0==This||LA104_0==From||LA104_0==Type||(LA104_0>=Get && LA104_0<=Let)||(LA104_0>=Out && LA104_0<=Set)||LA104_0==As||LA104_0==Of||LA104_0==RULE_IDENTIFIER) ) {
                        alt104=1;
                    }
                    else if ( (LA104_0==Implements) ) {
                        int LA104_2 = input.LA(2);

                        if ( (LA104_2==Implements||LA104_2==Extends||LA104_2==LeftCurlyBracket) ) {
                            alt104=1;
                        }
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                              						
                            }
                            pushFollow(FOLLOW_59);
                            lv_name_3_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==Implements||LA105_0==Extends) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3());
                              					
                            }
                            pushFollow(FOLLOW_59);
                            this_ClassExtendsImplements_4=norm1_ClassExtendsImplements(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ClassExtendsImplements_4;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=norm1_Members(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                      				
                    }
                    pushFollow(FOLLOW_45);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeVariable = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeVariable=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeVariable() throws RecognitionException {
        EObject current = null;

        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject lv_declaredUpperBound_4_0 = null;



        	enterRule();

        try {
            {
            {
            int alt107=3;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==Out) ) {
                alt107=1;
            }
            else if ( (LA107_0==In) ) {
                alt107=2;
            }
            switch (alt107) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_60); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", true, "out");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_60); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", true, "in");
                      					
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeVariableAccess().getNameIdentifierOrThisParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_61);
            lv_name_2_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeVariableRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.N4JS.IdentifierOrThis");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==Extends) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundTypeRefParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_4_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFormalParameter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFormalParameter=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject this_BindingElementFragment_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=ruleBindingElementFragment(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FormalParameter() throws RecognitionException {
        EObject current = null;

        EObject this_BindingElementFragment_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=norm1_BindingElementFragment(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_variadic_3_0=null;
        Token lv_hasInitializerAssignment_6_0=null;
        EObject lv_bindingPattern_0_0 = null;

        EObject lv_annotations_1_0 = null;

        EObject this_BogusTypeRefFragment_2 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject this_ColonSepDeclaredTypeRef_5 = null;

        EObject lv_initializer_7_0 = null;



        	enterRule();

        try {
            {
            {
            int alt113=2;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_63);
                    lv_bindingPattern_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==CommercialAt) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_64);
                    	    lv_annotations_1_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);
                    int alt110=2;
                    alt110 = dfa110.predict(input);
                    switch (alt110) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1());
                              					
                            }
                            pushFollow(FOLLOW_65);
                            this_BogusTypeRefFragment_2=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_BogusTypeRefFragment_2;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==FullStopFullStopFullStop) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            {
                            lv_variadic_3_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_variadic_3_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", true, "...");
                              						
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_66);
                    lv_name_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==Colon) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_4());
                              					
                            }
                            pushFollow(FOLLOW_63);
                            this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ColonSepDeclaredTypeRef_5;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==EqualsSign) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_6_0=(Token)match(input,EqualsSign,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_hasInitializerAssignment_6_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                      					
                    }

                    }


                    }
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( ((LA114_0>=Intersection && LA114_0<=Implements)||(LA114_0>=Promisify && LA114_0<=Abstract)||(LA114_0>=External && LA114_0<=Function)||(LA114_0>=Private && LA114_0<=Delete)||(LA114_0>=Import && LA114_0<=Public)||LA114_0==Static||(LA114_0>=Target && LA114_0<=Await)||LA114_0==Class||(LA114_0>=False && LA114_0<=Super)||LA114_0==Union||(LA114_0>=Yield && LA114_0<=This)||(LA114_0>=From && LA114_0<=Void)||(LA114_0>=Get && LA114_0<=Set)||LA114_0==PlusSignPlusSign||(LA114_0>=HyphenMinusHyphenMinus && LA114_0<=SolidusEqualsSign)||LA114_0==As||LA114_0==Of||LA114_0==ExclamationMark||LA114_0==LeftParenthesis||LA114_0==PlusSign||LA114_0==HyphenMinus||LA114_0==Solidus||LA114_0==LessThanSign||(LA114_0>=CommercialAt && LA114_0<=LeftSquareBracket)||LA114_0==LeftCurlyBracket||LA114_0==Tilde||LA114_0==RULE_DOUBLE||(LA114_0>=RULE_HEX_INT && LA114_0<=RULE_LEGACY_OCTAL_INT)||LA114_0==RULE_SCIENTIFIC_INT||LA114_0==RULE_IDENTIFIER||LA114_0==RULE_STRING||(LA114_0>=RULE_TEMPLATE_HEAD && LA114_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA114_0==RULE_INT) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_7_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_7_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_variadic_3_0=null;
        Token lv_hasInitializerAssignment_6_0=null;
        EObject lv_bindingPattern_0_0 = null;

        EObject lv_annotations_1_0 = null;

        EObject this_BogusTypeRefFragment_2 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;

        EObject this_ColonSepDeclaredTypeRef_5 = null;

        EObject lv_initializer_7_0 = null;



        	enterRule();

        try {
            {
            {
            int alt120=2;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_63);
                    lv_bindingPattern_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==CommercialAt) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_64);
                    	    lv_annotations_1_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);
                    int alt117=2;
                    alt117 = dfa117.predict(input);
                    switch (alt117) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1());
                              					
                            }
                            pushFollow(FOLLOW_65);
                            this_BogusTypeRefFragment_2=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_BogusTypeRefFragment_2;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==FullStopFullStopFullStop) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            {
                            lv_variadic_3_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_8); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_variadic_3_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", true, "...");
                              						
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_66);
                    lv_name_4_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==Colon) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_4());
                              					
                            }
                            pushFollow(FOLLOW_63);
                            this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						current = this_ColonSepDeclaredTypeRef_5;
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==EqualsSign) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_6_0=(Token)match(input,EqualsSign,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_hasInitializerAssignment_6_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                      					
                    }

                    }


                    }
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( ((LA121_0>=Intersection && LA121_0<=Implements)||(LA121_0>=Promisify && LA121_0<=Abstract)||(LA121_0>=External && LA121_0<=Function)||(LA121_0>=Private && LA121_0<=Delete)||(LA121_0>=Import && LA121_0<=Public)||LA121_0==Static||(LA121_0>=Target && LA121_0<=Await)||LA121_0==Class||(LA121_0>=False && LA121_0<=Super)||LA121_0==Union||(LA121_0>=Yield && LA121_0<=This)||(LA121_0>=From && LA121_0<=Void)||(LA121_0>=Get && LA121_0<=Set)||LA121_0==PlusSignPlusSign||(LA121_0>=HyphenMinusHyphenMinus && LA121_0<=SolidusEqualsSign)||LA121_0==As||LA121_0==Of||LA121_0==ExclamationMark||LA121_0==LeftParenthesis||LA121_0==PlusSign||LA121_0==HyphenMinus||LA121_0==Solidus||LA121_0==LessThanSign||(LA121_0>=CommercialAt && LA121_0<=LeftSquareBracket)||LA121_0==LeftCurlyBracket||LA121_0==Tilde||LA121_0==RULE_DOUBLE||(LA121_0>=RULE_HEX_INT && LA121_0<=RULE_LEGACY_OCTAL_INT)||LA121_0==RULE_SCIENTIFIC_INT||LA121_0==RULE_IDENTIFIER||LA121_0==RULE_STRING||(LA121_0>=RULE_TEMPLATE_HEAD && LA121_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA121_0==RULE_INT) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_7_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_7_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBogusTypeRefFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject lv_bogusTypeRef_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefTypeRefWithModifiersParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_bogusTypeRef_0_0=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBogusTypeRefFragmentRule());
              				}
              				set(
              					current,
              					"bogusTypeRef",
              					lv_bogusTypeRef_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBlock = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlock=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_50); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
              				
            }

            }


            }
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( ((LA123_0>=Intersection && LA123_0<=Implements)||(LA123_0>=Promisify && LA123_0<=Function)||(LA123_0>=Private && LA123_0<=Delete)||(LA123_0>=Import && LA123_0<=Break)||(LA123_0>=Class && LA123_0<=This)||(LA123_0>=From && LA123_0<=With)||(LA123_0>=For && LA123_0<=Var)||LA123_0==PlusSignPlusSign||(LA123_0>=HyphenMinusHyphenMinus && LA123_0<=SolidusEqualsSign)||(LA123_0>=As && LA123_0<=If)||LA123_0==Of||LA123_0==ExclamationMark||LA123_0==LeftParenthesis||LA123_0==PlusSign||LA123_0==HyphenMinus||LA123_0==Solidus||(LA123_0>=Semicolon && LA123_0<=LessThanSign)||(LA123_0>=CommercialAt && LA123_0<=LeftSquareBracket)||LA123_0==LeftCurlyBracket||LA123_0==Tilde||LA123_0==RULE_DOUBLE||(LA123_0>=RULE_HEX_INT && LA123_0<=RULE_LEGACY_OCTAL_INT)||LA123_0==RULE_SCIENTIFIC_INT||LA123_0==RULE_IDENTIFIER||LA123_0==RULE_STRING||(LA123_0>=RULE_TEMPLATE_HEAD && LA123_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA123_0==RULE_INT) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_50);
            	    lv_statements_2_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Block() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
              				
            }

            }


            }
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( ((LA124_0>=Intersection && LA124_0<=Implements)||(LA124_0>=Promisify && LA124_0<=Function)||(LA124_0>=Private && LA124_0<=Delete)||(LA124_0>=Import && LA124_0<=Break)||(LA124_0>=Class && LA124_0<=This)||(LA124_0>=From && LA124_0<=With)||(LA124_0>=For && LA124_0<=Var)||LA124_0==PlusSignPlusSign||(LA124_0>=HyphenMinusHyphenMinus && LA124_0<=SolidusEqualsSign)||(LA124_0>=As && LA124_0<=If)||LA124_0==Of||LA124_0==ExclamationMark||LA124_0==LeftParenthesis||LA124_0==PlusSign||LA124_0==HyphenMinus||LA124_0==Solidus||(LA124_0>=Semicolon && LA124_0<=LessThanSign)||(LA124_0>=CommercialAt && LA124_0<=LeftSquareBracket)||LA124_0==LeftCurlyBracket||LA124_0==Tilde||LA124_0==RULE_DOUBLE||(LA124_0>=RULE_HEX_INT && LA124_0<=RULE_LEGACY_OCTAL_INT)||LA124_0==RULE_SCIENTIFIC_INT||LA124_0==RULE_IDENTIFIER||LA124_0==RULE_STRING||(LA124_0>=RULE_TEMPLATE_HEAD && LA124_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA124_0==RULE_INT) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_statements_2_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRootStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRootStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRootStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRootStatement=ruleRootStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRootStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRootStatement() throws RecognitionException {
        EObject current = null;

        EObject this_Block_0 = null;

        EObject this_FunctionDeclaration_1 = null;

        EObject this_VariableStatement_2 = null;

        EObject this_EmptyStatement_3 = null;

        EObject this_LabelledStatement_4 = null;

        EObject this_ExpressionStatement_5 = null;

        EObject this_IfStatement_6 = null;

        EObject this_IterationStatement_7 = null;

        EObject this_ContinueStatement_8 = null;

        EObject this_BreakStatement_9 = null;

        EObject this_ReturnStatement_10 = null;

        EObject this_WithStatement_11 = null;

        EObject this_SwitchStatement_12 = null;

        EObject this_ThrowStatement_13 = null;

        EObject this_TryStatement_14 = null;

        EObject this_DebuggerStatement_15 = null;



        	enterRule();

        try {
            {
            int alt125=16;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RootStatement() throws RecognitionException {
        EObject current = null;

        EObject this_Block_0 = null;

        EObject this_FunctionDeclaration_1 = null;

        EObject this_VariableStatement_2 = null;

        EObject this_EmptyStatement_3 = null;

        EObject this_LabelledStatement_4 = null;

        EObject this_ExpressionStatement_5 = null;

        EObject this_IfStatement_6 = null;

        EObject this_IterationStatement_7 = null;

        EObject this_ContinueStatement_8 = null;

        EObject this_BreakStatement_9 = null;

        EObject this_ReturnStatement_10 = null;

        EObject this_WithStatement_11 = null;

        EObject this_SwitchStatement_12 = null;

        EObject this_ThrowStatement_13 = null;

        EObject this_TryStatement_14 = null;

        EObject this_DebuggerStatement_15 = null;



        	enterRule();

        try {
            {
            int alt126=16;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStatement=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedFunctionDeclaration_0 = null;

        EObject this_RootStatement_1 = null;



        	enterRule();

        try {
            {
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Statement() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedFunctionDeclaration_0 = null;

        EObject this_RootStatement_1 = null;



        	enterRule();

        try {
            {
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;

        EObject lv_varDeclsOrBindings_2_0 = null;

        EObject lv_varDeclsOrBindings_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
              					
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
              						
            }
            pushFollow(FOLLOW_27);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_28);
            lv_varDeclsOrBindings_2_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==Comma) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_28);
            	    lv_varDeclsOrBindings_4_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;

        EObject lv_varDeclsOrBindings_2_0 = null;

        EObject lv_varDeclsOrBindings_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
              					
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
              						
            }
            pushFollow(FOLLOW_27);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_28);
            lv_varDeclsOrBindings_2_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==Comma) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_28);
            	    lv_varDeclsOrBindings_4_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportedVariableStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableStatement=ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        Enumerator lv_varStmtKeyword_2_0 = null;

        EObject lv_varDeclsOrBindings_3_0 = null;

        EObject lv_varDeclsOrBindings_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableStatementAccess().getExportedVariableStatementAction_0(),
              					current);
              			
            }

            }
            loop131:
            do {
                int alt131=2;
                alt131 = dfa131.predict(input);
                switch (alt131) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_27);
            lv_varStmtKeyword_2_0=ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
              					}
              					set(
              						current,
              						"varStmtKeyword",
              						lv_varStmtKeyword_2_0,
              						"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_28);
            lv_varDeclsOrBindings_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_3_0,
              						"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==Comma) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_28);
            	    lv_varDeclsOrBindings_5_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getExportedVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_5_0,
            	      							"org.eclipse.n4js.N4JS.ExportedVariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableDeclarationOrBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDeclarationOrBinding=ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==LeftCurlyBracket) && (synpred74_InternalN4JSParser())) {
                alt133=1;
            }
            else if ( (LA133_0==LeftSquareBracket) && (synpred74_InternalN4JSParser())) {
                alt133=1;
            }
            else if ( ((LA133_0>=Intersection && LA133_0<=Implements)||(LA133_0>=Promisify && LA133_0<=Abstract)||LA133_0==External||(LA133_0>=Private && LA133_0<=Project)||LA133_0==Public||LA133_0==Static||LA133_0==Target||(LA133_0>=Async && LA133_0<=Await)||LA133_0==Union||(LA133_0>=Yield && LA133_0<=This)||LA133_0==From||LA133_0==Type||(LA133_0>=Get && LA133_0<=Let)||(LA133_0>=Out && LA133_0<=Set)||LA133_0==As||LA133_0==Of||LA133_0==CommercialAt||LA133_0==RULE_IDENTIFIER) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==LeftCurlyBracket) && (synpred75_InternalN4JSParser())) {
                alt134=1;
            }
            else if ( (LA134_0==LeftSquareBracket) && (synpred75_InternalN4JSParser())) {
                alt134=1;
            }
            else if ( ((LA134_0>=Intersection && LA134_0<=Implements)||(LA134_0>=Promisify && LA134_0<=Abstract)||LA134_0==External||(LA134_0>=Private && LA134_0<=Project)||LA134_0==Public||LA134_0==Static||LA134_0==Target||(LA134_0>=Async && LA134_0<=Await)||LA134_0==Union||(LA134_0>=Yield && LA134_0<=This)||LA134_0==From||LA134_0==Type||(LA134_0>=Get && LA134_0<=Let)||(LA134_0>=Out && LA134_0<=Set)||LA134_0==As||LA134_0==Of||LA134_0==CommercialAt||LA134_0==RULE_IDENTIFIER) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==LeftCurlyBracket) && (synpred76_InternalN4JSParser())) {
                alt135=1;
            }
            else if ( (LA135_0==LeftSquareBracket) && (synpred76_InternalN4JSParser())) {
                alt135=1;
            }
            else if ( ((LA135_0>=Intersection && LA135_0<=Implements)||(LA135_0>=Promisify && LA135_0<=Abstract)||LA135_0==External||(LA135_0>=Private && LA135_0<=Project)||LA135_0==Public||LA135_0==Static||LA135_0==Target||(LA135_0>=Async && LA135_0<=Await)||LA135_0==Union||LA135_0==This||LA135_0==From||LA135_0==Type||(LA135_0>=Get && LA135_0<=Let)||(LA135_0>=Out && LA135_0<=Set)||LA135_0==As||LA135_0==Of||LA135_0==CommercialAt||LA135_0==RULE_IDENTIFIER) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==LeftCurlyBracket) && (synpred77_InternalN4JSParser())) {
                alt136=1;
            }
            else if ( (LA136_0==LeftSquareBracket) && (synpred77_InternalN4JSParser())) {
                alt136=1;
            }
            else if ( ((LA136_0>=Intersection && LA136_0<=Implements)||(LA136_0>=Promisify && LA136_0<=Abstract)||LA136_0==External||(LA136_0>=Private && LA136_0<=Project)||LA136_0==Public||LA136_0==Static||LA136_0==Target||(LA136_0>=Async && LA136_0<=Await)||LA136_0==Union||LA136_0==This||LA136_0==From||LA136_0==Type||(LA136_0>=Get && LA136_0<=Let)||(LA136_0>=Out && LA136_0<=Set)||LA136_0==As||LA136_0==Of||LA136_0==CommercialAt||LA136_0==RULE_IDENTIFIER) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==LeftCurlyBracket) && (synpred78_InternalN4JSParser())) {
                alt137=1;
            }
            else if ( (LA137_0==LeftSquareBracket) && (synpred78_InternalN4JSParser())) {
                alt137=1;
            }
            else if ( ((LA137_0>=Intersection && LA137_0<=Implements)||(LA137_0>=Promisify && LA137_0<=Abstract)||LA137_0==External||(LA137_0>=Private && LA137_0<=Project)||LA137_0==Public||LA137_0==Static||LA137_0==Target||(LA137_0>=Async && LA137_0<=Await)||LA137_0==Union||(LA137_0>=Yield && LA137_0<=This)||LA137_0==From||LA137_0==Type||(LA137_0>=Get && LA137_0<=Let)||(LA137_0>=Out && LA137_0<=Set)||LA137_0==As||LA137_0==Of||LA137_0==CommercialAt||LA137_0==RULE_IDENTIFIER) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_VariableBinding_0 = null;

        EObject this_VariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==LeftCurlyBracket) && (synpred79_InternalN4JSParser())) {
                alt138=1;
            }
            else if ( (LA138_0==LeftSquareBracket) && (synpred79_InternalN4JSParser())) {
                alt138=1;
            }
            else if ( ((LA138_0>=Intersection && LA138_0<=Implements)||(LA138_0>=Promisify && LA138_0<=Abstract)||LA138_0==External||(LA138_0>=Private && LA138_0<=Project)||LA138_0==Public||LA138_0==Static||LA138_0==Target||(LA138_0>=Async && LA138_0<=Await)||LA138_0==Union||LA138_0==This||LA138_0==From||LA138_0==Type||(LA138_0>=Get && LA138_0<=Let)||(LA138_0>=Out && LA138_0<=Set)||LA138_0==As||LA138_0==Of||LA138_0==CommercialAt||LA138_0==RULE_IDENTIFIER) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableBinding=ruleVariableBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              			
            }
            {
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
              					
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              			
            }
            {
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
              					
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              			
            }
            {
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
              					
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              			
            }
            {
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
              					
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==EqualsSign) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==EqualsSign) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==EqualsSign) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==EqualsSign) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm1_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm3_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm4_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm6_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            loop143:
            do {
                int alt143=2;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
              						
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==EqualsSign) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
              						
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==EqualsSign) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            loop147:
            do {
                int alt147=2;
                alt147 = dfa147.predict(input);
                switch (alt147) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
              						
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==EqualsSign) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            loop149:
            do {
                int alt149=2;
                alt149 = dfa149.predict(input);
                switch (alt149) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
              						
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==EqualsSign) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            loop151:
            do {
                int alt151=2;
                alt151 = dfa151.predict(input);
                switch (alt151) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
              							
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
              							
            }

            }


            }
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==Colon) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }
                    break;

            }


            }


            }
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==EqualsSign) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            loop154:
            do {
                int alt154=2;
                alt154 = dfa154.predict(input);
                switch (alt154) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
              							
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
              							
            }

            }


            }
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==Colon) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }
                    break;

            }


            }


            }
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==EqualsSign) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            loop157:
            do {
                int alt157=2;
                alt157 = dfa157.predict(input);
                switch (alt157) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
              							
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
              							
            }

            }


            }
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==Colon) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }
                    break;

            }


            }


            }
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==EqualsSign) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            loop160:
            do {
                int alt160=2;
                alt160 = dfa160.predict(input);
                switch (alt160) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_71);
            	    lv_annotations_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
              							
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
              							
            }

            }


            }
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==Colon) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }
                    break;

            }


            }


            }
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==EqualsSign) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportedVariableDeclarationOrBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableDeclarationOrBinding=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_ExportedVariableBinding_0 = null;

        EObject this_ExportedVariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==LeftCurlyBracket) && (synpred96_InternalN4JSParser())) {
                alt163=1;
            }
            else if ( (LA163_0==LeftSquareBracket) && (synpred96_InternalN4JSParser())) {
                alt163=1;
            }
            else if ( ((LA163_0>=Intersection && LA163_0<=Implements)||(LA163_0>=Promisify && LA163_0<=Abstract)||LA163_0==External||(LA163_0>=Private && LA163_0<=Project)||LA163_0==Public||LA163_0==Static||LA163_0==Target||(LA163_0>=Async && LA163_0<=Await)||LA163_0==Union||(LA163_0>=Yield && LA163_0<=This)||LA163_0==From||LA163_0==Type||(LA163_0>=Get && LA163_0<=Let)||(LA163_0>=Out && LA163_0<=Set)||LA163_0==As||LA163_0==Of||LA163_0==CommercialAt||LA163_0==RULE_IDENTIFIER) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableBinding_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ExportedVariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableDeclaration_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExportedVariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;

        EObject this_ExportedVariableBinding_0 = null;

        EObject this_ExportedVariableDeclaration_1 = null;



        	enterRule();

        try {
            {
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==LeftCurlyBracket) && (synpred97_InternalN4JSParser())) {
                alt164=1;
            }
            else if ( (LA164_0==LeftSquareBracket) && (synpred97_InternalN4JSParser())) {
                alt164=1;
            }
            else if ( ((LA164_0>=Intersection && LA164_0<=Implements)||(LA164_0>=Promisify && LA164_0<=Abstract)||LA164_0==External||(LA164_0>=Private && LA164_0<=Project)||LA164_0==Public||LA164_0==Static||LA164_0==Target||(LA164_0>=Async && LA164_0<=Await)||LA164_0==Union||LA164_0==This||LA164_0==From||LA164_0==Type||(LA164_0>=Get && LA164_0<=Let)||(LA164_0>=Out && LA164_0<=Set)||LA164_0==As||LA164_0==Of||LA164_0==CommercialAt||LA164_0==RULE_IDENTIFIER) ) {
                alt164=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }
            switch (alt164) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableBinding_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ExportedVariableBinding_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportedVariableDeclaration_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ExportedVariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportedVariableBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableBinding=ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableBinding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;

        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_69);
            lv_pattern_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExportedVariableBindingRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExportedVariableDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportedVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportedVariableDeclaration=ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportedVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableDeclarationAccess().getExportedVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportedVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExportedVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExportedVariableDeclarationAccess().getExportedVariableDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportedVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEmptyStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyStatement=ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionStatement=ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_expression_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionStatement() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_expression_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIfStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIfStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIfStatement=ruleIfStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIfStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIfStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;

        EObject lv_ifStmt_4_0 = null;

        EObject lv_elseStmt_6_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_74);
            lv_ifStmt_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==Else) ) {
                int LA165_1 = input.LA(2);

                if ( (synpred100_InternalN4JSParser()) ) {
                    alt165=1;
                }
            }
            switch (alt165) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IfStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;

        EObject lv_ifStmt_4_0 = null;

        EObject lv_elseStmt_6_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_74);
            lv_ifStmt_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==Else) ) {
                int LA166_1 = input.LA(2);

                if ( (synpred101_InternalN4JSParser()) ) {
                    alt166=1;
                }
            }
            switch (alt166) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_75); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIterationStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIterationStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIterationStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIterationStatement=ruleIterationStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIterationStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIterationStatement() throws RecognitionException {
        EObject current = null;

        EObject this_DoStatement_0 = null;

        EObject this_WhileStatement_1 = null;

        EObject this_ForStatement_2 = null;



        	enterRule();

        try {
            {
            int alt167=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt167=1;
                }
                break;
            case While:
                {
                alt167=2;
                }
                break;
            case For:
                {
                alt167=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IterationStatement() throws RecognitionException {
        EObject current = null;

        EObject this_DoStatement_0 = null;

        EObject this_WhileStatement_1 = null;

        EObject this_ForStatement_2 = null;



        	enterRule();

        try {
            {
            int alt168=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt168=1;
                }
                break;
            case While:
                {
                alt168=2;
                }
                break;
            case For:
                {
                alt168=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }

            switch (alt168) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDoStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoStatement=ruleDoStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_76);
            lv_statement_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
              		
            }
            int alt169=2;
            alt169 = dfa169.predict(input);
            switch (alt169) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DoStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_76);
            lv_statement_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
              		
            }
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==Semicolon) ) {
                int LA170_1 = input.LA(2);

                if ( (synpred103_InternalN4JSParser()) ) {
                    alt170=1;
                }
            }
            else if ( (LA170_0==EOF||LA170_0==RULE_ML_COMMENT||LA170_0==RULE_EOL) && (synpred103_InternalN4JSParser())) {
                alt170=1;
            }
            else if ( (LA170_0==RightCurlyBracket) ) {
                int LA170_3 = input.LA(2);

                if ( (synpred103_InternalN4JSParser()) ) {
                    alt170=1;
                }
            }
            switch (alt170) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWhileStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWhileStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhileStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhileStatement=ruleWhileStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhileStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWhileStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;

        EObject lv_statement_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WhileStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;

        EObject lv_statement_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleForStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleForStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForStatement=ruleForStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleForStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_forIn_4_0=null;
        Token otherlv_6=null;
        Token lv_forIn_9_0=null;
        Token lv_forOf_10_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token lv_forIn_19_0=null;
        Token lv_forOf_21_0=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token lv_forIn_28_0=null;
        Token lv_forOf_30_0=null;
        Token otherlv_32=null;
        Token otherlv_34=null;
        Token otherlv_36=null;
        EObject lv_initExpr_3_0 = null;

        EObject lv_expression_5_0 = null;

        Enumerator lv_varStmtKeyword_7_0 = null;

        EObject lv_varDeclsOrBindings_8_0 = null;

        EObject lv_expression_11_0 = null;

        EObject lv_varDeclsOrBindings_12_0 = null;

        EObject lv_varDeclsOrBindings_14_0 = null;

        EObject lv_expression_16_0 = null;

        EObject lv_updateExpr_18_0 = null;

        EObject lv_expression_20_0 = null;

        EObject lv_expression_22_0 = null;

        EObject lv_initExpr_23_0 = null;

        EObject lv_expression_25_0 = null;

        EObject lv_updateExpr_27_0 = null;

        EObject lv_expression_29_0 = null;

        EObject lv_expression_31_0 = null;

        EObject lv_expression_33_0 = null;

        EObject lv_updateExpr_35_0 = null;

        EObject lv_statement_37_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,For,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_77); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
              		
            }
            int alt188=2;
            alt188 = dfa188.predict(input);
            switch (alt188) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_3_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_78);
                    lv_initExpr_3_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_3_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }
                    {
                    {
                    lv_forIn_4_0=(Token)match(input,In,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_forIn_4_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", true, "in");
                      							
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_72);
                    lv_expression_5_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_5_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt187=3;
                    alt187 = dfa187.predict(input);
                    switch (alt187) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_3_1_0_0_0_0());
                              								
                            }
                            pushFollow(FOLLOW_27);
                            lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_7_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt179=2;
                            alt179 = dfa179.predict(input);
                            switch (alt179) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0());
                                      											
                                    }
                                    pushFollow(FOLLOW_79);
                                    lv_varDeclsOrBindings_8_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_8_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                      											
                                    }

                                    }


                                    }
                                    int alt171=2;
                                    int LA171_0 = input.LA(1);

                                    if ( (LA171_0==In) ) {
                                        alt171=1;
                                    }
                                    else if ( (LA171_0==Of) ) {
                                        alt171=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 171, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt171) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_9_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forIn_9_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                              												
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_10_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forOf_10_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                              												
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt172=2;
                                    alt172 = dfa172.predict(input);
                                    switch (alt172) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0());
                                              											
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_11_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_11_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                              											
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0());
                                      										
                                    }
                                    pushFollow(FOLLOW_81);
                                    lv_varDeclsOrBindings_12_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_12_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                      										
                                    }

                                    }


                                    }
                                    int alt178=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt178=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt178=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt178=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 178, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt178) {
                                        case 1 :
                                            {
                                            {
                                            loop173:
                                            do {
                                                int alt173=2;
                                                int LA173_0 = input.LA(1);

                                                if ( (LA173_0==Comma) ) {
                                                    alt173=1;
                                                }


                                                switch (alt173) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_13=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {

                                            	      												newLeafNode(otherlv_13, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	      											
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {

                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0());
                                            	      													
                                            	    }
                                            	    pushFollow(FOLLOW_82);
                                            	    lv_varDeclsOrBindings_14_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {

                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_14_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	      													
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop173;
                                                }
                                            } while (true);

                                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											newLeafNode(otherlv_15, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                              										
                                            }
                                            int alt174=2;
                                            int LA174_0 = input.LA(1);

                                            if ( ((LA174_0>=Intersection && LA174_0<=Implements)||(LA174_0>=Promisify && LA174_0<=Abstract)||(LA174_0>=External && LA174_0<=Function)||(LA174_0>=Private && LA174_0<=Delete)||(LA174_0>=Import && LA174_0<=Public)||LA174_0==Static||(LA174_0>=Target && LA174_0<=Await)||LA174_0==Class||(LA174_0>=False && LA174_0<=Super)||LA174_0==Union||(LA174_0>=Yield && LA174_0<=This)||(LA174_0>=From && LA174_0<=Void)||(LA174_0>=Get && LA174_0<=Set)||LA174_0==PlusSignPlusSign||(LA174_0>=HyphenMinusHyphenMinus && LA174_0<=SolidusEqualsSign)||LA174_0==As||LA174_0==Of||LA174_0==ExclamationMark||LA174_0==LeftParenthesis||LA174_0==PlusSign||LA174_0==HyphenMinus||LA174_0==Solidus||LA174_0==LessThanSign||(LA174_0>=CommercialAt && LA174_0<=LeftSquareBracket)||LA174_0==LeftCurlyBracket||LA174_0==Tilde||LA174_0==RULE_DOUBLE||(LA174_0>=RULE_HEX_INT && LA174_0<=RULE_LEGACY_OCTAL_INT)||LA174_0==RULE_SCIENTIFIC_INT||LA174_0==RULE_IDENTIFIER||LA174_0==RULE_STRING||(LA174_0>=RULE_TEMPLATE_HEAD && LA174_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA174_0==RULE_INT) ) {
                                                alt174=1;
                                            }
                                            switch (alt174) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_84);
                                                    lv_expression_16_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_16_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            otherlv_17=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											newLeafNode(otherlv_17, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                              										
                                            }
                                            int alt175=2;
                                            int LA175_0 = input.LA(1);

                                            if ( ((LA175_0>=Intersection && LA175_0<=Implements)||(LA175_0>=Promisify && LA175_0<=Abstract)||(LA175_0>=External && LA175_0<=Function)||(LA175_0>=Private && LA175_0<=Delete)||(LA175_0>=Import && LA175_0<=Public)||LA175_0==Static||(LA175_0>=Target && LA175_0<=Await)||LA175_0==Class||(LA175_0>=False && LA175_0<=Super)||LA175_0==Union||(LA175_0>=Yield && LA175_0<=This)||(LA175_0>=From && LA175_0<=Void)||(LA175_0>=Get && LA175_0<=Set)||LA175_0==PlusSignPlusSign||(LA175_0>=HyphenMinusHyphenMinus && LA175_0<=SolidusEqualsSign)||LA175_0==As||LA175_0==Of||LA175_0==ExclamationMark||LA175_0==LeftParenthesis||LA175_0==PlusSign||LA175_0==HyphenMinus||LA175_0==Solidus||LA175_0==LessThanSign||(LA175_0>=CommercialAt && LA175_0<=LeftSquareBracket)||LA175_0==LeftCurlyBracket||LA175_0==Tilde||LA175_0==RULE_DOUBLE||(LA175_0>=RULE_HEX_INT && LA175_0<=RULE_LEGACY_OCTAL_INT)||LA175_0==RULE_SCIENTIFIC_INT||LA175_0==RULE_IDENTIFIER||LA175_0==RULE_STRING||(LA175_0>=RULE_TEMPLATE_HEAD && LA175_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA175_0==RULE_INT) ) {
                                                alt175=1;
                                            }
                                            switch (alt175) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_updateExpr_18_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_18_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_19_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forIn_19_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                              												
                                            }

                                            }


                                            }
                                            int alt176=2;
                                            int LA176_0 = input.LA(1);

                                            if ( ((LA176_0>=Intersection && LA176_0<=Implements)||(LA176_0>=Promisify && LA176_0<=Abstract)||(LA176_0>=External && LA176_0<=Function)||(LA176_0>=Private && LA176_0<=Delete)||(LA176_0>=Import && LA176_0<=Public)||LA176_0==Static||(LA176_0>=Target && LA176_0<=Await)||LA176_0==Class||(LA176_0>=False && LA176_0<=Super)||LA176_0==Union||(LA176_0>=Yield && LA176_0<=This)||(LA176_0>=From && LA176_0<=Void)||(LA176_0>=Get && LA176_0<=Set)||LA176_0==PlusSignPlusSign||(LA176_0>=HyphenMinusHyphenMinus && LA176_0<=SolidusEqualsSign)||LA176_0==As||LA176_0==Of||LA176_0==ExclamationMark||LA176_0==LeftParenthesis||LA176_0==PlusSign||LA176_0==HyphenMinus||LA176_0==Solidus||LA176_0==LessThanSign||(LA176_0>=CommercialAt && LA176_0<=LeftSquareBracket)||LA176_0==LeftCurlyBracket||LA176_0==Tilde||LA176_0==RULE_DOUBLE||(LA176_0>=RULE_HEX_INT && LA176_0<=RULE_LEGACY_OCTAL_INT)||LA176_0==RULE_SCIENTIFIC_INT||LA176_0==RULE_IDENTIFIER||LA176_0==RULE_STRING||(LA176_0>=RULE_TEMPLATE_HEAD && LA176_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA176_0==RULE_INT) ) {
                                                alt176=1;
                                            }
                                            switch (alt176) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_expression_20_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_20_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_21_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forOf_21_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                              												
                                            }

                                            }


                                            }
                                            int alt177=2;
                                            int LA177_0 = input.LA(1);

                                            if ( ((LA177_0>=Intersection && LA177_0<=Implements)||(LA177_0>=Promisify && LA177_0<=Abstract)||(LA177_0>=External && LA177_0<=Function)||(LA177_0>=Private && LA177_0<=Delete)||(LA177_0>=Import && LA177_0<=Public)||LA177_0==Static||(LA177_0>=Target && LA177_0<=Await)||LA177_0==Class||(LA177_0>=False && LA177_0<=Super)||LA177_0==Union||(LA177_0>=Yield && LA177_0<=This)||(LA177_0>=From && LA177_0<=Void)||(LA177_0>=Get && LA177_0<=Set)||LA177_0==PlusSignPlusSign||(LA177_0>=HyphenMinusHyphenMinus && LA177_0<=SolidusEqualsSign)||LA177_0==As||LA177_0==Of||LA177_0==ExclamationMark||LA177_0==LeftParenthesis||LA177_0==PlusSign||LA177_0==HyphenMinus||LA177_0==Solidus||LA177_0==LessThanSign||(LA177_0>=CommercialAt && LA177_0<=LeftSquareBracket)||LA177_0==LeftCurlyBracket||LA177_0==Tilde||LA177_0==RULE_DOUBLE||(LA177_0>=RULE_HEX_INT && LA177_0<=RULE_LEGACY_OCTAL_INT)||LA177_0==RULE_SCIENTIFIC_INT||LA177_0==RULE_IDENTIFIER||LA177_0==RULE_STRING||(LA177_0>=RULE_TEMPLATE_HEAD && LA177_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA177_0==RULE_INT) ) {
                                                alt177=1;
                                            }
                                            switch (alt177) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_expression_22_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_22_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_3_1_0_1_0_0());
                              								
                            }
                            pushFollow(FOLLOW_85);
                            lv_initExpr_23_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_23_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt184=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt184=1;
                                }
                                break;
                            case In:
                                {
                                alt184=2;
                                }
                                break;
                            case Of:
                                {
                                alt184=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 184, 0, input);

                                throw nvae;
                            }

                            switch (alt184) {
                                case 1 :
                                    {
                                    {
                                    otherlv_24=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(otherlv_24, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                      								
                                    }
                                    int alt180=2;
                                    int LA180_0 = input.LA(1);

                                    if ( ((LA180_0>=Intersection && LA180_0<=Implements)||(LA180_0>=Promisify && LA180_0<=Abstract)||(LA180_0>=External && LA180_0<=Function)||(LA180_0>=Private && LA180_0<=Delete)||(LA180_0>=Import && LA180_0<=Public)||LA180_0==Static||(LA180_0>=Target && LA180_0<=Await)||LA180_0==Class||(LA180_0>=False && LA180_0<=Super)||LA180_0==Union||(LA180_0>=Yield && LA180_0<=This)||(LA180_0>=From && LA180_0<=Void)||(LA180_0>=Get && LA180_0<=Set)||LA180_0==PlusSignPlusSign||(LA180_0>=HyphenMinusHyphenMinus && LA180_0<=SolidusEqualsSign)||LA180_0==As||LA180_0==Of||LA180_0==ExclamationMark||LA180_0==LeftParenthesis||LA180_0==PlusSign||LA180_0==HyphenMinus||LA180_0==Solidus||LA180_0==LessThanSign||(LA180_0>=CommercialAt && LA180_0<=LeftSquareBracket)||LA180_0==LeftCurlyBracket||LA180_0==Tilde||LA180_0==RULE_DOUBLE||(LA180_0>=RULE_HEX_INT && LA180_0<=RULE_LEGACY_OCTAL_INT)||LA180_0==RULE_SCIENTIFIC_INT||LA180_0==RULE_IDENTIFIER||LA180_0==RULE_STRING||(LA180_0>=RULE_TEMPLATE_HEAD && LA180_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA180_0==RULE_INT) ) {
                                        alt180=1;
                                    }
                                    switch (alt180) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_84);
                                            lv_expression_25_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_25_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    otherlv_26=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(otherlv_26, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                      								
                                    }
                                    int alt181=2;
                                    int LA181_0 = input.LA(1);

                                    if ( ((LA181_0>=Intersection && LA181_0<=Implements)||(LA181_0>=Promisify && LA181_0<=Abstract)||(LA181_0>=External && LA181_0<=Function)||(LA181_0>=Private && LA181_0<=Delete)||(LA181_0>=Import && LA181_0<=Public)||LA181_0==Static||(LA181_0>=Target && LA181_0<=Await)||LA181_0==Class||(LA181_0>=False && LA181_0<=Super)||LA181_0==Union||(LA181_0>=Yield && LA181_0<=This)||(LA181_0>=From && LA181_0<=Void)||(LA181_0>=Get && LA181_0<=Set)||LA181_0==PlusSignPlusSign||(LA181_0>=HyphenMinusHyphenMinus && LA181_0<=SolidusEqualsSign)||LA181_0==As||LA181_0==Of||LA181_0==ExclamationMark||LA181_0==LeftParenthesis||LA181_0==PlusSign||LA181_0==HyphenMinus||LA181_0==Solidus||LA181_0==LessThanSign||(LA181_0>=CommercialAt && LA181_0<=LeftSquareBracket)||LA181_0==LeftCurlyBracket||LA181_0==Tilde||LA181_0==RULE_DOUBLE||(LA181_0>=RULE_HEX_INT && LA181_0<=RULE_LEGACY_OCTAL_INT)||LA181_0==RULE_SCIENTIFIC_INT||LA181_0==RULE_IDENTIFIER||LA181_0==RULE_STRING||(LA181_0>=RULE_TEMPLATE_HEAD && LA181_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA181_0==RULE_INT) ) {
                                        alt181=1;
                                    }
                                    switch (alt181) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_updateExpr_27_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_27_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_28_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											newLeafNode(lv_forIn_28_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                      										
                                    }
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", true, "in");
                                      										
                                    }

                                    }


                                    }
                                    int alt182=2;
                                    int LA182_0 = input.LA(1);

                                    if ( ((LA182_0>=Intersection && LA182_0<=Implements)||(LA182_0>=Promisify && LA182_0<=Abstract)||(LA182_0>=External && LA182_0<=Function)||(LA182_0>=Private && LA182_0<=Delete)||(LA182_0>=Import && LA182_0<=Public)||LA182_0==Static||(LA182_0>=Target && LA182_0<=Await)||LA182_0==Class||(LA182_0>=False && LA182_0<=Super)||LA182_0==Union||(LA182_0>=Yield && LA182_0<=This)||(LA182_0>=From && LA182_0<=Void)||(LA182_0>=Get && LA182_0<=Set)||LA182_0==PlusSignPlusSign||(LA182_0>=HyphenMinusHyphenMinus && LA182_0<=SolidusEqualsSign)||LA182_0==As||LA182_0==Of||LA182_0==ExclamationMark||LA182_0==LeftParenthesis||LA182_0==PlusSign||LA182_0==HyphenMinus||LA182_0==Solidus||LA182_0==LessThanSign||(LA182_0>=CommercialAt && LA182_0<=LeftSquareBracket)||LA182_0==LeftCurlyBracket||LA182_0==Tilde||LA182_0==RULE_DOUBLE||(LA182_0>=RULE_HEX_INT && LA182_0<=RULE_LEGACY_OCTAL_INT)||LA182_0==RULE_SCIENTIFIC_INT||LA182_0==RULE_IDENTIFIER||LA182_0==RULE_STRING||(LA182_0>=RULE_TEMPLATE_HEAD && LA182_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA182_0==RULE_INT) ) {
                                        alt182=1;
                                    }
                                    switch (alt182) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_29_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_29_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_30_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											newLeafNode(lv_forOf_30_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                      										
                                    }
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", true, "of");
                                      										
                                    }

                                    }


                                    }
                                    int alt183=2;
                                    int LA183_0 = input.LA(1);

                                    if ( ((LA183_0>=Intersection && LA183_0<=Implements)||(LA183_0>=Promisify && LA183_0<=Abstract)||(LA183_0>=External && LA183_0<=Function)||(LA183_0>=Private && LA183_0<=Delete)||(LA183_0>=Import && LA183_0<=Public)||LA183_0==Static||(LA183_0>=Target && LA183_0<=Await)||LA183_0==Class||(LA183_0>=False && LA183_0<=Super)||LA183_0==Union||(LA183_0>=Yield && LA183_0<=This)||(LA183_0>=From && LA183_0<=Void)||(LA183_0>=Get && LA183_0<=Set)||LA183_0==PlusSignPlusSign||(LA183_0>=HyphenMinusHyphenMinus && LA183_0<=SolidusEqualsSign)||LA183_0==As||LA183_0==Of||LA183_0==ExclamationMark||LA183_0==LeftParenthesis||LA183_0==PlusSign||LA183_0==HyphenMinus||LA183_0==Solidus||LA183_0==LessThanSign||(LA183_0>=CommercialAt && LA183_0<=LeftSquareBracket)||LA183_0==LeftCurlyBracket||LA183_0==Tilde||LA183_0==RULE_DOUBLE||(LA183_0>=RULE_HEX_INT && LA183_0<=RULE_LEGACY_OCTAL_INT)||LA183_0==RULE_SCIENTIFIC_INT||LA183_0==RULE_IDENTIFIER||LA183_0==RULE_STRING||(LA183_0>=RULE_TEMPLATE_HEAD && LA183_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA183_0==RULE_INT) ) {
                                        alt183=1;
                                    }
                                    switch (alt183) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_31_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_31_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_32=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_32, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                              						
                            }
                            int alt185=2;
                            int LA185_0 = input.LA(1);

                            if ( ((LA185_0>=Intersection && LA185_0<=Implements)||(LA185_0>=Promisify && LA185_0<=Abstract)||(LA185_0>=External && LA185_0<=Function)||(LA185_0>=Private && LA185_0<=Delete)||(LA185_0>=Import && LA185_0<=Public)||LA185_0==Static||(LA185_0>=Target && LA185_0<=Await)||LA185_0==Class||(LA185_0>=False && LA185_0<=Super)||LA185_0==Union||(LA185_0>=Yield && LA185_0<=This)||(LA185_0>=From && LA185_0<=Void)||(LA185_0>=Get && LA185_0<=Set)||LA185_0==PlusSignPlusSign||(LA185_0>=HyphenMinusHyphenMinus && LA185_0<=SolidusEqualsSign)||LA185_0==As||LA185_0==Of||LA185_0==ExclamationMark||LA185_0==LeftParenthesis||LA185_0==PlusSign||LA185_0==HyphenMinus||LA185_0==Solidus||LA185_0==LessThanSign||(LA185_0>=CommercialAt && LA185_0<=LeftSquareBracket)||LA185_0==LeftCurlyBracket||LA185_0==Tilde||LA185_0==RULE_DOUBLE||(LA185_0>=RULE_HEX_INT && LA185_0<=RULE_LEGACY_OCTAL_INT)||LA185_0==RULE_SCIENTIFIC_INT||LA185_0==RULE_IDENTIFIER||LA185_0==RULE_STRING||(LA185_0>=RULE_TEMPLATE_HEAD && LA185_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA185_0==RULE_INT) ) {
                                alt185=1;
                            }
                            switch (alt185) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_2_1_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_84);
                                    lv_expression_33_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_33_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }

                            otherlv_34=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_34, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                              						
                            }
                            int alt186=2;
                            int LA186_0 = input.LA(1);

                            if ( ((LA186_0>=Intersection && LA186_0<=Implements)||(LA186_0>=Promisify && LA186_0<=Abstract)||(LA186_0>=External && LA186_0<=Function)||(LA186_0>=Private && LA186_0<=Delete)||(LA186_0>=Import && LA186_0<=Public)||LA186_0==Static||(LA186_0>=Target && LA186_0<=Await)||LA186_0==Class||(LA186_0>=False && LA186_0<=Super)||LA186_0==Union||(LA186_0>=Yield && LA186_0<=This)||(LA186_0>=From && LA186_0<=Void)||(LA186_0>=Get && LA186_0<=Set)||LA186_0==PlusSignPlusSign||(LA186_0>=HyphenMinusHyphenMinus && LA186_0<=SolidusEqualsSign)||LA186_0==As||LA186_0==Of||LA186_0==ExclamationMark||LA186_0==LeftParenthesis||LA186_0==PlusSign||LA186_0==HyphenMinus||LA186_0==Solidus||LA186_0==LessThanSign||(LA186_0>=CommercialAt && LA186_0<=LeftSquareBracket)||LA186_0==LeftCurlyBracket||LA186_0==Tilde||LA186_0==RULE_DOUBLE||(LA186_0>=RULE_HEX_INT && LA186_0<=RULE_LEGACY_OCTAL_INT)||LA186_0==RULE_SCIENTIFIC_INT||LA186_0==RULE_IDENTIFIER||LA186_0==RULE_STRING||(LA186_0>=RULE_TEMPLATE_HEAD && LA186_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA186_0==RULE_INT) ) {
                                alt186=1;
                            }
                            switch (alt186) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_2_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_72);
                                    lv_updateExpr_35_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_35_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    otherlv_36=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_36, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_37_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_37_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ForStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_forIn_4_0=null;
        Token otherlv_6=null;
        Token lv_forIn_9_0=null;
        Token lv_forOf_10_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token lv_forIn_19_0=null;
        Token lv_forOf_21_0=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token lv_forIn_28_0=null;
        Token lv_forOf_30_0=null;
        Token otherlv_32=null;
        Token otherlv_34=null;
        Token otherlv_36=null;
        EObject lv_initExpr_3_0 = null;

        EObject lv_expression_5_0 = null;

        Enumerator lv_varStmtKeyword_7_0 = null;

        EObject lv_varDeclsOrBindings_8_0 = null;

        EObject lv_expression_11_0 = null;

        EObject lv_varDeclsOrBindings_12_0 = null;

        EObject lv_varDeclsOrBindings_14_0 = null;

        EObject lv_expression_16_0 = null;

        EObject lv_updateExpr_18_0 = null;

        EObject lv_expression_20_0 = null;

        EObject lv_expression_22_0 = null;

        EObject lv_initExpr_23_0 = null;

        EObject lv_expression_25_0 = null;

        EObject lv_updateExpr_27_0 = null;

        EObject lv_expression_29_0 = null;

        EObject lv_expression_31_0 = null;

        EObject lv_expression_33_0 = null;

        EObject lv_updateExpr_35_0 = null;

        EObject lv_statement_37_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,For,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
              		
            }
            int alt206=2;
            alt206 = dfa206.predict(input);
            switch (alt206) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_3_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_78);
                    lv_initExpr_3_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_3_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }
                    {
                    {
                    lv_forIn_4_0=(Token)match(input,In,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								newLeafNode(lv_forIn_4_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                      							
                    }
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", true, "in");
                      							
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_0_0_2_0());
                      							
                    }
                    pushFollow(FOLLOW_72);
                    lv_expression_5_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_5_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt205=3;
                    alt205 = dfa205.predict(input);
                    switch (alt205) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_3_1_0_0_0_0());
                              								
                            }
                            pushFollow(FOLLOW_27);
                            lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_7_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt197=2;
                            alt197 = dfa197.predict(input);
                            switch (alt197) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0());
                                      											
                                    }
                                    pushFollow(FOLLOW_79);
                                    lv_varDeclsOrBindings_8_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_8_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                      											
                                    }

                                    }


                                    }
                                    int alt189=2;
                                    int LA189_0 = input.LA(1);

                                    if ( (LA189_0==In) ) {
                                        alt189=1;
                                    }
                                    else if ( (LA189_0==Of) ) {
                                        alt189=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 189, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt189) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_9_0=(Token)match(input,In,FOLLOW_87); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forIn_9_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                              												
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_10_0=(Token)match(input,Of,FOLLOW_87); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forOf_10_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                              												
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt190=2;
                                    alt190 = dfa190.predict(input);
                                    switch (alt190) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0());
                                              											
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_11_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_11_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                              											
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0());
                                      										
                                    }
                                    pushFollow(FOLLOW_81);
                                    lv_varDeclsOrBindings_12_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_12_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                      										
                                    }

                                    }


                                    }
                                    int alt196=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt196=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt196=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt196=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 196, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt196) {
                                        case 1 :
                                            {
                                            {
                                            loop191:
                                            do {
                                                int alt191=2;
                                                int LA191_0 = input.LA(1);

                                                if ( (LA191_0==Comma) ) {
                                                    alt191=1;
                                                }


                                                switch (alt191) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_13=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {

                                            	      												newLeafNode(otherlv_13, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	      											
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {

                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0());
                                            	      													
                                            	    }
                                            	    pushFollow(FOLLOW_82);
                                            	    lv_varDeclsOrBindings_14_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {

                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_14_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	      													
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop191;
                                                }
                                            } while (true);

                                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_88); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											newLeafNode(otherlv_15, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                              										
                                            }
                                            int alt192=2;
                                            int LA192_0 = input.LA(1);

                                            if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||(LA192_0>=Import && LA192_0<=Public)||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||(LA192_0>=HyphenMinusHyphenMinus && LA192_0<=SolidusEqualsSign)||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_HEX_INT && LA192_0<=RULE_LEGACY_OCTAL_INT)||LA192_0==RULE_SCIENTIFIC_INT||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_STRING||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_INT) ) {
                                                alt192=1;
                                            }
                                            switch (alt192) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_84);
                                                    lv_expression_16_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_16_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            otherlv_17=(Token)match(input,Semicolon,FOLLOW_87); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											newLeafNode(otherlv_17, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                              										
                                            }
                                            int alt193=2;
                                            int LA193_0 = input.LA(1);

                                            if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||(LA193_0>=External && LA193_0<=Function)||(LA193_0>=Private && LA193_0<=Delete)||(LA193_0>=Import && LA193_0<=Public)||LA193_0==Static||(LA193_0>=Target && LA193_0<=Await)||LA193_0==Class||(LA193_0>=False && LA193_0<=Super)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||(LA193_0>=From && LA193_0<=Void)||(LA193_0>=Get && LA193_0<=Set)||LA193_0==PlusSignPlusSign||(LA193_0>=HyphenMinusHyphenMinus && LA193_0<=SolidusEqualsSign)||LA193_0==As||LA193_0==Of||LA193_0==ExclamationMark||LA193_0==LeftParenthesis||LA193_0==PlusSign||LA193_0==HyphenMinus||LA193_0==Solidus||LA193_0==LessThanSign||(LA193_0>=CommercialAt && LA193_0<=LeftSquareBracket)||LA193_0==LeftCurlyBracket||LA193_0==Tilde||LA193_0==RULE_DOUBLE||(LA193_0>=RULE_HEX_INT && LA193_0<=RULE_LEGACY_OCTAL_INT)||LA193_0==RULE_SCIENTIFIC_INT||LA193_0==RULE_IDENTIFIER||LA193_0==RULE_STRING||(LA193_0>=RULE_TEMPLATE_HEAD && LA193_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA193_0==RULE_INT) ) {
                                                alt193=1;
                                            }
                                            switch (alt193) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_updateExpr_18_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_18_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_19_0=(Token)match(input,In,FOLLOW_87); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forIn_19_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", true, "in");
                                              												
                                            }

                                            }


                                            }
                                            int alt194=2;
                                            int LA194_0 = input.LA(1);

                                            if ( ((LA194_0>=Intersection && LA194_0<=Implements)||(LA194_0>=Promisify && LA194_0<=Abstract)||(LA194_0>=External && LA194_0<=Function)||(LA194_0>=Private && LA194_0<=Delete)||(LA194_0>=Import && LA194_0<=Public)||LA194_0==Static||(LA194_0>=Target && LA194_0<=Await)||LA194_0==Class||(LA194_0>=False && LA194_0<=Super)||LA194_0==Union||(LA194_0>=Yield && LA194_0<=This)||(LA194_0>=From && LA194_0<=Void)||(LA194_0>=Get && LA194_0<=Set)||LA194_0==PlusSignPlusSign||(LA194_0>=HyphenMinusHyphenMinus && LA194_0<=SolidusEqualsSign)||LA194_0==As||LA194_0==Of||LA194_0==ExclamationMark||LA194_0==LeftParenthesis||LA194_0==PlusSign||LA194_0==HyphenMinus||LA194_0==Solidus||LA194_0==LessThanSign||(LA194_0>=CommercialAt && LA194_0<=LeftSquareBracket)||LA194_0==LeftCurlyBracket||LA194_0==Tilde||LA194_0==RULE_DOUBLE||(LA194_0>=RULE_HEX_INT && LA194_0<=RULE_LEGACY_OCTAL_INT)||LA194_0==RULE_SCIENTIFIC_INT||LA194_0==RULE_IDENTIFIER||LA194_0==RULE_STRING||(LA194_0>=RULE_TEMPLATE_HEAD && LA194_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA194_0==RULE_INT) ) {
                                                alt194=1;
                                            }
                                            switch (alt194) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_expression_20_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_20_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_21_0=(Token)match(input,Of,FOLLOW_87); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              													newLeafNode(lv_forOf_21_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                              												
                                            }
                                            if ( state.backtracking==0 ) {

                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", true, "of");
                                              												
                                            }

                                            }


                                            }
                                            int alt195=2;
                                            int LA195_0 = input.LA(1);

                                            if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||(LA195_0>=Import && LA195_0<=Public)||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||(LA195_0>=HyphenMinusHyphenMinus && LA195_0<=SolidusEqualsSign)||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||LA195_0==PlusSign||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_HEX_INT && LA195_0<=RULE_LEGACY_OCTAL_INT)||LA195_0==RULE_SCIENTIFIC_INT||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_STRING||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_INT) ) {
                                                alt195=1;
                                            }
                                            switch (alt195) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {

                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0());
                                                      												
                                                    }
                                                    pushFollow(FOLLOW_72);
                                                    lv_expression_22_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {

                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_22_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                      												
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_3_1_0_1_0_0());
                              								
                            }
                            pushFollow(FOLLOW_85);
                            lv_initExpr_23_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_23_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            int alt202=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt202=1;
                                }
                                break;
                            case In:
                                {
                                alt202=2;
                                }
                                break;
                            case Of:
                                {
                                alt202=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 202, 0, input);

                                throw nvae;
                            }

                            switch (alt202) {
                                case 1 :
                                    {
                                    {
                                    otherlv_24=(Token)match(input,Semicolon,FOLLOW_88); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(otherlv_24, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                      								
                                    }
                                    int alt198=2;
                                    int LA198_0 = input.LA(1);

                                    if ( ((LA198_0>=Intersection && LA198_0<=Implements)||(LA198_0>=Promisify && LA198_0<=Abstract)||(LA198_0>=External && LA198_0<=Function)||(LA198_0>=Private && LA198_0<=Delete)||(LA198_0>=Import && LA198_0<=Public)||LA198_0==Static||(LA198_0>=Target && LA198_0<=Await)||LA198_0==Class||(LA198_0>=False && LA198_0<=Super)||LA198_0==Union||(LA198_0>=Yield && LA198_0<=This)||(LA198_0>=From && LA198_0<=Void)||(LA198_0>=Get && LA198_0<=Set)||LA198_0==PlusSignPlusSign||(LA198_0>=HyphenMinusHyphenMinus && LA198_0<=SolidusEqualsSign)||LA198_0==As||LA198_0==Of||LA198_0==ExclamationMark||LA198_0==LeftParenthesis||LA198_0==PlusSign||LA198_0==HyphenMinus||LA198_0==Solidus||LA198_0==LessThanSign||(LA198_0>=CommercialAt && LA198_0<=LeftSquareBracket)||LA198_0==LeftCurlyBracket||LA198_0==Tilde||LA198_0==RULE_DOUBLE||(LA198_0>=RULE_HEX_INT && LA198_0<=RULE_LEGACY_OCTAL_INT)||LA198_0==RULE_SCIENTIFIC_INT||LA198_0==RULE_IDENTIFIER||LA198_0==RULE_STRING||(LA198_0>=RULE_TEMPLATE_HEAD && LA198_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA198_0==RULE_INT) ) {
                                        alt198=1;
                                    }
                                    switch (alt198) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_84);
                                            lv_expression_25_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_25_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    otherlv_26=(Token)match(input,Semicolon,FOLLOW_87); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(otherlv_26, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                      								
                                    }
                                    int alt199=2;
                                    int LA199_0 = input.LA(1);

                                    if ( ((LA199_0>=Intersection && LA199_0<=Implements)||(LA199_0>=Promisify && LA199_0<=Abstract)||(LA199_0>=External && LA199_0<=Function)||(LA199_0>=Private && LA199_0<=Delete)||(LA199_0>=Import && LA199_0<=Public)||LA199_0==Static||(LA199_0>=Target && LA199_0<=Await)||LA199_0==Class||(LA199_0>=False && LA199_0<=Super)||LA199_0==Union||(LA199_0>=Yield && LA199_0<=This)||(LA199_0>=From && LA199_0<=Void)||(LA199_0>=Get && LA199_0<=Set)||LA199_0==PlusSignPlusSign||(LA199_0>=HyphenMinusHyphenMinus && LA199_0<=SolidusEqualsSign)||LA199_0==As||LA199_0==Of||LA199_0==ExclamationMark||LA199_0==LeftParenthesis||LA199_0==PlusSign||LA199_0==HyphenMinus||LA199_0==Solidus||LA199_0==LessThanSign||(LA199_0>=CommercialAt && LA199_0<=LeftSquareBracket)||LA199_0==LeftCurlyBracket||LA199_0==Tilde||LA199_0==RULE_DOUBLE||(LA199_0>=RULE_HEX_INT && LA199_0<=RULE_LEGACY_OCTAL_INT)||LA199_0==RULE_SCIENTIFIC_INT||LA199_0==RULE_IDENTIFIER||LA199_0==RULE_STRING||(LA199_0>=RULE_TEMPLATE_HEAD && LA199_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA199_0==RULE_INT) ) {
                                        alt199=1;
                                    }
                                    switch (alt199) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_updateExpr_27_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_27_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_28_0=(Token)match(input,In,FOLLOW_87); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											newLeafNode(lv_forIn_28_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                      										
                                    }
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", true, "in");
                                      										
                                    }

                                    }


                                    }
                                    int alt200=2;
                                    int LA200_0 = input.LA(1);

                                    if ( ((LA200_0>=Intersection && LA200_0<=Implements)||(LA200_0>=Promisify && LA200_0<=Abstract)||(LA200_0>=External && LA200_0<=Function)||(LA200_0>=Private && LA200_0<=Delete)||(LA200_0>=Import && LA200_0<=Public)||LA200_0==Static||(LA200_0>=Target && LA200_0<=Await)||LA200_0==Class||(LA200_0>=False && LA200_0<=Super)||LA200_0==Union||(LA200_0>=Yield && LA200_0<=This)||(LA200_0>=From && LA200_0<=Void)||(LA200_0>=Get && LA200_0<=Set)||LA200_0==PlusSignPlusSign||(LA200_0>=HyphenMinusHyphenMinus && LA200_0<=SolidusEqualsSign)||LA200_0==As||LA200_0==Of||LA200_0==ExclamationMark||LA200_0==LeftParenthesis||LA200_0==PlusSign||LA200_0==HyphenMinus||LA200_0==Solidus||LA200_0==LessThanSign||(LA200_0>=CommercialAt && LA200_0<=LeftSquareBracket)||LA200_0==LeftCurlyBracket||LA200_0==Tilde||LA200_0==RULE_DOUBLE||(LA200_0>=RULE_HEX_INT && LA200_0<=RULE_LEGACY_OCTAL_INT)||LA200_0==RULE_SCIENTIFIC_INT||LA200_0==RULE_IDENTIFIER||LA200_0==RULE_STRING||(LA200_0>=RULE_TEMPLATE_HEAD && LA200_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA200_0==RULE_INT) ) {
                                        alt200=1;
                                    }
                                    switch (alt200) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_29_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_29_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_30_0=(Token)match(input,Of,FOLLOW_87); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											newLeafNode(lv_forOf_30_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                      										
                                    }
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", true, "of");
                                      										
                                    }

                                    }


                                    }
                                    int alt201=2;
                                    int LA201_0 = input.LA(1);

                                    if ( ((LA201_0>=Intersection && LA201_0<=Implements)||(LA201_0>=Promisify && LA201_0<=Abstract)||(LA201_0>=External && LA201_0<=Function)||(LA201_0>=Private && LA201_0<=Delete)||(LA201_0>=Import && LA201_0<=Public)||LA201_0==Static||(LA201_0>=Target && LA201_0<=Await)||LA201_0==Class||(LA201_0>=False && LA201_0<=Super)||LA201_0==Union||(LA201_0>=Yield && LA201_0<=This)||(LA201_0>=From && LA201_0<=Void)||(LA201_0>=Get && LA201_0<=Set)||LA201_0==PlusSignPlusSign||(LA201_0>=HyphenMinusHyphenMinus && LA201_0<=SolidusEqualsSign)||LA201_0==As||LA201_0==Of||LA201_0==ExclamationMark||LA201_0==LeftParenthesis||LA201_0==PlusSign||LA201_0==HyphenMinus||LA201_0==Solidus||LA201_0==LessThanSign||(LA201_0>=CommercialAt && LA201_0<=LeftSquareBracket)||LA201_0==LeftCurlyBracket||LA201_0==Tilde||LA201_0==RULE_DOUBLE||(LA201_0>=RULE_HEX_INT && LA201_0<=RULE_LEGACY_OCTAL_INT)||LA201_0==RULE_SCIENTIFIC_INT||LA201_0==RULE_IDENTIFIER||LA201_0==RULE_STRING||(LA201_0>=RULE_TEMPLATE_HEAD && LA201_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA201_0==RULE_INT) ) {
                                        alt201=1;
                                    }
                                    switch (alt201) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {

                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0());
                                              										
                                            }
                                            pushFollow(FOLLOW_72);
                                            lv_expression_31_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {

                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_31_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_32=(Token)match(input,Semicolon,FOLLOW_88); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_32, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                              						
                            }
                            int alt203=2;
                            int LA203_0 = input.LA(1);

                            if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||(LA203_0>=Import && LA203_0<=Public)||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||(LA203_0>=HyphenMinusHyphenMinus && LA203_0<=SolidusEqualsSign)||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                                alt203=1;
                            }
                            switch (alt203) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_3_1_0_2_1_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_84);
                                    lv_expression_33_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_33_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }

                            otherlv_34=(Token)match(input,Semicolon,FOLLOW_87); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_34, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                              						
                            }
                            int alt204=2;
                            int LA204_0 = input.LA(1);

                            if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||(LA204_0>=Import && LA204_0<=Public)||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||(LA204_0>=Get && LA204_0<=Set)||LA204_0==PlusSignPlusSign||(LA204_0>=HyphenMinusHyphenMinus && LA204_0<=SolidusEqualsSign)||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||LA204_0==PlusSign||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_HEX_INT && LA204_0<=RULE_LEGACY_OCTAL_INT)||LA204_0==RULE_SCIENTIFIC_INT||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_STRING||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_INT) ) {
                                alt204=1;
                            }
                            switch (alt204) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_3_1_0_2_3_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_72);
                                    lv_updateExpr_35_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_35_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    otherlv_36=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_36, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_37_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_37_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLetIdentifierRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLetIdentifierRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetIdentifierRef=ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLetIdentifierRef() throws RecognitionException {
        EObject current = null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getLetIdentifierRefRule());
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getLetIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
              			
            }
            pushFollow(FOLLOW_2);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLetAsIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLetAsIdentifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetAsIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetAsIdentifier=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetAsIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLetAsIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingIdentifierAsVariableDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsVariableDeclaration=ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleContinueStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleContinueStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContinueStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContinueStatement=ruleContinueStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContinueStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleContinueStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Continue,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
              		
            }
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( ((LA207_0>=Intersection && LA207_0<=Implements)||(LA207_0>=Promisify && LA207_0<=Abstract)||LA207_0==External||(LA207_0>=Private && LA207_0<=Project)||LA207_0==Public||LA207_0==Static||LA207_0==Target||(LA207_0>=Async && LA207_0<=Await)||LA207_0==Union||(LA207_0>=Yield && LA207_0<=This)||LA207_0==From||LA207_0==Type||(LA207_0>=Get && LA207_0<=Let)||(LA207_0>=Out && LA207_0<=Set)||LA207_0==As||LA207_0==Of||LA207_0==RULE_IDENTIFIER) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ContinueStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Continue,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
              		
            }
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( ((LA208_0>=Intersection && LA208_0<=Implements)||(LA208_0>=Promisify && LA208_0<=Abstract)||LA208_0==External||(LA208_0>=Private && LA208_0<=Project)||LA208_0==Public||LA208_0==Static||LA208_0==Target||(LA208_0>=Async && LA208_0<=Await)||LA208_0==Union||LA208_0==This||LA208_0==From||LA208_0==Type||(LA208_0>=Get && LA208_0<=Let)||(LA208_0>=Out && LA208_0<=Set)||LA208_0==As||LA208_0==Of||LA208_0==RULE_IDENTIFIER) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBreakStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBreakStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBreakStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBreakStatement=ruleBreakStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBreakStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBreakStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Break,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
              		
            }
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( ((LA209_0>=Intersection && LA209_0<=Implements)||(LA209_0>=Promisify && LA209_0<=Abstract)||LA209_0==External||(LA209_0>=Private && LA209_0<=Project)||LA209_0==Public||LA209_0==Static||LA209_0==Target||(LA209_0>=Async && LA209_0<=Await)||LA209_0==Union||(LA209_0>=Yield && LA209_0<=This)||LA209_0==From||LA209_0==Type||(LA209_0>=Get && LA209_0<=Let)||(LA209_0>=Out && LA209_0<=Set)||LA209_0==As||LA209_0==Of||LA209_0==RULE_IDENTIFIER) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BreakStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Break,FOLLOW_89); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
              		
            }
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||LA210_0==External||(LA210_0>=Private && LA210_0<=Project)||LA210_0==Public||LA210_0==Static||LA210_0==Target||(LA210_0>=Async && LA210_0<=Await)||LA210_0==Union||LA210_0==This||LA210_0==From||LA210_0==Type||(LA210_0>=Get && LA210_0<=Let)||(LA210_0>=Out && LA210_0<=Set)||LA210_0==As||LA210_0==Of||LA210_0==RULE_IDENTIFIER) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleReturnStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReturnStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnStatement=ruleReturnStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleReturnStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Return,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
              		
            }
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||(LA211_0>=Import && LA211_0<=Public)||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||(LA211_0>=HyphenMinusHyphenMinus && LA211_0<=SolidusEqualsSign)||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ReturnStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Return,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
              		
            }
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Abstract)||(LA212_0>=External && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||(LA212_0>=Import && LA212_0<=Public)||LA212_0==Static||(LA212_0>=Target && LA212_0<=Await)||LA212_0==Class||(LA212_0>=False && LA212_0<=Super)||LA212_0==Union||(LA212_0>=Yield && LA212_0<=This)||(LA212_0>=From && LA212_0<=Void)||(LA212_0>=Get && LA212_0<=Set)||LA212_0==PlusSignPlusSign||(LA212_0>=HyphenMinusHyphenMinus && LA212_0<=SolidusEqualsSign)||LA212_0==As||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||LA212_0==PlusSign||LA212_0==HyphenMinus||LA212_0==Solidus||LA212_0==LessThanSign||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_HEX_INT && LA212_0<=RULE_LEGACY_OCTAL_INT)||LA212_0==RULE_SCIENTIFIC_INT||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_STRING||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_INT) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWithStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWithStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithStatement=ruleWithStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWithStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;

        EObject lv_statement_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WithStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;

        EObject lv_statement_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSwitchStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSwitchStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSwitchStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSwitchStatement=ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSwitchStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSwitchStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;

        EObject lv_cases_5_0 = null;

        EObject lv_cases_6_0 = null;

        EObject lv_cases_7_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==Case) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_cases_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==Default) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                      					
                    }
                    pushFollow(FOLLOW_93);
                    lv_cases_6_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop214:
                    do {
                        int alt214=2;
                        int LA214_0 = input.LA(1);

                        if ( (LA214_0==Case) ) {
                            alt214=1;
                        }


                        switch (alt214) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_93);
                    	    lv_cases_7_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop214;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SwitchStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;

        EObject lv_cases_5_0 = null;

        EObject lv_cases_6_0 = null;

        EObject lv_cases_7_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
              		
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_92); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
              		
            }
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==Case) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_92);
            	    lv_cases_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==Default) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                      					
                    }
                    pushFollow(FOLLOW_93);
                    lv_cases_6_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop217:
                    do {
                        int alt217=2;
                        int LA217_0 = input.LA(1);

                        if ( (LA217_0==Case) ) {
                            alt217=1;
                        }


                        switch (alt217) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_93);
                    	    lv_cases_7_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop217;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCaseClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCaseClause = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseClause=ruleCaseClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCaseClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;

        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_expression_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
              		
            }
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Function)||(LA219_0>=Private && LA219_0<=Delete)||(LA219_0>=Import && LA219_0<=Break)||(LA219_0>=Class && LA219_0<=This)||(LA219_0>=From && LA219_0<=With)||(LA219_0>=For && LA219_0<=Var)||LA219_0==PlusSignPlusSign||(LA219_0>=HyphenMinusHyphenMinus && LA219_0<=SolidusEqualsSign)||(LA219_0>=As && LA219_0<=If)||LA219_0==Of||LA219_0==ExclamationMark||LA219_0==LeftParenthesis||LA219_0==PlusSign||LA219_0==HyphenMinus||LA219_0==Solidus||(LA219_0>=Semicolon && LA219_0<=LessThanSign)||(LA219_0>=CommercialAt && LA219_0<=LeftSquareBracket)||LA219_0==LeftCurlyBracket||LA219_0==Tilde||LA219_0==RULE_DOUBLE||(LA219_0>=RULE_HEX_INT && LA219_0<=RULE_LEGACY_OCTAL_INT)||LA219_0==RULE_SCIENTIFIC_INT||LA219_0==RULE_IDENTIFIER||LA219_0==RULE_STRING||(LA219_0>=RULE_TEMPLATE_HEAD && LA219_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA219_0==RULE_INT) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CaseClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;

        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_expression_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
              		
            }
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Function)||(LA220_0>=Private && LA220_0<=Delete)||(LA220_0>=Import && LA220_0<=Break)||(LA220_0>=Class && LA220_0<=This)||(LA220_0>=From && LA220_0<=With)||(LA220_0>=For && LA220_0<=Var)||LA220_0==PlusSignPlusSign||(LA220_0>=HyphenMinusHyphenMinus && LA220_0<=SolidusEqualsSign)||(LA220_0>=As && LA220_0<=If)||LA220_0==Of||LA220_0==ExclamationMark||LA220_0==LeftParenthesis||LA220_0==PlusSign||LA220_0==HyphenMinus||LA220_0==Solidus||(LA220_0>=Semicolon && LA220_0<=LessThanSign)||(LA220_0>=CommercialAt && LA220_0<=LeftSquareBracket)||LA220_0==LeftCurlyBracket||LA220_0==Tilde||LA220_0==RULE_DOUBLE||(LA220_0>=RULE_HEX_INT && LA220_0<=RULE_LEGACY_OCTAL_INT)||LA220_0==RULE_SCIENTIFIC_INT||LA220_0==RULE_IDENTIFIER||LA220_0==RULE_STRING||(LA220_0>=RULE_TEMPLATE_HEAD && LA220_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA220_0==RULE_INT) ) {
                    alt220=1;
                }


                switch (alt220) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_56);
            	    lv_statements_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultClause() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDefaultClause = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultClause=ruleDefaultClause();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Default,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
              		
            }
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Function)||(LA221_0>=Private && LA221_0<=Delete)||(LA221_0>=Import && LA221_0<=Break)||(LA221_0>=Class && LA221_0<=This)||(LA221_0>=From && LA221_0<=With)||(LA221_0>=For && LA221_0<=Var)||LA221_0==PlusSignPlusSign||(LA221_0>=HyphenMinusHyphenMinus && LA221_0<=SolidusEqualsSign)||(LA221_0>=As && LA221_0<=If)||LA221_0==Of||LA221_0==ExclamationMark||LA221_0==LeftParenthesis||LA221_0==PlusSign||LA221_0==HyphenMinus||LA221_0==Solidus||(LA221_0>=Semicolon && LA221_0<=LessThanSign)||(LA221_0>=CommercialAt && LA221_0<=LeftSquareBracket)||LA221_0==LeftCurlyBracket||LA221_0==Tilde||LA221_0==RULE_DOUBLE||(LA221_0>=RULE_HEX_INT && LA221_0<=RULE_LEGACY_OCTAL_INT)||LA221_0==RULE_SCIENTIFIC_INT||LA221_0==RULE_IDENTIFIER||LA221_0==RULE_STRING||(LA221_0>=RULE_TEMPLATE_HEAD && LA221_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA221_0==RULE_INT) ) {
                    alt221=1;
                }


                switch (alt221) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop221;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DefaultClause() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Default,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_56); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
              		
            }
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Function)||(LA222_0>=Private && LA222_0<=Delete)||(LA222_0>=Import && LA222_0<=Break)||(LA222_0>=Class && LA222_0<=This)||(LA222_0>=From && LA222_0<=With)||(LA222_0>=For && LA222_0<=Var)||LA222_0==PlusSignPlusSign||(LA222_0>=HyphenMinusHyphenMinus && LA222_0<=SolidusEqualsSign)||(LA222_0>=As && LA222_0<=If)||LA222_0==Of||LA222_0==ExclamationMark||LA222_0==LeftParenthesis||LA222_0==PlusSign||LA222_0==HyphenMinus||LA222_0==Solidus||(LA222_0>=Semicolon && LA222_0<=LessThanSign)||(LA222_0>=CommercialAt && LA222_0<=LeftSquareBracket)||LA222_0==LeftCurlyBracket||LA222_0==Tilde||LA222_0==RULE_DOUBLE||(LA222_0>=RULE_HEX_INT && LA222_0<=RULE_LEGACY_OCTAL_INT)||LA222_0==RULE_SCIENTIFIC_INT||LA222_0==RULE_IDENTIFIER||LA222_0==RULE_STRING||(LA222_0>=RULE_TEMPLATE_HEAD && LA222_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA222_0==RULE_INT) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_56);
            	    lv_statements_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLabelledStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLabelledStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLabelledStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLabelledStatement=ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLabelledStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLabelledStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_statement_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
              						
            }
            pushFollow(FOLLOW_94);
            lv_name_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=ruleStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LabelledStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_statement_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
              						
            }
            pushFollow(FOLLOW_94);
            lv_name_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_75); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThrowStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThrowStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThrowStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThrowStatement=ruleThrowStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThrowStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThrowStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_expression_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ThrowStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_18);
            lv_expression_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTryStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTryStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTryStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTryStatement=ruleTryStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTryStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTryStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_block_1_0 = null;

        EObject lv_catch_2_0 = null;

        EObject lv_finally_3_0 = null;

        EObject lv_finally_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_95);
            lv_block_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==Catch) ) {
                alt224=1;
            }
            else if ( (LA224_0==Finally) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_96);
                    lv_catch_2_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==Finally) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TryStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_block_1_0 = null;

        EObject lv_catch_2_0 = null;

        EObject lv_finally_3_0 = null;

        EObject lv_finally_4_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_95);
            lv_block_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==Catch) ) {
                alt226=1;
            }
            else if ( (LA226_0==Finally) ) {
                alt226=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }
            switch (alt226) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_96);
                    lv_catch_2_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==Finally) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCatchBlock = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchBlock=ruleCatchBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;

        EObject lv_block_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Catch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_catchVariable_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;

        EObject lv_block_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Catch,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_catchVariable_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCatchVariable = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchVariable=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchVariable() throws RecognitionException {
        EObject current = null;

        EObject lv_bindingPattern_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject this_BogusTypeRefFragment_3 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;



        	enterRule();

        try {
            {
            int alt228=3;
            alt228 = dfa228.predict(input);
            switch (alt228) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_94);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt227=2;
                    alt227 = dfa227.predict(input);
                    switch (alt227) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getCatchVariableRule());
                              					}
                              					newCompositeNode(grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0());
                              				
                            }
                            pushFollow(FOLLOW_8);
                            this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_BogusTypeRefFragment_3;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchVariable() throws RecognitionException {
        EObject current = null;

        EObject lv_bindingPattern_0_0 = null;

        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepDeclaredTypeRef_2 = null;

        EObject this_BogusTypeRefFragment_3 = null;

        AntlrDatatypeRuleToken lv_name_4_0 = null;



        	enterRule();

        try {
            {
            int alt230=3;
            alt230 = dfa230.predict(input);
            switch (alt230) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_94);
                    lv_name_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt229=2;
                    alt229 = dfa229.predict(input);
                    switch (alt229) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getCatchVariableRule());
                              					}
                              					newCompositeNode(grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0());
                              				
                            }
                            pushFollow(FOLLOW_8);
                            this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_BogusTypeRefFragment_3;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_4_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_4_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFinallyBlock() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFinallyBlock = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFinallyBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFinallyBlock=ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFinallyBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFinallyBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_block_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FinallyBlock() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_block_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDebuggerStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDebuggerStatement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDebuggerStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDebuggerStatement=ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDebuggerStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDebuggerStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getDebuggerStatementAccess().getDebuggerStatementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Debugger,FOLLOW_18); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryExpression=rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ThisLiteral_0 = null;

        EObject this_SuperLiteral_1 = null;

        EObject this_IdentifierRef_2 = null;

        EObject this_JSXFragment_3 = null;

        EObject this_JSXElement_4 = null;

        EObject this_ImportCallExpression_5 = null;

        EObject this_ParameterizedCallExpression_6 = null;

        EObject this_Literal_7 = null;

        EObject this_ArrayLiteral_8 = null;

        EObject this_ObjectLiteral_9 = null;

        EObject this_ParenExpression_10 = null;

        EObject this_AnnotatedExpression_11 = null;

        EObject this_FunctionExpression_12 = null;

        EObject this_AsyncFunctionExpression_13 = null;

        EObject this_N4ClassExpression_14 = null;

        EObject this_TemplateLiteral_15 = null;



        enterRule();
        try { 
        	{
            int alt231=16;
            // REPLACEMENT rulePrimaryExpression.java.replacement START
            try {
                alt231 = dfa231.predict(input);
            } catch (NoViableAltException re) {
            	int as = input.LA(1);
            	if (as==Async) { alt231=3; }
            	else throw re;
            }
            // REPLACEMENT rulePrimaryExpression.java.replacement END
            switch (alt231) {
                case 1 : 
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_3=ruleJSXFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXFragment_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_4=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXElement_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportCallExpression_5=ruleImportCallExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ImportCallExpression_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_6=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedCallExpression_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_7=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Literal_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_8=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayLiteral_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_9=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectLiteral_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_10=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenExpression_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_11=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedExpression_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_12=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionExpression_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_13=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AsyncFunctionExpression_13;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_14=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4ClassExpression_14;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_15=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TemplateLiteral_15;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PrimaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ThisLiteral_0 = null;

        EObject this_SuperLiteral_1 = null;

        EObject this_IdentifierRef_2 = null;

        EObject this_JSXFragment_3 = null;

        EObject this_JSXElement_4 = null;

        EObject this_ImportCallExpression_5 = null;

        EObject this_ParameterizedCallExpression_6 = null;

        EObject this_Literal_7 = null;

        EObject this_ArrayLiteral_8 = null;

        EObject this_ObjectLiteral_9 = null;

        EObject this_ParenExpression_10 = null;

        EObject this_AnnotatedExpression_11 = null;

        EObject this_FunctionExpression_12 = null;

        EObject this_AsyncFunctionExpression_13 = null;

        EObject this_N4ClassExpression_14 = null;

        EObject this_TemplateLiteral_15 = null;



        	enterRule();

        try {
            {
            int alt232=16;
            alt232 = dfa232.predict(input);
            switch (alt232) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_3=ruleJSXFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXFragment_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_4=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXElement_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportCallExpression_5=norm1_ImportCallExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ImportCallExpression_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_6=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedCallExpression_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_7=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Literal_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_8=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayLiteral_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_9=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectLiteral_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_10=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParenExpression_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_11=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedExpression_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_12=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionExpression_12;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_13=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AsyncFunctionExpression_13;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_14=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4ClassExpression_14;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_15=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TemplateLiteral_15;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParenExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParenExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenExpression=ruleParenExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParenExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParenExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_expression_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIdentifierRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIdentifierRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierRef=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIdentifierRef() throws RecognitionException {
        EObject current = null;

        EObject this_VersionRequest_3 = null;



        	enterRule();

        try {
            {
            int alt233=2;
            alt233 = dfa233.predict(input);
            switch (alt233) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIdentifierRefRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getIdentifierRefAccess().getVersionedIdentifierRefAction_1_0(),
                      						current);
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdentifierRefRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_98);
                    ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getIdentifierRefRule());
                      				}
                      				newCompositeNode(grammarAccess.getIdentifierRefAccess().getVersionRequestParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VersionRequest_3=ruleVersionRequest(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VersionRequest_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IdentifierRef() throws RecognitionException {
        EObject current = null;

        EObject this_VersionRequest_3 = null;



        	enterRule();

        try {
            {
            int alt234=2;
            alt234 = dfa234.predict(input);
            switch (alt234) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIdentifierRefRule());
                      					}
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getIdentifierRefAccess().getVersionedIdentifierRefAction_1_0(),
                      						current);
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getIdentifierRefRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_98);
                    norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getIdentifierRefRule());
                      				}
                      				newCompositeNode(grammarAccess.getIdentifierRefAccess().getVersionRequestParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_VersionRequest_3=ruleVersionRequest(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_VersionRequest_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSuperLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSuperLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSuperLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSuperLiteral=ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSuperLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSuperLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisLiteral=ruleThisLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getThisLiteralAccess().getThisLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayLiteral=ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_99); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
              		
            }
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==Comma) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_99);
            	    lv_elements_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( ((LA240_0>=Intersection && LA240_0<=Implements)||(LA240_0>=Promisify && LA240_0<=Abstract)||(LA240_0>=External && LA240_0<=Function)||(LA240_0>=Private && LA240_0<=Delete)||(LA240_0>=Import && LA240_0<=Public)||LA240_0==Static||(LA240_0>=Target && LA240_0<=Await)||LA240_0==Class||(LA240_0>=False && LA240_0<=Super)||LA240_0==Union||(LA240_0>=Yield && LA240_0<=This)||(LA240_0>=From && LA240_0<=Void)||LA240_0==FullStopFullStopFullStop||(LA240_0>=Get && LA240_0<=Set)||LA240_0==PlusSignPlusSign||(LA240_0>=HyphenMinusHyphenMinus && LA240_0<=SolidusEqualsSign)||LA240_0==As||LA240_0==Of||LA240_0==ExclamationMark||LA240_0==LeftParenthesis||LA240_0==PlusSign||LA240_0==HyphenMinus||LA240_0==Solidus||LA240_0==LessThanSign||(LA240_0>=CommercialAt && LA240_0<=LeftSquareBracket)||LA240_0==LeftCurlyBracket||LA240_0==Tilde||LA240_0==RULE_DOUBLE||(LA240_0>=RULE_HEX_INT && LA240_0<=RULE_LEGACY_OCTAL_INT)||LA240_0==RULE_SCIENTIFIC_INT||LA240_0==RULE_IDENTIFIER||LA240_0==RULE_STRING||(LA240_0>=RULE_TEMPLATE_HEAD && LA240_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA240_0==RULE_INT) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_100);
                    lv_elements_3_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop237:
                    do {
                        int alt237=2;
                        alt237 = dfa237.predict(input);
                        switch (alt237) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    loop236:
                    	    do {
                    	        int alt236=2;
                    	        int LA236_0 = input.LA(1);

                    	        if ( (LA236_0==Comma) ) {
                    	            alt236=1;
                    	        }


                    	        switch (alt236) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	      						
                    	    	    }
                    	    	    pushFollow(FOLLOW_101);
                    	    	    lv_elements_5_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	      						
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop236;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_elements_6_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop237;
                        }
                    } while (true);
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==Comma) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", true, ",");
                              						
                            }

                            }


                            }
                            loop238:
                            do {
                                int alt238=2;
                                int LA238_0 = input.LA(1);

                                if ( (LA238_0==Comma) ) {
                                    alt238=1;
                                }


                                switch (alt238) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    lv_elements_8_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop238;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_102); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
              		
            }
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==Comma) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_102);
            	    lv_elements_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( ((LA246_0>=Intersection && LA246_0<=Implements)||(LA246_0>=Promisify && LA246_0<=Abstract)||(LA246_0>=External && LA246_0<=Function)||(LA246_0>=Private && LA246_0<=Delete)||(LA246_0>=Import && LA246_0<=Public)||LA246_0==Static||(LA246_0>=Target && LA246_0<=Await)||LA246_0==Class||(LA246_0>=False && LA246_0<=Super)||LA246_0==Union||(LA246_0>=Yield && LA246_0<=This)||(LA246_0>=From && LA246_0<=Void)||LA246_0==FullStopFullStopFullStop||(LA246_0>=Get && LA246_0<=Set)||LA246_0==PlusSignPlusSign||(LA246_0>=HyphenMinusHyphenMinus && LA246_0<=SolidusEqualsSign)||LA246_0==As||LA246_0==Of||LA246_0==ExclamationMark||LA246_0==LeftParenthesis||LA246_0==PlusSign||LA246_0==HyphenMinus||LA246_0==Solidus||LA246_0==LessThanSign||(LA246_0>=CommercialAt && LA246_0<=LeftSquareBracket)||LA246_0==LeftCurlyBracket||LA246_0==Tilde||LA246_0==RULE_DOUBLE||(LA246_0>=RULE_HEX_INT && LA246_0<=RULE_LEGACY_OCTAL_INT)||LA246_0==RULE_SCIENTIFIC_INT||LA246_0==RULE_IDENTIFIER||LA246_0==RULE_STRING||(LA246_0>=RULE_TEMPLATE_HEAD && LA246_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA246_0==RULE_INT) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_100);
                    lv_elements_3_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop243:
                    do {
                        int alt243=2;
                        alt243 = dfa243.predict(input);
                        switch (alt243) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_103); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    loop242:
                    	    do {
                    	        int alt242=2;
                    	        int LA242_0 = input.LA(1);

                    	        if ( (LA242_0==Comma) ) {
                    	            alt242=1;
                    	        }


                    	        switch (alt242) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	      						
                    	    	    }
                    	    	    pushFollow(FOLLOW_103);
                    	    	    lv_elements_5_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	      						
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop242;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_elements_6_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop243;
                        }
                    } while (true);
                    int alt245=2;
                    int LA245_0 = input.LA(1);

                    if ( (LA245_0==Comma) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", true, ",");
                              						
                            }

                            }


                            }
                            loop244:
                            do {
                                int alt244=2;
                                int LA244_0 = input.LA(1);

                                if ( (LA244_0==Comma) ) {
                                    alt244=1;
                                }


                                switch (alt244) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    lv_elements_8_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop244;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayPadding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayPadding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayPaddingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayPadding=ruleArrayPadding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayPadding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayPadding() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayPaddingAccess().getArrayPaddingAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayElement=ruleArrayElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayElement() throws RecognitionException {
        EObject current = null;

        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
              			
            }

            }
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==FullStopFullStopFullStop) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayElement() throws RecognitionException {
        EObject current = null;

        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
              			
            }

            }
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==FullStopFullStopFullStop) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleObjectLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectLiteral=ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;

        EObject lv_propertyAssignments_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( ((LA251_0>=Intersection && LA251_0<=With)||LA251_0==FullStopFullStopFullStop||(LA251_0>=For && LA251_0<=Var)||(LA251_0>=As && LA251_0<=Of)||LA251_0==LeftParenthesis||LA251_0==Asterisk||LA251_0==LessThanSign||(LA251_0>=QuestionMark && LA251_0<=LeftSquareBracket)||LA251_0==LeftCurlyBracket||LA251_0==Tilde||LA251_0==RULE_DOUBLE||LA251_0==RULE_HEX_INT||LA251_0==RULE_OCTAL_INT||LA251_0==RULE_SCIENTIFIC_INT||LA251_0==RULE_IDENTIFIER||LA251_0==RULE_STRING||LA251_0==RULE_INT) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_propertyAssignments_2_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop249:
                    do {
                        int alt249=2;
                        int LA249_0 = input.LA(1);

                        if ( (LA249_0==Comma) ) {
                            int LA249_1 = input.LA(2);

                            if ( ((LA249_1>=Intersection && LA249_1<=With)||LA249_1==FullStopFullStopFullStop||(LA249_1>=For && LA249_1<=Var)||(LA249_1>=As && LA249_1<=Of)||LA249_1==LeftParenthesis||LA249_1==Asterisk||LA249_1==LessThanSign||(LA249_1>=QuestionMark && LA249_1<=LeftSquareBracket)||LA249_1==LeftCurlyBracket||LA249_1==Tilde||LA249_1==RULE_DOUBLE||LA249_1==RULE_HEX_INT||LA249_1==RULE_OCTAL_INT||LA249_1==RULE_SCIENTIFIC_INT||LA249_1==RULE_IDENTIFIER||LA249_1==RULE_STRING||LA249_1==RULE_INT) ) {
                                alt249=1;
                            }


                        }


                        switch (alt249) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_105); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_propertyAssignments_4_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop249;
                        }
                    } while (true);
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==Comma) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;

        EObject lv_propertyAssignments_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( ((LA254_0>=Intersection && LA254_0<=With)||LA254_0==FullStopFullStopFullStop||(LA254_0>=For && LA254_0<=Var)||(LA254_0>=As && LA254_0<=Of)||LA254_0==LeftParenthesis||LA254_0==Asterisk||LA254_0==LessThanSign||(LA254_0>=QuestionMark && LA254_0<=LeftSquareBracket)||LA254_0==LeftCurlyBracket||LA254_0==Tilde||LA254_0==RULE_DOUBLE||LA254_0==RULE_HEX_INT||LA254_0==RULE_OCTAL_INT||LA254_0==RULE_SCIENTIFIC_INT||LA254_0==RULE_IDENTIFIER||LA254_0==RULE_STRING||LA254_0==RULE_INT) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_propertyAssignments_2_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop252:
                    do {
                        int alt252=2;
                        int LA252_0 = input.LA(1);

                        if ( (LA252_0==Comma) ) {
                            int LA252_1 = input.LA(2);

                            if ( ((LA252_1>=Intersection && LA252_1<=With)||LA252_1==FullStopFullStopFullStop||(LA252_1>=For && LA252_1<=Var)||(LA252_1>=As && LA252_1<=Of)||LA252_1==LeftParenthesis||LA252_1==Asterisk||LA252_1==LessThanSign||(LA252_1>=QuestionMark && LA252_1<=LeftSquareBracket)||LA252_1==LeftCurlyBracket||LA252_1==Tilde||LA252_1==RULE_DOUBLE||LA252_1==RULE_HEX_INT||LA252_1==RULE_OCTAL_INT||LA252_1==RULE_SCIENTIFIC_INT||LA252_1==RULE_IDENTIFIER||LA252_1==RULE_STRING||LA252_1==RULE_INT) ) {
                                alt252=1;
                            }


                        }


                        switch (alt252) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_105); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_propertyAssignments_4_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop252;
                        }
                    } while (true);
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==Comma) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_23); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                              				
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignment() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyAssignment = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignment=rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignment() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedPropertyAssignment_0 = null;

        EObject this_PropertyNameValuePair_1 = null;

        EObject this_PropertyGetterDeclaration_2 = null;

        EObject this_PropertySetterDeclaration_3 = null;

        EObject this_PropertyMethodDeclaration_4 = null;

        EObject this_PropertyNameValuePairSingleName_5 = null;

        EObject this_PropertySpread_6 = null;



        	enterRule();

        try {
            {
            int alt255=7;
            alt255 = dfa255.predict(input);
            switch (alt255) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySpread_6=rulePropertySpread();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PropertySpread_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyAssignment() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedPropertyAssignment_0 = null;

        EObject this_PropertyNameValuePair_1 = null;

        EObject this_PropertyGetterDeclaration_2 = null;

        EObject this_PropertySetterDeclaration_3 = null;

        EObject this_PropertyMethodDeclaration_4 = null;

        EObject this_PropertyNameValuePairSingleName_5 = null;

        EObject this_PropertySpread_6 = null;



        	enterRule();

        try {
            {
            int alt256=7;
            alt256 = dfa256.predict(input);
            switch (alt256) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySpread_6=norm1_PropertySpread();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_PropertySpread_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedPropertyAssignment = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedPropertyAssignment=ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedPropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_29=null;
        Token otherlv_32=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;

        EObject lv_declaredTypeRef_2_0 = null;

        EObject lv_declaredName_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject this_GetterHeader_7 = null;

        EObject lv_body_8_0 = null;

        EObject lv_declaredName_11_0 = null;

        EObject lv_fpar_14_0 = null;

        EObject lv_body_16_0 = null;

        EObject this_TypeVariables_18 = null;

        EObject lv_returnTypeRef_19_0 = null;

        EObject lv_declaredName_21_0 = null;

        EObject this_MethodParamsAndBody_22 = null;

        EObject lv_declaredName_23_0 = null;

        EObject this_MethodParamsAndBody_24 = null;

        EObject lv_declaredTypeRef_27_0 = null;

        EObject lv_identifierRef_28_0 = null;

        EObject lv_expression_30_0 = null;

        EObject lv_expression_33_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_106);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt265=6;
            alt265 = dfa265.predict(input);
            switch (alt265) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                      							
                    }

                    }
                    int alt257=2;
                    alt257 = dfa257.predict(input);
                    switch (alt257) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_107);
                            lv_declaredTypeRef_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRef",
                              										lv_declaredTypeRef_2_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                      								
                    }
                    pushFollow(FOLLOW_94);
                    lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                      							
                    }

                    }

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_13);
                    this_GetterHeader_7=ruleGetterHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                      							
                    }

                    }

                    otherlv_10=(Token)match(input,Set,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                      								
                    }
                    pushFollow(FOLLOW_108);
                    lv_declaredName_11_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }


                    }


                    }
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==QuestionMark) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                              						
                            }

                            }


                            }
                            break;

                    }

                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                      						
                    }
                    pushFollow(FOLLOW_72);
                    lv_fpar_14_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                      							
                    }

                    }
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==LessThanSign) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_109);
                            this_TypeVariables_18=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt260=2;
                    alt260 = dfa260.predict(input);
                    switch (alt260) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0());
                              								
                            }
                            pushFollow(FOLLOW_109);
                            lv_returnTypeRef_19_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"returnTypeRef",
                              										lv_returnTypeRef_19_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            break;

                    }
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==Asterisk) ) {
                        alt261=1;
                    }
                    else if ( ((LA261_0>=Intersection && LA261_0<=With)||(LA261_0>=For && LA261_0<=Var)||(LA261_0>=As && LA261_0<=Of)||LA261_0==LeftSquareBracket||LA261_0==RULE_DOUBLE||LA261_0==RULE_HEX_INT||LA261_0==RULE_OCTAL_INT||LA261_0==RULE_SCIENTIFIC_INT||LA261_0==RULE_IDENTIFIER||LA261_0==RULE_STRING||LA261_0==RULE_INT) ) {
                        alt261=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 0, input);

                        throw nvae;
                    }
                    switch (alt261) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_107); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                              										
                            }
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                              										
                            }

                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                              										
                            }
                            pushFollow(FOLLOW_39);
                            lv_declaredName_21_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                              									
                            }
                            pushFollow(FOLLOW_110);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                              										
                            }
                            pushFollow(FOLLOW_42);
                            lv_declaredName_23_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                              									
                            }
                            pushFollow(FOLLOW_110);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==Semicolon) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                      					
                    }

                    }
                    int alt263=2;
                    alt263 = dfa263.predict(input);
                    switch (alt263) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_4_1_0());
                              						
                            }
                            pushFollow(FOLLOW_8);
                            lv_declaredTypeRef_27_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRef",
                              								lv_declaredTypeRef_27_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefIdentifierRefParserRuleCall_1_4_2_0());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    lv_identifierRef_28_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"identifierRef",
                      								lv_identifierRef_28_0,
                      								"org.eclipse.n4js.N4JS.IdentifierRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==EqualsSign) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            {
                            otherlv_29=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_29, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0());
                              					
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0());
                              							
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_30_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								set(
                              									current,
                              									"expression",
                              									lv_expression_30_0,
                              									"org.eclipse.n4js.N4JS.AssignmentExpression");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySpreadAnnotationListAction_1_5_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_32=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_32, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_5_2_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_33_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_33_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_29=null;
        Token otherlv_32=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;

        EObject lv_declaredTypeRef_2_0 = null;

        EObject lv_declaredName_3_0 = null;

        EObject lv_expression_5_0 = null;

        EObject this_GetterHeader_7 = null;

        EObject lv_body_8_0 = null;

        EObject lv_declaredName_11_0 = null;

        EObject lv_fpar_14_0 = null;

        EObject lv_body_16_0 = null;

        EObject this_TypeVariables_18 = null;

        EObject lv_returnTypeRef_19_0 = null;

        EObject lv_declaredName_21_0 = null;

        EObject this_MethodParamsAndBody_22 = null;

        EObject lv_declaredName_23_0 = null;

        EObject this_MethodParamsAndBody_24 = null;

        EObject lv_declaredTypeRef_27_0 = null;

        EObject lv_identifierRef_28_0 = null;

        EObject lv_expression_30_0 = null;

        EObject lv_expression_33_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_106);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt274=6;
            alt274 = dfa274.predict(input);
            switch (alt274) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                      							
                    }

                    }
                    int alt266=2;
                    alt266 = dfa266.predict(input);
                    switch (alt266) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_107);
                            lv_declaredTypeRef_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRef",
                              										lv_declaredTypeRef_2_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                      								
                    }
                    pushFollow(FOLLOW_94);
                    lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                      							
                    }

                    }

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_13);
                    this_GetterHeader_7=norm1_GetterHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                      							
                    }

                    }

                    otherlv_10=(Token)match(input,Set,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                      								
                    }
                    pushFollow(FOLLOW_108);
                    lv_declaredName_11_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }


                    }


                    }
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==QuestionMark) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                              						
                            }

                            }


                            }
                            break;

                    }

                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                      						
                    }
                    pushFollow(FOLLOW_72);
                    lv_fpar_14_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                      							
                    }

                    }
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==LessThanSign) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1());
                              							
                            }
                            pushFollow(FOLLOW_109);
                            this_TypeVariables_18=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt269=2;
                    alt269 = dfa269.predict(input);
                    switch (alt269) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0());
                              								
                            }
                            pushFollow(FOLLOW_109);
                            lv_returnTypeRef_19_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"returnTypeRef",
                              										lv_returnTypeRef_19_0,
                              										"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }
                            break;

                    }
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==Asterisk) ) {
                        alt270=1;
                    }
                    else if ( ((LA270_0>=Intersection && LA270_0<=With)||(LA270_0>=For && LA270_0<=Var)||(LA270_0>=As && LA270_0<=Of)||LA270_0==LeftSquareBracket||LA270_0==RULE_DOUBLE||LA270_0==RULE_HEX_INT||LA270_0==RULE_OCTAL_INT||LA270_0==RULE_SCIENTIFIC_INT||LA270_0==RULE_IDENTIFIER||LA270_0==RULE_STRING||LA270_0==RULE_INT) ) {
                        alt270=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 270, 0, input);

                        throw nvae;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_107); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                              										
                            }
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                              										
                            }

                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                              										
                            }
                            pushFollow(FOLLOW_39);
                            lv_declaredName_21_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                              									
                            }
                            pushFollow(FOLLOW_110);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                              										
                            }
                            pushFollow(FOLLOW_42);
                            lv_declaredName_23_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                              									
                            }
                            pushFollow(FOLLOW_110);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==Semicolon) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                      					
                    }

                    }
                    int alt272=2;
                    alt272 = dfa272.predict(input);
                    switch (alt272) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_4_1_0());
                              						
                            }
                            pushFollow(FOLLOW_8);
                            lv_declaredTypeRef_27_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRef",
                              								lv_declaredTypeRef_27_0,
                              								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefIdentifierRefParserRuleCall_1_4_2_0());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    lv_identifierRef_28_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"identifierRef",
                      								lv_identifierRef_28_0,
                      								"org.eclipse.n4js.N4JS.IdentifierRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt273=2;
                    int LA273_0 = input.LA(1);

                    if ( (LA273_0==EqualsSign) ) {
                        alt273=1;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            otherlv_29=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_29, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0());
                              					
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0());
                              							
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_30_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								set(
                              									current,
                              									"expression",
                              									lv_expression_30_0,
                              									"org.eclipse.n4js.N4JS.AssignmentExpression");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySpreadAnnotationListAction_1_5_0(),
                      							current);
                      					
                    }

                    }

                    otherlv_32=(Token)match(input,FullStopFullStopFullStop,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_32, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_5_2_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_33_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_33_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyMethodDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyMethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyMethodDeclaration=rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyMethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_generator_3_0=null;
        Token otherlv_8=null;
        EObject this_TypeVariables_1 = null;

        EObject lv_returnTypeRef_2_0 = null;

        EObject lv_declaredName_4_0 = null;

        EObject this_MethodParamsAndBody_5 = null;

        EObject lv_declaredName_6_0 = null;

        EObject this_MethodParamsAndBody_7 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==LessThanSign) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1());
                      					
                    }
                    pushFollow(FOLLOW_109);
                    this_TypeVariables_1=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt276=2;
            alt276 = dfa276.predict(input);
            switch (alt276) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0());
                      						
                    }
                    pushFollow(FOLLOW_109);
                    lv_returnTypeRef_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"returnTypeRef",
                      								lv_returnTypeRef_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==Asterisk) ) {
                alt277=1;
            }
            else if ( ((LA277_0>=Intersection && LA277_0<=With)||(LA277_0>=For && LA277_0<=Var)||(LA277_0>=As && LA277_0<=Of)||LA277_0==LeftSquareBracket||LA277_0==RULE_DOUBLE||LA277_0==RULE_HEX_INT||LA277_0==RULE_OCTAL_INT||LA277_0==RULE_SCIENTIFIC_INT||LA277_0==RULE_IDENTIFIER||LA277_0==RULE_STRING||LA277_0==RULE_INT) ) {
                alt277=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;
            }
            switch (alt277) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_3_0=(Token)match(input,Asterisk,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									newLeafNode(lv_generator_3_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                      								
                    }
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                      								
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0());
                      								
                    }
                    pushFollow(FOLLOW_39);
                    lv_declaredName_4_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_4_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2());
                      							
                    }
                    pushFollow(FOLLOW_110);
                    this_MethodParamsAndBody_5=norm1_MethodParamsAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsAndBody_5;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0());
                      								
                    }
                    pushFollow(FOLLOW_42);
                    lv_declaredName_6_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_6_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1());
                      							
                    }
                    pushFollow(FOLLOW_110);
                    this_MethodParamsAndBody_7=ruleMethodParamsAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsAndBody_7;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==Semicolon) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_generator_3_0=null;
        Token otherlv_8=null;
        EObject this_TypeVariables_1 = null;

        EObject lv_returnTypeRef_2_0 = null;

        EObject lv_declaredName_4_0 = null;

        EObject this_MethodParamsAndBody_5 = null;

        EObject lv_declaredName_6_0 = null;

        EObject this_MethodParamsAndBody_7 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==LessThanSign) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1());
                      					
                    }
                    pushFollow(FOLLOW_109);
                    this_TypeVariables_1=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt280=2;
            alt280 = dfa280.predict(input);
            switch (alt280) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0());
                      						
                    }
                    pushFollow(FOLLOW_109);
                    lv_returnTypeRef_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"returnTypeRef",
                      								lv_returnTypeRef_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==Asterisk) ) {
                alt281=1;
            }
            else if ( ((LA281_0>=Intersection && LA281_0<=With)||(LA281_0>=For && LA281_0<=Var)||(LA281_0>=As && LA281_0<=Of)||LA281_0==LeftSquareBracket||LA281_0==RULE_DOUBLE||LA281_0==RULE_HEX_INT||LA281_0==RULE_OCTAL_INT||LA281_0==RULE_SCIENTIFIC_INT||LA281_0==RULE_IDENTIFIER||LA281_0==RULE_STRING||LA281_0==RULE_INT) ) {
                alt281=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);

                throw nvae;
            }
            switch (alt281) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_3_0=(Token)match(input,Asterisk,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									newLeafNode(lv_generator_3_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                      								
                    }
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                      								
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0());
                      								
                    }
                    pushFollow(FOLLOW_39);
                    lv_declaredName_4_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_4_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2());
                      							
                    }
                    pushFollow(FOLLOW_110);
                    this_MethodParamsAndBody_5=norm1_MethodParamsAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsAndBody_5;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0());
                      								
                    }
                    pushFollow(FOLLOW_42);
                    lv_declaredName_6_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_6_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1());
                      							
                    }
                    pushFollow(FOLLOW_110);
                    this_MethodParamsAndBody_7=ruleMethodParamsAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsAndBody_7;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==Semicolon) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyNameValuePair = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePair=rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePair; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;

        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRef_1_0 = null;

        EObject lv_declaredName_2_0 = null;

        EObject lv_expression_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
              					
            }

            }
            int alt283=2;
            alt283 = dfa283.predict(input);
            switch (alt283) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_107);
                    lv_declaredTypeRef_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRef",
                      								lv_declaredTypeRef_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_111);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==QuestionMark) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_94); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", true, "?");
                      						
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePair() throws RecognitionException {
        EObject current = null;

        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRef_1_0 = null;

        EObject lv_declaredName_2_0 = null;

        EObject lv_expression_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
              					
            }

            }
            int alt285=2;
            alt285 = dfa285.predict(input);
            switch (alt285) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_107);
                    lv_declaredTypeRef_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRef",
                      								lv_declaredTypeRef_1_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRefWithModifiers");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_111);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==QuestionMark) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_94); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                      						
                    }
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", true, "?");
                      						
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyNameValuePairSingleName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePairSingleName=rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePairSingleName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject lv_declaredTypeRef_0_0 = null;

        EObject lv_identifierRef_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            int alt287=2;
            alt287 = dfa287.predict(input);
            switch (alt287) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefTypeRefParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_8);
                    lv_declaredTypeRef_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRef",
                      						lv_declaredTypeRef_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefIdentifierRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_identifierRef_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"identifierRef",
              						lv_identifierRef_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==EqualsSign) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignmentExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject lv_declaredTypeRef_0_0 = null;

        EObject lv_identifierRef_1_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            int alt289=2;
            alt289 = dfa289.predict(input);
            switch (alt289) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefTypeRefParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_8);
                    lv_declaredTypeRef_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRef",
                      						lv_declaredTypeRef_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefIdentifierRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_63);
            lv_identifierRef_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"identifierRef",
              						lv_identifierRef_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==EqualsSign) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignmentExpressionParserRuleCall_2_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyGetterDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyGetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyGetterDeclaration=rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyGetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_GetterHeader_1 = null;

        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
              				
            }
            pushFollow(FOLLOW_13);
            this_GetterHeader_1=ruleGetterHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_GetterHeader_1 = null;

        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
              				
            }
            pushFollow(FOLLOW_13);
            this_GetterHeader_1=norm1_GetterHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertySetterDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySetterDeclaration=rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;

        EObject lv_fpar_5_0 = null;

        EObject lv_body_7_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_107); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_108);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==QuestionMark) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_fpar_5_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;

        EObject lv_fpar_5_0 = null;

        EObject lv_body_7_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_107); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_108);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==QuestionMark) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_fpar_5_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySpread() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertySpread = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySpreadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySpread=rulePropertySpread();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySpread; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySpread() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySpreadAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySpreadRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySpread() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPropertySpreadAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySpreadRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedCallExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedCallExpression=ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;

        Token lv_optionalChaining_2_0=null;
        EObject this_ConcreteTypeArguments_0 = null;

        EObject lv_target_1_0 = null;

        EObject this_ArgumentsWithParentheses_3 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_8);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_112);
            lv_target_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==QuestionMarkFullStop) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optionalChaining_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", true, "?.");
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_3=ruleArgumentsWithParentheses(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ArgumentsWithParentheses_3;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedCallExpression() throws RecognitionException {
        EObject current = null;

        Token lv_optionalChaining_2_0=null;
        EObject this_ConcreteTypeArguments_0 = null;

        EObject lv_target_1_0 = null;

        EObject this_ArgumentsWithParentheses_3 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_8);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_112);
            lv_target_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==QuestionMarkFullStop) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optionalChaining_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", true, "?.");
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_3=norm1_ArgumentsWithParentheses(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ArgumentsWithParentheses_3;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConcreteTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getConcreteTypeArgumentsAccess().getLessThanSignKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_113);
            lv_typeArgs_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop295:
            do {
                int alt295=2;
                int LA295_0 = input.LA(1);

                if ( (LA295_0==Comma) ) {
                    alt295=1;
                }


                switch (alt295) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getConcreteTypeArgumentsAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeRefParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_113);
            	    lv_typeArgs_3_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop295;
                }
            } while (true);

            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getConcreteTypeArgumentsAccess().getGreaterThanSignKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportCallExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleImportCallExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportCallExpression=ruleImportCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportCallExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_ArgumentsWithParentheses_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_112); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_1=ruleArgumentsWithParentheses(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ArgumentsWithParentheses_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ImportCallExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_ArgumentsWithParentheses_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_112); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_1=norm1_ArgumentsWithParentheses(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ArgumentsWithParentheses_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLeftHandSideExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLeftHandSideExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLeftHandSideExpression=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLeftHandSideExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;

        Token lv_optionalChaining_2_0=null;
        Token lv_optionalChaining_5_0=null;
        Token lv_optionalChaining_12_0=null;
        EObject this_MemberExpression_0 = null;

        EObject this_ArgumentsWithParentheses_3 = null;

        EObject this_ArgumentsWithParentheses_6 = null;

        EObject this_IndexedAccessExpressionTail_8 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_10 = null;

        EObject lv_template_13_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_114);
            this_MemberExpression_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==QuestionMarkFullStop||LA300_0==LeftParenthesis) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                      				
                    }

                    }
                    int alt296=2;
                    int LA296_0 = input.LA(1);

                    if ( (LA296_0==QuestionMarkFullStop) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            {
                            lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_optionalChaining_2_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                              						}
                              						setWithLastConsumed(current, "optionalChaining", true, "?.");
                              					
                            }

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_115);
                    this_ArgumentsWithParentheses_3=ruleArgumentsWithParentheses(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArgumentsWithParentheses_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop299:
                    do {
                        int alt299=5;
                        int LA299_0 = input.LA(1);

                        if ( (LA299_0==QuestionMarkFullStop) ) {
                            int LA299_2 = input.LA(2);

                            if ( (LA299_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred172_InternalN4JSParser())) {
                                alt299=4;
                            }
                            else if ( (LA299_2==RULE_TEMPLATE_HEAD) && (synpred172_InternalN4JSParser())) {
                                alt299=4;
                            }
                            else if ( (LA299_2==LeftParenthesis) ) {
                                alt299=1;
                            }
                            else if ( ((LA299_2>=Intersection && LA299_2<=With)||(LA299_2>=For && LA299_2<=Var)||(LA299_2>=As && LA299_2<=Of)||LA299_2==LessThanSign||LA299_2==RULE_IDENTIFIER) ) {
                                alt299=3;
                            }
                            else if ( (LA299_2==LeftSquareBracket) ) {
                                alt299=2;
                            }


                        }
                        else if ( (LA299_0==LeftParenthesis) ) {
                            alt299=1;
                        }
                        else if ( (LA299_0==LeftSquareBracket) ) {
                            alt299=2;
                        }
                        else if ( (LA299_0==FullStop) ) {
                            alt299=3;
                        }
                        else if ( (LA299_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred172_InternalN4JSParser())) {
                            alt299=4;
                        }
                        else if ( (LA299_0==RULE_TEMPLATE_HEAD) && (synpred172_InternalN4JSParser())) {
                            alt299=4;
                        }


                        switch (alt299) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_3_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    int alt297=2;
                    	    int LA297_0 = input.LA(1);

                    	    if ( (LA297_0==QuestionMarkFullStop) ) {
                    	        alt297=1;
                    	    }
                    	    switch (alt297) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_5_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              								newLeafNode(lv_optionalChaining_5_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	              							
                    	            }
                    	            if ( state.backtracking==0 ) {

                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	              							
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_ArgumentsWithParentheses_6=ruleArgumentsWithParentheses(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ArgumentsWithParentheses_6;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_1_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_IndexedAccessExpressionTail_8=ruleIndexedAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_IndexedAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_2_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_ParameterizedPropertyAccessExpressionTail_10=ruleParameterizedPropertyAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ParameterizedPropertyAccessExpressionTail_10;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_0_0(),
                    	      									current);
                    	      							
                    	    }

                    	    }
                    	    int alt298=2;
                    	    int LA298_0 = input.LA(1);

                    	    if ( (LA298_0==QuestionMarkFullStop) ) {
                    	        alt298=1;
                    	    }
                    	    switch (alt298) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_12_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              									newLeafNode(lv_optionalChaining_12_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	              								
                    	            }
                    	            if ( state.backtracking==0 ) {

                    	              									if (current==null) {
                    	              										current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              									}
                    	              									setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	              								
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    lv_template_13_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_13_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop299;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LeftHandSideExpression() throws RecognitionException {
        EObject current = null;

        Token lv_optionalChaining_2_0=null;
        Token lv_optionalChaining_5_0=null;
        Token lv_optionalChaining_12_0=null;
        EObject this_MemberExpression_0 = null;

        EObject this_ArgumentsWithParentheses_3 = null;

        EObject this_ArgumentsWithParentheses_6 = null;

        EObject this_IndexedAccessExpressionTail_8 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_10 = null;

        EObject lv_template_13_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_114);
            this_MemberExpression_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( (LA305_0==QuestionMarkFullStop||LA305_0==LeftParenthesis) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                      				
                    }

                    }
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==QuestionMarkFullStop) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            {
                            lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_optionalChaining_2_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                              						}
                              						setWithLastConsumed(current, "optionalChaining", true, "?.");
                              					
                            }

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2());
                      			
                    }
                    pushFollow(FOLLOW_115);
                    this_ArgumentsWithParentheses_3=norm1_ArgumentsWithParentheses(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArgumentsWithParentheses_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop304:
                    do {
                        int alt304=5;
                        int LA304_0 = input.LA(1);

                        if ( (LA304_0==QuestionMarkFullStop) ) {
                            int LA304_2 = input.LA(2);

                            if ( (LA304_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred173_InternalN4JSParser())) {
                                alt304=4;
                            }
                            else if ( (LA304_2==RULE_TEMPLATE_HEAD) && (synpred173_InternalN4JSParser())) {
                                alt304=4;
                            }
                            else if ( (LA304_2==LeftParenthesis) ) {
                                alt304=1;
                            }
                            else if ( (LA304_2==LeftSquareBracket) ) {
                                alt304=2;
                            }
                            else if ( ((LA304_2>=Intersection && LA304_2<=With)||(LA304_2>=For && LA304_2<=Var)||(LA304_2>=As && LA304_2<=Of)||LA304_2==LessThanSign||LA304_2==RULE_IDENTIFIER) ) {
                                alt304=3;
                            }


                        }
                        else if ( (LA304_0==LeftParenthesis) ) {
                            alt304=1;
                        }
                        else if ( (LA304_0==LeftSquareBracket) ) {
                            alt304=2;
                        }
                        else if ( (LA304_0==FullStop) ) {
                            alt304=3;
                        }
                        else if ( (LA304_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred173_InternalN4JSParser())) {
                            alt304=4;
                        }
                        else if ( (LA304_0==RULE_TEMPLATE_HEAD) && (synpred173_InternalN4JSParser())) {
                            alt304=4;
                        }


                        switch (alt304) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_3_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    int alt302=2;
                    	    int LA302_0 = input.LA(1);

                    	    if ( (LA302_0==QuestionMarkFullStop) ) {
                    	        alt302=1;
                    	    }
                    	    switch (alt302) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_5_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_112); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              								newLeafNode(lv_optionalChaining_5_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	              							
                    	            }
                    	            if ( state.backtracking==0 ) {

                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	              							
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_ArgumentsWithParentheses_6=norm1_ArgumentsWithParentheses(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ArgumentsWithParentheses_6;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_1_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_IndexedAccessExpressionTail_8=norm1_IndexedAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_IndexedAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_2_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_ParameterizedPropertyAccessExpressionTail_10=norm1_ParameterizedPropertyAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ParameterizedPropertyAccessExpressionTail_10;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_0_0(),
                    	      									current);
                    	      							
                    	    }

                    	    }
                    	    int alt303=2;
                    	    int LA303_0 = input.LA(1);

                    	    if ( (LA303_0==QuestionMarkFullStop) ) {
                    	        alt303=1;
                    	    }
                    	    switch (alt303) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_12_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              									newLeafNode(lv_optionalChaining_12_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	              								
                    	            }
                    	            if ( state.backtracking==0 ) {

                    	              									if (current==null) {
                    	              										current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              									}
                    	              									setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	              								
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    lv_template_13_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_13_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop304;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_117); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
              		
            }
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( ((LA306_0>=Intersection && LA306_0<=Implements)||(LA306_0>=Promisify && LA306_0<=Abstract)||(LA306_0>=External && LA306_0<=Function)||(LA306_0>=Private && LA306_0<=Delete)||(LA306_0>=Import && LA306_0<=Public)||LA306_0==Static||(LA306_0>=Target && LA306_0<=Await)||LA306_0==Class||(LA306_0>=False && LA306_0<=Super)||LA306_0==Union||(LA306_0>=Yield && LA306_0<=This)||(LA306_0>=From && LA306_0<=Void)||LA306_0==FullStopFullStopFullStop||(LA306_0>=Get && LA306_0<=Set)||LA306_0==PlusSignPlusSign||(LA306_0>=HyphenMinusHyphenMinus && LA306_0<=SolidusEqualsSign)||LA306_0==As||LA306_0==Of||LA306_0==ExclamationMark||LA306_0==LeftParenthesis||LA306_0==PlusSign||LA306_0==HyphenMinus||LA306_0==Solidus||LA306_0==LessThanSign||(LA306_0>=CommercialAt && LA306_0<=LeftSquareBracket)||LA306_0==LeftCurlyBracket||LA306_0==Tilde||LA306_0==RULE_DOUBLE||(LA306_0>=RULE_HEX_INT && LA306_0<=RULE_LEGACY_OCTAL_INT)||LA306_0==RULE_SCIENTIFIC_INT||LA306_0==RULE_IDENTIFIER||LA306_0==RULE_STRING||(LA306_0>=RULE_TEMPLATE_HEAD && LA306_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA306_0==RULE_INT) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_72);
                    this_Arguments_1=ruleArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_118); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
              		
            }
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( ((LA307_0>=Intersection && LA307_0<=Implements)||(LA307_0>=Promisify && LA307_0<=Abstract)||(LA307_0>=External && LA307_0<=Function)||(LA307_0>=Private && LA307_0<=Delete)||(LA307_0>=Import && LA307_0<=Public)||LA307_0==Static||(LA307_0>=Target && LA307_0<=Await)||LA307_0==Class||(LA307_0>=False && LA307_0<=Super)||LA307_0==Union||(LA307_0>=Yield && LA307_0<=This)||(LA307_0>=From && LA307_0<=Void)||LA307_0==FullStopFullStopFullStop||(LA307_0>=Get && LA307_0<=Set)||LA307_0==PlusSignPlusSign||(LA307_0>=HyphenMinusHyphenMinus && LA307_0<=SolidusEqualsSign)||LA307_0==As||LA307_0==Of||LA307_0==ExclamationMark||LA307_0==LeftParenthesis||LA307_0==PlusSign||LA307_0==HyphenMinus||LA307_0==Solidus||LA307_0==LessThanSign||(LA307_0>=CommercialAt && LA307_0<=LeftSquareBracket)||LA307_0==LeftCurlyBracket||LA307_0==Tilde||LA307_0==RULE_DOUBLE||(LA307_0>=RULE_HEX_INT && LA307_0<=RULE_LEGACY_OCTAL_INT)||LA307_0==RULE_SCIENTIFIC_INT||LA307_0==RULE_IDENTIFIER||LA307_0==RULE_STRING||(LA307_0>=RULE_TEMPLATE_HEAD && LA307_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA307_0==RULE_INT) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_72);
                    this_Arguments_1=norm1_Arguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;

        EObject lv_arguments_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_30);
            lv_arguments_0_0=ruleArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop308:
            do {
                int alt308=2;
                int LA308_0 = input.LA(1);

                if ( (LA308_0==Comma) ) {
                    alt308=1;
                }


                switch (alt308) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_119); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_30);
            	    lv_arguments_2_0=ruleArgument();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop308;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Arguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;

        EObject lv_arguments_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_30);
            lv_arguments_0_0=norm1_Argument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop309:
            do {
                int alt309=2;
                int LA309_0 = input.LA(1);

                if ( (LA309_0==Comma) ) {
                    alt309=1;
                }


                switch (alt309) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_120); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_30);
            	    lv_arguments_2_0=norm1_Argument();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop309;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArgument=ruleArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgument() throws RecognitionException {
        EObject current = null;

        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==FullStopFullStopFullStop) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Argument() throws RecognitionException {
        EObject current = null;

        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==FullStopFullStopFullStop) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMemberExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMemberExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMemberExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMemberExpression=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMemberExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMemberExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        Token lv_optionalChaining_16_0=null;
        Token lv_optionalChaining_24_0=null;
        EObject lv_callee_6_0 = null;

        EObject this_ConcreteTypeArguments_7 = null;

        EObject this_Arguments_9 = null;

        EObject this_IndexedAccessExpressionTail_12 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;

        EObject lv_template_17_0 = null;

        EObject this_PrimaryExpression_18 = null;

        EObject this_IndexedAccessExpressionTail_20 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_22 = null;

        EObject lv_template_25_0 = null;



        	enterRule();

        try {
            {
            int alt319=3;
            alt319 = dfa319.predict(input);
            switch (alt319) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_1=(Token)match(input,New,FOLLOW_121); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                      					
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_122); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                      					
                    }

                    }


                    }

                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_5=(Token)match(input,New,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_123);
                    lv_callee_6_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==LessThanSign) ) {
                        int LA312_1 = input.LA(2);

                        if ( (synpred176_InternalN4JSParser()) ) {
                            alt312=1;
                        }
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                              				
                            }
                            pushFollow(FOLLOW_124);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==LeftParenthesis) ) {
                        int LA316_1 = input.LA(2);

                        if ( (synpred177_InternalN4JSParser()) ) {
                            alt316=1;
                        }
                    }
                    switch (alt316) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_117); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", true, "(");
                              						
                            }

                            }


                            }
                            int alt313=2;
                            int LA313_0 = input.LA(1);

                            if ( ((LA313_0>=Intersection && LA313_0<=Implements)||(LA313_0>=Promisify && LA313_0<=Abstract)||(LA313_0>=External && LA313_0<=Function)||(LA313_0>=Private && LA313_0<=Delete)||(LA313_0>=Import && LA313_0<=Public)||LA313_0==Static||(LA313_0>=Target && LA313_0<=Await)||LA313_0==Class||(LA313_0>=False && LA313_0<=Super)||LA313_0==Union||(LA313_0>=Yield && LA313_0<=This)||(LA313_0>=From && LA313_0<=Void)||LA313_0==FullStopFullStopFullStop||(LA313_0>=Get && LA313_0<=Set)||LA313_0==PlusSignPlusSign||(LA313_0>=HyphenMinusHyphenMinus && LA313_0<=SolidusEqualsSign)||LA313_0==As||LA313_0==Of||LA313_0==ExclamationMark||LA313_0==LeftParenthesis||LA313_0==PlusSign||LA313_0==HyphenMinus||LA313_0==Solidus||LA313_0==LessThanSign||(LA313_0>=CommercialAt && LA313_0<=LeftSquareBracket)||LA313_0==LeftCurlyBracket||LA313_0==Tilde||LA313_0==RULE_DOUBLE||(LA313_0>=RULE_HEX_INT && LA313_0<=RULE_LEGACY_OCTAL_INT)||LA313_0==RULE_SCIENTIFIC_INT||LA313_0==RULE_IDENTIFIER||LA313_0==RULE_STRING||(LA313_0>=RULE_TEMPLATE_HEAD && LA313_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA313_0==RULE_INT) ) {
                                alt313=1;
                            }
                            switch (alt313) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                      					
                                    }
                                    pushFollow(FOLLOW_72);
                                    this_Arguments_9=ruleArguments(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                      					
                                    }

                                    }
                                    break;

                            }

                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_115); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                              				
                            }
                            loop315:
                            do {
                                int alt315=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt315=3;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt315=2;
                                        }
                                        break;
                                    case LeftSquareBracket:
                                        {
                                        alt315=1;
                                        }
                                        break;

                                    }

                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt315=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt315=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt315=3;
                                    }
                                    break;

                                }

                                switch (alt315) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }

                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_115);
                            	    this_IndexedAccessExpressionTail_12=ruleIndexedAccessExpressionTail(current);

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }

                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_115);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=ruleParameterizedPropertyAccessExpressionTail(current);

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }
                            	    int alt314=2;
                            	    int LA314_0 = input.LA(1);

                            	    if ( (LA314_0==QuestionMarkFullStop) ) {
                            	        alt314=1;
                            	    }
                            	    switch (alt314) {
                            	        case 1 :
                            	            {
                            	            {
                            	            lv_optionalChaining_16_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return current;
                            	            if ( state.backtracking==0 ) {

                            	              									newLeafNode(lv_optionalChaining_16_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	              								
                            	            }
                            	            if ( state.backtracking==0 ) {

                            	              									if (current==null) {
                            	              										current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	              									}
                            	              									setWithLastConsumed(current, "optionalChaining", true, "?.");
                            	              								
                            	            }

                            	            }


                            	            }
                            	            break;

                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_115);
                            	    lv_template_17_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_17_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop315;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_115);
                    this_PrimaryExpression_18=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PrimaryExpression_18;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop318:
                    do {
                        int alt318=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt318=2;
                                }
                                break;
                            case LeftSquareBracket:
                                {
                                alt318=1;
                                }
                                break;
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt318=3;
                                }
                                break;

                            }

                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt318=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt318=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt318=3;
                            }
                            break;

                        }

                        switch (alt318) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_IndexedAccessExpressionTail_20=ruleIndexedAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_IndexedAccessExpressionTail_20;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_ParameterizedPropertyAccessExpressionTail_22=ruleParameterizedPropertyAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ParameterizedPropertyAccessExpressionTail_22;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    int alt317=2;
                    	    int LA317_0 = input.LA(1);

                    	    if ( (LA317_0==QuestionMarkFullStop) ) {
                    	        alt317=1;
                    	    }
                    	    switch (alt317) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_24_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              								newLeafNode(lv_optionalChaining_24_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	              							
                    	            }
                    	            if ( state.backtracking==0 ) {

                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	              							
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_2_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    lv_template_25_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_25_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop318;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MemberExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        Token lv_optionalChaining_16_0=null;
        Token lv_optionalChaining_24_0=null;
        EObject lv_callee_6_0 = null;

        EObject this_ConcreteTypeArguments_7 = null;

        EObject this_Arguments_9 = null;

        EObject this_IndexedAccessExpressionTail_12 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;

        EObject lv_template_17_0 = null;

        EObject this_PrimaryExpression_18 = null;

        EObject this_IndexedAccessExpressionTail_20 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_22 = null;

        EObject lv_template_25_0 = null;



        	enterRule();

        try {
            {
            int alt327=3;
            alt327 = dfa327.predict(input);
            switch (alt327) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_1=(Token)match(input,New,FOLLOW_121); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                      					
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_122); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                      					
                    }

                    }


                    }

                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_5=(Token)match(input,New,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_123);
                    lv_callee_6_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    int alt320=2;
                    int LA320_0 = input.LA(1);

                    if ( (LA320_0==LessThanSign) ) {
                        int LA320_1 = input.LA(2);

                        if ( (synpred180_InternalN4JSParser()) ) {
                            alt320=1;
                        }
                    }
                    switch (alt320) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                              				
                            }
                            pushFollow(FOLLOW_124);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    int alt324=2;
                    int LA324_0 = input.LA(1);

                    if ( (LA324_0==LeftParenthesis) ) {
                        int LA324_1 = input.LA(2);

                        if ( (synpred181_InternalN4JSParser()) ) {
                            alt324=1;
                        }
                    }
                    switch (alt324) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_118); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", true, "(");
                              						
                            }

                            }


                            }
                            int alt321=2;
                            int LA321_0 = input.LA(1);

                            if ( ((LA321_0>=Intersection && LA321_0<=Implements)||(LA321_0>=Promisify && LA321_0<=Abstract)||(LA321_0>=External && LA321_0<=Function)||(LA321_0>=Private && LA321_0<=Delete)||(LA321_0>=Import && LA321_0<=Public)||LA321_0==Static||(LA321_0>=Target && LA321_0<=Await)||LA321_0==Class||(LA321_0>=False && LA321_0<=Super)||LA321_0==Union||(LA321_0>=Yield && LA321_0<=This)||(LA321_0>=From && LA321_0<=Void)||LA321_0==FullStopFullStopFullStop||(LA321_0>=Get && LA321_0<=Set)||LA321_0==PlusSignPlusSign||(LA321_0>=HyphenMinusHyphenMinus && LA321_0<=SolidusEqualsSign)||LA321_0==As||LA321_0==Of||LA321_0==ExclamationMark||LA321_0==LeftParenthesis||LA321_0==PlusSign||LA321_0==HyphenMinus||LA321_0==Solidus||LA321_0==LessThanSign||(LA321_0>=CommercialAt && LA321_0<=LeftSquareBracket)||LA321_0==LeftCurlyBracket||LA321_0==Tilde||LA321_0==RULE_DOUBLE||(LA321_0>=RULE_HEX_INT && LA321_0<=RULE_LEGACY_OCTAL_INT)||LA321_0==RULE_SCIENTIFIC_INT||LA321_0==RULE_IDENTIFIER||LA321_0==RULE_STRING||(LA321_0>=RULE_TEMPLATE_HEAD && LA321_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA321_0==RULE_INT) ) {
                                alt321=1;
                            }
                            switch (alt321) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {

                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                      					
                                    }
                                    pushFollow(FOLLOW_72);
                                    this_Arguments_9=norm1_Arguments(current);

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                      					
                                    }

                                    }
                                    break;

                            }

                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_115); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                              				
                            }
                            loop323:
                            do {
                                int alt323=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt323=3;
                                        }
                                        break;
                                    case LeftSquareBracket:
                                        {
                                        alt323=1;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt323=2;
                                        }
                                        break;

                                    }

                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt323=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt323=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt323=3;
                                    }
                                    break;

                                }

                                switch (alt323) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }

                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_115);
                            	    this_IndexedAccessExpressionTail_12=norm1_IndexedAccessExpressionTail(current);

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }

                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_115);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=norm1_ParameterizedPropertyAccessExpressionTail(current);

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	      							
                            	    }

                            	    }
                            	    int alt322=2;
                            	    int LA322_0 = input.LA(1);

                            	    if ( (LA322_0==QuestionMarkFullStop) ) {
                            	        alt322=1;
                            	    }
                            	    switch (alt322) {
                            	        case 1 :
                            	            {
                            	            {
                            	            lv_optionalChaining_16_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return current;
                            	            if ( state.backtracking==0 ) {

                            	              									newLeafNode(lv_optionalChaining_16_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	              								
                            	            }
                            	            if ( state.backtracking==0 ) {

                            	              									if (current==null) {
                            	              										current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	              									}
                            	              									setWithLastConsumed(current, "optionalChaining", true, "?.");
                            	              								
                            	            }

                            	            }


                            	            }
                            	            break;

                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0());
                            	      								
                            	    }
                            	    pushFollow(FOLLOW_115);
                            	    lv_template_17_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_17_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	      								
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop323;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_115);
                    this_PrimaryExpression_18=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PrimaryExpression_18;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop326:
                    do {
                        int alt326=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt326=3;
                                }
                                break;
                            case LeftSquareBracket:
                                {
                                alt326=1;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt326=2;
                                }
                                break;

                            }

                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt326=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt326=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt326=3;
                            }
                            break;

                        }

                        switch (alt326) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_IndexedAccessExpressionTail_20=norm1_IndexedAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_IndexedAccessExpressionTail_20;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    this_ParameterizedPropertyAccessExpressionTail_22=norm1_ParameterizedPropertyAccessExpressionTail(current);

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						current = this_ParameterizedPropertyAccessExpressionTail_22;
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    int alt325=2;
                    	    int LA325_0 = input.LA(1);

                    	    if ( (LA325_0==QuestionMarkFullStop) ) {
                    	        alt325=1;
                    	    }
                    	    switch (alt325) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_24_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              								newLeafNode(lv_optionalChaining_24_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	              							
                    	            }
                    	            if ( state.backtracking==0 ) {

                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", true, "?.");
                    	              							
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_2_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_115);
                    	    lv_template_25_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_25_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop326;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_optionalChaining_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_index_2_0 = null;



        	enterRule();

        try {
            {
            {
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==QuestionMarkFullStop) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_125); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optionalChaining_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIndexedAccessExpressionTailRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", true, "?.");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_126);
            lv_index_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_optionalChaining_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_index_2_0 = null;



        	enterRule();

        try {
            {
            {
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==QuestionMarkFullStop) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_125); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optionalChaining_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIndexedAccessExpressionTailRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", true, "?.");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_126);
            lv_index_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_optionalChaining_1_0=null;
        EObject this_ConcreteTypeArguments_2 = null;



        	enterRule();

        try {
            {
            {
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==FullStop) ) {
                alt330=1;
            }
            else if ( (LA330_0==QuestionMarkFullStop) ) {
                alt330=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);

                throw nvae;
            }
            switch (alt330) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,FullStop,FOLLOW_127); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_optionalChaining_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_127); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_optionalChaining_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      						}
                      						setWithLastConsumed(current, "optionalChaining", true, "?.");
                      					
                    }

                    }


                    }


                    }
                    break;

            }
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( (LA331_0==LessThanSign) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_14);
                    this_ConcreteTypeArguments_2=ruleConcreteTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConcreteTypeArguments_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token lv_optionalChaining_1_0=null;
        EObject this_ConcreteTypeArguments_2 = null;



        	enterRule();

        try {
            {
            {
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==FullStop) ) {
                alt332=1;
            }
            else if ( (LA332_0==QuestionMarkFullStop) ) {
                alt332=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);

                throw nvae;
            }
            switch (alt332) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,FullStop,FOLLOW_127); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_optionalChaining_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_127); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_optionalChaining_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      						}
                      						setWithLastConsumed(current, "optionalChaining", true, "?.");
                      					
                    }

                    }


                    }


                    }
                    break;

            }
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==LessThanSign) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_14);
                    this_ConcreteTypeArguments_2=ruleConcreteTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConcreteTypeArguments_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePostfixExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePostfixExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPostfixExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePostfixExpression=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePostfixExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePostfixExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LeftHandSideExpression_0 = null;

        Enumerator lv_op_2_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_128);
            this_LeftHandSideExpression_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==PlusSignPlusSign) && (synpred182_InternalN4JSParser())) {
                alt334=1;
            }
            else if ( (LA334_0==HyphenMinusHyphenMinus) && (synpred182_InternalN4JSParser())) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                      					
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PostfixExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LeftHandSideExpression_0 = null;

        Enumerator lv_op_2_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_128);
            this_LeftHandSideExpression_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==PlusSignPlusSign) && (synpred183_InternalN4JSParser())) {
                alt335=1;
            }
            else if ( (LA335_0==HyphenMinusHyphenMinus) && (synpred183_InternalN4JSParser())) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                      					
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCastExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCastExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCastExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCastExpression=ruleCastExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCastExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCastExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;

        EObject lv_targetTypeRef_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_24);
            this_PostfixExpression_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==As) && (synpred184_InternalN4JSParser())) {
                alt336=1;
            }
            switch (alt336) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,As,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRef_3_0=ruleArrayTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRef",
                      							lv_targetTypeRef_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ArrayTypeExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CastExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;

        EObject lv_targetTypeRef_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_24);
            this_PostfixExpression_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==As) && (synpred185_InternalN4JSParser())) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,As,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRef_3_0=ruleArrayTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRef",
                      							lv_targetTypeRef_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ArrayTypeExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnaryExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnaryExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryExpression=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_CastExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( ((LA338_0>=Intersection && LA338_0<=Implements)||(LA338_0>=Promisify && LA338_0<=Abstract)||(LA338_0>=External && LA338_0<=Function)||(LA338_0>=Private && LA338_0<=Project)||(LA338_0>=Import && LA338_0<=Public)||LA338_0==Static||LA338_0==Target||(LA338_0>=Async && LA338_0<=Await)||LA338_0==Class||(LA338_0>=False && LA338_0<=Super)||LA338_0==Union||(LA338_0>=Yield && LA338_0<=This)||(LA338_0>=From && LA338_0<=Type)||(LA338_0>=Get && LA338_0<=Set)||LA338_0==SolidusEqualsSign||LA338_0==As||LA338_0==Of||LA338_0==LeftParenthesis||LA338_0==Solidus||LA338_0==LessThanSign||(LA338_0>=CommercialAt && LA338_0<=LeftSquareBracket)||LA338_0==LeftCurlyBracket||LA338_0==RULE_DOUBLE||(LA338_0>=RULE_HEX_INT && LA338_0<=RULE_LEGACY_OCTAL_INT)||LA338_0==RULE_SCIENTIFIC_INT||LA338_0==RULE_IDENTIFIER||LA338_0==RULE_STRING||(LA338_0>=RULE_TEMPLATE_HEAD && LA338_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA338_0==RULE_INT) ) {
                alt338=1;
            }
            else if ( (LA338_0==Delete||LA338_0==Typeof||LA338_0==Void||LA338_0==PlusSignPlusSign||LA338_0==HyphenMinusHyphenMinus||LA338_0==ExclamationMark||LA338_0==PlusSign||LA338_0==HyphenMinus||LA338_0==Tilde) ) {
                alt338=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);

                throw nvae;
            }
            switch (alt338) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_49);
                    lv_op_2_0=ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_UnaryExpression() throws RecognitionException {
        EObject current = null;

        EObject this_CastExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( ((LA339_0>=Intersection && LA339_0<=Implements)||(LA339_0>=Promisify && LA339_0<=Abstract)||(LA339_0>=External && LA339_0<=Function)||(LA339_0>=Private && LA339_0<=Project)||(LA339_0>=Import && LA339_0<=Public)||LA339_0==Static||LA339_0==Target||(LA339_0>=Async && LA339_0<=Await)||LA339_0==Class||(LA339_0>=False && LA339_0<=Super)||LA339_0==Union||LA339_0==This||(LA339_0>=From && LA339_0<=Type)||(LA339_0>=Get && LA339_0<=Set)||LA339_0==SolidusEqualsSign||LA339_0==As||LA339_0==Of||LA339_0==LeftParenthesis||LA339_0==Solidus||LA339_0==LessThanSign||(LA339_0>=CommercialAt && LA339_0<=LeftSquareBracket)||LA339_0==LeftCurlyBracket||LA339_0==RULE_DOUBLE||(LA339_0>=RULE_HEX_INT && LA339_0<=RULE_LEGACY_OCTAL_INT)||LA339_0==RULE_SCIENTIFIC_INT||LA339_0==RULE_IDENTIFIER||LA339_0==RULE_STRING||(LA339_0>=RULE_TEMPLATE_HEAD && LA339_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA339_0==RULE_INT) ) {
                alt339=1;
            }
            else if ( (LA339_0==Delete||LA339_0==Typeof||LA339_0==Void||LA339_0==PlusSignPlusSign||LA339_0==HyphenMinusHyphenMinus||LA339_0==ExclamationMark||LA339_0==PlusSign||LA339_0==HyphenMinus||LA339_0==Tilde) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_70);
                    lv_op_2_0=ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMultiplicativeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultiplicativeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_UnaryExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_129);
            this_UnaryExpression_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop340:
            do {
                int alt340=2;
                int LA340_0 = input.LA(1);

                if ( (LA340_0==Asterisk) && (synpred186_InternalN4JSParser())) {
                    alt340=1;
                }
                else if ( (LA340_0==Solidus) && (synpred186_InternalN4JSParser())) {
                    alt340=1;
                }
                else if ( (LA340_0==PercentSign) && (synpred186_InternalN4JSParser())) {
                    alt340=1;
                }


                switch (alt340) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_UnaryExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_129);
            this_UnaryExpression_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop341:
            do {
                int alt341=2;
                int LA341_0 = input.LA(1);

                if ( (LA341_0==Asterisk) && (synpred187_InternalN4JSParser())) {
                    alt341=1;
                }
                else if ( (LA341_0==Solidus) && (synpred187_InternalN4JSParser())) {
                    alt341=1;
                }
                else if ( (LA341_0==PercentSign) && (synpred187_InternalN4JSParser())) {
                    alt341=1;
                }


                switch (alt341) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAdditiveExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAdditiveExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAdditiveExpression=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAdditiveExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject this_MultiplicativeExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_130);
            this_MultiplicativeExpression_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop342:
            do {
                int alt342=2;
                alt342 = dfa342.predict(input);
                switch (alt342) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AdditiveExpression() throws RecognitionException {
        EObject current = null;

        EObject this_MultiplicativeExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_130);
            this_MultiplicativeExpression_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop343:
            do {
                int alt343=2;
                alt343 = dfa343.predict(input);
                switch (alt343) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop343;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleShiftExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleShiftExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftExpression=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleShiftExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AdditiveExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_131);
            this_AdditiveExpression_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop344:
            do {
                int alt344=2;
                alt344 = dfa344.predict(input);
                switch (alt344) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_rhs_3_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ShiftExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AdditiveExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_131);
            this_AdditiveExpression_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop345:
            do {
                int alt345=2;
                alt345 = dfa345.predict(input);
                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_rhs_3_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleShiftOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleShiftOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftOperator=ruleShiftOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleShiftOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt347=2;
            int LA347_0 = input.LA(1);

            if ( (LA347_0==GreaterThanSign) ) {
                alt347=1;
            }
            else if ( (LA347_0==LessThanSignLessThanSign) ) {
                alt347=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 347, 0, input);

                throw nvae;
            }
            switch (alt347) {
                case 1 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_132); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                      			
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_133); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                      			
                    }
                    int alt346=2;
                    int LA346_0 = input.LA(1);

                    if ( (LA346_0==GreaterThanSign) ) {
                        alt346=1;
                    }
                    switch (alt346) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRelationalExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalExpression=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ShiftExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_134);
            this_ShiftExpression_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop348:
            do {
                int alt348=2;
                alt348 = dfa348.predict(input);
                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_134);
            	    lv_rhs_3_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop348;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ShiftExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_135);
            this_ShiftExpression_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop349:
            do {
                int alt349=2;
                alt349 = dfa349.predict(input);
                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_135);
            	    lv_rhs_3_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_RelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ShiftExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_134);
            this_ShiftExpression_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop350:
            do {
                int alt350=2;
                alt350 = dfa350.predict(input);
                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_134);
            	    lv_rhs_3_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_RelationalExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ShiftExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_135);
            this_ShiftExpression_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop351:
            do {
                int alt351=2;
                alt351 = dfa351.predict(input);
                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	      					
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_135);
            	    lv_rhs_3_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleRelationalOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleRelationalOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalOperator=ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleRelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt353=4;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt353=1;
                }
                break;
            case GreaterThanSign:
                {
                alt353=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt353=3;
                }
                break;
            case Instanceof:
                {
                alt353=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);

                throw nvae;
            }

            switch (alt353) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                      			
                    }
                    int alt352=2;
                    int LA352_0 = input.LA(1);

                    if ( (LA352_0==EqualsSign) ) {
                        alt352=1;
                    }
                    switch (alt352) {
                        case 1 :
                            {
                            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_RelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt355=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt355=1;
                }
                break;
            case GreaterThanSign:
                {
                alt355=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt355=3;
                }
                break;
            case Instanceof:
                {
                alt355=4;
                }
                break;
            case In:
                {
                alt355=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 355, 0, input);

                throw nvae;
            }

            switch (alt355) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                      			
                    }
                    int alt354=2;
                    int LA354_0 = input.LA(1);

                    if ( (LA354_0==EqualsSign) ) {
                        alt354=1;
                    }
                    switch (alt354) {
                        case 1 :
                            {
                            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInKeyword_4_0());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEqualityExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEqualityExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEqualityExpression=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEqualityExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RelationalExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_136);
            this_RelationalExpression_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);

                if ( (LA356_0==EqualsSignEqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt356=1;
                }
                else if ( (LA356_0==ExclamationMarkEqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt356=1;
                }
                else if ( (LA356_0==EqualsSignEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt356=1;
                }
                else if ( (LA356_0==ExclamationMarkEqualsSign) && (synpred202_InternalN4JSParser())) {
                    alt356=1;
                }


                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_136);
            	    lv_rhs_3_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop356;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_EqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RelationalExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_136);
            this_RelationalExpression_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==EqualsSignEqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt357=1;
                }
                else if ( (LA357_0==ExclamationMarkEqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt357=1;
                }
                else if ( (LA357_0==EqualsSignEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt357=1;
                }
                else if ( (LA357_0==ExclamationMarkEqualsSign) && (synpred203_InternalN4JSParser())) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_136);
            	    lv_rhs_3_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_EqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RelationalExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_136);
            this_RelationalExpression_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==EqualsSignEqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==ExclamationMarkEqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==EqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt358=1;
                }
                else if ( (LA358_0==ExclamationMarkEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_136);
            	    lv_rhs_3_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_EqualityExpression() throws RecognitionException {
        EObject current = null;

        EObject this_RelationalExpression_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_136);
            this_RelationalExpression_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==EqualsSignEqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt359=1;
                }
                else if ( (LA359_0==ExclamationMarkEqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt359=1;
                }
                else if ( (LA359_0==EqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt359=1;
                }
                else if ( (LA359_0==ExclamationMarkEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_136);
            	    lv_rhs_3_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBitwiseANDExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDExpression=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_EqualityExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_137);
            this_EqualityExpression_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==Ampersand) && (synpred206_InternalN4JSParser())) {
                    alt360=1;
                }


                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_137);
            	    lv_rhs_3_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_EqualityExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_137);
            this_EqualityExpression_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==Ampersand) && (synpred207_InternalN4JSParser())) {
                    alt361=1;
                }


                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_137);
            	    lv_rhs_3_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop361;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_EqualityExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_137);
            this_EqualityExpression_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==Ampersand) && (synpred208_InternalN4JSParser())) {
                    alt362=1;
                }


                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_137);
            	    lv_rhs_3_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop362;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_EqualityExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_137);
            this_EqualityExpression_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==Ampersand) && (synpred209_InternalN4JSParser())) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_137);
            	    lv_rhs_3_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseANDOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBitwiseANDOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDOperator=ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBitwiseXORExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXORExpression=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_138);
            this_BitwiseANDExpression_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==CircumflexAccent) && (synpred210_InternalN4JSParser())) {
                    alt364=1;
                }


                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_138);
            	    lv_rhs_3_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop364;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_138);
            this_BitwiseANDExpression_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);

                if ( (LA365_0==CircumflexAccent) && (synpred211_InternalN4JSParser())) {
                    alt365=1;
                }


                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_138);
            	    lv_rhs_3_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop365;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_138);
            this_BitwiseANDExpression_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==CircumflexAccent) && (synpred212_InternalN4JSParser())) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_138);
            	    lv_rhs_3_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_138);
            this_BitwiseANDExpression_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==CircumflexAccent) && (synpred213_InternalN4JSParser())) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_138);
            	    lv_rhs_3_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseXOROperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBitwiseXOROperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXOROperator=ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseXOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBitwiseORExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseORExpression=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseXORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_139);
            this_BitwiseXORExpression_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);

                if ( (LA368_0==VerticalLine) && (synpred214_InternalN4JSParser())) {
                    alt368=1;
                }


                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_139);
            	    lv_rhs_3_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop368;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseXORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_139);
            this_BitwiseXORExpression_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);

                if ( (LA369_0==VerticalLine) && (synpred215_InternalN4JSParser())) {
                    alt369=1;
                }


                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_139);
            	    lv_rhs_3_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop369;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseXORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_139);
            this_BitwiseXORExpression_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);

                if ( (LA370_0==VerticalLine) && (synpred216_InternalN4JSParser())) {
                    alt370=1;
                }


                switch (alt370) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_139);
            	    lv_rhs_3_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop370;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseXORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_139);
            this_BitwiseXORExpression_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop371:
            do {
                int alt371=2;
                int LA371_0 = input.LA(1);

                if ( (LA371_0==VerticalLine) && (synpred217_InternalN4JSParser())) {
                    alt371=1;
                }


                switch (alt371) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_139);
            	    lv_rhs_3_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop371;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseOROperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBitwiseOROperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseOROperator=ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalANDExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDExpression=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_140);
            this_BitwiseORExpression_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop372:
            do {
                int alt372=2;
                int LA372_0 = input.LA(1);

                if ( (LA372_0==AmpersandAmpersand) && (synpred218_InternalN4JSParser())) {
                    alt372=1;
                }


                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_140);
            	    lv_rhs_3_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop372;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_140);
            this_BitwiseORExpression_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop373:
            do {
                int alt373=2;
                int LA373_0 = input.LA(1);

                if ( (LA373_0==AmpersandAmpersand) && (synpred219_InternalN4JSParser())) {
                    alt373=1;
                }


                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_140);
            	    lv_rhs_3_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop373;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_140);
            this_BitwiseORExpression_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);

                if ( (LA374_0==AmpersandAmpersand) && (synpred220_InternalN4JSParser())) {
                    alt374=1;
                }


                switch (alt374) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_140);
            	    lv_rhs_3_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop374;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalANDExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BitwiseORExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_140);
            this_BitwiseORExpression_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop375:
            do {
                int alt375=2;
                int LA375_0 = input.LA(1);

                if ( (LA375_0==AmpersandAmpersand) && (synpred221_InternalN4JSParser())) {
                    alt375=1;
                }


                switch (alt375) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_140);
            	    lv_rhs_3_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop375;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalANDOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLogicalANDOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDOperator=ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLogicalORExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalORExpression=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_141);
            this_LogicalANDExpression_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);

                if ( (LA376_0==VerticalLineVerticalLine) && (synpred222_InternalN4JSParser())) {
                    alt376=1;
                }


                switch (alt376) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_141);
            	    lv_rhs_3_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop376;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_141);
            this_LogicalANDExpression_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);

                if ( (LA377_0==VerticalLineVerticalLine) && (synpred223_InternalN4JSParser())) {
                    alt377=1;
                }


                switch (alt377) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_49);
            	    lv_op_2_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_141);
            	    lv_rhs_3_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop377;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_141);
            this_LogicalANDExpression_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop378:
            do {
                int alt378=2;
                int LA378_0 = input.LA(1);

                if ( (LA378_0==VerticalLineVerticalLine) && (synpred224_InternalN4JSParser())) {
                    alt378=1;
                }


                switch (alt378) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_141);
            	    lv_rhs_3_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop378;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalORExpression() throws RecognitionException {
        EObject current = null;

        EObject this_LogicalANDExpression_0 = null;

        AntlrDatatypeRuleToken lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_141);
            this_LogicalANDExpression_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop379:
            do {
                int alt379=2;
                int LA379_0 = input.LA(1);

                if ( (LA379_0==VerticalLineVerticalLine) && (synpred225_InternalN4JSParser())) {
                    alt379=1;
                }


                switch (alt379) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_70);
            	    lv_op_2_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_141);
            	    lv_rhs_3_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop379;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalOROperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleLogicalOROperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalOROperator=ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCoalesceExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCoalesceExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCoalesceExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCoalesceExpression=ruleCoalesceExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCoalesceExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCoalesceExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;

        EObject lv_defaultExpression_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_142);
            this_LogicalORExpression_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop380:
            do {
                int alt380=2;
                int LA380_0 = input.LA(1);

                if ( (LA380_0==QuestionMarkQuestionMark) && (synpred226_InternalN4JSParser())) {
                    alt380=1;
                }


                switch (alt380) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }

            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_49); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_defaultExpression_3_0=ruleLogicalORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop380;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CoalesceExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;

        EObject lv_defaultExpression_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_142);
            this_LogicalORExpression_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop381:
            do {
                int alt381=2;
                int LA381_0 = input.LA(1);

                if ( (LA381_0==QuestionMarkQuestionMark) && (synpred227_InternalN4JSParser())) {
                    alt381=1;
                }


                switch (alt381) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }

            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_49); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_defaultExpression_3_0=norm1_LogicalORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop381;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_CoalesceExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;

        EObject lv_defaultExpression_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_142);
            this_LogicalORExpression_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop382:
            do {
                int alt382=2;
                int LA382_0 = input.LA(1);

                if ( (LA382_0==QuestionMarkQuestionMark) && (synpred228_InternalN4JSParser())) {
                    alt382=1;
                }


                switch (alt382) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }

            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_70); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_defaultExpression_3_0=norm2_LogicalORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop382;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_CoalesceExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;

        EObject lv_defaultExpression_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_142);
            this_LogicalORExpression_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop383:
            do {
                int alt383=2;
                int LA383_0 = input.LA(1);

                if ( (LA383_0==QuestionMarkQuestionMark) && (synpred229_InternalN4JSParser())) {
                    alt383=1;
                }


                switch (alt383) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }

            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_70); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_142);
            	    lv_defaultExpression_3_0=norm3_LogicalORExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop383;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleConditionalExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConditionalExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConditionalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConditionalExpression=ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConditionalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConditionalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;

        EObject lv_trueExpression_3_0 = null;

        EObject lv_falseExpression_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_143);
            this_CoalesceExpression_0=ruleCoalesceExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt384=2;
            int LA384_0 = input.LA(1);

            if ( (LA384_0==QuestionMark) && (synpred230_InternalN4JSParser())) {
                alt384=1;
            }
            switch (alt384) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ConditionalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;

        EObject lv_trueExpression_3_0 = null;

        EObject lv_falseExpression_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_143);
            this_CoalesceExpression_0=norm1_CoalesceExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt385=2;
            int LA385_0 = input.LA(1);

            if ( (LA385_0==QuestionMark) && (synpred231_InternalN4JSParser())) {
                alt385=1;
            }
            switch (alt385) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ConditionalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;

        EObject lv_trueExpression_3_0 = null;

        EObject lv_falseExpression_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_143);
            this_CoalesceExpression_0=norm2_CoalesceExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt386=2;
            int LA386_0 = input.LA(1);

            if ( (LA386_0==QuestionMark) && (synpred232_InternalN4JSParser())) {
                alt386=1;
            }
            switch (alt386) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ConditionalExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;

        EObject lv_trueExpression_3_0 = null;

        EObject lv_falseExpression_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_143);
            this_CoalesceExpression_0=norm3_CoalesceExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt387=2;
            int LA387_0 = input.LA(1);

            if ( (LA387_0==QuestionMark) && (synpred233_InternalN4JSParser())) {
                alt387=1;
            }
            switch (alt387) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                      						
                    }

                    }

                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_4=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAssignmentExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpression=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AwaitExpression_0 = null;

        EObject this_PromisifyExpression_1 = null;

        EObject this_ArrowExpression_2 = null;

        EObject this_ConditionalExpression_3 = null;

        AntlrDatatypeRuleToken lv_op_5_0 = null;

        EObject lv_rhs_6_0 = null;



        	enterRule();

        try {
            {
            int alt389=4;
            alt389 = dfa389.predict(input);
            switch (alt389) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                      			
                    }
                    pushFollow(FOLLOW_144);
                    this_ConditionalExpression_3=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt388=2;
                    alt388 = dfa388.predict(input);
                    switch (alt388) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                              							
                            }

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_49);
                            lv_op_5_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AwaitExpression_0 = null;

        EObject this_PromisifyExpression_1 = null;

        EObject this_ArrowExpression_2 = null;

        EObject this_ConditionalExpression_3 = null;

        AntlrDatatypeRuleToken lv_op_5_0 = null;

        EObject lv_rhs_6_0 = null;



        	enterRule();

        try {
            {
            int alt391=4;
            alt391 = dfa391.predict(input);
            switch (alt391) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                      			
                    }
                    pushFollow(FOLLOW_144);
                    this_ConditionalExpression_3=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt390=2;
                    alt390 = dfa390.predict(input);
                    switch (alt390) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                              							
                            }

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_49);
                            lv_op_5_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AwaitExpression_0 = null;

        EObject this_PromisifyExpression_1 = null;

        EObject this_ArrowExpression_2 = null;

        EObject this_YieldExpression_3 = null;

        EObject this_ConditionalExpression_4 = null;

        AntlrDatatypeRuleToken lv_op_6_0 = null;

        EObject lv_rhs_7_0 = null;



        	enterRule();

        try {
            {
            int alt393=5;
            alt393 = dfa393.predict(input);
            switch (alt393) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                      			
                    }
                    pushFollow(FOLLOW_144);
                    this_ConditionalExpression_4=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt392=2;
                    alt392 = dfa392.predict(input);
                    switch (alt392) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                              							
                            }

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_70);
                            lv_op_6_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AssignmentExpression() throws RecognitionException {
        EObject current = null;

        EObject this_AwaitExpression_0 = null;

        EObject this_PromisifyExpression_1 = null;

        EObject this_ArrowExpression_2 = null;

        EObject this_YieldExpression_3 = null;

        EObject this_ConditionalExpression_4 = null;

        AntlrDatatypeRuleToken lv_op_6_0 = null;

        EObject lv_rhs_7_0 = null;



        	enterRule();

        try {
            {
            int alt395=5;
            alt395 = dfa395.predict(input);
            switch (alt395) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                      			
                    }
                    pushFollow(FOLLOW_144);
                    this_ConditionalExpression_4=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt394=2;
                    alt394 = dfa394.predict(input);
                    switch (alt394) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                              							
                            }

                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                              								
                            }
                            pushFollow(FOLLOW_70);
                            lv_op_6_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleYieldExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleYieldExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldExpression=ruleYieldExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleYieldExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Yield,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
              		
            }
            int alt396=2;
            int LA396_0 = input.LA(1);

            if ( (LA396_0==Asterisk) && (synpred258_InternalN4JSParser())) {
                alt396=1;
            }
            switch (alt396) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", true, "*");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt397=2;
            alt397 = dfa397.predict(input);
            switch (alt397) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_YieldExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Yield,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
              		
            }
            int alt398=2;
            int LA398_0 = input.LA(1);

            if ( (LA398_0==Asterisk) && (synpred260_InternalN4JSParser())) {
                alt398=1;
            }
            switch (alt398) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_68); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", true, "*");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt399=2;
            alt399 = dfa399.predict(input);
            switch (alt399) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAssignmentOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAssignmentOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentOperator=ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAssignmentOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt401=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt401=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt401=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt401=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt401=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt401=5;
                }
                break;
            case HyphenMinus:
                {
                alt401=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt401=7;
                }
                break;
            case GreaterThanSign:
                {
                alt401=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt401=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt401=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt401=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 401, 0, input);

                throw nvae;
            }

            switch (alt401) {
                case 1 :
                    {
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    {
                    kw=(Token)match(input,HyphenMinus,FOLLOW_69); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusKeyword_5_0());
                      			
                    }
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_5_1());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_132); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                      			
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_146); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                      			
                    }
                    int alt400=2;
                    int LA400_0 = input.LA(1);

                    if ( (LA400_0==GreaterThanSign) ) {
                        alt400=1;
                    }
                    switch (alt400) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_69); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_2());
                              				
                            }

                            }
                            break;

                    }

                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_7_3());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAwaitExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAwaitExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAwaitExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAwaitExpression=ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAwaitExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAwaitExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AwaitExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Await,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AwaitExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Await,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AwaitExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Await,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePromisifyExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePromisifyExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPromisifyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePromisifyExpression=rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePromisifyExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePromisifyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PromisifyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_PromisifyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_PromisifyExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;

        EObject lv_exprs_3_0 = null;

        EObject lv_exprs_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_30);
            this_AssignmentExpression_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt403=2;
            int LA403_0 = input.LA(1);

            if ( (LA403_0==Comma) ) {
                alt403=1;
            }
            switch (alt403) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_30);
                    lv_exprs_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop402:
                    do {
                        int alt402=2;
                        int LA402_0 = input.LA(1);

                        if ( (LA402_0==Comma) ) {
                            alt402=1;
                        }


                        switch (alt402) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_exprs_5_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop402;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Expression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;

        EObject lv_exprs_3_0 = null;

        EObject lv_exprs_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_30);
            this_AssignmentExpression_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt405=2;
            int LA405_0 = input.LA(1);

            if ( (LA405_0==Comma) ) {
                alt405=1;
            }
            switch (alt405) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_30);
                    lv_exprs_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop404:
                    do {
                        int alt404=2;
                        int LA404_0 = input.LA(1);

                        if ( (LA404_0==Comma) ) {
                            alt404=1;
                        }


                        switch (alt404) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_exprs_5_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop404;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_Expression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;

        EObject lv_exprs_3_0 = null;

        EObject lv_exprs_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_30);
            this_AssignmentExpression_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==Comma) ) {
                alt407=1;
            }
            switch (alt407) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,Comma,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_30);
                    lv_exprs_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop406:
                    do {
                        int alt406=2;
                        int LA406_0 = input.LA(1);

                        if ( (LA406_0==Comma) ) {
                            alt406=1;
                        }


                        switch (alt406) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_70); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_exprs_5_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop406;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_Expression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;

        EObject lv_exprs_3_0 = null;

        EObject lv_exprs_5_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_30);
            this_AssignmentExpression_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==Comma) ) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_2=(Token)match(input,Comma,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_30);
                    lv_exprs_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop408:
                    do {
                        int alt408=2;
                        int LA408_0 = input.LA(1);

                        if ( (LA408_0==Comma) ) {
                            alt408=1;
                        }


                        switch (alt408) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_70); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_exprs_5_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop408;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTemplateLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateLiteral=ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateLiteral() throws RecognitionException {
        EObject current = null;

        EObject lv_segments_1_0 = null;

        EObject lv_segments_2_0 = null;

        EObject lv_segments_3_0 = null;

        EObject lv_segments_5_0 = null;

        EObject lv_segments_6_0 = null;

        EObject lv_segments_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
              			
            }

            }
            int alt413=2;
            int LA413_0 = input.LA(1);

            if ( (LA413_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt413=1;
            }
            else if ( (LA413_0==RULE_TEMPLATE_HEAD) ) {
                alt413=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 413, 0, input);

                throw nvae;
            }
            switch (alt413) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                      						
                    }
                    pushFollow(FOLLOW_148);
                    lv_segments_2_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt410=2;
                    int LA410_0 = input.LA(1);

                    if ( ((LA410_0>=Intersection && LA410_0<=Implements)||(LA410_0>=Promisify && LA410_0<=Abstract)||(LA410_0>=External && LA410_0<=Function)||(LA410_0>=Private && LA410_0<=Delete)||(LA410_0>=Import && LA410_0<=Public)||LA410_0==Static||(LA410_0>=Target && LA410_0<=Await)||LA410_0==Class||(LA410_0>=False && LA410_0<=Super)||LA410_0==Union||(LA410_0>=Yield && LA410_0<=This)||(LA410_0>=From && LA410_0<=Void)||(LA410_0>=Get && LA410_0<=Set)||LA410_0==PlusSignPlusSign||(LA410_0>=HyphenMinusHyphenMinus && LA410_0<=SolidusEqualsSign)||LA410_0==As||LA410_0==Of||LA410_0==ExclamationMark||LA410_0==LeftParenthesis||LA410_0==PlusSign||LA410_0==HyphenMinus||LA410_0==Solidus||LA410_0==LessThanSign||(LA410_0>=CommercialAt && LA410_0<=LeftSquareBracket)||LA410_0==LeftCurlyBracket||LA410_0==Tilde||LA410_0==RULE_DOUBLE||(LA410_0>=RULE_HEX_INT && LA410_0<=RULE_LEGACY_OCTAL_INT)||LA410_0==RULE_SCIENTIFIC_INT||LA410_0==RULE_IDENTIFIER||LA410_0==RULE_STRING||(LA410_0>=RULE_TEMPLATE_HEAD && LA410_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA410_0==RULE_INT) ) {
                        alt410=1;
                    }
                    switch (alt410) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_148);
                            lv_segments_3_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_149);
                    ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }
                    loop412:
                    do {
                        int alt412=2;
                        int LA412_0 = input.LA(1);

                        if ( (LA412_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt412=1;
                        }


                        switch (alt412) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_148);
                    	    lv_segments_5_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }
                    	    int alt411=2;
                    	    int LA411_0 = input.LA(1);

                    	    if ( ((LA411_0>=Intersection && LA411_0<=Implements)||(LA411_0>=Promisify && LA411_0<=Abstract)||(LA411_0>=External && LA411_0<=Function)||(LA411_0>=Private && LA411_0<=Delete)||(LA411_0>=Import && LA411_0<=Public)||LA411_0==Static||(LA411_0>=Target && LA411_0<=Await)||LA411_0==Class||(LA411_0>=False && LA411_0<=Super)||LA411_0==Union||(LA411_0>=Yield && LA411_0<=This)||(LA411_0>=From && LA411_0<=Void)||(LA411_0>=Get && LA411_0<=Set)||LA411_0==PlusSignPlusSign||(LA411_0>=HyphenMinusHyphenMinus && LA411_0<=SolidusEqualsSign)||LA411_0==As||LA411_0==Of||LA411_0==ExclamationMark||LA411_0==LeftParenthesis||LA411_0==PlusSign||LA411_0==HyphenMinus||LA411_0==Solidus||LA411_0==LessThanSign||(LA411_0>=CommercialAt && LA411_0<=LeftSquareBracket)||LA411_0==LeftCurlyBracket||LA411_0==Tilde||LA411_0==RULE_DOUBLE||(LA411_0>=RULE_HEX_INT && LA411_0<=RULE_LEGACY_OCTAL_INT)||LA411_0==RULE_SCIENTIFIC_INT||LA411_0==RULE_IDENTIFIER||LA411_0==RULE_STRING||(LA411_0>=RULE_TEMPLATE_HEAD && LA411_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA411_0==RULE_INT) ) {
                    	        alt411=1;
                    	    }
                    	    switch (alt411) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	              							
                    	            }
                    	            pushFollow(FOLLOW_148);
                    	            lv_segments_6_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	              							
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_149);
                    	    ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop412;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TemplateLiteral() throws RecognitionException {
        EObject current = null;

        EObject lv_segments_1_0 = null;

        EObject lv_segments_2_0 = null;

        EObject lv_segments_3_0 = null;

        EObject lv_segments_5_0 = null;

        EObject lv_segments_6_0 = null;

        EObject lv_segments_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
              			
            }

            }
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt417=1;
            }
            else if ( (LA417_0==RULE_TEMPLATE_HEAD) ) {
                alt417=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);

                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                      						
                    }
                    pushFollow(FOLLOW_150);
                    lv_segments_2_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt414=2;
                    int LA414_0 = input.LA(1);

                    if ( ((LA414_0>=Intersection && LA414_0<=Implements)||(LA414_0>=Promisify && LA414_0<=Abstract)||(LA414_0>=External && LA414_0<=Function)||(LA414_0>=Private && LA414_0<=Delete)||(LA414_0>=Import && LA414_0<=Public)||LA414_0==Static||(LA414_0>=Target && LA414_0<=Await)||LA414_0==Class||(LA414_0>=False && LA414_0<=Super)||LA414_0==Union||(LA414_0>=Yield && LA414_0<=This)||(LA414_0>=From && LA414_0<=Void)||(LA414_0>=Get && LA414_0<=Set)||LA414_0==PlusSignPlusSign||(LA414_0>=HyphenMinusHyphenMinus && LA414_0<=SolidusEqualsSign)||LA414_0==As||LA414_0==Of||LA414_0==ExclamationMark||LA414_0==LeftParenthesis||LA414_0==PlusSign||LA414_0==HyphenMinus||LA414_0==Solidus||LA414_0==LessThanSign||(LA414_0>=CommercialAt && LA414_0<=LeftSquareBracket)||LA414_0==LeftCurlyBracket||LA414_0==Tilde||LA414_0==RULE_DOUBLE||(LA414_0>=RULE_HEX_INT && LA414_0<=RULE_LEGACY_OCTAL_INT)||LA414_0==RULE_SCIENTIFIC_INT||LA414_0==RULE_IDENTIFIER||LA414_0==RULE_STRING||(LA414_0>=RULE_TEMPLATE_HEAD && LA414_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA414_0==RULE_INT) ) {
                        alt414=1;
                    }
                    switch (alt414) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_148);
                            lv_segments_3_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                      				
                    }
                    pushFollow(FOLLOW_149);
                    ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					afterParserOrEnumRuleCall();
                      				
                    }
                    loop416:
                    do {
                        int alt416=2;
                        int LA416_0 = input.LA(1);

                        if ( (LA416_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt416=1;
                        }


                        switch (alt416) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_150);
                    	    lv_segments_5_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }
                    	    int alt415=2;
                    	    int LA415_0 = input.LA(1);

                    	    if ( ((LA415_0>=Intersection && LA415_0<=Implements)||(LA415_0>=Promisify && LA415_0<=Abstract)||(LA415_0>=External && LA415_0<=Function)||(LA415_0>=Private && LA415_0<=Delete)||(LA415_0>=Import && LA415_0<=Public)||LA415_0==Static||(LA415_0>=Target && LA415_0<=Await)||LA415_0==Class||(LA415_0>=False && LA415_0<=Super)||LA415_0==Union||(LA415_0>=Yield && LA415_0<=This)||(LA415_0>=From && LA415_0<=Void)||(LA415_0>=Get && LA415_0<=Set)||LA415_0==PlusSignPlusSign||(LA415_0>=HyphenMinusHyphenMinus && LA415_0<=SolidusEqualsSign)||LA415_0==As||LA415_0==Of||LA415_0==ExclamationMark||LA415_0==LeftParenthesis||LA415_0==PlusSign||LA415_0==HyphenMinus||LA415_0==Solidus||LA415_0==LessThanSign||(LA415_0>=CommercialAt && LA415_0<=LeftSquareBracket)||LA415_0==LeftCurlyBracket||LA415_0==Tilde||LA415_0==RULE_DOUBLE||(LA415_0>=RULE_HEX_INT && LA415_0<=RULE_LEGACY_OCTAL_INT)||LA415_0==RULE_SCIENTIFIC_INT||LA415_0==RULE_IDENTIFIER||LA415_0==RULE_STRING||(LA415_0>=RULE_TEMPLATE_HEAD && LA415_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA415_0==RULE_INT) ) {
                    	        alt415=1;
                    	    }
                    	    switch (alt415) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	              							
                    	            }
                    	            pushFollow(FOLLOW_148);
                    	            lv_segments_6_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	              							
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_149);
                    	    ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop416;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateExpressionEnd() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTemplateExpressionEnd = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateExpressionEndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateExpressionEnd=ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateExpressionEnd.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateExpressionEnd() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();
        	setInTemplateSegment();
        try {
            {
            kw=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNoSubstitutionTemplate = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNoSubstitutionTemplateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNoSubstitutionTemplate=ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNoSubstitutionTemplate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;

        Token lv_value_1_0=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNoSubstitutionTemplateAccess().getTemplateSegmentAction_0(),
              					current);
              			
            }

            }
            {
            {
            lv_value_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_value_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getNoSubstitutionTemplateRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.NO_SUBSTITUTION_TEMPLATE_LITERAL");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateHead() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTemplateHead = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateHead=ruleTemplateHead();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateHead; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateHead() throws RecognitionException {
        EObject current = null;

        Token lv_value_1_0=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateHeadAccess().getTemplateSegmentAction_0(),
              					current);
              			
            }

            }
            {
            {
            lv_value_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_value_1_0, grammarAccess.getTemplateHeadAccess().getValueTEMPLATE_HEADTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTemplateHeadRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TEMPLATE_HEAD");
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateTail() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTemplateTail = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTail=ruleTemplateTail();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateTail() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateTailAccess().getTemplateSegmentAction_0(),
              					current);
              			
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTemplateTailAccess().getValueTemplateTailLiteralParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateTailRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TemplateTailLiteral");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateMiddle() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTemplateMiddle = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddle=ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddle; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateMiddle() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTemplateMiddleAccess().getTemplateSegmentAction_0(),
              					current);
              			
            }

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTemplateMiddleAccess().getValueTemplateMiddleLiteralParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateMiddleRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TemplateMiddleLiteral");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_NumericLiteral_0 = null;

        EObject this_BooleanLiteral_1 = null;

        EObject this_StringLiteral_2 = null;

        EObject this_NullLiteral_3 = null;

        EObject this_RegularExpressionLiteral_4 = null;



        	enterRule();

        try {
            {
            int alt418=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt418=1;
                }
                break;
            case False:
            case True:
                {
                alt418=2;
                }
                break;
            case RULE_STRING:
                {
                alt418=3;
                }
                break;
            case Null:
                {
                alt418=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt418=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 418, 0, input);

                throw nvae;
            }

            switch (alt418) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NumericLiteral_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NumericLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteral_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BooleanLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteral_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StringLiteral_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_NullLiteral_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_NullLiteral_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_RegularExpressionLiteral_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_RegularExpressionLiteral_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNullLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNullLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullLiteral=ruleNullLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNullLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBooleanLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBooleanLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteral=ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBooleanLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_true_1_0=null;
        Token otherlv_2=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
              					current);
              			
            }

            }
            int alt419=2;
            int LA419_0 = input.LA(1);

            if ( (LA419_0==True) ) {
                alt419=1;
            }
            else if ( (LA419_0==False) ) {
                alt419=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 419, 0, input);

                throw nvae;
            }
            switch (alt419) {
                case 1 :
                    {
                    {
                    {
                    lv_true_1_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_true_1_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralRule());
                      						}
                      						setWithLastConsumed(current, "true", true, "true");
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    otherlv_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStringLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStringLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteral=ruleStringLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStringLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNumericLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNumericLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteral=ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNumericLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_DoubleLiteral_0 = null;

        EObject this_IntLiteral_1 = null;

        EObject this_BinaryIntLiteral_2 = null;

        EObject this_OctalIntLiteral_3 = null;

        EObject this_LegacyOctalIntLiteral_4 = null;

        EObject this_HexIntLiteral_5 = null;

        EObject this_ScientificIntLiteral_6 = null;



        	enterRule();

        try {
            {
            int alt420=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt420=1;
                }
                break;
            case RULE_INT:
                {
                alt420=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt420=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt420=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt420=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt420=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt420=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 420, 0, input);

                throw nvae;
            }

            switch (alt420) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_DoubleLiteral_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_DoubleLiteral_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntLiteral_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BinaryIntLiteral_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BinaryIntLiteral_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OctalIntLiteral_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OctalIntLiteral_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyOctalIntLiteral_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LegacyOctalIntLiteral_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_HexIntLiteral_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_HexIntLiteral_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ScientificIntLiteral_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ScientificIntLiteral_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoubleLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDoubleLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoubleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoubleLiteral=ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoubleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoubleLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getDoubleLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.DOUBLE");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntLiteral=ruleIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleOctalIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOctalIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOctalIntLiteral=ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleOctalIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getOctalIntLiteralAccess().getValueOCTAL_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.OCTAL_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLegacyOctalIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLegacyOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLegacyOctalIntLiteral=ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLegacyOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueLEGACY_OCTAL_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getLegacyOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.LEGACY_OCTAL_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleHexIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHexIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHexIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHexIntLiteral=ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHexIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleHexIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getHexIntLiteralAccess().getValueHEX_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getHexIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.HEX_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBinaryIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBinaryIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBinaryIntLiteral=ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBinaryIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getBinaryIntLiteralAccess().getValueBINARY_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getBinaryIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.BINARY_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScientificIntLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScientificIntLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScientificIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScientificIntLiteral=ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScientificIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScientificIntLiteral() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getScientificIntLiteralAccess().getValueSCIENTIFIC_INTTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getScientificIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.SCIENTIFIC_INT");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleRegularExpressionLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularExpressionLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularExpressionLiteral=ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularExpressionLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;

        AntlrDatatypeRuleToken lv_value_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getRegularExpressionLiteralAccess().getValueREGEX_LITERALParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_value_0_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getRegularExpressionLiteralRule());
              				}
              				set(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.REGEX_LITERAL");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleNumericLiteralAsString() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumericLiteralAsString = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralAsStringRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteralAsString=ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteralAsString.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleNumericLiteralAsString() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_DOUBLE_0=null;
        Token this_INT_1=null;
        Token this_OCTAL_INT_2=null;
        Token this_HEX_INT_3=null;
        Token this_SCIENTIFIC_INT_4=null;


        	enterRule();

        try {
            {
            int alt421=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt421=1;
                }
                break;
            case RULE_INT:
                {
                alt421=2;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt421=3;
                }
                break;
            case RULE_HEX_INT:
                {
                alt421=4;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt421=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);

                throw nvae;
            }

            switch (alt421) {
                case 1 :
                    {
                    this_DOUBLE_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_DOUBLE_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_DOUBLE_0, grammarAccess.getNumericLiteralAsStringAccess().getDOUBLETerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    this_INT_1=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_INT_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_INT_1, grammarAccess.getNumericLiteralAsStringAccess().getINTTerminalRuleCall_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    this_OCTAL_INT_2=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_OCTAL_INT_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_OCTAL_INT_2, grammarAccess.getNumericLiteralAsStringAccess().getOCTAL_INTTerminalRuleCall_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    this_HEX_INT_3=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_HEX_INT_3);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_HEX_INT_3, grammarAccess.getNumericLiteralAsStringAccess().getHEX_INTTerminalRuleCall_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    this_SCIENTIFIC_INT_4=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_SCIENTIFIC_INT_4);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_SCIENTIFIC_INT_4, grammarAccess.getNumericLiteralAsStringAccess().getSCIENTIFIC_INTTerminalRuleCall_4());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierOrThis() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdentifierOrThis = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierOrThisRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierOrThis=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierOrThis.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierOrThis() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;


        	enterRule();

        try {
            {
            int alt422=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt422=1;
                }
                break;
            case This:
                {
                alt422=2;
                }
                break;
            case Promisify:
                {
                alt422=3;
                }
                break;
            case Target:
                {
                alt422=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 422, 0, input);

                throw nvae;
            }

            switch (alt422) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierOrThisAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAnnotationName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAnnotationName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationName=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAnnotationName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;


        	enterRule();

        try {
            {
            int alt423=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt423=1;
                }
                break;
            case This:
                {
                alt423=2;
                }
                break;
            case Target:
                {
                alt423=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);

                throw nvae;
            }

            switch (alt423) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getAnnotationNameAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleREGEX_LITERAL() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleREGEX_LITERAL = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getREGEX_LITERALRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleREGEX_LITERAL=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleREGEX_LITERAL.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleREGEX_LITERAL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_REGEX_TAIL_2=null;


        	enterRule();
        	setInRegularExpression();

        try {
            {
            {
            int alt424=2;
            int LA424_0 = input.LA(1);

            if ( (LA424_0==Solidus) ) {
                alt424=1;
            }
            else if ( (LA424_0==SolidusEqualsSign) ) {
                alt424=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 424, 0, input);

                throw nvae;
            }
            switch (alt424) {
                case 1 :
                    {
                    kw=(Token)match(input,Solidus,FOLLOW_151); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_151); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                      			
                    }

                    }
                    break;

            }
            int alt425=2;
            int LA425_0 = input.LA(1);

            if ( (LA425_0==RULE_REGEX_TAIL) ) {
                alt425=1;
            }
            switch (alt425) {
                case 1 :
                    {
                    this_REGEX_TAIL_2=(Token)match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_REGEX_TAIL_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_REGEX_TAIL_2, grammarAccess.getREGEX_LITERALAccess().getREGEX_TAILTerminalRuleCall_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateTailLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTemplateTailLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTailLiteral=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTailLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateTailLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_TEMPLATE_END_0=null;


        	enterRule();

        try {
            {
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( (LA426_0==RULE_TEMPLATE_END) ) {
                alt426=1;
            }
            switch (alt426) {
                case 1 :
                    {
                    this_TEMPLATE_END_0=(Token)match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_TEMPLATE_END_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_TEMPLATE_END_0, grammarAccess.getTemplateTailLiteralAccess().getTEMPLATE_ENDTerminalRuleCall());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateMiddleLiteral() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTemplateMiddleLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddleLiteral=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddleLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateMiddleLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_TEMPLATE_MIDDLE_0=null;


        	enterRule();

        try {
            {
            this_TEMPLATE_MIDDLE_0=(Token)match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(this_TEMPLATE_MIDDLE_0);
              	
            }
            if ( state.backtracking==0 ) {

              		newLeafNode(this_TEMPLATE_MIDDLE_0, grammarAccess.getTemplateMiddleLiteralAccess().getTEMPLATE_MIDDLETerminalRuleCall());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleSemi() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSemi = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSemiRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSemi=ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSemi.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleSemi() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;

         enterRule();
        		int marker = input.mark();
        		promoteEOL();    
        try {
            int alt427=3;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt427=1;
                }
                break;
            case EOF:
            case RULE_ML_COMMENT:
            case RULE_EOL:
                {
                alt427=2;
                }
                break;
            case RightCurlyBracket:
                {
                alt427=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);

                throw nvae;
            }

            switch (alt427) {
                case 1 :
                    {
                    kw=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                          
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)input.LT(1);
                    if ( input.LA(1)==EOF||input.LA(1)==RULE_ML_COMMENT||input.LA(1)==RULE_EOL ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    if ( state.backtracking==0 ) {

                              addASIMessage();
                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                          
                    }

                    }
                    break;
                case 3 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            if ( state.backtracking==0 ) {
               leaveRule(); 
            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement START
 public final EObject ruleNoLineTerminator(EObject in_current) throws RecognitionException {
    	EObject current = in_current;
    	if (state.backtracking==0) {
    		promoteEOL();
    	}
    	if (hasDisallowedEOL()) { 
        	if (state.backtracking==0) {
        		NoViableAltException nvae = new NoViableAltException("", 0, 0, input);
                reportError(nvae);
                throw nvae;
        	}
        	state.failed=true; 
        	return current;
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement END
    public final EObject entryRuleAnnotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotation = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotation=ruleAnnotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotation() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAt,FOLLOW_152); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptAnnotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScriptAnnotation = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptAnnotation=ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptAnnotation() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_152); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotationNoAtSign = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNoAtSignRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationNoAtSign=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationNoAtSign; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject lv_args_2_0 = null;

        EObject lv_args_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getNameAnnotationNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_124);
            lv_name_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt431=2;
            alt431 = dfa431.predict(input);
            switch (alt431) {
                case 1 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_153); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_1, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0());
                      				
                    }

                    }
                    int alt430=2;
                    int LA430_0 = input.LA(1);

                    if ( ((LA430_0>=Intersection && LA430_0<=Constructor)||LA430_0==Promisify||LA430_0==Default||LA430_0==Target||LA430_0==Await||LA430_0==False||LA430_0==Union||LA430_0==This||(LA430_0>=Null && LA430_0<=Void)||LA430_0==SolidusEqualsSign||LA430_0==LeftParenthesis||LA430_0==Solidus||LA430_0==QuestionMark||LA430_0==LeftSquareBracket||LA430_0==LeftCurlyBracket||LA430_0==Tilde||LA430_0==RULE_DOUBLE||(LA430_0>=RULE_HEX_INT && LA430_0<=RULE_LEGACY_OCTAL_INT)||LA430_0==RULE_SCIENTIFIC_INT||LA430_0==RULE_IDENTIFIER||LA430_0==RULE_STRING||LA430_0==RULE_INT) ) {
                        alt430=1;
                    }
                    switch (alt430) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_1_0_0());
                              						
                            }
                            pushFollow(FOLLOW_54);
                            lv_args_2_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                              							}
                              							add(
                              								current,
                              								"args",
                              								lv_args_2_0,
                              								"org.eclipse.n4js.N4JS.AnnotationArgument");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            loop429:
                            do {
                                int alt429=2;
                                int LA429_0 = input.LA(1);

                                if ( (LA429_0==Comma) ) {
                                    alt429=1;
                                }


                                switch (alt429) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_154); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_3, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0());
                            	      					
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_1_1_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_54);
                            	    lv_args_4_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"args",
                            	      									lv_args_4_0,
                            	      									"org.eclipse.n4js.N4JS.AnnotationArgument");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop429;
                                }
                            } while (true);


                            }
                            break;

                    }

                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotationArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationArgument=ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject this_LiteralAnnotationArgument_0 = null;

        EObject this_TypeRefAnnotationArgument_1 = null;



        	enterRule();

        try {
            {
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==False||LA432_0==Null||LA432_0==True||LA432_0==SolidusEqualsSign||LA432_0==Solidus||LA432_0==RULE_DOUBLE||(LA432_0>=RULE_HEX_INT && LA432_0<=RULE_LEGACY_OCTAL_INT)||LA432_0==RULE_SCIENTIFIC_INT||LA432_0==RULE_STRING||LA432_0==RULE_INT) ) {
                alt432=1;
            }
            else if ( ((LA432_0>=Intersection && LA432_0<=Constructor)||LA432_0==Promisify||LA432_0==Default||LA432_0==Target||LA432_0==Await||LA432_0==Union||LA432_0==This||LA432_0==This_1||(LA432_0>=Type && LA432_0<=Void)||LA432_0==LeftParenthesis||LA432_0==QuestionMark||LA432_0==LeftSquareBracket||LA432_0==LeftCurlyBracket||LA432_0==Tilde||LA432_0==RULE_IDENTIFIER) ) {
                alt432=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);

                throw nvae;
            }
            switch (alt432) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_LiteralAnnotationArgument_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_LiteralAnnotationArgument_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefAnnotationArgument_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRefAnnotationArgument_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteralAnnotationArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralAnnotationArgument=ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject lv_literal_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralLiteralParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_literal_0_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getLiteralAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"literal",
              					lv_literal_0_0,
              					"org.eclipse.n4js.N4JS.Literal");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefAnnotationArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefAnnotationArgument=ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;

        EObject lv_typeRef_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefTypeRefParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_0_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeRefAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"typeRef",
              					lv_typeRef_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotationList = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationList=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationList() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_annotations_2_0 = null;

        EObject lv_annotations_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getAnnotationListAccess().getAnnotationListAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_152); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_155);
            lv_annotations_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getAnnotationListRule());
              							}
              							add(
              								current,
              								"annotations",
              								lv_annotations_2_0,
              								"org.eclipse.n4js.N4JS.AnnotationNoAtSign");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            loop433:
            do {
                int alt433=2;
                int LA433_0 = input.LA(1);

                if ( (LA433_0==CommercialAt) ) {
                    alt433=1;
                }


                switch (alt433) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_155);
            	    lv_annotations_3_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_3_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop433;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpressionAnnotationList = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionAnnotationList=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject lv_annotations_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getExpressionAnnotationListAccess().getExpressionAnnotationListAction_0(),
              					current);
              			
            }

            }
            int cnt434=0;
            loop434:
            do {
                int alt434=2;
                int LA434_0 = input.LA(1);

                if ( (LA434_0==CommercialAt) ) {
                    alt434=1;
                }


                switch (alt434) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_155);
            	    lv_annotations_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExpressionAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt434 >= 1 ) break loop434;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(434, input);
                        throw eee;
                }
                cnt434++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePropertyAssignmentAnnotationList = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignmentAnnotationList=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignmentAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject lv_annotations_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getPropertyAssignmentAnnotationListAccess().getPropertyAssignmentAnnotationListAction_0(),
              					current);
              			
            }

            }
            int cnt435=0;
            loop435:
            do {
                int alt435=2;
                int LA435_0 = input.LA(1);

                if ( (LA435_0==CommercialAt) ) {
                    alt435=1;
                }


                switch (alt435) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_155);
            	    lv_annotations_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPropertyAssignmentAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt435 >= 1 ) break loop435;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(435, input);
                        throw eee;
                }
                cnt435++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4MemberAnnotationList = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberAnnotationList=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;

        EObject lv_annotations_1_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4MemberAnnotationListAccess().getN4MemberAnnotationListAction_0(),
              					current);
              			
            }

            }
            int cnt436=0;
            loop436:
            do {
                int alt436=2;
                int LA436_0 = input.LA(1);

                if ( (LA436_0==CommercialAt) ) {
                    alt436=1;
                }


                switch (alt436) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_155);
            	    lv_annotations_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4MemberAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt436 >= 1 ) break loop436;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(436, input);
                        throw eee;
                }
                cnt436++;
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeReference(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            int alt437=2;
            alt437 = dfa437.predict(input);
            switch (alt437) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeReferenceRule());
                      						}
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTypeReferenceAccess().getAstNamespaceModuleNamespaceVirtualTypeCrossReference_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_121);
                    ruleTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,FullStop,FOLLOW_156); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeReferenceAccess().getFullStopKeyword_0_1());
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeReferenceRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeReferenceAccess().getDeclaredTypeTypeCrossReference_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypeReferenceName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypeReferenceName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceName=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypeReferenceName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_IDENTIFIER_6=null;


        	enterRule();

        try {
            {
            int alt438=7;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt438=1;
                }
                break;
            case This:
                {
                alt438=2;
                }
                break;
            case Await:
                {
                alt438=3;
                }
                break;
            case Promisify:
                {
                alt438=4;
                }
                break;
            case Target:
                {
                alt438=5;
                }
                break;
            case Default:
                {
                alt438=6;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt438=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 438, 0, input);

                throw nvae;
            }

            switch (alt438) {
                case 1 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getDefaultKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    this_IDENTIFIER_6=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_6);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_6, grammarAccess.getTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_6());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4ClassDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassDeclaration=ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject this_VersionDeclaration_4 = null;

        EObject this_TypeVariables_5 = null;

        EObject this_ClassExtendsImplements_6 = null;

        EObject this_Members_7 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            loop439:
            do {
                int alt439=2;
                int LA439_0 = input.LA(1);

                if ( ((LA439_0>=Protected && LA439_0<=Abstract)||LA439_0==External||(LA439_0>=Private && LA439_0<=Project)||LA439_0==Public||LA439_0==Static||LA439_0==Const) ) {
                    alt439=1;
                }


                switch (alt439) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_6);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop439;
                }
            } while (true);

            otherlv_1=(Token)match(input,Class,FOLLOW_157); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_1());
              				
            }
            int alt440=2;
            int LA440_0 = input.LA(1);

            if ( (LA440_0==Tilde) ) {
                alt440=1;
            }
            switch (alt440) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt441=2;
            int LA441_0 = input.LA(1);

            if ( ((LA441_0>=Intersection && LA441_0<=Constructor)||(LA441_0>=Promisify && LA441_0<=Abstract)||LA441_0==External||(LA441_0>=Private && LA441_0<=Project)||LA441_0==Public||LA441_0==Static||LA441_0==Target||(LA441_0>=Async && LA441_0<=Await)||LA441_0==Union||(LA441_0>=Yield && LA441_0<=This)||LA441_0==From||LA441_0==Type||(LA441_0>=Get && LA441_0<=Let)||(LA441_0>=Out && LA441_0<=Set)||LA441_0==As||LA441_0==Of||LA441_0==RULE_IDENTIFIER) ) {
                alt441=1;
            }
            else if ( (LA441_0==Implements) ) {
                int LA441_2 = input.LA(2);

                if ( (LA441_2==Implements||LA441_2==Extends||LA441_2==LessThanSign||LA441_2==LeftCurlyBracket||LA441_2==RULE_VERSION) ) {
                    alt441=1;
                }
            }
            switch (alt441) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                      						
                    }
                    pushFollow(FOLLOW_9);
                    lv_name_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt442=2;
            int LA442_0 = input.LA(1);

            if ( (LA442_0==RULE_VERSION) ) {
                alt442=1;
            }
            switch (alt442) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    this_VersionDeclaration_4=ruleVersionDeclaration(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_VersionDeclaration_4;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }
            int alt443=2;
            int LA443_0 = input.LA(1);

            if ( (LA443_0==LessThanSign) ) {
                alt443=1;
            }
            switch (alt443) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_9);
                    this_TypeVariables_5=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_5;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt444=2;
            int LA444_0 = input.LA(1);

            if ( (LA444_0==Implements||LA444_0==Extends) ) {
                alt444=1;
            }
            switch (alt444) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getClassExtendsImplementsParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_9);
                    this_ClassExtendsImplements_6=ruleClassExtendsImplements(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassExtendsImplements_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_Members_7=ruleMembers(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Members_7;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMembers(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_158); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            loop445:
            do {
                int alt445=2;
                int LA445_0 = input.LA(1);

                if ( ((LA445_0>=Intersection && LA445_0<=With)||(LA445_0>=For && LA445_0<=Var)||(LA445_0>=As && LA445_0<=Of)||LA445_0==LeftParenthesis||LA445_0==Asterisk||LA445_0==LessThanSign||(LA445_0>=CommercialAt && LA445_0<=LeftSquareBracket)||LA445_0==LeftCurlyBracket||LA445_0==Tilde||LA445_0==RULE_DOUBLE||LA445_0==RULE_HEX_INT||LA445_0==RULE_OCTAL_INT||LA445_0==RULE_SCIENTIFIC_INT||LA445_0==RULE_IDENTIFIER||LA445_0==RULE_STRING||LA445_0==RULE_INT) ) {
                    alt445=1;
                }


                switch (alt445) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_158);
            	    lv_ownedMembersRaw_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop445;
                }
            } while (true);

            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Members(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_158); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            loop446:
            do {
                int alt446=2;
                int LA446_0 = input.LA(1);

                if ( ((LA446_0>=Intersection && LA446_0<=With)||(LA446_0>=For && LA446_0<=Var)||(LA446_0>=As && LA446_0<=Of)||LA446_0==LeftParenthesis||LA446_0==Asterisk||LA446_0==LessThanSign||(LA446_0>=CommercialAt && LA446_0<=LeftSquareBracket)||LA446_0==LeftCurlyBracket||LA446_0==Tilde||LA446_0==RULE_DOUBLE||LA446_0==RULE_HEX_INT||LA446_0==RULE_OCTAL_INT||LA446_0==RULE_SCIENTIFIC_INT||LA446_0==RULE_IDENTIFIER||LA446_0==RULE_STRING||LA446_0==RULE_INT) ) {
                    alt446=1;
                }


                switch (alt446) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_158);
            	    lv_ownedMembersRaw_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop446;
                }
            } while (true);

            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsImplements(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_ClassExtendsClause_0 = null;

        EObject this_ClassImplementsList_1 = null;

        EObject this_ClassImplementsList_2 = null;

        EObject this_ClassExtendsClause_3 = null;



        	enterRule();

        try {
            {
            int alt449=2;
            int LA449_0 = input.LA(1);

            if ( (LA449_0==Extends) ) {
                alt449=1;
            }
            else if ( (LA449_0==Implements) ) {
                alt449=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 449, 0, input);

                throw nvae;
            }
            switch (alt449) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0());
                      			
                    }
                    pushFollow(FOLLOW_159);
                    this_ClassExtendsClause_0=ruleClassExtendsClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassExtendsClause_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt447=2;
                    int LA447_0 = input.LA(1);

                    if ( (LA447_0==Implements) ) {
                        alt447=1;
                    }
                    switch (alt447) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassImplementsList_1=ruleClassImplementsList(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ClassImplementsList_1;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_61);
                    this_ClassImplementsList_2=ruleClassImplementsList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassImplementsList_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt448=2;
                    int LA448_0 = input.LA(1);

                    if ( (LA448_0==Extends) ) {
                        alt448=1;
                    }
                    switch (alt448) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassExtendsClause_3=ruleClassExtendsClause(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ClassExtendsClause_3;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsImplements(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_ClassExtendsClause_0 = null;

        EObject this_ClassImplementsList_1 = null;

        EObject this_ClassImplementsList_2 = null;

        EObject this_ClassExtendsClause_3 = null;



        	enterRule();

        try {
            {
            int alt452=2;
            int LA452_0 = input.LA(1);

            if ( (LA452_0==Extends) ) {
                alt452=1;
            }
            else if ( (LA452_0==Implements) ) {
                alt452=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 452, 0, input);

                throw nvae;
            }
            switch (alt452) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0());
                      			
                    }
                    pushFollow(FOLLOW_159);
                    this_ClassExtendsClause_0=norm1_ClassExtendsClause(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassExtendsClause_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt450=2;
                    int LA450_0 = input.LA(1);

                    if ( (LA450_0==Implements) ) {
                        alt450=1;
                    }
                    switch (alt450) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassImplementsList_1=ruleClassImplementsList(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ClassImplementsList_1;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0());
                      			
                    }
                    pushFollow(FOLLOW_61);
                    this_ClassImplementsList_2=ruleClassImplementsList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassImplementsList_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    int alt451=2;
                    int LA451_0 = input.LA(1);

                    if ( (LA451_0==Extends) ) {
                        alt451=1;
                    }
                    switch (alt451) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassExtendsClause_3=norm1_ClassExtendsClause(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ClassExtendsClause_3;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_superClassRef_1_0 = null;

        EObject lv_superClassExpression_2_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Extends,FOLLOW_160); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
              		
            }
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( (LA453_0==Void) && (synpred274_InternalN4JSParser())) {
                alt453=1;
            }
            else if ( (LA453_0==This) ) {
                int LA453_2 = input.LA(2);

                if ( (synpred274_InternalN4JSParser()) ) {
                    alt453=1;
                }
                else if ( (true) ) {
                    alt453=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 453, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA453_0==Await) ) {
                int LA453_3 = input.LA(2);

                if ( (synpred274_InternalN4JSParser()) ) {
                    alt453=1;
                }
                else if ( (true) ) {
                    alt453=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 453, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA453_0==Promisify) ) {
                int LA453_4 = input.LA(2);

                if ( (synpred274_InternalN4JSParser()) ) {
                    alt453=1;
                }
                else if ( (true) ) {
                    alt453=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 453, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA453_0==Target) ) {
                int LA453_5 = input.LA(2);

                if ( (synpred274_InternalN4JSParser()) ) {
                    alt453=1;
                }
                else if ( (true) ) {
                    alt453=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 453, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA453_0==Default) && (synpred274_InternalN4JSParser())) {
                alt453=1;
            }
            else if ( (LA453_0==RULE_IDENTIFIER) ) {
                int LA453_7 = input.LA(2);

                if ( (synpred274_InternalN4JSParser()) ) {
                    alt453=1;
                }
                else if ( (true) ) {
                    alt453=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 453, 7, input);

                    throw nvae;
                }
            }
            else if ( ((LA453_0>=Intersection && LA453_0<=Implements)||(LA453_0>=Interface && LA453_0<=Abstract)||(LA453_0>=External && LA453_0<=Function)||(LA453_0>=Private && LA453_0<=Project)||(LA453_0>=Import && LA453_0<=Public)||LA453_0==Static||LA453_0==Async||LA453_0==Class||(LA453_0>=False && LA453_0<=Super)||LA453_0==Union||LA453_0==Yield||(LA453_0>=From && LA453_0<=Type)||(LA453_0>=Get && LA453_0<=Set)||LA453_0==SolidusEqualsSign||LA453_0==As||LA453_0==Of||LA453_0==LeftParenthesis||LA453_0==Solidus||LA453_0==LessThanSign||(LA453_0>=CommercialAt && LA453_0<=LeftSquareBracket)||LA453_0==LeftCurlyBracket||LA453_0==RULE_DOUBLE||(LA453_0>=RULE_HEX_INT && LA453_0<=RULE_LEGACY_OCTAL_INT)||LA453_0==RULE_SCIENTIFIC_INT||LA453_0==RULE_STRING||(LA453_0>=RULE_TEMPLATE_HEAD && LA453_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA453_0==RULE_INT) ) {
                alt453=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 453, 0, input);

                throw nvae;
            }
            switch (alt453) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassRef_1_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassExpression_2_0=ruleLeftHandSideExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassExpression",
                      							lv_superClassExpression_2_0,
                      							"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_superClassRef_1_0 = null;

        EObject lv_superClassExpression_2_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Extends,FOLLOW_160); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
              		
            }
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( (LA454_0==Void) && (synpred275_InternalN4JSParser())) {
                alt454=1;
            }
            else if ( (LA454_0==This) ) {
                int LA454_2 = input.LA(2);

                if ( (synpred275_InternalN4JSParser()) ) {
                    alt454=1;
                }
                else if ( (true) ) {
                    alt454=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 454, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA454_0==Await) ) {
                int LA454_3 = input.LA(2);

                if ( (synpred275_InternalN4JSParser()) ) {
                    alt454=1;
                }
                else if ( (true) ) {
                    alt454=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 454, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA454_0==Promisify) ) {
                int LA454_4 = input.LA(2);

                if ( (synpred275_InternalN4JSParser()) ) {
                    alt454=1;
                }
                else if ( (true) ) {
                    alt454=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 454, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA454_0==Target) ) {
                int LA454_5 = input.LA(2);

                if ( (synpred275_InternalN4JSParser()) ) {
                    alt454=1;
                }
                else if ( (true) ) {
                    alt454=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 454, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA454_0==Default) && (synpred275_InternalN4JSParser())) {
                alt454=1;
            }
            else if ( (LA454_0==RULE_IDENTIFIER) ) {
                int LA454_7 = input.LA(2);

                if ( (synpred275_InternalN4JSParser()) ) {
                    alt454=1;
                }
                else if ( (true) ) {
                    alt454=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 454, 7, input);

                    throw nvae;
                }
            }
            else if ( ((LA454_0>=Intersection && LA454_0<=Implements)||(LA454_0>=Interface && LA454_0<=Abstract)||(LA454_0>=External && LA454_0<=Function)||(LA454_0>=Private && LA454_0<=Project)||(LA454_0>=Import && LA454_0<=Public)||LA454_0==Static||LA454_0==Async||LA454_0==Class||(LA454_0>=False && LA454_0<=Super)||LA454_0==Union||(LA454_0>=From && LA454_0<=Type)||(LA454_0>=Get && LA454_0<=Set)||LA454_0==SolidusEqualsSign||LA454_0==As||LA454_0==Of||LA454_0==LeftParenthesis||LA454_0==Solidus||LA454_0==LessThanSign||(LA454_0>=CommercialAt && LA454_0<=LeftSquareBracket)||LA454_0==LeftCurlyBracket||LA454_0==RULE_DOUBLE||(LA454_0>=RULE_HEX_INT && LA454_0<=RULE_LEGACY_OCTAL_INT)||LA454_0==RULE_SCIENTIFIC_INT||LA454_0==RULE_STRING||(LA454_0>=RULE_TEMPLATE_HEAD && LA454_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA454_0==RULE_INT) ) {
                alt454=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 454, 0, input);

                throw nvae;
            }
            switch (alt454) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassRef_1_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassExpression_2_0=norm1_LeftHandSideExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassExpression",
                      							lv_superClassExpression_2_0,
                      							"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassImplementsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_implementedInterfaceRefs_1_0 = null;

        EObject lv_implementedInterfaceRefs_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Implements,FOLLOW_156); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_30);
            lv_implementedInterfaceRefs_1_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
              					}
              					add(
              						current,
              						"implementedInterfaceRefs",
              						lv_implementedInterfaceRefs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop455:
            do {
                int alt455=2;
                int LA455_0 = input.LA(1);

                if ( (LA455_0==Comma) ) {
                    alt455=1;
                }


                switch (alt455) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getClassImplementsListAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_30);
            	    lv_implementedInterfaceRefs_3_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"implementedInterfaceRefs",
            	      							lv_implementedInterfaceRefs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop455;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4ClassExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassExpression=ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_ClassExtendsImplements_3 = null;

        EObject this_Members_4 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Class,FOLLOW_58); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
              		
            }
            int alt456=2;
            int LA456_0 = input.LA(1);

            if ( ((LA456_0>=Intersection && LA456_0<=Constructor)||(LA456_0>=Promisify && LA456_0<=Abstract)||LA456_0==External||(LA456_0>=Private && LA456_0<=Project)||LA456_0==Public||LA456_0==Static||LA456_0==Target||(LA456_0>=Async && LA456_0<=Await)||LA456_0==Union||(LA456_0>=Yield && LA456_0<=This)||LA456_0==From||LA456_0==Type||(LA456_0>=Get && LA456_0<=Let)||(LA456_0>=Out && LA456_0<=Set)||LA456_0==As||LA456_0==Of||LA456_0==RULE_IDENTIFIER) ) {
                alt456=1;
            }
            else if ( (LA456_0==Implements) ) {
                int LA456_2 = input.LA(2);

                if ( (LA456_2==Implements||LA456_2==Extends||LA456_2==LeftCurlyBracket) ) {
                    alt456=1;
                }
            }
            switch (alt456) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_9);
                    lv_name_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt457=2;
            int LA457_0 = input.LA(1);

            if ( (LA457_0==Implements||LA457_0==Extends) ) {
                alt457=1;
            }
            switch (alt457) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_9);
                    this_ClassExtendsImplements_3=ruleClassExtendsImplements(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassExtendsImplements_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_2);
            this_Members_4=ruleMembers(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4ClassExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_ClassExtendsImplements_3 = null;

        EObject this_Members_4 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Class,FOLLOW_59); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
              		
            }
            int alt458=2;
            int LA458_0 = input.LA(1);

            if ( ((LA458_0>=Intersection && LA458_0<=Constructor)||(LA458_0>=Promisify && LA458_0<=Abstract)||LA458_0==External||(LA458_0>=Private && LA458_0<=Project)||LA458_0==Public||LA458_0==Static||LA458_0==Target||(LA458_0>=Async && LA458_0<=Await)||LA458_0==Union||LA458_0==This||LA458_0==From||LA458_0==Type||(LA458_0>=Get && LA458_0<=Let)||(LA458_0>=Out && LA458_0<=Set)||LA458_0==As||LA458_0==Of||LA458_0==RULE_IDENTIFIER) ) {
                alt458=1;
            }
            else if ( (LA458_0==Implements) ) {
                int LA458_2 = input.LA(2);

                if ( (LA458_2==Implements||LA458_2==Extends||LA458_2==LeftCurlyBracket) ) {
                    alt458=1;
                }
            }
            switch (alt458) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_59);
                    lv_name_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt459=2;
            int LA459_0 = input.LA(1);

            if ( (LA459_0==Implements||LA459_0==Extends) ) {
                alt459=1;
            }
            switch (alt459) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_59);
                    this_ClassExtendsImplements_3=norm1_ClassExtendsImplements(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ClassExtendsImplements_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
              		
            }
            pushFollow(FOLLOW_2);
            this_Members_4=norm1_Members(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4InterfaceDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4InterfaceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4InterfaceDeclaration=ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4InterfaceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;

        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject this_VersionDeclaration_4 = null;

        EObject this_TypeVariables_5 = null;

        EObject this_InterfaceExtendsList_6 = null;

        EObject this_Members_7 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            loop460:
            do {
                int alt460=2;
                int LA460_0 = input.LA(1);

                if ( ((LA460_0>=Protected && LA460_0<=Abstract)||LA460_0==External||(LA460_0>=Private && LA460_0<=Project)||LA460_0==Public||LA460_0==Static||LA460_0==Const) ) {
                    alt460=1;
                }


                switch (alt460) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_10);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop460;
                }
            } while (true);

            otherlv_1=(Token)match(input,Interface,FOLLOW_157); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_1());
              				
            }
            int alt461=2;
            int LA461_0 = input.LA(1);

            if ( (LA461_0==Tilde) ) {
                alt461=1;
            }
            switch (alt461) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                      						
                    }
                    pushFollow(FOLLOW_58);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt462=2;
            int LA462_0 = input.LA(1);

            if ( ((LA462_0>=Intersection && LA462_0<=Constructor)||(LA462_0>=Promisify && LA462_0<=Abstract)||LA462_0==External||(LA462_0>=Private && LA462_0<=Project)||LA462_0==Public||LA462_0==Static||LA462_0==Target||(LA462_0>=Async && LA462_0<=Await)||LA462_0==Union||(LA462_0>=Yield && LA462_0<=This)||LA462_0==From||LA462_0==Type||(LA462_0>=Get && LA462_0<=Let)||(LA462_0>=Out && LA462_0<=Set)||LA462_0==As||LA462_0==Of||LA462_0==RULE_IDENTIFIER) ) {
                alt462=1;
            }
            else if ( (LA462_0==Implements) ) {
                int LA462_2 = input.LA(2);

                if ( (LA462_2==Implements||LA462_2==Extends||LA462_2==LessThanSign||LA462_2==LeftCurlyBracket||LA462_2==RULE_VERSION) ) {
                    alt462=1;
                }
            }
            switch (alt462) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                      						
                    }
                    pushFollow(FOLLOW_9);
                    lv_name_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt463=2;
            int LA463_0 = input.LA(1);

            if ( (LA463_0==RULE_VERSION) ) {
                alt463=1;
            }
            switch (alt463) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    this_VersionDeclaration_4=ruleVersionDeclaration(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_VersionDeclaration_4;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }
            int alt464=2;
            int LA464_0 = input.LA(1);

            if ( (LA464_0==LessThanSign) ) {
                alt464=1;
            }
            switch (alt464) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_9);
                    this_TypeVariables_5=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeVariables_5;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt465=2;
            int LA465_0 = input.LA(1);

            if ( (LA465_0==Implements||LA465_0==Extends) ) {
                alt465=1;
            }
            switch (alt465) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceExtendsListParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_9);
                    this_InterfaceExtendsList_6=ruleInterfaceExtendsList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_InterfaceExtendsList_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3());
              		
            }
            pushFollow(FOLLOW_2);
            this_Members_7=ruleMembers(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Members_7;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleInterfaceExtendsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_superInterfaceRefs_2_0 = null;

        EObject lv_superInterfaceRefs_4_0 = null;



        	enterRule();

        try {
            {
            {
            int alt466=2;
            int LA466_0 = input.LA(1);

            if ( (LA466_0==Extends) ) {
                alt466=1;
            }
            else if ( (LA466_0==Implements) ) {
                alt466=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 466, 0, input);

                throw nvae;
            }
            switch (alt466) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,Extends,FOLLOW_156); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getInterfaceExtendsListAccess().getExtendsKeyword_0_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    otherlv_1=(Token)match(input,Implements,FOLLOW_156); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getInterfaceExtendsListAccess().getImplementsKeyword_0_1());
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_30);
            lv_superInterfaceRefs_2_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInterfaceExtendsListRule());
              					}
              					add(
              						current,
              						"superInterfaceRefs",
              						lv_superInterfaceRefs_2_0,
              						"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop467:
            do {
                int alt467=2;
                int LA467_0 = input.LA(1);

                if ( (LA467_0==Comma) ) {
                    alt467=1;
                }


                switch (alt467) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getInterfaceExtendsListAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_30);
            	    lv_superInterfaceRefs_4_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getInterfaceExtendsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"superInterfaceRefs",
            	      							lv_superInterfaceRefs_4_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.ParameterizedTypeRefNominal");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop467;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4EnumDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumDeclaration=ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        AntlrDatatypeRuleToken lv_name_3_0 = null;

        EObject this_VersionDeclaration_4 = null;

        EObject lv_literals_6_0 = null;

        EObject lv_literals_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4EnumDeclarationAccess().getN4EnumDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop468:
            do {
                int alt468=2;
                int LA468_0 = input.LA(1);

                if ( ((LA468_0>=Protected && LA468_0<=Abstract)||LA468_0==External||(LA468_0>=Private && LA468_0<=Project)||LA468_0==Public||LA468_0==Static||LA468_0==Const) ) {
                    alt468=1;
                }


                switch (alt468) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_11);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop468;
                }
            } while (true);

            otherlv_2=(Token)match(input,Enum,FOLLOW_161); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
              				
            }
            int alt469=2;
            int LA469_0 = input.LA(1);

            if ( ((LA469_0>=Intersection && LA469_0<=Implements)||(LA469_0>=Promisify && LA469_0<=Abstract)||LA469_0==External||(LA469_0>=Private && LA469_0<=Project)||LA469_0==Public||LA469_0==Static||LA469_0==Target||(LA469_0>=Async && LA469_0<=Await)||LA469_0==Union||(LA469_0>=Yield && LA469_0<=This)||LA469_0==From||LA469_0==Type||(LA469_0>=Get && LA469_0<=Let)||(LA469_0>=Out && LA469_0<=Set)||LA469_0==As||LA469_0==Of||LA469_0==RULE_IDENTIFIER) ) {
                alt469=1;
            }
            switch (alt469) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                      						
                    }
                    pushFollow(FOLLOW_12);
                    lv_name_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    break;

            }
            int alt470=2;
            int LA470_0 = input.LA(1);

            if ( (LA470_0==RULE_VERSION) ) {
                alt470=1;
            }
            switch (alt470) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4());
                      					
                    }
                    pushFollow(FOLLOW_13);
                    this_VersionDeclaration_4=ruleVersionDeclaration(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_VersionDeclaration_4;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }


            }


            }

            otherlv_5=(Token)match(input,LeftCurlyBracket,FOLLOW_32); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt472=2;
            int LA472_0 = input.LA(1);

            if ( ((LA472_0>=Intersection && LA472_0<=With)||(LA472_0>=For && LA472_0<=Var)||(LA472_0>=As && LA472_0<=Of)||LA472_0==RULE_IDENTIFIER) ) {
                alt472=1;
            }
            switch (alt472) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_literals_6_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						add(
                      							current,
                      							"literals",
                      							lv_literals_6_0,
                      							"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop471:
                    do {
                        int alt471=2;
                        int LA471_0 = input.LA(1);

                        if ( (LA471_0==Comma) ) {
                            alt471=1;
                        }


                        switch (alt471) {
                    	case 1 :
                    	    {
                    	    otherlv_7=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_7, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_literals_8_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"literals",
                    	      								lv_literals_8_0,
                    	      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop471;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4EnumLiteral = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumLiteral=ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumLiteral() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_value_2_0=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getN4EnumLiteralAccess().getNameIdentifierNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_43);
            lv_name_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4EnumLiteralRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt473=2;
            int LA473_0 = input.LA(1);

            if ( (LA473_0==Colon) ) {
                alt473=1;
            }
            switch (alt473) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                      			
                    }
                    {
                    {
                    lv_value_2_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_2_0, grammarAccess.getN4EnumLiteralAccess().getValueSTRINGTerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4EnumLiteralRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.STRING");
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4MemberDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberDeclaration=ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedN4MemberDeclaration_0 = null;

        EObject this_N4GetterDeclaration_1 = null;

        EObject this_N4SetterDeclaration_2 = null;

        EObject this_N4MethodDeclaration_3 = null;

        EObject this_N4FieldDeclaration_4 = null;

        EObject this_N4CallableConstructorDeclaration_5 = null;



        	enterRule();

        try {
            {
            int alt474=6;
            alt474 = dfa474.predict(input);
            switch (alt474) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4FieldDeclaration_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallableConstructorDeclaration_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4CallableConstructorDeclaration_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_AnnotatedN4MemberDeclaration_0 = null;

        EObject this_N4GetterDeclaration_1 = null;

        EObject this_N4SetterDeclaration_2 = null;

        EObject this_N4MethodDeclaration_3 = null;

        EObject this_N4FieldDeclaration_4 = null;

        EObject this_N4CallableConstructorDeclaration_5 = null;



        	enterRule();

        try {
            {
            int alt475=6;
            alt475 = dfa475.predict(input);
            switch (alt475) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4FieldDeclaration_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallableConstructorDeclaration_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_N4CallableConstructorDeclaration_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnnotatedN4MemberDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedN4MemberDeclaration=ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_26=null;
        EObject this_N4MemberAnnotationList_0 = null;

        Enumerator lv_declaredModifiers_2_0 = null;

        EObject this_GetterHeader_3 = null;

        EObject lv_body_4_0 = null;

        Enumerator lv_declaredModifiers_7_0 = null;

        EObject lv_declaredName_9_0 = null;

        EObject lv_fpar_12_0 = null;

        EObject lv_body_14_0 = null;

        Enumerator lv_declaredModifiers_17_0 = null;

        EObject this_TypeVariables_18 = null;

        EObject this_BogusTypeRefFragment_19 = null;

        EObject lv_declaredName_21_0 = null;

        EObject this_MethodParamsReturnAndBody_22 = null;

        EObject this_AsyncNoTrailingLineBreak_23 = null;

        EObject lv_declaredName_24_0 = null;

        EObject this_MethodParamsReturnAndBody_25 = null;

        EObject this_FieldDeclarationImpl_28 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_162);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt488=4;
            alt488 = dfa488.predict(input);
            switch (alt488) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop476:
                    do {
                        int alt476=2;
                        int LA476_0 = input.LA(1);

                        if ( ((LA476_0>=Protected && LA476_0<=Abstract)||LA476_0==External||(LA476_0>=Private && LA476_0<=Project)||LA476_0==Public||LA476_0==Static||LA476_0==Const) ) {
                            alt476=1;
                        }


                        switch (alt476) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_163);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop476;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                      						
                    }
                    pushFollow(FOLLOW_164);
                    this_GetterHeader_3=ruleGetterHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt477=2;
                    alt477 = dfa477.predict(input);
                    switch (alt477) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                              						
                            }
                            pushFollow(FOLLOW_110);
                            lv_body_4_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt478=2;
                    int LA478_0 = input.LA(1);

                    if ( (LA478_0==Semicolon) ) {
                        alt478=1;
                    }
                    switch (alt478) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop479:
                    do {
                        int alt479=2;
                        int LA479_0 = input.LA(1);

                        if ( ((LA479_0>=Protected && LA479_0<=Abstract)||LA479_0==External||(LA479_0>=Private && LA479_0<=Project)||LA479_0==Public||LA479_0==Static||LA479_0==Const) ) {
                            alt479=1;
                        }


                        switch (alt479) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_165);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop479;
                        }
                    } while (true);

                    otherlv_8=(Token)match(input,Set,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                      								
                    }
                    pushFollow(FOLLOW_108);
                    lv_declaredName_9_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }


                    }


                    }
                    int alt480=2;
                    int LA480_0 = input.LA(1);

                    if ( (LA480_0==QuestionMark) ) {
                        alt480=1;
                    }
                    switch (alt480) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                              						
                            }

                            }


                            }
                            break;

                    }

                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_72);
                    lv_fpar_12_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                      				
                    }
                    int alt481=2;
                    alt481 = dfa481.predict(input);
                    switch (alt481) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                              						
                            }
                            pushFollow(FOLLOW_110);
                            lv_body_14_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt482=2;
                    int LA482_0 = input.LA(1);

                    if ( (LA482_0==Semicolon) ) {
                        alt482=1;
                    }
                    switch (alt482) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop483:
                    do {
                        int alt483=2;
                        alt483 = dfa483.predict(input);
                        switch (alt483) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_162);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop483;
                        }
                    } while (true);
                    int alt484=2;
                    int LA484_0 = input.LA(1);

                    if ( (LA484_0==LessThanSign) ) {
                        alt484=1;
                    }
                    switch (alt484) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2());
                              							
                            }
                            pushFollow(FOLLOW_109);
                            this_TypeVariables_18=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt485=2;
                    alt485 = dfa485.predict(input);
                    switch (alt485) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3());
                              							
                            }
                            pushFollow(FOLLOW_109);
                            this_BogusTypeRefFragment_19=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_BogusTypeRefFragment_19;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt486=2;
                    int LA486_0 = input.LA(1);

                    if ( (LA486_0==Asterisk) ) {
                        alt486=1;
                    }
                    else if ( ((LA486_0>=Intersection && LA486_0<=With)||(LA486_0>=For && LA486_0<=Var)||(LA486_0>=As && LA486_0<=Of)||LA486_0==LeftSquareBracket||LA486_0==RULE_DOUBLE||LA486_0==RULE_HEX_INT||LA486_0==RULE_OCTAL_INT||LA486_0==RULE_SCIENTIFIC_INT||LA486_0==RULE_IDENTIFIER||LA486_0==RULE_STRING||LA486_0==RULE_INT) ) {
                        alt486=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 486, 0, input);

                        throw nvae;
                    }
                    switch (alt486) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_107); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                              										
                            }
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                              										
                            }

                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0());
                              										
                            }
                            pushFollow(FOLLOW_39);
                            lv_declaredName_21_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2());
                              									
                            }
                            pushFollow(FOLLOW_110);
                            this_MethodParamsReturnAndBody_22=norm1_MethodParamsReturnAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsReturnAndBody_22;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0());
                              								
                            }
                            pushFollow(FOLLOW_107);
                            this_AsyncNoTrailingLineBreak_23=ruleAsyncNoTrailingLineBreak(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									current = this_AsyncNoTrailingLineBreak_23;
                              									afterParserOrEnumRuleCall();
                              								
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0());
                              										
                            }
                            pushFollow(FOLLOW_166);
                            lv_declaredName_24_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_24_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2());
                              									
                            }
                            pushFollow(FOLLOW_110);
                            this_MethodParamsReturnAndBody_25=ruleMethodParamsReturnAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsReturnAndBody_25;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt487=2;
                    int LA487_0 = input.LA(1);

                    if ( (LA487_0==Semicolon) ) {
                        alt487=1;
                    }
                    switch (alt487) {
                        case 1 :
                            {
                            otherlv_26=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_26, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_3_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_28=ruleFieldDeclarationImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FieldDeclarationImpl_28;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_26=null;
        EObject this_N4MemberAnnotationList_0 = null;

        Enumerator lv_declaredModifiers_2_0 = null;

        EObject this_GetterHeader_3 = null;

        EObject lv_body_4_0 = null;

        Enumerator lv_declaredModifiers_7_0 = null;

        EObject lv_declaredName_9_0 = null;

        EObject lv_fpar_12_0 = null;

        EObject lv_body_14_0 = null;

        Enumerator lv_declaredModifiers_17_0 = null;

        EObject this_TypeVariables_18 = null;

        EObject this_BogusTypeRefFragment_19 = null;

        EObject lv_declaredName_21_0 = null;

        EObject this_MethodParamsReturnAndBody_22 = null;

        EObject this_AsyncNoTrailingLineBreak_23 = null;

        EObject lv_declaredName_24_0 = null;

        EObject this_MethodParamsReturnAndBody_25 = null;

        EObject this_FieldDeclarationImpl_28 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_162);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt501=4;
            alt501 = dfa501.predict(input);
            switch (alt501) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop489:
                    do {
                        int alt489=2;
                        int LA489_0 = input.LA(1);

                        if ( ((LA489_0>=Protected && LA489_0<=Abstract)||LA489_0==External||(LA489_0>=Private && LA489_0<=Project)||LA489_0==Public||LA489_0==Static||LA489_0==Const) ) {
                            alt489=1;
                        }


                        switch (alt489) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_163);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop489;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                      						
                    }
                    pushFollow(FOLLOW_164);
                    this_GetterHeader_3=norm1_GetterHeader(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    int alt490=2;
                    alt490 = dfa490.predict(input);
                    switch (alt490) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                              						
                            }
                            pushFollow(FOLLOW_110);
                            lv_body_4_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt491=2;
                    int LA491_0 = input.LA(1);

                    if ( (LA491_0==Semicolon) ) {
                        alt491=1;
                    }
                    switch (alt491) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop492:
                    do {
                        int alt492=2;
                        int LA492_0 = input.LA(1);

                        if ( ((LA492_0>=Protected && LA492_0<=Abstract)||LA492_0==External||(LA492_0>=Private && LA492_0<=Project)||LA492_0==Public||LA492_0==Static||LA492_0==Const) ) {
                            alt492=1;
                        }


                        switch (alt492) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_165);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop492;
                        }
                    } while (true);

                    otherlv_8=(Token)match(input,Set,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                      								
                    }
                    pushFollow(FOLLOW_108);
                    lv_declaredName_9_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }


                    }


                    }
                    int alt493=2;
                    int LA493_0 = input.LA(1);

                    if ( (LA493_0==QuestionMark) ) {
                        alt493=1;
                    }
                    switch (alt493) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", true, "?");
                              						
                            }

                            }


                            }
                            break;

                    }

                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                      						
                    }
                    pushFollow(FOLLOW_72);
                    lv_fpar_12_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                      				
                    }
                    int alt494=2;
                    alt494 = dfa494.predict(input);
                    switch (alt494) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                              						
                            }
                            pushFollow(FOLLOW_110);
                            lv_body_14_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }
                            break;

                    }
                    int alt495=2;
                    int LA495_0 = input.LA(1);

                    if ( (LA495_0==Semicolon) ) {
                        alt495=1;
                    }
                    switch (alt495) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                      							
                    }

                    }
                    loop496:
                    do {
                        int alt496=2;
                        alt496 = dfa496.predict(input);
                        switch (alt496) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	      								
                    	    }
                    	    pushFollow(FOLLOW_162);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	      								
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop496;
                        }
                    } while (true);
                    int alt497=2;
                    int LA497_0 = input.LA(1);

                    if ( (LA497_0==LessThanSign) ) {
                        alt497=1;
                    }
                    switch (alt497) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2());
                              							
                            }
                            pushFollow(FOLLOW_109);
                            this_TypeVariables_18=ruleTypeVariables(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_TypeVariables_18;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt498=2;
                    alt498 = dfa498.predict(input);
                    switch (alt498) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3());
                              							
                            }
                            pushFollow(FOLLOW_109);
                            this_BogusTypeRefFragment_19=ruleBogusTypeRefFragment(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								current = this_BogusTypeRefFragment_19;
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }
                            break;

                    }
                    int alt499=2;
                    int LA499_0 = input.LA(1);

                    if ( (LA499_0==Asterisk) ) {
                        alt499=1;
                    }
                    else if ( ((LA499_0>=Intersection && LA499_0<=With)||(LA499_0>=For && LA499_0<=Var)||(LA499_0>=As && LA499_0<=Of)||LA499_0==LeftSquareBracket||LA499_0==RULE_DOUBLE||LA499_0==RULE_HEX_INT||LA499_0==RULE_OCTAL_INT||LA499_0==RULE_SCIENTIFIC_INT||LA499_0==RULE_IDENTIFIER||LA499_0==RULE_STRING||LA499_0==RULE_INT) ) {
                        alt499=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 499, 0, input);

                        throw nvae;
                    }
                    switch (alt499) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_107); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                              										
                            }
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", true, "*");
                              										
                            }

                            }


                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0());
                              										
                            }
                            pushFollow(FOLLOW_39);
                            lv_declaredName_21_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2());
                              									
                            }
                            pushFollow(FOLLOW_110);
                            this_MethodParamsReturnAndBody_22=norm1_MethodParamsReturnAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsReturnAndBody_22;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0());
                              								
                            }
                            pushFollow(FOLLOW_107);
                            this_AsyncNoTrailingLineBreak_23=ruleAsyncNoTrailingLineBreak(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									current = this_AsyncNoTrailingLineBreak_23;
                              									afterParserOrEnumRuleCall();
                              								
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0());
                              										
                            }
                            pushFollow(FOLLOW_166);
                            lv_declaredName_24_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_24_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                              										
                            }

                            }


                            }
                            {
                            if ( state.backtracking==0 ) {

                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2());
                              									
                            }
                            pushFollow(FOLLOW_110);
                            this_MethodParamsReturnAndBody_25=ruleMethodParamsReturnAndBody(current);

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              										current = this_MethodParamsReturnAndBody_25;
                              										afterParserOrEnumRuleCall();
                              									
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt500=2;
                    int LA500_0 = input.LA(1);

                    if ( (LA500_0==Semicolon) ) {
                        alt500=1;
                    }
                    switch (alt500) {
                        case 1 :
                            {
                            otherlv_26=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_26, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                              					
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_3_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_28=norm1_FieldDeclarationImpl(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_FieldDeclarationImpl_28;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_declaredOptional_3_0=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_0_0 = null;

        EObject this_BogusTypeRefFragment_1 = null;

        EObject lv_declaredName_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_4 = null;

        EObject lv_expression_6_0 = null;



        	enterRule();

        try {
            {
            {
            loop502:
            do {
                int alt502=2;
                alt502 = dfa502.predict(input);
                switch (alt502) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_107);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop502;
                }
            } while (true);
            int alt503=2;
            alt503 = dfa503.predict(input);
            switch (alt503) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_107);
                    this_BogusTypeRefFragment_1=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_BogusTypeRefFragment_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_167);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt504=2;
            int LA504_0 = input.LA(1);

            if ( (LA504_0==QuestionMark) ) {
                alt504=1;
            }
            switch (alt504) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_168); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==Colon) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_169);
                    this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt506=2;
            int LA506_0 = input.LA(1);

            if ( (LA506_0==EqualsSign) ) {
                alt506=1;
            }
            switch (alt506) {
                case 1 :
                    {
                    otherlv_5=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_5_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_6_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_6_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_declaredOptional_3_0=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_0_0 = null;

        EObject this_BogusTypeRefFragment_1 = null;

        EObject lv_declaredName_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_4 = null;

        EObject lv_expression_6_0 = null;



        	enterRule();

        try {
            {
            {
            loop507:
            do {
                int alt507=2;
                alt507 = dfa507.predict(input);
                switch (alt507) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_107);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop507;
                }
            } while (true);
            int alt508=2;
            alt508 = dfa508.predict(input);
            switch (alt508) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_107);
                    this_BogusTypeRefFragment_1=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_BogusTypeRefFragment_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_167);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt509=2;
            int LA509_0 = input.LA(1);

            if ( (LA509_0==QuestionMark) ) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_168); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt510=2;
            int LA510_0 = input.LA(1);

            if ( (LA510_0==Colon) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_169);
                    this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt511=2;
            int LA511_0 = input.LA(1);

            if ( (LA511_0==EqualsSign) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    otherlv_5=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_5_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_5_1_0());
                      					
                    }
                    pushFollow(FOLLOW_18);
                    lv_expression_6_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_6_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_2);
            ruleSemi();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4FieldDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4FieldDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4FieldDeclaration=ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4FieldDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_FieldDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=ruleFieldDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4FieldDeclaration() throws RecognitionException {
        EObject current = null;

        EObject this_FieldDeclarationImpl_1 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
              			
            }

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=norm1_FieldDeclarationImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4MethodDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MethodDeclaration=ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_generator_4_0=null;
        Token otherlv_10=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_TypeVariables_2 = null;

        EObject this_BogusTypeRefFragment_3 = null;

        EObject lv_declaredName_5_0 = null;

        EObject this_MethodParamsReturnAndBody_6 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject lv_declaredName_8_0 = null;

        EObject this_MethodParamsReturnAndBody_9 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop512:
            do {
                int alt512=2;
                alt512 = dfa512.predict(input);
                switch (alt512) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_162);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop512;
                }
            } while (true);
            int alt513=2;
            int LA513_0 = input.LA(1);

            if ( (LA513_0==LessThanSign) ) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2());
                      					
                    }
                    pushFollow(FOLLOW_109);
                    this_TypeVariables_2=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt514=2;
            alt514 = dfa514.predict(input);
            switch (alt514) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3());
                      					
                    }
                    pushFollow(FOLLOW_109);
                    this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_BogusTypeRefFragment_3;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( (LA515_0==Asterisk) ) {
                alt515=1;
            }
            else if ( ((LA515_0>=Intersection && LA515_0<=With)||(LA515_0>=For && LA515_0<=Var)||(LA515_0>=As && LA515_0<=Of)||LA515_0==LeftSquareBracket||LA515_0==RULE_DOUBLE||LA515_0==RULE_HEX_INT||LA515_0==RULE_OCTAL_INT||LA515_0==RULE_SCIENTIFIC_INT||LA515_0==RULE_IDENTIFIER||LA515_0==RULE_STRING||LA515_0==RULE_INT) ) {
                alt515=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 515, 0, input);

                throw nvae;
            }
            switch (alt515) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                      								
                    }
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                      								
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                      								
                    }
                    pushFollow(FOLLOW_39);
                    lv_declaredName_5_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                      							
                    }
                    pushFollow(FOLLOW_110);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0());
                      						
                    }
                    pushFollow(FOLLOW_107);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0());
                      								
                    }
                    pushFollow(FOLLOW_166);
                    lv_declaredName_8_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_8_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2());
                      							
                    }
                    pushFollow(FOLLOW_110);
                    this_MethodParamsReturnAndBody_9=ruleMethodParamsReturnAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsReturnAndBody_9;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( (LA516_0==Semicolon) ) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    otherlv_10=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MethodDeclaration() throws RecognitionException {
        EObject current = null;

        Token lv_generator_4_0=null;
        Token otherlv_10=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_TypeVariables_2 = null;

        EObject this_BogusTypeRefFragment_3 = null;

        EObject lv_declaredName_5_0 = null;

        EObject this_MethodParamsReturnAndBody_6 = null;

        EObject this_AsyncNoTrailingLineBreak_7 = null;

        EObject lv_declaredName_8_0 = null;

        EObject this_MethodParamsReturnAndBody_9 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop517:
            do {
                int alt517=2;
                alt517 = dfa517.predict(input);
                switch (alt517) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_162);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop517;
                }
            } while (true);
            int alt518=2;
            int LA518_0 = input.LA(1);

            if ( (LA518_0==LessThanSign) ) {
                alt518=1;
            }
            switch (alt518) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2());
                      					
                    }
                    pushFollow(FOLLOW_109);
                    this_TypeVariables_2=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_2;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt519=2;
            alt519 = dfa519.predict(input);
            switch (alt519) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3());
                      					
                    }
                    pushFollow(FOLLOW_109);
                    this_BogusTypeRefFragment_3=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_BogusTypeRefFragment_3;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            int alt520=2;
            int LA520_0 = input.LA(1);

            if ( (LA520_0==Asterisk) ) {
                alt520=1;
            }
            else if ( ((LA520_0>=Intersection && LA520_0<=With)||(LA520_0>=For && LA520_0<=Var)||(LA520_0>=As && LA520_0<=Of)||LA520_0==LeftSquareBracket||LA520_0==RULE_DOUBLE||LA520_0==RULE_HEX_INT||LA520_0==RULE_OCTAL_INT||LA520_0==RULE_SCIENTIFIC_INT||LA520_0==RULE_IDENTIFIER||LA520_0==RULE_STRING||LA520_0==RULE_INT) ) {
                alt520=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 520, 0, input);

                throw nvae;
            }
            switch (alt520) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                      								
                    }
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", true, "*");
                      								
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                      								
                    }
                    pushFollow(FOLLOW_39);
                    lv_declaredName_5_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                      							
                    }
                    pushFollow(FOLLOW_110);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0());
                      						
                    }
                    pushFollow(FOLLOW_107);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                      						
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0());
                      								
                    }
                    pushFollow(FOLLOW_166);
                    lv_declaredName_8_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_8_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                      								
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2());
                      							
                    }
                    pushFollow(FOLLOW_110);
                    this_MethodParamsReturnAndBody_9=ruleMethodParamsReturnAndBody(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								current = this_MethodParamsReturnAndBody_9;
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt521=2;
            int LA521_0 = input.LA(1);

            if ( (LA521_0==Semicolon) ) {
                alt521=1;
            }
            switch (alt521) {
                case 1 :
                    {
                    otherlv_10=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4CallableConstructorDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4CallableConstructorDeclaration=ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4CallableConstructorDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject this_MethodParamsReturnAndBody_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallableConstructorDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_110);
            this_MethodParamsReturnAndBody_0=ruleMethodParamsReturnAndBody(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MethodParamsReturnAndBody_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt522=2;
            int LA522_0 = input.LA(1);

            if ( (LA522_0==Semicolon) ) {
                alt522=1;
            }
            switch (alt522) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject this_MethodParamsReturnAndBody_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallableConstructorDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_110);
            this_MethodParamsReturnAndBody_0=ruleMethodParamsReturnAndBody(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_MethodParamsReturnAndBody_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt523=2;
            int LA523_0 = input.LA(1);

            if ( (LA523_0==Semicolon) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_StrictFormalParameters_0 = null;

        EObject lv_body_1_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_170);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt524=2;
            int LA524_0 = input.LA(1);

            if ( (LA524_0==LeftCurlyBracket) && (synpred306_InternalN4JSParser())) {
                alt524=1;
            }
            switch (alt524) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_StrictFormalParameters_0 = null;

        EObject lv_body_1_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_170);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt525=2;
            int LA525_0 = input.LA(1);

            if ( (LA525_0==LeftCurlyBracket) && (synpred307_InternalN4JSParser())) {
                alt525=1;
            }
            switch (alt525) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_171);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt526=2;
            int LA526_0 = input.LA(1);

            if ( (LA526_0==Colon) ) {
                alt526=1;
            }
            switch (alt526) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepReturnTypeRefParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_170);
                    this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt527=2;
            alt527 = dfa527.predict(input);
            switch (alt527) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        EObject this_StrictFormalParameters_0 = null;

        EObject this_ColonSepReturnTypeRef_1 = null;

        EObject lv_body_2_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_171);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt528=2;
            int LA528_0 = input.LA(1);

            if ( (LA528_0==Colon) ) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepReturnTypeRefParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_170);
                    this_ColonSepReturnTypeRef_1=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt529=2;
            alt529 = dfa529.predict(input);
            switch (alt529) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4GetterDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4GetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4GetterDeclaration=ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4GetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_GetterHeader_2 = null;

        EObject lv_body_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop530:
            do {
                int alt530=2;
                int LA530_0 = input.LA(1);

                if ( ((LA530_0>=Protected && LA530_0<=Abstract)||LA530_0==External||(LA530_0>=Private && LA530_0<=Project)||LA530_0==Public||LA530_0==Static||LA530_0==Const) ) {
                    alt530=1;
                }


                switch (alt530) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_163);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop530;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_164);
            this_GetterHeader_2=ruleGetterHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt531=2;
            alt531 = dfa531.predict(input);
            switch (alt531) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_110);
                    lv_body_3_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt532=2;
            int LA532_0 = input.LA(1);

            if ( (LA532_0==Semicolon) ) {
                alt532=1;
            }
            switch (alt532) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4GetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject this_GetterHeader_2 = null;

        EObject lv_body_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop533:
            do {
                int alt533=2;
                int LA533_0 = input.LA(1);

                if ( ((LA533_0>=Protected && LA533_0<=Abstract)||LA533_0==External||(LA533_0>=Private && LA533_0<=Project)||LA533_0==Public||LA533_0==Static||LA533_0==Const) ) {
                    alt533=1;
                }


                switch (alt533) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_163);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop533;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_164);
            this_GetterHeader_2=norm1_GetterHeader(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt534=2;
            alt534 = dfa534.predict(input);
            switch (alt534) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_110);
                    lv_body_3_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt535=2;
            int LA535_0 = input.LA(1);

            if ( (LA535_0==Semicolon) ) {
                alt535=1;
            }
            switch (alt535) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleGetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject this_BogusTypeRefFragment_0 = null;

        EObject lv_declaredName_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_6 = null;



        	enterRule();

        try {
            {
            {
            int alt536=2;
            int LA536_0 = input.LA(1);

            if ( ((LA536_0>=Intersection && LA536_0<=Constructor)||LA536_0==Promisify||LA536_0==Default||LA536_0==Target||LA536_0==Await||LA536_0==Union||LA536_0==This||LA536_0==This_1||(LA536_0>=Type && LA536_0<=Void)||LA536_0==LeftCurlyBracket||LA536_0==Tilde||LA536_0==RULE_IDENTIFIER) ) {
                alt536=1;
            }
            switch (alt536) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_172);
                    this_BogusTypeRefFragment_0=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_BogusTypeRefFragment_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_1=(Token)match(input,Get,FOLLOW_107); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_108);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt537=2;
            int LA537_0 = input.LA(1);

            if ( (LA537_0==QuestionMark) ) {
                alt537=1;
            }
            switch (alt537) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_5());
              		
            }
            int alt538=2;
            int LA538_0 = input.LA(1);

            if ( (LA538_0==Colon) ) {
                alt538=1;
            }
            switch (alt538) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_6());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_GetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject this_BogusTypeRefFragment_0 = null;

        EObject lv_declaredName_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_6 = null;



        	enterRule();

        try {
            {
            {
            int alt539=2;
            int LA539_0 = input.LA(1);

            if ( ((LA539_0>=Intersection && LA539_0<=Constructor)||LA539_0==Promisify||LA539_0==Default||LA539_0==Target||LA539_0==Await||LA539_0==Union||LA539_0==This||LA539_0==This_1||(LA539_0>=Type && LA539_0<=Void)||LA539_0==LeftCurlyBracket||LA539_0==Tilde||LA539_0==RULE_IDENTIFIER) ) {
                alt539=1;
            }
            switch (alt539) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_172);
                    this_BogusTypeRefFragment_0=ruleBogusTypeRefFragment(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_BogusTypeRefFragment_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_1=(Token)match(input,Get,FOLLOW_107); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_108);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_2_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt540=2;
            int LA540_0 = input.LA(1);

            if ( (LA540_0==QuestionMark) ) {
                alt540=1;
            }
            switch (alt540) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_3_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_5());
              		
            }
            int alt541=2;
            int LA541_0 = input.LA(1);

            if ( (LA541_0==Colon) ) {
                alt541=1;
            }
            switch (alt541) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_6());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleN4SetterDeclaration = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4SetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4SetterDeclaration=ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4SetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject lv_declaredName_3_0 = null;

        EObject lv_fpar_6_0 = null;

        EObject lv_body_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop542:
            do {
                int alt542=2;
                int LA542_0 = input.LA(1);

                if ( ((LA542_0>=Protected && LA542_0<=Abstract)||LA542_0==External||(LA542_0>=Private && LA542_0<=Project)||LA542_0==Public||LA542_0==Static||LA542_0==Const) ) {
                    alt542=1;
                }


                switch (alt542) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_165);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop542;
                }
            } while (true);

            otherlv_2=(Token)match(input,Set,FOLLOW_107); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
              						
            }
            pushFollow(FOLLOW_108);
            lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt543=2;
            int LA543_0 = input.LA(1);

            if ( (LA543_0==QuestionMark) ) {
                alt543=1;
            }
            switch (alt543) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_fpar_6_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
              		
            }
            int alt544=2;
            alt544 = dfa544.predict(input);
            switch (alt544) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_110);
                    lv_body_8_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt545=2;
            int LA545_0 = input.LA(1);

            if ( (LA545_0==Semicolon) ) {
                alt545=1;
            }
            switch (alt545) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4SetterDeclaration() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;

        EObject lv_declaredName_3_0 = null;

        EObject lv_fpar_6_0 = null;

        EObject lv_body_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
              					
            }

            }
            loop546:
            do {
                int alt546=2;
                int LA546_0 = input.LA(1);

                if ( ((LA546_0>=Protected && LA546_0<=Abstract)||LA546_0==External||(LA546_0>=Private && LA546_0<=Project)||LA546_0==Public||LA546_0==Static||LA546_0==Const) ) {
                    alt546=1;
                }


                switch (alt546) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_165);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop546;
                }
            } while (true);

            otherlv_2=(Token)match(input,Set,FOLLOW_107); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
              						
            }
            pushFollow(FOLLOW_108);
            lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt547=2;
            int LA547_0 = input.LA(1);

            if ( (LA547_0==QuestionMark) ) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_fpar_6_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_164); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
              		
            }
            int alt548=2;
            alt548 = dfa548.predict(input);
            switch (alt548) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                      				
                    }
                    pushFollow(FOLLOW_110);
                    lv_body_8_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt549=2;
            int LA549_0 = input.LA(1);

            if ( (LA549_0==Semicolon) ) {
                alt549=1;
            }
            switch (alt549) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingPattern = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingPattern=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingPattern() throws RecognitionException {
        EObject current = null;

        EObject this_ObjectBindingPattern_0 = null;

        EObject this_ArrayBindingPattern_1 = null;



        	enterRule();

        try {
            {
            int alt550=2;
            int LA550_0 = input.LA(1);

            if ( (LA550_0==LeftCurlyBracket) ) {
                alt550=1;
            }
            else if ( (LA550_0==LeftSquareBracket) ) {
                alt550=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 550, 0, input);

                throw nvae;
            }
            switch (alt550) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingPattern() throws RecognitionException {
        EObject current = null;

        EObject this_ObjectBindingPattern_0 = null;

        EObject this_ArrayBindingPattern_1 = null;



        	enterRule();

        try {
            {
            int alt551=2;
            int LA551_0 = input.LA(1);

            if ( (LA551_0==LeftCurlyBracket) ) {
                alt551=1;
            }
            else if ( (LA551_0==LeftSquareBracket) ) {
                alt551=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 551, 0, input);

                throw nvae;
            }
            switch (alt551) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectBindingPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleObjectBindingPattern = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectBindingPattern=ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectBindingPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;

        EObject lv_properties_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getObjectBindingPatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_173); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt553=2;
            int LA553_0 = input.LA(1);

            if ( ((LA553_0>=Intersection && LA553_0<=With)||(LA553_0>=For && LA553_0<=Var)||(LA553_0>=As && LA553_0<=Of)||(LA553_0>=CommercialAt && LA553_0<=LeftSquareBracket)||LA553_0==RULE_DOUBLE||LA553_0==RULE_HEX_INT||LA553_0==RULE_OCTAL_INT||LA553_0==RULE_SCIENTIFIC_INT||LA553_0==RULE_IDENTIFIER||LA553_0==RULE_STRING||LA553_0==RULE_INT) ) {
                alt553=1;
            }
            switch (alt553) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_properties_2_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop552:
                    do {
                        int alt552=2;
                        int LA552_0 = input.LA(1);

                        if ( (LA552_0==Comma) ) {
                            alt552=1;
                        }


                        switch (alt552) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_174); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_properties_4_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop552;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectBindingPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;

        EObject lv_properties_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getObjectBindingPatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_173); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt555=2;
            int LA555_0 = input.LA(1);

            if ( ((LA555_0>=Intersection && LA555_0<=With)||(LA555_0>=For && LA555_0<=Var)||(LA555_0>=As && LA555_0<=Of)||(LA555_0>=CommercialAt && LA555_0<=LeftSquareBracket)||LA555_0==RULE_DOUBLE||LA555_0==RULE_HEX_INT||LA555_0==RULE_OCTAL_INT||LA555_0==RULE_SCIENTIFIC_INT||LA555_0==RULE_IDENTIFIER||LA555_0==RULE_STRING||LA555_0==RULE_INT) ) {
                alt555=1;
            }
            switch (alt555) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                      					
                    }
                    pushFollow(FOLLOW_15);
                    lv_properties_2_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop554:
                    do {
                        int alt554=2;
                        int LA554_0 = input.LA(1);

                        if ( (LA554_0==Comma) ) {
                            alt554=1;
                        }


                        switch (alt554) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_174); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_15);
                    	    lv_properties_4_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop554;
                        }
                    } while (true);


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayBindingPattern() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayBindingPattern = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayBindingPattern=ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayBindingPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getArrayBindingPatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_175); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
              		
            }
            loop556:
            do {
                int alt556=2;
                int LA556_0 = input.LA(1);

                if ( (LA556_0==Comma) ) {
                    alt556=1;
                }


                switch (alt556) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_175);
            	    lv_elements_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop556;
                }
            } while (true);
            int alt561=2;
            int LA561_0 = input.LA(1);

            if ( ((LA561_0>=Intersection && LA561_0<=Implements)||(LA561_0>=Promisify && LA561_0<=Abstract)||LA561_0==External||(LA561_0>=Private && LA561_0<=Project)||LA561_0==Public||LA561_0==Static||LA561_0==Target||(LA561_0>=Async && LA561_0<=Await)||LA561_0==Union||(LA561_0>=Yield && LA561_0<=This)||LA561_0==From||LA561_0==Type||LA561_0==FullStopFullStopFullStop||(LA561_0>=Get && LA561_0<=Let)||(LA561_0>=Out && LA561_0<=Set)||LA561_0==As||LA561_0==Of||(LA561_0>=CommercialAt && LA561_0<=LeftSquareBracket)||LA561_0==LeftCurlyBracket||LA561_0==RULE_IDENTIFIER) ) {
                alt561=1;
            }
            switch (alt561) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_100);
                    lv_elements_3_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop558:
                    do {
                        int alt558=2;
                        alt558 = dfa558.predict(input);
                        switch (alt558) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_176); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    loop557:
                    	    do {
                    	        int alt557=2;
                    	        int LA557_0 = input.LA(1);

                    	        if ( (LA557_0==Comma) ) {
                    	            alt557=1;
                    	        }


                    	        switch (alt557) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	      						
                    	    	    }
                    	    	    pushFollow(FOLLOW_176);
                    	    	    lv_elements_5_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	      						
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop557;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_elements_6_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop558;
                        }
                    } while (true);
                    int alt560=2;
                    int LA560_0 = input.LA(1);

                    if ( (LA560_0==Comma) ) {
                        alt560=1;
                    }
                    switch (alt560) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                              				
                            }
                            loop559:
                            do {
                                int alt559=2;
                                int LA559_0 = input.LA(1);

                                if ( (LA559_0==Comma) ) {
                                    alt559=1;
                                }


                                switch (alt559) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    lv_elements_8_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop559;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayBindingPattern() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;

        EObject lv_elements_3_0 = null;

        EObject lv_elements_5_0 = null;

        EObject lv_elements_6_0 = null;

        EObject lv_elements_8_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getArrayBindingPatternAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_175); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
              		
            }
            loop562:
            do {
                int alt562=2;
                int LA562_0 = input.LA(1);

                if ( (LA562_0==Comma) ) {
                    alt562=1;
                }


                switch (alt562) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_175);
            	    lv_elements_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop562;
                }
            } while (true);
            int alt567=2;
            int LA567_0 = input.LA(1);

            if ( ((LA567_0>=Intersection && LA567_0<=Implements)||(LA567_0>=Promisify && LA567_0<=Abstract)||LA567_0==External||(LA567_0>=Private && LA567_0<=Project)||LA567_0==Public||LA567_0==Static||LA567_0==Target||(LA567_0>=Async && LA567_0<=Await)||LA567_0==Union||LA567_0==This||LA567_0==From||LA567_0==Type||LA567_0==FullStopFullStopFullStop||(LA567_0>=Get && LA567_0<=Let)||(LA567_0>=Out && LA567_0<=Set)||LA567_0==As||LA567_0==Of||(LA567_0>=CommercialAt && LA567_0<=LeftSquareBracket)||LA567_0==LeftCurlyBracket||LA567_0==RULE_IDENTIFIER) ) {
                alt567=1;
            }
            switch (alt567) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_100);
                    lv_elements_3_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop564:
                    do {
                        int alt564=2;
                        alt564 = dfa564.predict(input);
                        switch (alt564) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_176); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	      				
                    	    }
                    	    loop563:
                    	    do {
                    	        int alt563=2;
                    	        int LA563_0 = input.LA(1);

                    	        if ( (LA563_0==Comma) ) {
                    	            alt563=1;
                    	        }


                    	        switch (alt563) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	      						
                    	    	    }
                    	    	    pushFollow(FOLLOW_176);
                    	    	    lv_elements_5_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	      						
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop563;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_elements_6_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop564;
                        }
                    } while (true);
                    int alt566=2;
                    int LA566_0 = input.LA(1);

                    if ( (LA566_0==Comma) ) {
                        alt566=1;
                    }
                    switch (alt566) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                              				
                            }
                            loop565:
                            do {
                                int alt565=2;
                                int LA565_0 = input.LA(1);

                                if ( (LA565_0==Comma) ) {
                                    alt565=1;
                                }


                                switch (alt565) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	      						
                            	    }
                            	    pushFollow(FOLLOW_100);
                            	    lv_elements_8_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	      						
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop565;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingProperty() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingProperty = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPropertyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingProperty=ruleBindingProperty();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingProperty; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingProperty() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;

        EObject lv_value_2_0 = null;

        EObject lv_value_3_0 = null;



        	enterRule();

        try {
            {
            int alt568=2;
            alt568 = dfa568.predict(input);
            switch (alt568) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_94);
                    lv_declaredName_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,Colon,FOLLOW_177); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingProperty() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;

        EObject lv_value_2_0 = null;

        EObject lv_value_3_0 = null;



        	enterRule();

        try {
            {
            int alt569=2;
            alt569 = dfa569.predict(input);
            switch (alt569) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_94);
                    lv_declaredName_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,Colon,FOLLOW_177); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSingleNameBinding = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSingleNameBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSingleNameBinding=ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSingleNameBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_SingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_SingleNameBinding() throws RecognitionException {
        EObject current = null;

        EObject lv_varDecl_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingElement=ruleBindingElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElement() throws RecognitionException {
        EObject current = null;

        EObject this_BindingElementImpl_0 = null;



        	enterRule();

        try {
            {
            if ( state.backtracking==0 ) {

              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=ruleBindingElementImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElement() throws RecognitionException {
        EObject current = null;

        EObject this_BindingElementImpl_0 = null;



        	enterRule();

        try {
            {
            if ( state.backtracking==0 ) {

              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=norm1_BindingElementImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingRestElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBindingRestElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingRestElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingRestElement=ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingRestElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingRestElement() throws RecognitionException {
        EObject current = null;

        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;



        	enterRule();

        try {
            {
            {
            int alt570=2;
            int LA570_0 = input.LA(1);

            if ( (LA570_0==FullStopFullStopFullStop) ) {
                alt570=1;
            }
            switch (alt570) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_177); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=ruleBindingElementImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingRestElement() throws RecognitionException {
        EObject current = null;

        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;



        	enterRule();

        try {
            {
            {
            int alt571=2;
            int LA571_0 = input.LA(1);

            if ( (LA571_0==FullStopFullStopFullStop) ) {
                alt571=1;
            }
            switch (alt571) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_177); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=norm1_BindingElementImpl(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;

        EObject lv_expression_2_0 = null;

        EObject lv_varDecl_3_0 = null;



        	enterRule();

        try {
            {
            int alt573=2;
            int LA573_0 = input.LA(1);

            if ( (LA573_0==LeftCurlyBracket) && (synpred324_InternalN4JSParser())) {
                alt573=1;
            }
            else if ( (LA573_0==LeftSquareBracket) && (synpred324_InternalN4JSParser())) {
                alt573=1;
            }
            else if ( ((LA573_0>=Intersection && LA573_0<=Implements)||(LA573_0>=Promisify && LA573_0<=Abstract)||LA573_0==External||(LA573_0>=Private && LA573_0<=Project)||LA573_0==Public||LA573_0==Static||LA573_0==Target||(LA573_0>=Async && LA573_0<=Await)||LA573_0==Union||(LA573_0>=Yield && LA573_0<=This)||LA573_0==From||LA573_0==Type||(LA573_0>=Get && LA573_0<=Let)||(LA573_0>=Out && LA573_0<=Set)||LA573_0==As||LA573_0==Of||LA573_0==CommercialAt||LA573_0==RULE_IDENTIFIER) ) {
                alt573=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 573, 0, input);

                throw nvae;
            }
            switch (alt573) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    lv_nestedPattern_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    int alt572=2;
                    int LA572_0 = input.LA(1);

                    if ( (LA572_0==EqualsSign) ) {
                        alt572=1;
                    }
                    switch (alt572) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                              				
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;

        EObject lv_expression_2_0 = null;

        EObject lv_varDecl_3_0 = null;



        	enterRule();

        try {
            {
            int alt575=2;
            int LA575_0 = input.LA(1);

            if ( (LA575_0==LeftCurlyBracket) && (synpred325_InternalN4JSParser())) {
                alt575=1;
            }
            else if ( (LA575_0==LeftSquareBracket) && (synpred325_InternalN4JSParser())) {
                alt575=1;
            }
            else if ( ((LA575_0>=Intersection && LA575_0<=Implements)||(LA575_0>=Promisify && LA575_0<=Abstract)||LA575_0==External||(LA575_0>=Private && LA575_0<=Project)||LA575_0==Public||LA575_0==Static||LA575_0==Target||(LA575_0>=Async && LA575_0<=Await)||LA575_0==Union||LA575_0==This||LA575_0==From||LA575_0==Type||(LA575_0>=Get && LA575_0<=Let)||(LA575_0>=Out && LA575_0<=Set)||LA575_0==As||LA575_0==Of||LA575_0==CommercialAt||LA575_0==RULE_IDENTIFIER) ) {
                alt575=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 575, 0, input);

                throw nvae;
            }
            switch (alt575) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_63);
                    lv_nestedPattern_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }
                    int alt574=2;
                    int LA574_0 = input.LA(1);

                    if ( (LA574_0==EqualsSign) ) {
                        alt574=1;
                    }
                    switch (alt574) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                              				
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleElision() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleElision = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getElisionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleElision=ruleElision();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleElision; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleElision() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getElisionAccess().getBindingElementAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleLiteralOrComputedPropertyName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralOrComputedPropertyName=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralOrComputedPropertyName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;

        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;

        AntlrDatatypeRuleToken lv_literalName_2_0 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            int alt576=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt576=1;
                }
                break;
            case RULE_STRING:
                {
                alt576=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt576=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt576=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 576, 0, input);

                throw nvae;
            }

            switch (alt576) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.N4JS.STRING");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_126);
                    lv_expression_4_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;

        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;

        AntlrDatatypeRuleToken lv_literalName_2_0 = null;

        EObject lv_expression_4_0 = null;



        	enterRule();

        try {
            {
            int alt577=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt577=1;
                }
                break;
            case RULE_STRING:
                {
                alt577=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt577=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt577=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 577, 0, input);

                throw nvae;
            }

            switch (alt577) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.N4JS.STRING");
                      				
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_126);
                    lv_expression_4_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXElement = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElement=ruleJSXElement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        EObject lv_jsxElementName_1_0 = null;

        EObject lv_jsxAttributes_2_0 = null;

        EObject lv_jsxChildren_4_0 = null;

        EObject lv_jsxClosingName_7_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_8); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJSXElementAccess().getJsxElementNameJSXElementNameParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_178);
            lv_jsxElementName_1_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXElementRule());
              					}
              					set(
              						current,
              						"jsxElementName",
              						lv_jsxElementName_1_0,
              						"org.eclipse.n4js.N4JS.JSXElementName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop578:
            do {
                int alt578=2;
                int LA578_0 = input.LA(1);

                if ( ((LA578_0>=Intersection && LA578_0<=With)||(LA578_0>=For && LA578_0<=Var)||(LA578_0>=As && LA578_0<=Of)||LA578_0==LeftCurlyBracket||LA578_0==RULE_IDENTIFIER) ) {
                    alt578=1;
                }


                switch (alt578) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getJSXElementAccess().getJsxAttributesJSXAttributeParserRuleCall_2_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_178);
            	    lv_jsxAttributes_2_0=ruleJSXAttribute();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getJSXElementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"jsxAttributes",
            	      						lv_jsxAttributes_2_0,
            	      						"org.eclipse.n4js.N4JS.JSXAttribute");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop578;
                }
            } while (true);
            int alt580=2;
            int LA580_0 = input.LA(1);

            if ( (LA580_0==GreaterThanSign) ) {
                alt580=1;
            }
            else if ( (LA580_0==Solidus) ) {
                alt580=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 580, 0, input);

                throw nvae;
            }
            switch (alt580) {
                case 1 :
                    {
                    {
                    otherlv_3=(Token)match(input,GreaterThanSign,FOLLOW_179); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0());
                      				
                    }
                    loop579:
                    do {
                        int alt579=2;
                        int LA579_0 = input.LA(1);

                        if ( (LA579_0==LessThanSign) ) {
                            int LA579_1 = input.LA(2);

                            if ( ((LA579_1>=Intersection && LA579_1<=Implements)||(LA579_1>=Promisify && LA579_1<=Abstract)||LA579_1==External||(LA579_1>=Private && LA579_1<=Project)||LA579_1==Public||LA579_1==Static||LA579_1==Target||(LA579_1>=Async && LA579_1<=Await)||LA579_1==Union||(LA579_1>=Yield && LA579_1<=This)||LA579_1==From||LA579_1==Type||(LA579_1>=Get && LA579_1<=Let)||(LA579_1>=Out && LA579_1<=Set)||LA579_1==As||LA579_1==Of||LA579_1==GreaterThanSign||LA579_1==RULE_IDENTIFIER) ) {
                                alt579=1;
                            }


                        }
                        else if ( (LA579_0==LeftCurlyBracket) ) {
                            alt579=1;
                        }


                        switch (alt579) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getJSXElementAccess().getJsxChildrenJSXChildParserRuleCall_3_0_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_179);
                    	    lv_jsxChildren_4_0=ruleJSXChild();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getJSXElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"jsxChildren",
                    	      								lv_jsxChildren_4_0,
                    	      								"org.eclipse.n4js.N4JS.JSXChild");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop579;
                        }
                    } while (true);

                    otherlv_5=(Token)match(input,LessThanSign,FOLLOW_180); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_3_0_2());
                      				
                    }
                    otherlv_6=(Token)match(input,Solidus,FOLLOW_8); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_6, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_0_3());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getJSXElementAccess().getJsxClosingNameJSXElementNameParserRuleCall_3_0_4_0());
                      						
                    }
                    pushFollow(FOLLOW_132);
                    lv_jsxClosingName_7_0=ruleJSXElementName();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getJSXElementRule());
                      							}
                      							set(
                      								current,
                      								"jsxClosingName",
                      								lv_jsxClosingName_7_0,
                      								"org.eclipse.n4js.N4JS.JSXElementName");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    otherlv_8=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_8, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_5());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_9=(Token)match(input,Solidus,FOLLOW_132); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_9, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0());
                      				
                    }
                    otherlv_10=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_10, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXFragment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXFragment = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXFragment=ruleJSXFragment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXFragment() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_jsxChildren_3_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getJSXFragmentAccess().getJSXFragmentAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LessThanSign,FOLLOW_132); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,GreaterThanSign,FOLLOW_179); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_2());
              		
            }
            loop581:
            do {
                int alt581=2;
                int LA581_0 = input.LA(1);

                if ( (LA581_0==LessThanSign) ) {
                    int LA581_1 = input.LA(2);

                    if ( ((LA581_1>=Intersection && LA581_1<=Implements)||(LA581_1>=Promisify && LA581_1<=Abstract)||LA581_1==External||(LA581_1>=Private && LA581_1<=Project)||LA581_1==Public||LA581_1==Static||LA581_1==Target||(LA581_1>=Async && LA581_1<=Await)||LA581_1==Union||(LA581_1>=Yield && LA581_1<=This)||LA581_1==From||LA581_1==Type||(LA581_1>=Get && LA581_1<=Let)||(LA581_1>=Out && LA581_1<=Set)||LA581_1==As||LA581_1==Of||LA581_1==GreaterThanSign||LA581_1==RULE_IDENTIFIER) ) {
                        alt581=1;
                    }


                }
                else if ( (LA581_0==LeftCurlyBracket) ) {
                    alt581=1;
                }


                switch (alt581) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					newCompositeNode(grammarAccess.getJSXFragmentAccess().getJsxChildrenJSXChildParserRuleCall_3_0());
            	      				
            	    }
            	    pushFollow(FOLLOW_179);
            	    lv_jsxChildren_3_0=ruleJSXChild();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getJSXFragmentRule());
            	      					}
            	      					add(
            	      						current,
            	      						"jsxChildren",
            	      						lv_jsxChildren_3_0,
            	      						"org.eclipse.n4js.N4JS.JSXChild");
            	      					afterParserOrEnumRuleCall();
            	      				
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop581;
                }
            } while (true);

            otherlv_4=(Token)match(input,LessThanSign,FOLLOW_180); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_4());
              		
            }
            otherlv_5=(Token)match(input,Solidus,FOLLOW_132); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getJSXFragmentAccess().getSolidusKeyword_5());
              		
            }
            otherlv_6=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXChild() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXChild = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXChildRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXChild=ruleJSXChild();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXChild; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXChild() throws RecognitionException {
        EObject current = null;

        EObject this_JSXElement_0 = null;

        EObject this_JSXFragment_1 = null;

        EObject this_JSXExpression_2 = null;



        	enterRule();

        try {
            {
            int alt582=3;
            int LA582_0 = input.LA(1);

            if ( (LA582_0==LessThanSign) ) {
                int LA582_1 = input.LA(2);

                if ( (LA582_1==GreaterThanSign) ) {
                    alt582=2;
                }
                else if ( ((LA582_1>=Intersection && LA582_1<=Implements)||(LA582_1>=Promisify && LA582_1<=Abstract)||LA582_1==External||(LA582_1>=Private && LA582_1<=Project)||LA582_1==Public||LA582_1==Static||LA582_1==Target||(LA582_1>=Async && LA582_1<=Await)||LA582_1==Union||(LA582_1>=Yield && LA582_1<=This)||LA582_1==From||LA582_1==Type||(LA582_1>=Get && LA582_1<=Let)||(LA582_1>=Out && LA582_1<=Set)||LA582_1==As||LA582_1==Of||LA582_1==RULE_IDENTIFIER) ) {
                    alt582=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 582, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA582_0==LeftCurlyBracket) ) {
                alt582=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 582, 0, input);

                throw nvae;
            }
            switch (alt582) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_0=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXElement_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXFragmentParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_1=ruleJSXFragment();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXFragment_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXExpression_2=ruleJSXExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXExpression_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXExpression=ruleJSXExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJSXExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_expression_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElementName() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXElementName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElementName=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElementName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElementName() throws RecognitionException {
        EObject current = null;

        EObject lv_expression_0_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getJSXElementNameAccess().getExpressionJSXElementNameExpressionParserRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getJSXElementNameRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.JSXElementNameExpression");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElementNameExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXElementNameExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementNameExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElementNameExpression=ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElementNameExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElementNameExpression() throws RecognitionException {
        EObject current = null;

        EObject this_IdentifierRef_0 = null;

        EObject this_ParameterizedPropertyAccessExpressionTail_2 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_181);
            this_IdentifierRef_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
              		
            }
            loop583:
            do {
                int alt583=2;
                int LA583_0 = input.LA(1);

                if ( (LA583_0==QuestionMarkFullStop||LA583_0==FullStop) ) {
                    alt583=1;
                }


                switch (alt583) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    if ( state.backtracking==0 ) {

            	      				if (current==null) {
            	      					current = createModelElement(grammarAccess.getJSXElementNameExpressionRule());
            	      				}
            	      				newCompositeNode(grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1());
            	      			
            	    }
            	    pushFollow(FOLLOW_181);
            	    this_ParameterizedPropertyAccessExpressionTail_2=ruleParameterizedPropertyAccessExpressionTail(current);

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				current = this_ParameterizedPropertyAccessExpressionTail_2;
            	      				afterParserOrEnumRuleCall();
            	      			
            	    }

            	    }
            	    break;

            	default :
            	    break loop583;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXAttribute() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXAttribute = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXAttribute=ruleJSXAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXAttribute() throws RecognitionException {
        EObject current = null;

        EObject this_JSXSpreadAttribute_0 = null;

        EObject this_JSXPropertyAttribute_1 = null;



        	enterRule();

        try {
            {
            int alt584=2;
            int LA584_0 = input.LA(1);

            if ( (LA584_0==LeftCurlyBracket) ) {
                alt584=1;
            }
            else if ( ((LA584_0>=Intersection && LA584_0<=With)||(LA584_0>=For && LA584_0<=Var)||(LA584_0>=As && LA584_0<=Of)||LA584_0==RULE_IDENTIFIER) ) {
                alt584=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 584, 0, input);

                throw nvae;
            }
            switch (alt584) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXSpreadAttribute_0=ruleJSXSpreadAttribute();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXSpreadAttribute_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXPropertyAttribute_1=ruleJSXPropertyAttribute();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_JSXPropertyAttribute_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXSpreadAttribute() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXSpreadAttribute = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXSpreadAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXSpreadAttribute=ruleJSXSpreadAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXSpreadAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXSpreadAttribute() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_182); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_49); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_expression_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXSpreadAttributeRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleJSXIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleJSXIdentifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXIdentifier=ruleJSXIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleJSXIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_INT_3=null;
        Token this_HEX_INT_4=null;
        Token this_BINARY_INT_5=null;
        Token this_OCTAL_INT_6=null;
        Token this_SCIENTIFIC_INT_7=null;
        Token this_LEGACY_OCTAL_INT_8=null;
        AntlrDatatypeRuleToken this_IdentifierName_0 = null;

        AntlrDatatypeRuleToken this_IdentifierName_9 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getJSXIdentifierAccess().getIdentifierNameParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_183);
            this_IdentifierName_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(this_IdentifierName_0);
              		
            }
            if ( state.backtracking==0 ) {

              			afterParserOrEnumRuleCall();
              		
            }
            loop588:
            do {
                int alt588=2;
                int LA588_0 = input.LA(1);

                if ( (LA588_0==HyphenMinusHyphenMinus||LA588_0==HyphenMinus) ) {
                    alt588=1;
                }


                switch (alt588) {
            	case 1 :
            	    {
            	    int alt585=2;
            	    int LA585_0 = input.LA(1);

            	    if ( (LA585_0==HyphenMinus) ) {
            	        alt585=1;
            	    }
            	    else if ( (LA585_0==HyphenMinusHyphenMinus) ) {
            	        alt585=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 585, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt585) {
            	        case 1 :
            	            {
            	            kw=(Token)match(input,HyphenMinus,FOLLOW_184); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getJSXIdentifierAccess().getHyphenMinusKeyword_1_0_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            kw=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_184); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getJSXIdentifierAccess().getHyphenMinusHyphenMinusKeyword_1_0_1());
            	              				
            	            }

            	            }
            	            break;

            	    }
            	    int alt587=2;
            	    alt587 = dfa587.predict(input);
            	    switch (alt587) {
            	        case 1 :
            	            {
            	            int alt586=7;
            	            switch ( input.LA(1) ) {
            	            case RULE_INT:
            	                {
            	                alt586=1;
            	                }
            	                break;
            	            case RULE_HEX_INT:
            	                {
            	                alt586=2;
            	                }
            	                break;
            	            case RULE_BINARY_INT:
            	                {
            	                alt586=3;
            	                }
            	                break;
            	            case RULE_OCTAL_INT:
            	                {
            	                alt586=4;
            	                }
            	                break;
            	            case RULE_SCIENTIFIC_INT:
            	                {
            	                alt586=5;
            	                }
            	                break;
            	            case RULE_LEGACY_OCTAL_INT:
            	                {
            	                alt586=6;
            	                }
            	                break;
            	            case Intersection:
            	            case Constructor:
            	            case Implements:
            	            case Instanceof:
            	            case Promisify:
            	            case Interface:
            	            case Protected:
            	            case Abstract:
            	            case Continue:
            	            case Debugger:
            	            case External:
            	            case Function:
            	            case Default:
            	            case Extends:
            	            case Finally:
            	            case Private:
            	            case Project:
            	            case Delete:
            	            case Export:
            	            case Import:
            	            case Public:
            	            case Return:
            	            case Static:
            	            case Switch:
            	            case Target:
            	            case Typeof:
            	            case Async:
            	            case Await:
            	            case Break:
            	            case Catch:
            	            case Class:
            	            case Const:
            	            case False:
            	            case Super:
            	            case Throw:
            	            case Union:
            	            case While:
            	            case Yield:
            	            case This:
            	            case Case:
            	            case Else:
            	            case Enum:
            	            case From:
            	            case Null:
            	            case This_1:
            	            case True:
            	            case Type:
            	            case Void:
            	            case With:
            	            case For:
            	            case Get:
            	            case Let:
            	            case New:
            	            case Out:
            	            case Set:
            	            case Try:
            	            case Var:
            	            case As:
            	            case Do:
            	            case If:
            	            case In:
            	            case Of:
            	            case RULE_IDENTIFIER:
            	                {
            	                alt586=7;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 586, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt586) {
            	                case 1 :
            	                    {
            	                    this_INT_3=(Token)match(input,RULE_INT,FOLLOW_183); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      						current.merge(this_INT_3);
            	                      					
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      						newLeafNode(this_INT_3, grammarAccess.getJSXIdentifierAccess().getINTTerminalRuleCall_1_1_0_0());
            	                      					
            	                    }

            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    this_HEX_INT_4=(Token)match(input,RULE_HEX_INT,FOLLOW_183); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      						current.merge(this_HEX_INT_4);
            	                      					
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      						newLeafNode(this_HEX_INT_4, grammarAccess.getJSXIdentifierAccess().getHEX_INTTerminalRuleCall_1_1_0_1());
            	                      					
            	                    }

            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    this_BINARY_INT_5=(Token)match(input,RULE_BINARY_INT,FOLLOW_183); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      						current.merge(this_BINARY_INT_5);
            	                      					
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      						newLeafNode(this_BINARY_INT_5, grammarAccess.getJSXIdentifierAccess().getBINARY_INTTerminalRuleCall_1_1_0_2());
            	                      					
            	                    }

            	                    }
            	                    break;
            	                case 4 :
            	                    {
            	                    this_OCTAL_INT_6=(Token)match(input,RULE_OCTAL_INT,FOLLOW_183); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      						current.merge(this_OCTAL_INT_6);
            	                      					
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      						newLeafNode(this_OCTAL_INT_6, grammarAccess.getJSXIdentifierAccess().getOCTAL_INTTerminalRuleCall_1_1_0_3());
            	                      					
            	                    }

            	                    }
            	                    break;
            	                case 5 :
            	                    {
            	                    this_SCIENTIFIC_INT_7=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_183); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      						current.merge(this_SCIENTIFIC_INT_7);
            	                      					
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      						newLeafNode(this_SCIENTIFIC_INT_7, grammarAccess.getJSXIdentifierAccess().getSCIENTIFIC_INTTerminalRuleCall_1_1_0_4());
            	                      					
            	                    }

            	                    }
            	                    break;
            	                case 6 :
            	                    {
            	                    this_LEGACY_OCTAL_INT_8=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_183); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      						current.merge(this_LEGACY_OCTAL_INT_8);
            	                      					
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      						newLeafNode(this_LEGACY_OCTAL_INT_8, grammarAccess.getJSXIdentifierAccess().getLEGACY_OCTAL_INTTerminalRuleCall_1_1_0_5());
            	                      					
            	                    }

            	                    }
            	                    break;
            	                case 7 :
            	                    {
            	                    if ( state.backtracking==0 ) {

            	                      						newCompositeNode(grammarAccess.getJSXIdentifierAccess().getIdentifierNameParserRuleCall_1_1_0_6());
            	                      					
            	                    }
            	                    pushFollow(FOLLOW_183);
            	                    this_IdentifierName_9=ruleIdentifierName();

            	                    state._fsp--;
            	                    if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      						current.merge(this_IdentifierName_9);
            	                      					
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      						afterParserOrEnumRuleCall();
            	                      					
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop588;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXPropertyAttribute() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJSXPropertyAttribute = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXPropertyAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXPropertyAttribute=ruleJSXPropertyAttribute();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXPropertyAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXPropertyAttribute() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_jsxAttributeValue_2_0 = null;

        EObject lv_jsxAttributeValue_3_0 = null;

        EObject lv_jsxAttributeValue_4_0 = null;

        EObject lv_jsxAttributeValue_6_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getJSXPropertyAttributeRule());
              					}
              				
            }
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getPropertyIdentifiableElementCrossReference_0_0());
              				
            }
            pushFollow(FOLLOW_63);
            ruleJSXIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt590=2;
            int LA590_0 = input.LA(1);

            if ( (LA590_0==EqualsSign) ) {
                alt590=1;
            }
            switch (alt590) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_185); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1_0());
                      			
                    }
                    int alt589=4;
                    switch ( input.LA(1) ) {
                    case RULE_STRING:
                        {
                        alt589=1;
                        }
                        break;
                    case LessThanSign:
                        {
                        int LA589_2 = input.LA(2);

                        if ( ((LA589_2>=Intersection && LA589_2<=Implements)||(LA589_2>=Promisify && LA589_2<=Abstract)||LA589_2==External||(LA589_2>=Private && LA589_2<=Project)||LA589_2==Public||LA589_2==Static||LA589_2==Target||(LA589_2>=Async && LA589_2<=Await)||LA589_2==Union||(LA589_2>=Yield && LA589_2<=This)||LA589_2==From||LA589_2==Type||(LA589_2>=Get && LA589_2<=Let)||(LA589_2>=Out && LA589_2<=Set)||LA589_2==As||LA589_2==Of||LA589_2==RULE_IDENTIFIER) ) {
                            alt589=2;
                        }
                        else if ( (LA589_2==GreaterThanSign) ) {
                            alt589=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 589, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LeftCurlyBracket:
                        {
                        alt589=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 589, 0, input);

                        throw nvae;
                    }

                    switch (alt589) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueStringLiteralParserRuleCall_1_1_0_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_2_0=ruleStringLiteral();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_2_0,
                              								"org.eclipse.n4js.N4JS.StringLiteral");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueJSXElementParserRuleCall_1_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_3_0=ruleJSXElement();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_3_0,
                              								"org.eclipse.n4js.N4JS.JSXElement");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0());
                              						
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_4_0=ruleJSXFragment();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_4_0,
                              								"org.eclipse.n4js.N4JS.JSXFragment");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;
                        case 4 :
                            {
                            {
                            otherlv_5=(Token)match(input,LeftCurlyBracket,FOLLOW_49); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_5, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_1_1_3_0());
                              					
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {

                              								newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0());
                              							
                            }
                            pushFollow(FOLLOW_23);
                            lv_jsxAttributeValue_6_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              								}
                              								set(
                              									current,
                              									"jsxAttributeValue",
                              									lv_jsxAttributeValue_6_0,
                              									"org.eclipse.n4js.N4JS.AssignmentExpression");
                              								afterParserOrEnumRuleCall();
                              							
                            }

                            }


                            }

                            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(otherlv_7, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_1_1_3_2());
                              					
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVersionDeclaration(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_declaredVersion_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_declaredVersion_0_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_declaredVersion_0_0, grammarAccess.getVersionDeclarationAccess().getDeclaredVersionVERSIONTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getVersionDeclarationRule());
              				}
              				setWithLastConsumed(
              					current,
              					"declaredVersion",
              					lv_declaredVersion_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.VERSION");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRef=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRef() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_IntersectionTypeExpression_0 = null;

        EObject lv_typeRefs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypeRefAccess().getIntersectionTypeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_139);
            this_IntersectionTypeExpression_0=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_IntersectionTypeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt592=2;
            int LA592_0 = input.LA(1);

            if ( (LA592_0==VerticalLine) ) {
                alt592=1;
            }
            switch (alt592) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTypeRefAccess().getUnionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                      				
                    }

                    }
                    int cnt591=0;
                    loop591:
                    do {
                        int alt591=2;
                        int LA591_0 = input.LA(1);

                        if ( (LA591_0==VerticalLine) ) {
                            alt591=1;
                        }


                        switch (alt591) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_62); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getTypeRefAccess().getVerticalLineKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getTypeRefAccess().getTypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_139);
                    	    lv_typeRefs_3_0=ruleIntersectionTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTypeRefRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.IntersectionTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt591 >= 1 ) break loop591;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(591, input);
                                throw eee;
                        }
                        cnt591++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntersectionTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpression=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_ArrayTypeExpression_0 = null;

        EObject lv_typeRefs_3_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getArrayTypeExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_137);
            this_ArrayTypeExpression_0=ruleArrayTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ArrayTypeExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt594=2;
            int LA594_0 = input.LA(1);

            if ( (LA594_0==Ampersand) ) {
                alt594=1;
            }
            switch (alt594) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getIntersectionTypeExpressionAccess().getIntersectionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                      				
                    }

                    }
                    int cnt593=0;
                    loop593:
                    do {
                        int alt593=2;
                        int LA593_0 = input.LA(1);

                        if ( (LA593_0==Ampersand) ) {
                            alt593=1;
                        }


                        switch (alt593) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Ampersand,FOLLOW_62); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_137);
                    	    lv_typeRefs_3_0=ruleArrayTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.ts.TypeExpressions.ArrayTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt593 >= 1 ) break loop593;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(593, input);
                                throw eee;
                        }
                        cnt593++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrayTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeExpression=ruleArrayTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayTypeExpression() throws RecognitionException {
        EObject current = null;

        Token lv_arrayTypeExpression_2_0=null;
        Token otherlv_3=null;
        Token lv_arrayTypeExpression_5_0=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token lv_arrayTypeExpression_11_0=null;
        Token otherlv_12=null;
        Token lv_arrayTypeExpression_14_0=null;
        Token otherlv_15=null;
        Token lv_arrayTypeExpression_18_0=null;
        Token otherlv_19=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_9_0 = null;

        EObject this_PrimaryTypeExpression_16 = null;



        	enterRule();

        try {
            {
            int alt598=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                alt598=1;
                }
                break;
            case LeftParenthesis:
                {
                switch ( input.LA(2) ) {
                case Intersection:
                case Constructor:
                case Implements:
                case Promisify:
                case Interface:
                case Protected:
                case Abstract:
                case External:
                case Default:
                case Private:
                case Project:
                case Public:
                case Static:
                case Target:
                case Async:
                case Await:
                case Union:
                case Yield:
                case This:
                case From:
                case This_1:
                case Type:
                case Void:
                case FullStopFullStopFullStop:
                case Get:
                case Let:
                case Set:
                case As:
                case Of:
                case LeftParenthesis:
                case RightParenthesis:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                case Tilde:
                case RULE_IDENTIFIER:
                    {
                    alt598=3;
                    }
                    break;
                case Out:
                    {
                    int LA598_4 = input.LA(3);

                    if ( ((LA598_4>=Intersection && LA598_4<=Constructor)||LA598_4==Promisify||LA598_4==Default||LA598_4==Target||LA598_4==Await||LA598_4==Union||LA598_4==This||LA598_4==This_1||(LA598_4>=Type && LA598_4<=Void)||LA598_4==LeftParenthesis||LA598_4==QuestionMark||LA598_4==LeftSquareBracket||LA598_4==LeftCurlyBracket||LA598_4==Tilde||LA598_4==RULE_IDENTIFIER) ) {
                        alt598=2;
                    }
                    else if ( (LA598_4==Colon) ) {
                        alt598=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 598, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case QuestionMark:
                    {
                    int LA598_5 = input.LA(3);

                    if ( (LA598_5==LeftSquareBracket) ) {
                        alt598=3;
                    }
                    else if ( (LA598_5==Extends||LA598_5==Super||LA598_5==RightParenthesis) ) {
                        alt598=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 598, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case In:
                    {
                    alt598=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 598, 2, input);

                    throw nvae;
                }

                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt598=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 598, 0, input);

                throw nvae;
            }

            switch (alt598) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_0_0(),
                      						current);
                      				
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getTypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_125);
                    lv_typeArgs_1_0=ruleWildcardOldNotationWithoutBound();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.WildcardOldNotationWithoutBound");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    {
                    {
                    lv_arrayTypeExpression_2_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_arrayTypeExpression_2_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_2_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                      					
                    }

                    }


                    }

                    otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_186); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_3());
                      			
                    }
                    loop595:
                    do {
                        int alt595=2;
                        int LA595_0 = input.LA(1);

                        if ( (LA595_0==LeftSquareBracket) ) {
                            int LA595_2 = input.LA(2);

                            if ( (LA595_2==RightSquareBracket) ) {
                                int LA595_3 = input.LA(3);

                                if ( (synpred327_InternalN4JSParser()) ) {
                                    alt595=1;
                                }


                            }


                        }


                        switch (alt595) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_0_4_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_5_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								newLeafNode(lv_arrayTypeExpression_5_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0());
                    	      							
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                    	      							
                    	    }

                    	    }


                    	    }

                    	    otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_186); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_6, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_4_0_2());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop595;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_187); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getArrayTypeExpressionAccess().getLeftParenthesisKeyword_1_1());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getTypeArgsWildcardParserRuleCall_1_2_0());
                      					
                    }
                    pushFollow(FOLLOW_72);
                    lv_typeArgs_9_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_9_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.Wildcard");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_125); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_10, grammarAccess.getArrayTypeExpressionAccess().getRightParenthesisKeyword_1_3());
                      			
                    }
                    {
                    {
                    lv_arrayTypeExpression_11_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_arrayTypeExpression_11_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_4_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                      					
                    }

                    }


                    }

                    otherlv_12=(Token)match(input,RightSquareBracket,FOLLOW_186); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_5());
                      			
                    }
                    loop596:
                    do {
                        int alt596=2;
                        int LA596_0 = input.LA(1);

                        if ( (LA596_0==LeftSquareBracket) ) {
                            int LA596_2 = input.LA(2);

                            if ( (LA596_2==RightSquareBracket) ) {
                                int LA596_3 = input.LA(3);

                                if ( (synpred328_InternalN4JSParser()) ) {
                                    alt596=1;
                                }


                            }


                        }


                        switch (alt596) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_1_6_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_14_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								newLeafNode(lv_arrayTypeExpression_14_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0());
                    	      							
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                    	      							
                    	    }

                    	    }


                    	    }

                    	    otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_186); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_15, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_6_0_2());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop596;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_186);
                    this_PrimaryTypeExpression_16=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_PrimaryTypeExpression_16;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    loop597:
                    do {
                        int alt597=2;
                        int LA597_0 = input.LA(1);

                        if ( (LA597_0==LeftSquareBracket) ) {
                            int LA597_2 = input.LA(2);

                            if ( (LA597_2==RightSquareBracket) ) {
                                int LA597_3 = input.LA(3);

                                if ( (synpred329_InternalN4JSParser()) ) {
                                    alt597=1;
                                }


                            }


                        }


                        switch (alt597) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefTypeArgsAction_2_1_0_0(),
                    	      								current);
                    	      						
                    	    }

                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_18_0=(Token)match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								newLeafNode(lv_arrayTypeExpression_18_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0());
                    	      							
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", true, "[");
                    	      							
                    	    }

                    	    }


                    	    }

                    	    otherlv_19=(Token)match(input,RightSquareBracket,FOLLOW_186); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_19, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_2_1_0_2());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop597;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimaryTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryTypeExpression=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject this_ArrowFunctionTypeExpression_0 = null;

        EObject this_IterableTypeExpression_1 = null;

        EObject this_TypeRefWithModifiers_2 = null;

        EObject this_TypeRef_4 = null;



        	enterRule();

        try {
            {
            int alt599=4;
            alt599 = dfa599.predict(input);
            switch (alt599) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrowFunctionTypeExpressionParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowFunctionTypeExpression_0=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ArrowFunctionTypeExpression_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getIterableTypeExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IterableTypeExpression_1=ruleIterableTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IterableTypeExpression_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefWithModifiers_2=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRefWithModifiers_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1());
                      			
                    }
                    pushFollow(FOLLOW_72);
                    this_TypeRef_4=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeRef_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefWithModifiers = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithModifiers=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;



        	enterRule();

        try {
            {
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_143);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
              		
            }
            int alt600=2;
            alt600 = dfa600.predict(input);
            switch (alt600) {
                case 1 :
                    {
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefWithModifiersRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefWithoutModifiers = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithoutModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithoutModifiers=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithoutModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;

        Token lv_dynamic_2_0=null;
        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_ThisTypeRef_1 = null;

        EObject this_TypeTypeRef_3 = null;

        EObject this_FunctionTypeExpressionOLD_4 = null;

        EObject this_UnionTypeExpressionOLD_5 = null;

        EObject this_IntersectionTypeExpressionOLD_6 = null;



        	enterRule();

        try {
            {
            int alt603=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt603=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt603=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt603=3;
                }
                break;
            case Union:
                {
                alt603=4;
                }
                break;
            case Intersection:
                {
                alt603=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 603, 0, input);

                throw nvae;
            }

            switch (alt603) {
                case 1 :
                    {
                    {
                    int alt601=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Default:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt601=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA601_4 = input.LA(3);

                            if ( (LA601_4==Promisify||LA601_4==Default||LA601_4==Target||LA601_4==Await||LA601_4==This||LA601_4==Void||LA601_4==RULE_IDENTIFIER) ) {
                                alt601=1;
                            }
                            else if ( (LA601_4==This_1) ) {
                                alt601=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 601, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA601_5 = input.LA(3);

                            if ( (LA601_5==Promisify||LA601_5==Default||LA601_5==Target||LA601_5==Await||LA601_5==This||LA601_5==Void||LA601_5==RULE_IDENTIFIER) ) {
                                alt601=1;
                            }
                            else if ( (LA601_5==This_1) ) {
                                alt601=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 601, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case Promisify:
                        case Default:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt601=1;
                            }
                            break;
                        case This_1:
                            {
                            alt601=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 601, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt601=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 601, 0, input);

                        throw nvae;
                    }

                    switch (alt601) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0());
                              				
                            }
                            pushFollow(FOLLOW_34);
                            this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ParameterizedTypeRef_0;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;
                        case 2 :
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1());
                              				
                            }
                            pushFollow(FOLLOW_34);
                            this_ThisTypeRef_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					current = this_ThisTypeRef_1;
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }
                            break;

                    }
                    int alt602=2;
                    alt602 = dfa602.predict(input);
                    switch (alt602) {
                        case 1 :
                            {
                            {
                            lv_dynamic_2_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						newLeafNode(lv_dynamic_2_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                              					
                            }
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getTypeRefWithoutModifiersRule());
                              						}
                              						setWithLastConsumed(current, "dynamic", true, "+");
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionTypeExpressionOLD_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FunctionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_5=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_6=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeRefFunctionTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefFunctionTypeExpression=ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRef_0 = null;

        EObject this_IterableTypeExpression_1 = null;

        EObject this_TypeTypeRef_2 = null;

        EObject this_UnionTypeExpressionOLD_3 = null;

        EObject this_IntersectionTypeExpressionOLD_4 = null;



        	enterRule();

        try {
            {
            int alt604=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt604=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt604=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt604=3;
                }
                break;
            case Union:
                {
                alt604=4;
                }
                break;
            case Intersection:
                {
                alt604=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 604, 0, input);

                throw nvae;
            }

            switch (alt604) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRef_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIterableTypeExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IterableTypeExpression_1=ruleIterableTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IterableTypeExpression_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeTypeRef_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnionTypeExpressionOLD_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_IntersectionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeArgInTypeTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgInTypeTypeRef=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgInTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRefNominal_0 = null;

        EObject this_ThisTypeRefNominal_1 = null;

        EObject this_WildcardOldNotation_2 = null;



        	enterRule();

        try {
            {
            int alt605=3;
            int LA605_0 = input.LA(1);

            if ( (LA605_0==Promisify||LA605_0==Default||LA605_0==Target||LA605_0==Await||LA605_0==This||LA605_0==Void||LA605_0==RULE_IDENTIFIER) ) {
                alt605=1;
            }
            else if ( (LA605_0==This_1) ) {
                alt605=2;
            }
            else if ( (LA605_0==QuestionMark) && (synpred333_InternalN4JSParser())) {
                alt605=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 605, 0, input);

                throw nvae;
            }
            switch (alt605) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefNominal_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardOldNotationParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_2=ruleWildcardOldNotation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WildcardOldNotation_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRef=ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ThisTypeRefNominal_0 = null;

        EObject this_ThisTypeRefStructural_1 = null;



        	enterRule();

        try {
            {
            int alt606=2;
            int LA606_0 = input.LA(1);

            if ( (LA606_0==This_1) ) {
                alt606=1;
            }
            else if ( (LA606_0==Tilde) ) {
                alt606=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 606, 0, input);

                throw nvae;
            }
            switch (alt606) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefStructural_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ThisTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRefNominal = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefNominal=ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getThisTypeRefNominalAccess().getThisTypeRefNominalAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleThisTypeRefStructural = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefStructural=ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;

        EObject this_TStructMemberList_3 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_188);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThisTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,This_1,FOLLOW_189); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
              		
            }
            int alt607=2;
            int LA607_0 = input.LA(1);

            if ( (LA607_0==With) ) {
                int LA607_1 = input.LA(2);

                if ( (LA607_1==LeftCurlyBracket) ) {
                    alt607=1;
                }
            }
            switch (alt607) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,With,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getThisTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_3=ruleTStructMemberList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMemberList_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFunctionTypeExpressionOLD = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionTypeExpressionOLD=ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        EObject lv_declaredThisType_5_0 = null;

        EObject lv_ownedTypeVars_9_0 = null;

        EObject lv_ownedTypeVars_11_0 = null;

        EObject this_TAnonymousFormalParameterList_14 = null;

        EObject this_ColonSepReturnTypeRef_16 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_190); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
              		
            }
            int alt608=2;
            int LA608_0 = input.LA(1);

            if ( (LA608_0==CommercialAt) ) {
                alt608=1;
            }
            switch (alt608) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,CommercialAt,FOLLOW_191); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                      			
                    }
                    otherlv_3=(Token)match(input,This,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                      			
                    }
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_192); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0());
                      					
                    }
                    pushFollow(FOLLOW_72);
                    lv_declaredThisType_5_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						set(
                      							current,
                      							"declaredThisType",
                      							lv_declaredThisType_5_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRefFunctionTypeExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                      			
                    }

                    }
                    break;

            }

            otherlv_7=(Token)match(input,Function,FOLLOW_193); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
              		
            }
            int alt610=2;
            int LA610_0 = input.LA(1);

            if ( (LA610_0==LessThanSign) ) {
                alt610=1;
            }
            switch (alt610) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,LessThanSign,FOLLOW_194); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                      			
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_1_0());
                      					
                    }
                    pushFollow(FOLLOW_113);
                    lv_ownedTypeVars_9_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						add(
                      							current,
                      							"ownedTypeVars",
                      							lv_ownedTypeVars_9_0,
                      							"org.eclipse.n4js.N4JS.TypeVariable");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }
                    loop609:
                    do {
                        int alt609=2;
                        int LA609_0 = input.LA(1);

                        if ( (LA609_0==Comma) ) {
                            alt609=1;
                        }


                        switch (alt609) {
                    	case 1 :
                    	    {
                    	    otherlv_10=(Token)match(input,Comma,FOLLOW_194); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_10, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_113);
                    	    lv_ownedTypeVars_11_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"ownedTypeVars",
                    	      								lv_ownedTypeVars_11_0,
                    	      								"org.eclipse.n4js.N4JS.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop609;
                        }
                    } while (true);

                    otherlv_12=(Token)match(input,GreaterThanSign,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                      			
                    }

                    }
                    break;

            }

            otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_195); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_13, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
              		
            }
            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6());
              		
            }
            pushFollow(FOLLOW_72);
            this_TAnonymousFormalParameterList_14=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_14;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_196); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_15, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
              		
            }
            int alt611=2;
            int LA611_0 = input.LA(1);

            if ( (LA611_0==Colon) ) {
                alt611=1;
            }
            switch (alt611) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getColonSepReturnTypeRefParserRuleCall_8());
                      			
                    }
                    pushFollow(FOLLOW_23);
                    this_ColonSepReturnTypeRef_16=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_16;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            otherlv_17=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_17, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleArrowFunctionTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowFunctionTypeExpression=ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject this_TAnonymousFormalParameterList_2 = null;

        EObject lv_returnTypeRef_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getArrowFunctionTypeExpressionAccess().getFunctionTypeExpressionAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_195); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_0_0_1());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_2());
              				
            }
            pushFollow(FOLLOW_72);
            this_TAnonymousFormalParameterList_2=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					current = this_TAnonymousFormalParameterList_2;
              					afterParserOrEnumRuleCall();
              				
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_0_0_3());
              				
            }
            otherlv_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_4());
              				
            }

            }


            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.PrimaryTypeExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameterList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_1=null;
        EObject lv_fpars_0_0 = null;

        EObject lv_fpars_2_0 = null;



        	enterRule();

        try {
            {
            int alt613=2;
            int LA613_0 = input.LA(1);

            if ( ((LA613_0>=Intersection && LA613_0<=Implements)||(LA613_0>=Promisify && LA613_0<=Abstract)||LA613_0==External||LA613_0==Default||(LA613_0>=Private && LA613_0<=Project)||LA613_0==Public||LA613_0==Static||LA613_0==Target||(LA613_0>=Async && LA613_0<=Await)||LA613_0==Union||(LA613_0>=Yield && LA613_0<=This)||LA613_0==From||LA613_0==This_1||(LA613_0>=Type && LA613_0<=Void)||LA613_0==FullStopFullStopFullStop||(LA613_0>=Get && LA613_0<=Let)||(LA613_0>=Out && LA613_0<=Set)||LA613_0==As||LA613_0==Of||LA613_0==LeftParenthesis||LA613_0==QuestionMark||LA613_0==LeftSquareBracket||LA613_0==LeftCurlyBracket||LA613_0==Tilde||LA613_0==RULE_IDENTIFIER) ) {
                alt613=1;
            }
            switch (alt613) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_30);
                    lv_fpars_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                      					}
                      					add(
                      						current,
                      						"fpars",
                      						lv_fpars_0_0,
                      						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    loop612:
                    do {
                        int alt612=2;
                        int LA612_0 = input.LA(1);

                        if ( (LA612_0==Comma) ) {
                            alt612=1;
                        }


                        switch (alt612) {
                    	case 1 :
                    	    {
                    	    otherlv_1=(Token)match(input,Comma,FOLLOW_197); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      				newLeafNode(otherlv_1, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_1_1_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_30);
                    	    lv_fpars_2_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"fpars",
                    	      							lv_fpars_2_0,
                    	      							"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop612;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTAnonymousFormalParameter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnonymousFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnonymousFormalParameter=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnonymousFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;

        Token lv_variadic_0_0=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;

        EObject this_ColonSepTypeRef_2 = null;

        EObject lv_typeRef_3_0 = null;

        EObject this_DefaultFormalParameter_4 = null;



        	enterRule();

        try {
            {
            {
            int alt614=2;
            int LA614_0 = input.LA(1);

            if ( (LA614_0==FullStopFullStopFullStop) ) {
                alt614=1;
            }
            switch (alt614) {
                case 1 :
                    {
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_198); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", true, "...");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt615=2;
            alt615 = dfa615.predict(input);
            switch (alt615) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      								newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0());
                      							
                    }
                    pushFollow(FOLLOW_94);
                    lv_name_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_1_0,
                      									"org.eclipse.n4js.ts.TypeExpressions.BindingIdentifier");
                      								afterParserOrEnumRuleCall();
                      							
                    }

                    }


                    }
                    {
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      							}
                      							newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getColonSepTypeRefParserRuleCall_1_0_0_1());
                      						
                    }
                    pushFollow(FOLLOW_69);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							current = this_ColonSepTypeRef_2;
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_69);
                    lv_typeRef_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      						}
                      						set(
                      							current,
                      							"typeRef",
                      							lv_typeRef_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_4=ruleDefaultFormalParameter(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_DefaultFormalParameter_4;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultFormalParameter(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_hasInitializerAssignment_0_0=null;
        AntlrDatatypeRuleToken lv_astInitializer_1_0 = null;



        	enterRule();

        try {
            {
            int alt617=2;
            int LA617_0 = input.LA(1);

            if ( (LA617_0==EqualsSign) ) {
                alt617=1;
            }
            switch (alt617) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_0_0=(Token)match(input,EqualsSign,FOLLOW_199); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_hasInitializerAssignment_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "hasInitializerAssignment", true, "=");
                      				
                    }

                    }


                    }
                    int alt616=2;
                    int LA616_0 = input.LA(1);

                    if ( (LA616_0==Promisify||LA616_0==Default||LA616_0==Target||LA616_0==Await||LA616_0==This||LA616_0==Void||LA616_0==RULE_IDENTIFIER) ) {
                        alt616=1;
                    }
                    switch (alt616) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {

                              					newCompositeNode(grammarAccess.getDefaultFormalParameterAccess().getAstInitializerTypeReferenceNameParserRuleCall_1_0());
                              				
                            }
                            pushFollow(FOLLOW_2);
                            lv_astInitializer_1_0=ruleTypeReferenceName();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					if (current==null) {
                              						current = createModelElementForParent(grammarAccess.getDefaultFormalParameterRule());
                              					}
                              					set(
                              						current,
                              						"astInitializer",
                              						lv_astInitializer_1_0,
                              						"org.eclipse.n4js.N4JS.TypeReferenceName");
                              					afterParserOrEnumRuleCall();
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnionTypeExpressionOLD = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnionTypeExpressionOLD=ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;

        EObject lv_typeRefs_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getUnionTypeExpressionOLDAccess().getUnionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Union,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_typeRefs_3_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop618:
            do {
                int alt618=2;
                int LA618_0 = input.LA(1);

                if ( (LA618_0==Comma) ) {
                    alt618=1;
                }


                switch (alt618) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_typeRefs_5_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop618;
                }
            } while (true);

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIntersectionTypeExpressionOLD = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpressionOLD=ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;

        EObject lv_typeRefs_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionTypeExpressionAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Intersection,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_15);
            lv_typeRefs_3_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop619:
            do {
                int alt619=2;
                int LA619_0 = input.LA(1);

                if ( (LA619_0==Comma) ) {
                    alt619=1;
                }


                switch (alt619) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_62); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_4, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_15);
            	    lv_typeRefs_5_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop619;
                }
            } while (true);

            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRef=ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;

        EObject this_ParameterizedTypeRefNominal_0 = null;

        EObject this_ParameterizedTypeRefStructural_1 = null;



        	enterRule();

        try {
            {
            int alt620=2;
            int LA620_0 = input.LA(1);

            if ( (LA620_0==Promisify||LA620_0==Default||LA620_0==Target||LA620_0==Await||LA620_0==This||LA620_0==Void||LA620_0==RULE_IDENTIFIER) ) {
                alt620=1;
            }
            else if ( (LA620_0==Tilde) ) {
                alt620=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 620, 0, input);

                throw nvae;
            }
            switch (alt620) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefStructural_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ParameterizedTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRefNominal = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominal=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;

        EObject this_TypeReference_0 = null;

        EObject this_TypeReference_2 = null;

        EObject this_VersionRequest_3 = null;

        EObject this_TypeArguments_4 = null;



        	enterRule();

        try {
            {
            {
            int alt621=2;
            alt621 = dfa621.predict(input);
            switch (alt621) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_0());
                      			
                    }
                    pushFollow(FOLLOW_200);
                    this_TypeReference_0=ruleTypeReference(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeReference_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getParameterizedTypeRefNominalAccess().getVersionedParameterizedTypeRefAction_0_1_0(),
                      							current);
                      					
                    }

                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_1_1());
                      				
                    }
                    pushFollow(FOLLOW_98);
                    this_TypeReference_2=ruleTypeReference(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_TypeReference_2;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getVersionRequestParserRuleCall_0_1_2());
                      				
                    }
                    pushFollow(FOLLOW_200);
                    this_VersionRequest_3=ruleVersionRequest(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_VersionRequest_3;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt622=2;
            alt622 = dfa622.predict(input);
            switch (alt622) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeArguments_4=ruleTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeArguments_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterizedTypeRefStructural = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefStructural=ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;

        Token otherlv_7=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;

        EObject this_TypeReference_1 = null;

        AntlrDatatypeRuleToken lv_definedTypingStrategy_3_0 = null;

        EObject this_TypeReference_4 = null;

        EObject this_VersionRequest_5 = null;

        EObject this_TypeArguments_6 = null;

        EObject this_TStructMemberList_8 = null;



        	enterRule();

        try {
            {
            {
            int alt623=2;
            alt623 = dfa623.predict(input);
            switch (alt623) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_156);
                    lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
                      							}
                      							set(
                      								current,
                      								"definedTypingStrategy",
                      								lv_definedTypingStrategy_0_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_0_1());
                      				
                    }
                    pushFollow(FOLLOW_201);
                    this_TypeReference_1=ruleTypeReference(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_TypeReference_1;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						current = forceCreateModelElement(
                      							grammarAccess.getParameterizedTypeRefStructuralAccess().getVersionedParameterizedTypeRefStructuralAction_0_1_0(),
                      							current);
                      					
                    }

                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_156);
                    lv_definedTypingStrategy_3_0=ruleTypingStrategyUseSiteOperator();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
                      							}
                      							set(
                      								current,
                      								"definedTypingStrategy",
                      								lv_definedTypingStrategy_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypingStrategyUseSiteOperator");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_1_2());
                      				
                    }
                    pushFollow(FOLLOW_98);
                    this_TypeReference_4=ruleTypeReference(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_TypeReference_4;
                      					afterParserOrEnumRuleCall();
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      					}
                      					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getVersionRequestParserRuleCall_0_1_3());
                      				
                    }
                    pushFollow(FOLLOW_201);
                    this_VersionRequest_5=ruleVersionRequest(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					current = this_VersionRequest_5;
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }
                    break;

            }
            int alt624=2;
            alt624 = dfa624.predict(input);
            switch (alt624) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgumentsParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_189);
                    this_TypeArguments_6=ruleTypeArguments(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TypeArguments_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }
            int alt625=2;
            int LA625_0 = input.LA(1);

            if ( (LA625_0==With) ) {
                int LA625_1 = input.LA(2);

                if ( (LA625_1==LeftCurlyBracket) ) {
                    alt625=1;
                }
            }
            switch (alt625) {
                case 1 :
                    {
                    otherlv_7=(Token)match(input,With,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_2_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_8=ruleTStructMemberList(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMemberList_8;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIterableTypeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIterableTypeExpression = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIterableTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIterableTypeExpression=ruleIterableTypeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIterableTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIterableTypeExpression() throws RecognitionException {
        EObject current = null;

        Token lv_iterableTypeExpression_0_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_2_0 = null;

        EObject lv_typeArgs_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            lv_iterableTypeExpression_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_202); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_iterableTypeExpression_0_0, grammarAccess.getIterableTypeExpressionAccess().getIterableTypeExpressionLeftSquareBracketKeyword_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getIterableTypeExpressionRule());
              					}
              					setWithLastConsumed(current, "iterableTypeExpression", true, "[");
              				
            }

            }


            }
            int alt627=2;
            int LA627_0 = input.LA(1);

            if ( (LA627_0==RightSquareBracket) ) {
                alt627=1;
            }
            else if ( ((LA627_0>=Intersection && LA627_0<=Constructor)||LA627_0==Promisify||LA627_0==Default||LA627_0==Target||LA627_0==Await||LA627_0==Union||LA627_0==This||LA627_0==This_1||(LA627_0>=Type && LA627_0<=Void)||LA627_0==Out||LA627_0==In||LA627_0==LeftParenthesis||LA627_0==QuestionMark||LA627_0==LeftSquareBracket||LA627_0==LeftCurlyBracket||LA627_0==Tilde||LA627_0==RULE_IDENTIFIER) ) {
                alt627=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 627, 0, input);

                throw nvae;
            }
            switch (alt627) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getIterableTypeExpressionAccess().getTypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_typeArgs_1_0=ruleEmptyIterableTypeExpressionTail();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIterableTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"typeArgs",
                      							lv_typeArgs_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.EmptyIterableTypeExpressionTail");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getIterableTypeExpressionAccess().getTypeArgsTypeArgumentParserRuleCall_1_1_0_0());
                      						
                    }
                    pushFollow(FOLLOW_100);
                    lv_typeArgs_2_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getIterableTypeExpressionRule());
                      							}
                      							add(
                      								current,
                      								"typeArgs",
                      								lv_typeArgs_2_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }
                    loop626:
                    do {
                        int alt626=2;
                        int LA626_0 = input.LA(1);

                        if ( (LA626_0==Comma) ) {
                            alt626=1;
                        }


                        switch (alt626) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_202); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_3, grammarAccess.getIterableTypeExpressionAccess().getCommaKeyword_1_1_1_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getIterableTypeExpressionAccess().getTypeArgsTypeArgumentParserRuleCall_1_1_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_100);
                    	    lv_typeArgs_4_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getIterableTypeExpressionRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"typeArgs",
                    	      									lv_typeArgs_4_0,
                    	      									"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop626;
                        }
                    } while (true);

                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getIterableTypeExpressionAccess().getRightSquareBracketKeyword_1_1_2());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEmptyIterableTypeExpressionTail = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyIterableTypeExpressionTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyIterableTypeExpressionTail=ruleEmptyIterableTypeExpressionTail();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyIterableTypeExpressionTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getEmptyIterableTypeExpressionTailAccess().getWildcardAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEmptyIterableTypeExpressionTailAccess().getRightSquareBracketKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVersionRequest(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token lv_requestedVersion_0_0=null;


        	enterRule();

        try {
            {
            {
            {
            lv_requestedVersion_0_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_requestedVersion_0_0, grammarAccess.getVersionRequestAccess().getRequestedVersionVERSIONTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getVersionRequestRule());
              				}
              				setWithLastConsumed(
              					current,
              					"requestedVersion",
              					lv_requestedVersion_0_0,
              					"org.eclipse.n4js.ts.TypeExpressions.VERSION");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;

        EObject lv_typeArgs_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_202); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgsTypeArgumentParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_113);
            lv_typeArgs_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop628:
            do {
                int alt628=2;
                int LA628_0 = input.LA(1);

                if ( (LA628_0==Comma) ) {
                    alt628=1;
                }


                switch (alt628) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_202); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeArgsTypeArgumentParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_113);
            	    lv_typeArgs_3_0=ruleTypeArgument();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TypeArgument");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop628;
                }
            } while (true);

            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMemberList(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_astStructuralMembers_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_203); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
              		
            }
            loop630:
            do {
                int alt630=2;
                int LA630_0 = input.LA(1);

                if ( ((LA630_0>=Intersection && LA630_0<=With)||(LA630_0>=For && LA630_0<=Var)||(LA630_0>=As && LA630_0<=Of)||LA630_0==LessThanSign||LA630_0==RULE_IDENTIFIER) ) {
                    alt630=1;
                }


                switch (alt630) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTStructMemberListAccess().getAstStructuralMembersTStructMemberParserRuleCall_1_0_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_204);
            	    lv_astStructuralMembers_1_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTStructMemberListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"astStructuralMembers",
            	      							lv_astStructuralMembers_1_0,
            	      							"org.eclipse.n4js.ts.TypeExpressions.TStructMember");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }
            	    int alt629=3;
            	    int LA629_0 = input.LA(1);

            	    if ( (LA629_0==Semicolon) ) {
            	        alt629=1;
            	    }
            	    else if ( (LA629_0==Comma) ) {
            	        alt629=2;
            	    }
            	    switch (alt629) {
            	        case 1 :
            	            {
            	            otherlv_2=(Token)match(input,Semicolon,FOLLOW_203); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_2, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	              				
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            otherlv_3=(Token)match(input,Comma,FOLLOW_203); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              					newLeafNode(otherlv_3, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	              				
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop630;
                }
            } while (true);

            otherlv_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMember() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructMember = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMember=ruleTStructMember();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMember() throws RecognitionException {
        EObject current = null;

        EObject this_TStructGetter_0 = null;

        EObject this_TStructSetter_1 = null;

        EObject this_TStructMethod_2 = null;

        EObject this_TStructField_3 = null;



        	enterRule();

        try {
            {
            int alt631=4;
            alt631 = dfa631.predict(input);
            switch (alt631) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructGetter_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructGetter_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructSetter_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructSetter_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMethod_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_TStructMethod_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructField_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TStructField_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMethod() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructMethod = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMethod=ruleTStructMethod();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMethod() throws RecognitionException {
        EObject current = null;

        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject this_TypeVariables_1 = null;

        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_TAnonymousFormalParameterList_4 = null;

        EObject this_ColonSepReturnTypeRef_6 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructMethodAccess().getTStructMethodAction_0_0_0(),
              							current);
              					
            }

            }
            int alt632=2;
            int LA632_0 = input.LA(1);

            if ( (LA632_0==LessThanSign) ) {
                alt632=1;
            }
            switch (alt632) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTStructMethodRule());
                      						}
                      						newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVariablesParserRuleCall_0_0_1());
                      					
                    }
                    pushFollow(FOLLOW_14);
                    this_TypeVariables_1=ruleTypeVariables(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						current = this_TypeVariables_1;
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }
                    break;

            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructMethodAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_42);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructMethodRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }

            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_195); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
              				
            }

            }


            }

            if ( state.backtracking==0 ) {

              			if (current==null) {
              				current = createModelElement(grammarAccess.getTStructMethodRule());
              			}
              			newCompositeNode(grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_72);
            this_TAnonymousFormalParameterList_4=ruleTAnonymousFormalParameterList(current);

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_TAnonymousFormalParameterList_4;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
              		
            }
            int alt633=2;
            int LA633_0 = input.LA(1);

            if ( (LA633_0==Colon) ) {
                alt633=1;
            }
            switch (alt633) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructMethodRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructMethodAccess().getColonSepReturnTypeRefParserRuleCall_3());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_6=ruleColonSepReturnTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepReturnTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeVariables(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeVars_1_0 = null;

        EObject lv_typeVars_3_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_194); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeVariablesAccess().getTypeVarsTypeVariableParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_113);
            lv_typeVars_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeVariablesRule());
              					}
              					add(
              						current,
              						"typeVars",
              						lv_typeVars_1_0,
              						"org.eclipse.n4js.N4JS.TypeVariable");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            loop634:
            do {
                int alt634=2;
                int LA634_0 = input.LA(1);

                if ( (LA634_0==Comma) ) {
                    alt634=1;
                }


                switch (alt634) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_194); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0());
            	      			
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getTypeVariablesAccess().getTypeVarsTypeVariableParserRuleCall_2_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_113);
            	    lv_typeVars_3_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeVariablesRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeVars",
            	      							lv_typeVars_3_0,
            	      							"org.eclipse.n4js.N4JS.TypeVariable");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop634;
                }
            } while (true);

            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepDeclaredTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_declaredTypeRef_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getColonSepDeclaredTypeRefAccess().getColonKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColonSepDeclaredTypeRefAccess().getDeclaredTypeRefTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_declaredTypeRef_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepDeclaredTypeRefRule());
              					}
              					set(
              						current,
              						"declaredTypeRef",
              						lv_declaredTypeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_typeRef_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColonSepTypeRefAccess().getTypeRefTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepTypeRefRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepReturnTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;

        Token otherlv_0=null;
        EObject lv_returnTypeRef_1_0 = null;



        	enterRule();

        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getColonSepReturnTypeRefAccess().getColonKeyword_0());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getColonSepReturnTypeRefAccess().getReturnTypeRefTypeRefParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepReturnTypeRefRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_1_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructField() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructField = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructField=ruleTStructField();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructField() throws RecognitionException {
        EObject current = null;

        Token lv_optional_1_0=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;

        EObject this_ColonSepTypeRef_2 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTStructFieldAccess().getNameIdentifierNameParserRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_205);
            lv_name_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructFieldRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }
            int alt635=2;
            int LA635_0 = input.LA(1);

            if ( (LA635_0==QuestionMark) ) {
                alt635=1;
            }
            switch (alt635) {
                case 1 :
                    {
                    {
                    lv_optional_1_0=(Token)match(input,QuestionMark,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }
            int alt636=2;
            int LA636_0 = input.LA(1);

            if ( (LA636_0==Colon) ) {
                alt636=1;
            }
            switch (alt636) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructFieldRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructFieldAccess().getColonSepTypeRefParserRuleCall_2());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepTypeRef_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructGetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructGetter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructGetter=ruleTStructGetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructGetter() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject this_ColonSepDeclaredTypeRef_6 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructGetterAccess().getTStructGetterAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Get,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructGetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_108);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructGetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt637=2;
            int LA637_0 = input.LA(1);

            if ( (LA637_0==QuestionMark) ) {
                alt637=1;
            }
            switch (alt637) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_72); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
              		
            }
            int alt638=2;
            int LA638_0 = input.LA(1);

            if ( (LA638_0==Colon) ) {
                alt638=1;
            }
            switch (alt638) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructGetterRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructGetterAccess().getColonSepDeclaredTypeRefParserRuleCall_4());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_6=ruleColonSepDeclaredTypeRef(current);

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_ColonSepDeclaredTypeRef_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructSetter() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTStructSetter = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructSetter=ruleTStructSetter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructSetter() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        EObject lv_fpar_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getTStructSetterAccess().getTStructSetterAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,Set,FOLLOW_14); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
              				
            }
            {
            {
            if ( state.backtracking==0 ) {

              							newCompositeNode(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
              						
            }
            pushFollow(FOLLOW_108);
            lv_name_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.ts.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
              						
            }

            }


            }


            }


            }
            int alt639=2;
            int LA639_0 = input.LA(1);

            if ( (LA639_0==QuestionMark) ) {
                alt639=1;
            }
            switch (alt639) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", true, "?");
                      				
                    }

                    }


                    }
                    break;

            }

            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_4, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_72);
            lv_fpar_5_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TAnonymousFormalParameter");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_6, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypingStrategyUseSiteOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyUseSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyUseSiteOperator=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyUseSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_STRUCTMODSUFFIX_2=null;


        	enterRule();

        try {
            {
            {
            kw=(Token)match(input,Tilde,FOLLOW_206); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
              		
            }
            int alt640=3;
            int LA640_0 = input.LA(1);

            if ( (LA640_0==Tilde) ) {
                alt640=1;
            }
            else if ( (LA640_0==RULE_STRUCTMODSUFFIX) ) {
                alt640=2;
            }
            switch (alt640) {
                case 1 :
                    {
                    kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    this_STRUCTMODSUFFIX_2=(Token)match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current.merge(this_STRUCTMODSUFFIX_2);
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_STRUCTMODSUFFIX_2, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getSTRUCTMODSUFFIXTerminalRuleCall_1_1());
                      			
                    }

                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleTypingStrategyDefSiteOperator = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyDefSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyDefSiteOperator=ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyDefSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeTypeRef() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeTypeRef = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeTypeRef=ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeTypeRef() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token lv_constructorRef_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArg_4_0 = null;



        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getTypeTypeRefAccess().getTypeTypeRefAction_0(),
              					current);
              			
            }

            }
            int alt641=2;
            int LA641_0 = input.LA(1);

            if ( (LA641_0==Type) ) {
                alt641=1;
            }
            else if ( (LA641_0==Constructor) ) {
                alt641=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 641, 0, input);

                throw nvae;
            }
            switch (alt641) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_constructorRef_2_0=(Token)match(input,Constructor,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_constructorRef_2_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "constructorRef", true, "constructor");
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_3=(Token)match(input,LeftCurlyBracket,FOLLOW_207); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
              		
            }
            {
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getTypeTypeRefAccess().getTypeArgTypeArgInTypeTypeRefParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_23);
            lv_typeArg_4_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeTypeRefRule());
              					}
              					set(
              						current,
              						"typeArg",
              						lv_typeArg_4_0,
              						"org.eclipse.n4js.ts.TypeExpressions.TypeArgInTypeTypeRef");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgument() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTypeArgument = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgument=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgument() throws RecognitionException {
        EObject current = null;

        EObject this_Wildcard_0 = null;

        EObject this_TypeRef_1 = null;



        	enterRule();

        try {
            {
            int alt642=2;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA642_1 = input.LA(2);

                if ( (LA642_1==EOF||LA642_1==Extends||LA642_1==Super||LA642_1==Comma||LA642_1==GreaterThanSign||LA642_1==RightSquareBracket) ) {
                    alt642=1;
                }
                else if ( (LA642_1==LeftSquareBracket) ) {
                    alt642=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 642, 1, input);

                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt642=1;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt642=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 642, 0, input);

                throw nvae;
            }

            switch (alt642) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Wildcard_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRef_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_TypeRef_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcard() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcard = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcard=ruleWildcard();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcard; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcard() throws RecognitionException {
        EObject current = null;

        EObject this_WildcardOldNotation_0 = null;

        EObject this_WildcardNewNotation_1 = null;



        	enterRule();

        try {
            {
            int alt643=2;
            int LA643_0 = input.LA(1);

            if ( (LA643_0==QuestionMark) && (synpred345_InternalN4JSParser())) {
                alt643=1;
            }
            else if ( (LA643_0==Out||LA643_0==In) ) {
                alt643=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 643, 0, input);

                throw nvae;
            }
            switch (alt643) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getWildcardAccess().getWildcardOldNotationParserRuleCall_0());
                      			
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_0=ruleWildcardOldNotation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_WildcardOldNotation_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getWildcardAccess().getWildcardNewNotationParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardNewNotation_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_WildcardNewNotation_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardOldNotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcardOldNotation = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotation=ruleWildcardOldNotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardOldNotation() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredUpperBound_3_0 = null;

        EObject lv_declaredLowerBound_5_0 = null;



        	enterRule();

        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {

              						current = forceCreateModelElement(
              							grammarAccess.getWildcardOldNotationAccess().getWildcardAction_0_0_0(),
              							current);
              					
            }

            }

            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_208); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationAccess().getQuestionMarkKeyword_0_0_1());
              				
            }

            }


            }
            int alt644=3;
            int LA644_0 = input.LA(1);

            if ( (LA644_0==Extends) ) {
                alt644=1;
            }
            else if ( (LA644_0==Super) ) {
                alt644=2;
            }
            switch (alt644) {
                case 1 :
                    {
                    {
                    otherlv_2=(Token)match(input,Extends,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getWildcardOldNotationAccess().getExtendsKeyword_1_0_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredUpperBound",
                      								lv_declaredUpperBound_3_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_4=(Token)match(input,Super,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getWildcardOldNotationAccess().getSuperKeyword_1_1_0());
                      				
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_5_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredLowerBound",
                      								lv_declaredLowerBound_5_0,
                      								"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcardOldNotationWithoutBound = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationWithoutBoundRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotationWithoutBound=ruleWildcardOldNotationWithoutBound();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotationWithoutBound; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            {
            {
            {
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getWildcardOldNotationWithoutBoundAccess().getWildcardAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationWithoutBoundAccess().getQuestionMarkKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardNewNotation() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWildcardNewNotation = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardNewNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardNewNotation=ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardNewNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardNewNotation() throws RecognitionException {
        EObject current = null;

        Token lv_usingInOutNotation_0_0=null;
        Token lv_usingInOutNotation_2_0=null;
        EObject lv_declaredUpperBound_1_0 = null;

        EObject lv_declaredLowerBound_3_0 = null;



        	enterRule();

        try {
            {
            int alt645=2;
            int LA645_0 = input.LA(1);

            if ( (LA645_0==Out) ) {
                alt645=1;
            }
            else if ( (LA645_0==In) ) {
                alt645=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 645, 0, input);

                throw nvae;
            }
            switch (alt645) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_0_0=(Token)match(input,Out,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_usingInOutNotation_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", true, "out");
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_1_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_2_0=(Token)match(input,In,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_usingInOutNotation_2_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", true, "in");
                      					
                    }

                    }


                    }
                    {
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_3_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredLowerBound",
                      							lv_declaredLowerBound_3_0,
                      							"org.eclipse.n4js.ts.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBindingIdentifier() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleBindingIdentifier = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifier=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;



        	enterRule();

        try {
            {
            int alt646=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt646=1;
                }
                break;
            case Yield:
                {
                alt646=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt646=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 646, 0, input);

                throw nvae;
            }

            switch (alt646) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_BindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_N4Keyword_1 = null;



        	enterRule();

        try {
            {
            int alt647=2;
            int LA647_0 = input.LA(1);

            if ( (LA647_0==RULE_IDENTIFIER) ) {
                alt647=1;
            }
            else if ( ((LA647_0>=Intersection && LA647_0<=Implements)||(LA647_0>=Promisify && LA647_0<=Abstract)||LA647_0==External||(LA647_0>=Private && LA647_0<=Project)||LA647_0==Public||LA647_0==Static||LA647_0==Target||(LA647_0>=Async && LA647_0<=Await)||LA647_0==Union||LA647_0==This||LA647_0==From||LA647_0==Type||(LA647_0>=Get && LA647_0<=Let)||(LA647_0>=Out && LA647_0<=Set)||LA647_0==As||LA647_0==Of) ) {
                alt647=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 647, 0, input);

                throw nvae;
            }
            switch (alt647) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_1=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierName() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIdentifierName = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierName=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_ReservedWord_1 = null;

        AntlrDatatypeRuleToken this_N4Keyword_2 = null;



        	enterRule();

        try {
            {
            int alt648=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt648=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt648=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt648=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 648, 0, input);

                throw nvae;
            }

            switch (alt648) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_IDENTIFIER_0);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierNameAccess().getIDENTIFIERTerminalRuleCall_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getReservedWordParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReservedWord_1=ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_ReservedWord_1);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getN4KeywordParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(this_N4Keyword_2);
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleReservedWord() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleReservedWord = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReservedWordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReservedWord=ruleReservedWord();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReservedWord.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleReservedWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt649=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt649=1;
                }
                break;
            case Case:
                {
                alt649=2;
                }
                break;
            case Catch:
                {
                alt649=3;
                }
                break;
            case Class:
                {
                alt649=4;
                }
                break;
            case Const:
                {
                alt649=5;
                }
                break;
            case Continue:
                {
                alt649=6;
                }
                break;
            case Debugger:
                {
                alt649=7;
                }
                break;
            case Default:
                {
                alt649=8;
                }
                break;
            case Delete:
                {
                alt649=9;
                }
                break;
            case Do:
                {
                alt649=10;
                }
                break;
            case Else:
                {
                alt649=11;
                }
                break;
            case Export:
                {
                alt649=12;
                }
                break;
            case Extends:
                {
                alt649=13;
                }
                break;
            case Finally:
                {
                alt649=14;
                }
                break;
            case For:
                {
                alt649=15;
                }
                break;
            case Function:
                {
                alt649=16;
                }
                break;
            case If:
                {
                alt649=17;
                }
                break;
            case Import:
                {
                alt649=18;
                }
                break;
            case In:
                {
                alt649=19;
                }
                break;
            case Instanceof:
                {
                alt649=20;
                }
                break;
            case New:
                {
                alt649=21;
                }
                break;
            case Return:
                {
                alt649=22;
                }
                break;
            case Super:
                {
                alt649=23;
                }
                break;
            case Switch:
                {
                alt649=24;
                }
                break;
            case This_1:
                {
                alt649=25;
                }
                break;
            case Throw:
                {
                alt649=26;
                }
                break;
            case Try:
                {
                alt649=27;
                }
                break;
            case Typeof:
                {
                alt649=28;
                }
                break;
            case Var:
                {
                alt649=29;
                }
                break;
            case Void:
                {
                alt649=30;
                }
                break;
            case While:
                {
                alt649=31;
                }
                break;
            case With:
                {
                alt649=32;
                }
                break;
            case Yield:
                {
                alt649=33;
                }
                break;
            case Null:
                {
                alt649=34;
                }
                break;
            case True:
                {
                alt649=35;
                }
                break;
            case False:
                {
                alt649=36;
                }
                break;
            case Enum:
                {
                alt649=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 649, 0, input);

                throw nvae;
            }

            switch (alt649) {
                case 1 :
                    {
                    kw=(Token)match(input,Break,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Case,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Class,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Do,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Else,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Export,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,For,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getForKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,Function,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,If,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Import,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,New,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Return,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                      		
                    }

                    }
                    break;
                case 26 :
                    {
                    kw=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                      		
                    }

                    }
                    break;
                case 27 :
                    {
                    kw=(Token)match(input,Try,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                      		
                    }

                    }
                    break;
                case 28 :
                    {
                    kw=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                      		
                    }

                    }
                    break;
                case 29 :
                    {
                    kw=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                      		
                    }

                    }
                    break;
                case 30 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                      		
                    }

                    }
                    break;
                case 31 :
                    {
                    kw=(Token)match(input,While,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                      		
                    }

                    }
                    break;
                case 32 :
                    {
                    kw=(Token)match(input,With,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                      		
                    }

                    }
                    break;
                case 33 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                      		
                    }

                    }
                    break;
                case 34 :
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                      		
                    }

                    }
                    break;
                case 35 :
                    {
                    kw=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                      		
                    }

                    }
                    break;
                case 36 :
                    {
                    kw=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                      		
                    }

                    }
                    break;
                case 37 :
                    {
                    kw=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleN4Keyword() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleN4Keyword = null;


        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4KeywordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4Keyword=ruleN4Keyword();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4Keyword.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleN4Keyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            {
            int alt650=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt650=1;
                }
                break;
            case Set:
                {
                alt650=2;
                }
                break;
            case Let:
                {
                alt650=3;
                }
                break;
            case Project:
                {
                alt650=4;
                }
                break;
            case External:
                {
                alt650=5;
                }
                break;
            case Abstract:
                {
                alt650=6;
                }
                break;
            case Static:
                {
                alt650=7;
                }
                break;
            case As:
                {
                alt650=8;
                }
                break;
            case From:
                {
                alt650=9;
                }
                break;
            case Constructor:
                {
                alt650=10;
                }
                break;
            case Of:
                {
                alt650=11;
                }
                break;
            case Target:
                {
                alt650=12;
                }
                break;
            case Type:
                {
                alt650=13;
                }
                break;
            case Union:
                {
                alt650=14;
                }
                break;
            case Intersection:
                {
                alt650=15;
                }
                break;
            case This:
                {
                alt650=16;
                }
                break;
            case Promisify:
                {
                alt650=17;
                }
                break;
            case Await:
                {
                alt650=18;
                }
                break;
            case Async:
                {
                alt650=19;
                }
                break;
            case Implements:
                {
                alt650=20;
                }
                break;
            case Interface:
                {
                alt650=21;
                }
                break;
            case Private:
                {
                alt650=22;
                }
                break;
            case Protected:
                {
                alt650=23;
                }
                break;
            case Public:
                {
                alt650=24;
                }
                break;
            case Out:
                {
                alt650=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 650, 0, input);

                throw nvae;
            }

            switch (alt650) {
                case 1 :
                    {
                    kw=(Token)match(input,Get,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Set,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                      		
                    }

                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                      		
                    }

                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                      		
                    }

                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                      		
                    }

                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                      		
                    }

                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                      		
                    }

                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,As,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                      		
                    }

                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,From,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                      		
                    }

                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                      		
                    }

                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Of,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                      		
                    }

                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                      		
                    }

                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Type,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                      		
                    }

                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Union,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                      		
                    }

                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                      		
                    }

                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                      		
                    }

                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                      		
                    }

                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                      		
                    }

                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,Async,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                      		
                    }

                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                      		
                    }

                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                      		
                    }

                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                      		
                    }

                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                      		
                    }

                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                      		
                    }

                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,Out,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleVariableStatementKeyword() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;


        	enterRule();

        try {
            {
            int alt651=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt651=1;
                }
                break;
            case Const:
                {
                alt651=2;
                }
                break;
            case Let:
                {
                alt651=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 651, 0, input);

                throw nvae;
            }

            switch (alt651) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator rulePostfixOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            {
            int alt652=2;
            int LA652_0 = input.LA(1);

            if ( (LA652_0==PlusSignPlusSign) ) {
                alt652=1;
            }
            else if ( (LA652_0==HyphenMinusHyphenMinus) ) {
                alt652=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 652, 0, input);

                throw nvae;
            }
            switch (alt652) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleUnaryOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;


        	enterRule();

        try {
            {
            int alt653=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt653=1;
                }
                break;
            case Void:
                {
                alt653=2;
                }
                break;
            case Typeof:
                {
                alt653=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt653=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt653=5;
                }
                break;
            case PlusSign:
                {
                alt653=6;
                }
                break;
            case HyphenMinus:
                {
                alt653=7;
                }
                break;
            case Tilde:
                {
                alt653=8;
                }
                break;
            case ExclamationMark:
                {
                alt653=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 653, 0, input);

                throw nvae;
            }

            switch (alt653) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    enumLiteral_8=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleMultiplicativeOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;


        	enterRule();

        try {
            {
            int alt654=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt654=1;
                }
                break;
            case Solidus:
                {
                alt654=2;
                }
                break;
            case PercentSign:
                {
                alt654=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 654, 0, input);

                throw nvae;
            }

            switch (alt654) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleAdditiveOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            {
            int alt655=2;
            int LA655_0 = input.LA(1);

            if ( (LA655_0==PlusSign) ) {
                alt655=1;
            }
            else if ( (LA655_0==HyphenMinus) ) {
                alt655=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 655, 0, input);

                throw nvae;
            }
            switch (alt655) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleEqualityOperator() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;


        	enterRule();

        try {
            {
            int alt656=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt656=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt656=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt656=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt656=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 656, 0, input);

                throw nvae;
            }

            switch (alt656) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleN4Modifier() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;


        	enterRule();

        try {
            {
            int alt657=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt657=1;
                }
                break;
            case Project:
                {
                alt657=2;
                }
                break;
            case Protected:
                {
                alt657=3;
                }
                break;
            case Public:
                {
                alt657=4;
                }
                break;
            case External:
                {
                alt657=5;
                }
                break;
            case Abstract:
                {
                alt657=6;
                }
                break;
            case Static:
                {
                alt657=7;
                }
                break;
            case Const:
                {
                alt657=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 657, 0, input);

                throw nvae;
            }

            switch (alt657) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_152); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop658:
        do {
            int alt658=2;
            int LA658_0 = input.LA(1);

            if ( ((LA658_0>=Protected && LA658_0<=Abstract)||LA658_0==External||(LA658_0>=Private && LA658_0<=Project)||LA658_0==Public||LA658_0==Static||LA658_0==Const) ) {
                alt658=1;
            }


            switch (alt658) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop658;
            }
        } while (true);

        match(input,Class,FOLLOW_209); if (state.failed) return ;
        int alt659=2;
        int LA659_0 = input.LA(1);

        if ( (LA659_0==Tilde) ) {
            alt659=1;
        }
        switch (alt659) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_210);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt660=2;
        int LA660_0 = input.LA(1);

        if ( ((LA660_0>=Intersection && LA660_0<=Implements)||(LA660_0>=Promisify && LA660_0<=Abstract)||LA660_0==External||(LA660_0>=Private && LA660_0<=Project)||LA660_0==Public||LA660_0==Static||LA660_0==Target||(LA660_0>=Async && LA660_0<=Await)||LA660_0==Union||(LA660_0>=Yield && LA660_0<=This)||LA660_0==From||LA660_0==Type||(LA660_0>=Get && LA660_0<=Let)||(LA660_0>=Out && LA660_0<=Set)||LA660_0==As||LA660_0==Of||LA660_0==RULE_IDENTIFIER) ) {
            alt660=1;
        }
        switch (alt660) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt661=2;
        int LA661_0 = input.LA(1);

        if ( (LA661_0==RULE_VERSION) ) {
            alt661=1;
        }
        switch (alt661) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop662:
        do {
            int alt662=2;
            int LA662_0 = input.LA(1);

            if ( ((LA662_0>=Protected && LA662_0<=Abstract)||LA662_0==External||(LA662_0>=Private && LA662_0<=Project)||LA662_0==Public||LA662_0==Static||LA662_0==Const) ) {
                alt662=1;
            }


            switch (alt662) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop662;
            }
        } while (true);

        match(input,Interface,FOLLOW_209); if (state.failed) return ;
        int alt663=2;
        int LA663_0 = input.LA(1);

        if ( (LA663_0==Tilde) ) {
            alt663=1;
        }
        switch (alt663) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_210);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt664=2;
        int LA664_0 = input.LA(1);

        if ( ((LA664_0>=Intersection && LA664_0<=Implements)||(LA664_0>=Promisify && LA664_0<=Abstract)||LA664_0==External||(LA664_0>=Private && LA664_0<=Project)||LA664_0==Public||LA664_0==Static||LA664_0==Target||(LA664_0>=Async && LA664_0<=Await)||LA664_0==Union||(LA664_0>=Yield && LA664_0<=This)||LA664_0==From||LA664_0==Type||(LA664_0>=Get && LA664_0<=Let)||(LA664_0>=Out && LA664_0<=Set)||LA664_0==As||LA664_0==Of||LA664_0==RULE_IDENTIFIER) ) {
            alt664=1;
        }
        switch (alt664) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt665=2;
        int LA665_0 = input.LA(1);

        if ( (LA665_0==RULE_VERSION) ) {
            alt665=1;
        }
        switch (alt665) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop666:
        do {
            int alt666=2;
            int LA666_0 = input.LA(1);

            if ( ((LA666_0>=Protected && LA666_0<=Abstract)||LA666_0==External||(LA666_0>=Private && LA666_0<=Project)||LA666_0==Public||LA666_0==Static||LA666_0==Const) ) {
                alt666=1;
            }


            switch (alt666) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop666;
            }
        } while (true);

        match(input,Enum,FOLLOW_210); if (state.failed) return ;
        int alt667=2;
        int LA667_0 = input.LA(1);

        if ( ((LA667_0>=Intersection && LA667_0<=Implements)||(LA667_0>=Promisify && LA667_0<=Abstract)||LA667_0==External||(LA667_0>=Private && LA667_0<=Project)||LA667_0==Public||LA667_0==Static||LA667_0==Target||(LA667_0>=Async && LA667_0<=Await)||LA667_0==Union||(LA667_0>=Yield && LA667_0<=This)||LA667_0==From||LA667_0==Type||(LA667_0>=Get && LA667_0<=Let)||(LA667_0>=Out && LA667_0<=Set)||LA667_0==As||LA667_0==Of||LA667_0==RULE_IDENTIFIER) ) {
            alt667=1;
        }
        switch (alt667) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt668=2;
        int LA668_0 = input.LA(1);

        if ( (LA668_0==RULE_VERSION) ) {
            alt668=1;
        }
        switch (alt668) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred5_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleImportDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred9_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_152); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop670:
        do {
            int alt670=2;
            int LA670_0 = input.LA(1);

            if ( ((LA670_0>=Protected && LA670_0<=Abstract)||LA670_0==External||(LA670_0>=Private && LA670_0<=Project)||LA670_0==Public||LA670_0==Static||LA670_0==Const) ) {
                alt670=1;
            }


            switch (alt670) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop670;
            }
        } while (true);

        match(input,Class,FOLLOW_209); if (state.failed) return ;
        int alt671=2;
        int LA671_0 = input.LA(1);

        if ( (LA671_0==Tilde) ) {
            alt671=1;
        }
        switch (alt671) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_210);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt672=2;
        int LA672_0 = input.LA(1);

        if ( ((LA672_0>=Intersection && LA672_0<=Implements)||(LA672_0>=Promisify && LA672_0<=Abstract)||LA672_0==External||(LA672_0>=Private && LA672_0<=Project)||LA672_0==Public||LA672_0==Static||LA672_0==Target||(LA672_0>=Async && LA672_0<=Await)||LA672_0==Union||(LA672_0>=Yield && LA672_0<=This)||LA672_0==From||LA672_0==Type||(LA672_0>=Get && LA672_0<=Let)||(LA672_0>=Out && LA672_0<=Set)||LA672_0==As||LA672_0==Of||LA672_0==RULE_IDENTIFIER) ) {
            alt672=1;
        }
        switch (alt672) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt673=2;
        int LA673_0 = input.LA(1);

        if ( (LA673_0==RULE_VERSION) ) {
            alt673=1;
        }
        switch (alt673) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop674:
        do {
            int alt674=2;
            int LA674_0 = input.LA(1);

            if ( ((LA674_0>=Protected && LA674_0<=Abstract)||LA674_0==External||(LA674_0>=Private && LA674_0<=Project)||LA674_0==Public||LA674_0==Static||LA674_0==Const) ) {
                alt674=1;
            }


            switch (alt674) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop674;
            }
        } while (true);

        match(input,Interface,FOLLOW_209); if (state.failed) return ;
        int alt675=2;
        int LA675_0 = input.LA(1);

        if ( (LA675_0==Tilde) ) {
            alt675=1;
        }
        switch (alt675) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_210);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt676=2;
        int LA676_0 = input.LA(1);

        if ( ((LA676_0>=Intersection && LA676_0<=Implements)||(LA676_0>=Promisify && LA676_0<=Abstract)||LA676_0==External||(LA676_0>=Private && LA676_0<=Project)||LA676_0==Public||LA676_0==Static||LA676_0==Target||(LA676_0>=Async && LA676_0<=Await)||LA676_0==Union||(LA676_0>=Yield && LA676_0<=This)||LA676_0==From||LA676_0==Type||(LA676_0>=Get && LA676_0<=Let)||(LA676_0>=Out && LA676_0<=Set)||LA676_0==As||LA676_0==Of||LA676_0==RULE_IDENTIFIER) ) {
            alt676=1;
        }
        switch (alt676) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt677=2;
        int LA677_0 = input.LA(1);

        if ( (LA677_0==RULE_VERSION) ) {
            alt677=1;
        }
        switch (alt677) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred14_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop678:
        do {
            int alt678=2;
            int LA678_0 = input.LA(1);

            if ( ((LA678_0>=Protected && LA678_0<=Abstract)||LA678_0==External||(LA678_0>=Private && LA678_0<=Project)||LA678_0==Public||LA678_0==Static||LA678_0==Const) ) {
                alt678=1;
            }


            switch (alt678) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop678;
            }
        } while (true);

        match(input,Enum,FOLLOW_210); if (state.failed) return ;
        int alt679=2;
        int LA679_0 = input.LA(1);

        if ( ((LA679_0>=Intersection && LA679_0<=Implements)||(LA679_0>=Promisify && LA679_0<=Abstract)||LA679_0==External||(LA679_0>=Private && LA679_0<=Project)||LA679_0==Public||LA679_0==Static||LA679_0==Target||(LA679_0>=Async && LA679_0<=Await)||LA679_0==Union||(LA679_0>=Yield && LA679_0<=This)||LA679_0==From||LA679_0==Type||(LA679_0>=Get && LA679_0<=Let)||(LA679_0>=Out && LA679_0<=Set)||LA679_0==As||LA679_0==Of||LA679_0==RULE_IDENTIFIER) ) {
            alt679=1;
        }
        switch (alt679) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt680=2;
        int LA680_0 = input.LA(1);

        if ( (LA680_0==RULE_VERSION) ) {
            alt680=1;
        }
        switch (alt680) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred15_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop681:
        do {
            int alt681=2;
            int LA681_0 = input.LA(1);

            if ( ((LA681_0>=Protected && LA681_0<=Abstract)||LA681_0==External||(LA681_0>=Private && LA681_0<=Project)||LA681_0==Public||LA681_0==Static||LA681_0==Const) ) {
                alt681=1;
            }


            switch (alt681) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop681;
            }
        } while (true);

        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred19_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred27_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred28_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred37_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred39_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred43_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred45_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred49_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred51_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred55_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred57_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred58_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred59_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred62_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred63_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop696:
        do {
            int alt696=2;
            int LA696_0 = input.LA(1);

            if ( ((LA696_0>=Protected && LA696_0<=Abstract)||LA696_0==External||(LA696_0>=Private && LA696_0<=Project)||LA696_0==Public||LA696_0==Static||LA696_0==Const) ) {
                alt696=1;
            }


            switch (alt696) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop696;
            }
        } while (true);

        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred64_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred65_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_94);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred67_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop697:
        do {
            int alt697=2;
            int LA697_0 = input.LA(1);

            if ( ((LA697_0>=Protected && LA697_0<=Abstract)||LA697_0==External||(LA697_0>=Private && LA697_0<=Project)||LA697_0==Public||LA697_0==Static||LA697_0==Const) ) {
                alt697=1;
            }


            switch (alt697) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop697;
            }
        } while (true);

        pushFollow(FOLLOW_45);
        ruleAsyncNoTrailingLineBreak(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred68_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_94);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred70_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_152); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred71_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_152); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred74_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred75_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred76_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred77_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred78_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred79_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred88_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred89_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred90_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred91_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt698=2;
        int LA698_0 = input.LA(1);

        if ( (LA698_0==Colon) ) {
            alt698=1;
        }
        switch (alt698) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt699=2;
        int LA699_0 = input.LA(1);

        if ( (LA699_0==Colon) ) {
            alt699=1;
        }
        switch (alt699) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt700=2;
        int LA700_0 = input.LA(1);

        if ( (LA700_0==Colon) ) {
            alt700=1;
        }
        switch (alt700) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt701=2;
        int LA701_0 = input.LA(1);

        if ( (LA701_0==Colon) ) {
            alt701=1;
        }
        switch (alt701) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred100_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred101_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred103_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred104_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_78);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_49); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_72);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred105_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred106_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_79);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt702=2;
        int LA702_0 = input.LA(1);

        if ( (LA702_0==In) ) {
            alt702=1;
        }
        else if ( (LA702_0==Of) ) {
            alt702=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 702, 0, input);

            throw nvae;
        }
        switch (alt702) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_67); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_67); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt703=2;
        int LA703_0 = input.LA(1);

        if ( ((LA703_0>=Intersection && LA703_0<=Implements)||(LA703_0>=Promisify && LA703_0<=Abstract)||(LA703_0>=External && LA703_0<=Function)||(LA703_0>=Private && LA703_0<=Delete)||(LA703_0>=Import && LA703_0<=Public)||LA703_0==Static||(LA703_0>=Target && LA703_0<=Await)||LA703_0==Class||(LA703_0>=False && LA703_0<=Super)||LA703_0==Union||(LA703_0>=Yield && LA703_0<=This)||(LA703_0>=From && LA703_0<=Void)||(LA703_0>=Get && LA703_0<=Set)||LA703_0==PlusSignPlusSign||(LA703_0>=HyphenMinusHyphenMinus && LA703_0<=SolidusEqualsSign)||LA703_0==As||LA703_0==Of||LA703_0==ExclamationMark||LA703_0==LeftParenthesis||LA703_0==PlusSign||LA703_0==HyphenMinus||LA703_0==Solidus||LA703_0==LessThanSign||(LA703_0>=CommercialAt && LA703_0<=LeftSquareBracket)||LA703_0==LeftCurlyBracket||LA703_0==Tilde||LA703_0==RULE_DOUBLE||(LA703_0>=RULE_HEX_INT && LA703_0<=RULE_LEGACY_OCTAL_INT)||LA703_0==RULE_SCIENTIFIC_INT||LA703_0==RULE_IDENTIFIER||LA703_0==RULE_STRING||(LA703_0>=RULE_TEMPLATE_HEAD && LA703_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA703_0==RULE_INT) ) {
            alt703=1;
        }
        switch (alt703) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred107_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred108_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_78);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_70); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_72);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_79);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt704=2;
        int LA704_0 = input.LA(1);

        if ( (LA704_0==In) ) {
            alt704=1;
        }
        else if ( (LA704_0==Of) ) {
            alt704=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 704, 0, input);

            throw nvae;
        }
        switch (alt704) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_67); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_67); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt705=2;
        int LA705_0 = input.LA(1);

        if ( ((LA705_0>=Intersection && LA705_0<=Implements)||(LA705_0>=Promisify && LA705_0<=Abstract)||(LA705_0>=External && LA705_0<=Function)||(LA705_0>=Private && LA705_0<=Delete)||(LA705_0>=Import && LA705_0<=Public)||LA705_0==Static||(LA705_0>=Target && LA705_0<=Await)||LA705_0==Class||(LA705_0>=False && LA705_0<=Super)||LA705_0==Union||(LA705_0>=Yield && LA705_0<=This)||(LA705_0>=From && LA705_0<=Void)||(LA705_0>=Get && LA705_0<=Set)||LA705_0==PlusSignPlusSign||(LA705_0>=HyphenMinusHyphenMinus && LA705_0<=SolidusEqualsSign)||LA705_0==As||LA705_0==Of||LA705_0==ExclamationMark||LA705_0==LeftParenthesis||LA705_0==PlusSign||LA705_0==HyphenMinus||LA705_0==Solidus||LA705_0==LessThanSign||(LA705_0>=CommercialAt && LA705_0<=LeftSquareBracket)||LA705_0==LeftCurlyBracket||LA705_0==Tilde||LA705_0==RULE_DOUBLE||(LA705_0>=RULE_HEX_INT && LA705_0<=RULE_LEGACY_OCTAL_INT)||LA705_0==RULE_SCIENTIFIC_INT||LA705_0==RULE_IDENTIFIER||LA705_0==RULE_STRING||(LA705_0>=RULE_TEMPLATE_HEAD && LA705_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA705_0==RULE_INT) ) {
            alt705=1;
        }
        switch (alt705) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred111_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred119_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_94);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred122_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_94);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_44); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_45);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred127_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_44); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_45);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt706=2;
        alt706 = dfa706.predict(input);
        switch (alt706) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_107);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_111);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt707=2;
        int LA707_0 = input.LA(1);

        if ( (LA707_0==QuestionMark) ) {
            alt707=1;
        }
        switch (alt707) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_94); if (state.failed) return ;

                }


                }
                break;

        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred129_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred130_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_212); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred131_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt708=2;
        int LA708_0 = input.LA(1);

        if ( (LA708_0==LessThanSign) ) {
            alt708=1;
        }
        switch (alt708) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt709=2;
        alt709 = dfa709.predict(input);
        switch (alt709) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt710=2;
        int LA710_0 = input.LA(1);

        if ( (LA710_0==Asterisk) ) {
            alt710=1;
        }
        else if ( ((LA710_0>=Intersection && LA710_0<=With)||(LA710_0>=For && LA710_0<=Var)||(LA710_0>=As && LA710_0<=Of)||LA710_0==LeftSquareBracket||LA710_0==RULE_DOUBLE||LA710_0==RULE_HEX_INT||LA710_0==RULE_OCTAL_INT||LA710_0==RULE_SCIENTIFIC_INT||LA710_0==RULE_IDENTIFIER||LA710_0==RULE_STRING||LA710_0==RULE_INT) ) {
            alt710=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 710, 0, input);

            throw nvae;
        }
        switch (alt710) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_107); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred132_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt711=2;
        alt711 = dfa711.predict(input);
        switch (alt711) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_107);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_111);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt712=2;
        int LA712_0 = input.LA(1);

        if ( (LA712_0==QuestionMark) ) {
            alt712=1;
        }
        switch (alt712) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_94); if (state.failed) return ;

                }


                }
                break;

        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred133_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred134_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_212); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred135_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt713=2;
        int LA713_0 = input.LA(1);

        if ( (LA713_0==LessThanSign) ) {
            alt713=1;
        }
        switch (alt713) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt714=2;
        alt714 = dfa714.predict(input);
        switch (alt714) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt715=2;
        int LA715_0 = input.LA(1);

        if ( (LA715_0==Asterisk) ) {
            alt715=1;
        }
        else if ( ((LA715_0>=Intersection && LA715_0<=With)||(LA715_0>=For && LA715_0<=Var)||(LA715_0>=As && LA715_0<=Of)||LA715_0==LeftSquareBracket||LA715_0==RULE_DOUBLE||LA715_0==RULE_HEX_INT||LA715_0==RULE_OCTAL_INT||LA715_0==RULE_SCIENTIFIC_INT||LA715_0==RULE_IDENTIFIER||LA715_0==RULE_STRING||LA715_0==RULE_INT) ) {
            alt715=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 715, 0, input);

            throw nvae;
        }
        switch (alt715) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_107); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt716=2;
        alt716 = dfa716.predict(input);
        switch (alt716) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_107);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_94);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred139_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_212); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred142_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt717=2;
        int LA717_0 = input.LA(1);

        if ( (LA717_0==LessThanSign) ) {
            alt717=1;
        }
        switch (alt717) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt718=2;
        alt718 = dfa718.predict(input);
        switch (alt718) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt719=2;
        int LA719_0 = input.LA(1);

        if ( (LA719_0==Asterisk) ) {
            alt719=1;
        }
        else if ( ((LA719_0>=Intersection && LA719_0<=With)||(LA719_0>=For && LA719_0<=Var)||(LA719_0>=As && LA719_0<=Of)||LA719_0==LeftSquareBracket||LA719_0==RULE_DOUBLE||LA719_0==RULE_HEX_INT||LA719_0==RULE_OCTAL_INT||LA719_0==RULE_SCIENTIFIC_INT||LA719_0==RULE_IDENTIFIER||LA719_0==RULE_STRING||LA719_0==RULE_INT) ) {
            alt719=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 719, 0, input);

            throw nvae;
        }
        switch (alt719) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_107); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred145_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt720=2;
        alt720 = dfa720.predict(input);
        switch (alt720) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_107);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_94);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred146_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred148_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_212); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred151_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt721=2;
        int LA721_0 = input.LA(1);

        if ( (LA721_0==LessThanSign) ) {
            alt721=1;
        }
        switch (alt721) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt722=2;
        alt722 = dfa722.predict(input);
        switch (alt722) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt723=2;
        int LA723_0 = input.LA(1);

        if ( (LA723_0==Asterisk) ) {
            alt723=1;
        }
        else if ( ((LA723_0>=Intersection && LA723_0<=With)||(LA723_0>=For && LA723_0<=Var)||(LA723_0>=As && LA723_0<=Of)||LA723_0==LeftSquareBracket||LA723_0==RULE_DOUBLE||LA723_0==RULE_HEX_INT||LA723_0==RULE_OCTAL_INT||LA723_0==RULE_SCIENTIFIC_INT||LA723_0==RULE_IDENTIFIER||LA723_0==RULE_STRING||LA723_0==RULE_INT) ) {
            alt723=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 723, 0, input);

            throw nvae;
        }
        switch (alt723) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_107); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred172_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred173_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred174_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,New,FOLLOW_121); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred175_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred176_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred177_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred178_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,New,FOLLOW_121); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred179_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred180_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred181_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred182_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred183_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred184_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred185_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred186_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred187_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred188_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred189_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred190_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_213);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_49);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_213);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_213);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_147); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt736=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt736=1;
            }
            break;
        case Async:
            {
            int LA736_2 = input.LA(2);

            if ( (LA736_2==EqualsSignGreaterThanSign) ) {
                alt736=3;
            }
            else if ( (LA736_2==RULE_NO_LINE_TERMINATOR) && (synpred236_InternalN4JSParser())) {
                alt736=2;
            }
            else if ( (LA736_2==LeftParenthesis) && (synpred236_InternalN4JSParser())) {
                alt736=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 736, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt736=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 736, 0, input);

            throw nvae;
        }

        switch (alt736) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;
                int alt734=2;
                int LA734_0 = input.LA(1);

                if ( (LA734_0==Colon) ) {
                    alt734=1;
                }
                switch (alt734) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_42);
                ruleNoLineTerminator(null);

                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                int alt735=2;
                int LA735_0 = input.LA(1);

                if ( (LA735_0==Colon) ) {
                    alt735=1;
                }
                switch (alt735) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_147); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred244_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt739=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt739=1;
            }
            break;
        case Async:
            {
            int LA739_2 = input.LA(2);

            if ( (LA739_2==EqualsSignGreaterThanSign) ) {
                alt739=3;
            }
            else if ( (LA739_2==RULE_NO_LINE_TERMINATOR) && (synpred242_InternalN4JSParser())) {
                alt739=2;
            }
            else if ( (LA739_2==LeftParenthesis) && (synpred242_InternalN4JSParser())) {
                alt739=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 739, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt739=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 739, 0, input);

            throw nvae;
        }

        switch (alt739) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;
                int alt737=2;
                int LA737_0 = input.LA(1);

                if ( (LA737_0==Colon) ) {
                    alt737=1;
                }
                switch (alt737) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_48); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_42);
                ruleNoLineTerminator(null);

                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                ruleStrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                int alt738=2;
                int LA738_0 = input.LA(1);

                if ( (LA738_0==Colon) ) {
                    alt738=1;
                }
                switch (alt738) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred245_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred246_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred247_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_147); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred248_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred250_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt742=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt742=1;
            }
            break;
        case Async:
            {
            int LA742_2 = input.LA(2);

            if ( (LA742_2==RULE_NO_LINE_TERMINATOR) && (synpred248_InternalN4JSParser())) {
                alt742=2;
            }
            else if ( (LA742_2==LeftParenthesis) && (synpred248_InternalN4JSParser())) {
                alt742=2;
            }
            else if ( (LA742_2==EqualsSignGreaterThanSign) ) {
                alt742=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 742, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt742=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 742, 0, input);

            throw nvae;
        }

        switch (alt742) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;
                int alt740=2;
                int LA740_0 = input.LA(1);

                if ( (LA740_0==Colon) ) {
                    alt740=1;
                }
                switch (alt740) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_39);
                ruleNoLineTerminator(null);

                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                int alt741=2;
                int LA741_0 = input.LA(1);

                if ( (LA741_0==Colon) ) {
                    alt741=1;
                }
                switch (alt741) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred252_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred253_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,CommercialAt,FOLLOW_147); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred254_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_42);
        ruleNoLineTerminator(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred256_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt745=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt745=1;
            }
            break;
        case Async:
            {
            int LA745_2 = input.LA(2);

            if ( (LA745_2==EqualsSignGreaterThanSign) ) {
                alt745=3;
            }
            else if ( (LA745_2==RULE_NO_LINE_TERMINATOR) && (synpred254_InternalN4JSParser())) {
                alt745=2;
            }
            else if ( (LA745_2==LeftParenthesis) && (synpred254_InternalN4JSParser())) {
                alt745=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 745, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt745=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 745, 0, input);

            throw nvae;
        }

        switch (alt745) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;
                int alt743=2;
                int LA743_0 = input.LA(1);

                if ( (LA743_0==Colon) ) {
                    alt743=1;
                }
                switch (alt743) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_39);
                ruleNoLineTerminator(null);

                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_46);
                norm1_StrictFormalParameters(null);

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                int alt744=2;
                int LA744_0 = input.LA(1);

                if ( (LA744_0==Colon) ) {
                    alt744=1;
                }
                switch (alt744) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_47);
                        ruleColonSepReturnTypeRef(null);

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_47);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred257_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred258_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred261_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred270_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred274_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred278_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop757:
        do {
            int alt757=2;
            int LA757_0 = input.LA(1);

            if ( ((LA757_0>=Protected && LA757_0<=Abstract)||LA757_0==External||(LA757_0>=Private && LA757_0<=Project)||LA757_0==Public||LA757_0==Static||LA757_0==Const) ) {
                alt757=1;
            }


            switch (alt757) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_163);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop757;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred279_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop758:
        do {
            int alt758=2;
            int LA758_0 = input.LA(1);

            if ( ((LA758_0>=Protected && LA758_0<=Abstract)||LA758_0==External||(LA758_0>=Private && LA758_0<=Project)||LA758_0==Public||LA758_0==Static||LA758_0==Const) ) {
                alt758=1;
            }


            switch (alt758) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop758;
            }
        } while (true);

        match(input,Set,FOLLOW_212); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred280_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop759:
        do {
            int alt759=2;
            alt759 = dfa759.predict(input);
            switch (alt759) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_162);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop759;
            }
        } while (true);
        int alt760=2;
        int LA760_0 = input.LA(1);

        if ( (LA760_0==LessThanSign) ) {
            alt760=1;
        }
        switch (alt760) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt761=2;
        alt761 = dfa761.predict(input);
        switch (alt761) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleBogusTypeRefFragment(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt762=2;
        int LA762_0 = input.LA(1);

        if ( (LA762_0==Asterisk) ) {
            alt762=1;
        }
        else if ( ((LA762_0>=Intersection && LA762_0<=With)||(LA762_0>=For && LA762_0<=Var)||(LA762_0>=As && LA762_0<=Of)||LA762_0==LeftSquareBracket||LA762_0==RULE_DOUBLE||LA762_0==RULE_HEX_INT||LA762_0==RULE_OCTAL_INT||LA762_0==RULE_SCIENTIFIC_INT||LA762_0==RULE_IDENTIFIER||LA762_0==RULE_STRING||LA762_0==RULE_INT) ) {
            alt762=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 762, 0, input);

            throw nvae;
        }
        switch (alt762) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_107); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_107);
                ruleAsyncNoTrailingLineBreak(null);

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred281_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop763:
        do {
            int alt763=2;
            int LA763_0 = input.LA(1);

            if ( ((LA763_0>=Protected && LA763_0<=Abstract)||LA763_0==External||(LA763_0>=Private && LA763_0<=Project)||LA763_0==Public||LA763_0==Static||LA763_0==Const) ) {
                alt763=1;
            }


            switch (alt763) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_163);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop763;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred282_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop764:
        do {
            int alt764=2;
            int LA764_0 = input.LA(1);

            if ( ((LA764_0>=Protected && LA764_0<=Abstract)||LA764_0==External||(LA764_0>=Private && LA764_0<=Project)||LA764_0==Public||LA764_0==Static||LA764_0==Const) ) {
                alt764=1;
            }


            switch (alt764) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop764;
            }
        } while (true);

        match(input,Set,FOLLOW_212); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred283_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop765:
        do {
            int alt765=2;
            alt765 = dfa765.predict(input);
            switch (alt765) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_162);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop765;
            }
        } while (true);
        int alt766=2;
        int LA766_0 = input.LA(1);

        if ( (LA766_0==LessThanSign) ) {
            alt766=1;
        }
        switch (alt766) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt767=2;
        alt767 = dfa767.predict(input);
        switch (alt767) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleBogusTypeRefFragment(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt768=2;
        int LA768_0 = input.LA(1);

        if ( (LA768_0==Asterisk) ) {
            alt768=1;
        }
        else if ( ((LA768_0>=Intersection && LA768_0<=With)||(LA768_0>=For && LA768_0<=Var)||(LA768_0>=As && LA768_0<=Of)||LA768_0==LeftSquareBracket||LA768_0==RULE_DOUBLE||LA768_0==RULE_HEX_INT||LA768_0==RULE_OCTAL_INT||LA768_0==RULE_SCIENTIFIC_INT||LA768_0==RULE_IDENTIFIER||LA768_0==RULE_STRING||LA768_0==RULE_INT) ) {
            alt768=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 768, 0, input);

            throw nvae;
        }
        switch (alt768) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_107); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_107);
                ruleAsyncNoTrailingLineBreak(null);

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred284_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop769:
        do {
            int alt769=2;
            int LA769_0 = input.LA(1);

            if ( ((LA769_0>=Protected && LA769_0<=Abstract)||LA769_0==External||(LA769_0>=Private && LA769_0<=Project)||LA769_0==Public||LA769_0==Static||LA769_0==Const) ) {
                alt769=1;
            }


            switch (alt769) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_163);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop769;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred285_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred286_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop770:
        do {
            int alt770=2;
            int LA770_0 = input.LA(1);

            if ( ((LA770_0>=Protected && LA770_0<=Abstract)||LA770_0==External||(LA770_0>=Private && LA770_0<=Project)||LA770_0==Public||LA770_0==Static||LA770_0==Const) ) {
                alt770=1;
            }


            switch (alt770) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop770;
            }
        } while (true);

        match(input,Set,FOLLOW_212); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred288_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop771:
        do {
            int alt771=2;
            alt771 = dfa771.predict(input);
            switch (alt771) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_162);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop771;
            }
        } while (true);
        int alt772=2;
        int LA772_0 = input.LA(1);

        if ( (LA772_0==LessThanSign) ) {
            alt772=1;
        }
        switch (alt772) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt773=2;
        alt773 = dfa773.predict(input);
        switch (alt773) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleBogusTypeRefFragment(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt774=2;
        int LA774_0 = input.LA(1);

        if ( (LA774_0==Asterisk) ) {
            alt774=1;
        }
        else if ( ((LA774_0>=Intersection && LA774_0<=With)||(LA774_0>=For && LA774_0<=Var)||(LA774_0>=As && LA774_0<=Of)||LA774_0==LeftSquareBracket||LA774_0==RULE_DOUBLE||LA774_0==RULE_HEX_INT||LA774_0==RULE_OCTAL_INT||LA774_0==RULE_SCIENTIFIC_INT||LA774_0==RULE_IDENTIFIER||LA774_0==RULE_STRING||LA774_0==RULE_INT) ) {
            alt774=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 774, 0, input);

            throw nvae;
        }
        switch (alt774) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_107); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_107);
                ruleAsyncNoTrailingLineBreak(null);

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred292_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop775:
        do {
            int alt775=2;
            int LA775_0 = input.LA(1);

            if ( ((LA775_0>=Protected && LA775_0<=Abstract)||LA775_0==External||(LA775_0>=Private && LA775_0<=Project)||LA775_0==Public||LA775_0==Static||LA775_0==Const) ) {
                alt775=1;
            }


            switch (alt775) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_163);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop775;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred293_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred294_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop776:
        do {
            int alt776=2;
            int LA776_0 = input.LA(1);

            if ( ((LA776_0>=Protected && LA776_0<=Abstract)||LA776_0==External||(LA776_0>=Private && LA776_0<=Project)||LA776_0==Public||LA776_0==Static||LA776_0==Const) ) {
                alt776=1;
            }


            switch (alt776) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_165);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop776;
            }
        } while (true);

        match(input,Set,FOLLOW_212); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred296_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred297_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop777:
        do {
            int alt777=2;
            alt777 = dfa777.predict(input);
            switch (alt777) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_162);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop777;
            }
        } while (true);
        int alt778=2;
        int LA778_0 = input.LA(1);

        if ( (LA778_0==LessThanSign) ) {
            alt778=1;
        }
        switch (alt778) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt779=2;
        alt779 = dfa779.predict(input);
        switch (alt779) {
            case 1 :
                {
                pushFollow(FOLLOW_109);
                ruleBogusTypeRefFragment(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt780=2;
        int LA780_0 = input.LA(1);

        if ( (LA780_0==Asterisk) ) {
            alt780=1;
        }
        else if ( ((LA780_0>=Intersection && LA780_0<=With)||(LA780_0>=For && LA780_0<=Var)||(LA780_0>=As && LA780_0<=Of)||LA780_0==LeftSquareBracket||LA780_0==RULE_DOUBLE||LA780_0==RULE_HEX_INT||LA780_0==RULE_OCTAL_INT||LA780_0==RULE_SCIENTIFIC_INT||LA780_0==RULE_IDENTIFIER||LA780_0==RULE_STRING||LA780_0==RULE_INT) ) {
            alt780=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 780, 0, input);

            throw nvae;
        }
        switch (alt780) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_107); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_107);
                ruleAsyncNoTrailingLineBreak(null);

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_42);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred306_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred307_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred308_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred309_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred311_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred313_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred318_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred321_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred322_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_94);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred323_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_94);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred324_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred325_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred326_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred327_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return ;

        }


        }

        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred328_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return ;

        }


        }

        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred329_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_126); if (state.failed) return ;

        }


        }

        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred330_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,LeftParenthesis,FOLLOW_195); if (state.failed) return ;
        pushFollow(FOLLOW_72);
        ruleTAnonymousFormalParameterList(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_47); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred331_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred332_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred333_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred335_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_94);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred337_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred338_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred339_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Get,FOLLOW_14); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred340_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,Set,FOLLOW_14); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred341_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt793=2;
        int LA793_0 = input.LA(1);

        if ( (LA793_0==LessThanSign) ) {
            alt793=1;
        }
        switch (alt793) {
            case 1 :
                {
                pushFollow(FOLLOW_14);
                ruleTypeVariables(null);

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_42);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred345_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }

        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred22_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA206 dfa206 = new DFA206(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA228 dfa228 = new DFA228(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA230 dfa230 = new DFA230(this);
    protected DFA229 dfa229 = new DFA229(this);
    protected DFA231 dfa231 = new DFA231(this);
    protected DFA232 dfa232 = new DFA232(this);
    protected DFA233 dfa233 = new DFA233(this);
    protected DFA234 dfa234 = new DFA234(this);
    protected DFA237 dfa237 = new DFA237(this);
    protected DFA243 dfa243 = new DFA243(this);
    protected DFA255 dfa255 = new DFA255(this);
    protected DFA256 dfa256 = new DFA256(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA257 dfa257 = new DFA257(this);
    protected DFA260 dfa260 = new DFA260(this);
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA274 dfa274 = new DFA274(this);
    protected DFA266 dfa266 = new DFA266(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA276 dfa276 = new DFA276(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA283 dfa283 = new DFA283(this);
    protected DFA285 dfa285 = new DFA285(this);
    protected DFA287 dfa287 = new DFA287(this);
    protected DFA289 dfa289 = new DFA289(this);
    protected DFA319 dfa319 = new DFA319(this);
    protected DFA327 dfa327 = new DFA327(this);
    protected DFA342 dfa342 = new DFA342(this);
    protected DFA343 dfa343 = new DFA343(this);
    protected DFA344 dfa344 = new DFA344(this);
    protected DFA345 dfa345 = new DFA345(this);
    protected DFA348 dfa348 = new DFA348(this);
    protected DFA349 dfa349 = new DFA349(this);
    protected DFA350 dfa350 = new DFA350(this);
    protected DFA351 dfa351 = new DFA351(this);
    protected DFA389 dfa389 = new DFA389(this);
    protected DFA388 dfa388 = new DFA388(this);
    protected DFA391 dfa391 = new DFA391(this);
    protected DFA390 dfa390 = new DFA390(this);
    protected DFA393 dfa393 = new DFA393(this);
    protected DFA392 dfa392 = new DFA392(this);
    protected DFA395 dfa395 = new DFA395(this);
    protected DFA394 dfa394 = new DFA394(this);
    protected DFA397 dfa397 = new DFA397(this);
    protected DFA399 dfa399 = new DFA399(this);
    protected DFA431 dfa431 = new DFA431(this);
    protected DFA437 dfa437 = new DFA437(this);
    protected DFA474 dfa474 = new DFA474(this);
    protected DFA475 dfa475 = new DFA475(this);
    protected DFA488 dfa488 = new DFA488(this);
    protected DFA477 dfa477 = new DFA477(this);
    protected DFA481 dfa481 = new DFA481(this);
    protected DFA483 dfa483 = new DFA483(this);
    protected DFA485 dfa485 = new DFA485(this);
    protected DFA501 dfa501 = new DFA501(this);
    protected DFA490 dfa490 = new DFA490(this);
    protected DFA494 dfa494 = new DFA494(this);
    protected DFA496 dfa496 = new DFA496(this);
    protected DFA498 dfa498 = new DFA498(this);
    protected DFA502 dfa502 = new DFA502(this);
    protected DFA503 dfa503 = new DFA503(this);
    protected DFA507 dfa507 = new DFA507(this);
    protected DFA508 dfa508 = new DFA508(this);
    protected DFA512 dfa512 = new DFA512(this);
    protected DFA514 dfa514 = new DFA514(this);
    protected DFA517 dfa517 = new DFA517(this);
    protected DFA519 dfa519 = new DFA519(this);
    protected DFA527 dfa527 = new DFA527(this);
    protected DFA529 dfa529 = new DFA529(this);
    protected DFA531 dfa531 = new DFA531(this);
    protected DFA534 dfa534 = new DFA534(this);
    protected DFA544 dfa544 = new DFA544(this);
    protected DFA548 dfa548 = new DFA548(this);
    protected DFA558 dfa558 = new DFA558(this);
    protected DFA564 dfa564 = new DFA564(this);
    protected DFA568 dfa568 = new DFA568(this);
    protected DFA569 dfa569 = new DFA569(this);
    protected DFA587 dfa587 = new DFA587(this);
    protected DFA599 dfa599 = new DFA599(this);
    protected DFA600 dfa600 = new DFA600(this);
    protected DFA602 dfa602 = new DFA602(this);
    protected DFA615 dfa615 = new DFA615(this);
    protected DFA621 dfa621 = new DFA621(this);
    protected DFA622 dfa622 = new DFA622(this);
    protected DFA623 dfa623 = new DFA623(this);
    protected DFA624 dfa624 = new DFA624(this);
    protected DFA631 dfa631 = new DFA631(this);
    protected DFA706 dfa706 = new DFA706(this);
    protected DFA709 dfa709 = new DFA709(this);
    protected DFA711 dfa711 = new DFA711(this);
    protected DFA714 dfa714 = new DFA714(this);
    protected DFA716 dfa716 = new DFA716(this);
    protected DFA718 dfa718 = new DFA718(this);
    protected DFA720 dfa720 = new DFA720(this);
    protected DFA722 dfa722 = new DFA722(this);
    protected DFA759 dfa759 = new DFA759(this);
    protected DFA761 dfa761 = new DFA761(this);
    protected DFA765 dfa765 = new DFA765(this);
    protected DFA767 dfa767 = new DFA767(this);
    protected DFA771 dfa771 = new DFA771(this);
    protected DFA773 dfa773 = new DFA773(this);
    protected DFA777 dfa777 = new DFA777(this);
    protected DFA779 dfa779 = new DFA779(this);
    static final String dfa_1s = "\124\uffff";
    static final String dfa_2s = "\1\4\13\0\1\uffff\1\0\106\uffff";
    static final String dfa_3s = "\1\u0094\13\0\1\uffff\1\0\106\uffff";
    static final String dfa_4s = "\14\uffff\1\4\1\uffff\1\6\1\7\100\uffff\1\1\1\2\1\3\1\5";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\106\uffff}>";
    static final String[] dfa_6s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\2\17\10\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\7\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "155:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedScriptElement_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4ClassDeclaration_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4InterfaceDeclaration_2= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4EnumDeclaration_3= ruleN4EnumDeclaration ) | ( ( ruleImportDeclaration )=>this_ImportDeclaration_4= ruleImportDeclaration ) | this_ExportDeclaration_5= ruleExportDeclaration | this_RootStatement_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);

                         
                        int index2_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA2_0>=9 && LA2_0<=106 && (s=T2S.M_0[LA2_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA2_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}

                        else if ( (LA2_0==Import) ) {s = 13;}

                        else if ( (LA2_0==Export) ) {s = 14;}

                        else if ( ((LA2_0>=Intersection && LA2_0<=Implements)||LA2_0==Promisify||(LA2_0>=Continue && LA2_0<=Debugger)||LA2_0==Function||LA2_0==Delete||LA2_0==Return||(LA2_0>=Switch && LA2_0<=Break)||(LA2_0>=False && LA2_0<=This)||(LA2_0>=From && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||(LA2_0>=HyphenMinusHyphenMinus && LA2_0<=SolidusEqualsSign)||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||LA2_0==LeftSquareBracket||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index2_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalN4JSParser()) ) {s = 83;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\16\uffff";
    static final String dfa_8s = "\1\11\2\uffff\10\11\3\uffff";
    static final String dfa_9s = "\1\55\2\uffff\10\55\3\uffff";
    static final String dfa_10s = "\1\uffff\1\1\1\2\10\uffff\1\3\1\4\1\5";
    static final String dfa_11s = "\16\uffff}>";
    static final String[] dfa_12s = {
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "",
            "",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "347:3: ( ( () this_ExportDeclarationImpl_2= ruleExportDeclarationImpl[$current] ) | ( () this_ImportDeclarationImpl_4= ruleImportDeclarationImpl[$current] ) | ( () ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=> ( ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_7= ruleAsyncNoTrailingLineBreak[$current] ( ( Function )=>this_FunctionImpl_8= ruleFunctionImpl[$current] ) ) ) ) | ( ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_14= ruleVersionDeclaration[$current] )? (this_TypeVariables_15= ruleTypeVariables[$current] )? (this_ClassExtendsImplements_16= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_18_0= ruleN4Modifier ) )* otherlv_19= Interface ( (lv_typingStrategy_20_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_21_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_22= ruleVersionDeclaration[$current] )? (this_TypeVariables_23= ruleTypeVariables[$current] )? (this_InterfaceExtendsList_24= ruleInterfaceExtendsList[$current] )? ) ) this_Members_25= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_27_0= ruleN4Modifier ) )* otherlv_28= Enum ( (lv_name_29_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_30= ruleVersionDeclaration[$current] )? otherlv_31= LeftCurlyBracket ( (lv_literals_32_0= ruleN4EnumLiteral ) ) (otherlv_33= Comma ( (lv_literals_34_0= ruleN4EnumLiteral ) ) )* otherlv_35= RightCurlyBracket ) )";
        }
    }
    static final String dfa_13s = "\13\uffff";
    static final String dfa_14s = "\11\11\2\uffff";
    static final String dfa_15s = "\11\43\2\uffff";
    static final String dfa_16s = "\11\uffff\1\1\1\2";
    static final String dfa_17s = "\13\uffff}>";
    static final String[] dfa_18s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "459:5: ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_14= ruleVersionDeclaration[$current] )? (this_TypeVariables_15= ruleTypeVariables[$current] )? (this_ClassExtendsImplements_16= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_18_0= ruleN4Modifier ) )* otherlv_19= Interface ( (lv_typingStrategy_20_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_21_0= ruleBindingIdentifier ) ) (this_VersionDeclaration_22= ruleVersionDeclaration[$current] )? (this_TypeVariables_23= ruleTypeVariables[$current] )? (this_InterfaceExtendsList_24= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_19s = "\102\uffff";
    static final String dfa_20s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_21s = "\1\u0094\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\61\uffff";
    static final String dfa_22s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\60\uffff";
    static final String dfa_23s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\61\uffff}>";
    static final String[] dfa_24s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\1\uffff\1\21\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\2\21\10\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\7\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "970:5: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (lv_exportedElement_9_0= ruleExportableElement ) ) | ( ( (lv_defaultExportedExpression_10_0= norm1_AssignmentExpression ) ) ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_0 = input.LA(1);

                         
                        int index20_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA20_0==CommercialAt) ) {s = 1;}

                        else if ( (LA20_0==Private) ) {s = 2;}

                        else if ( (LA20_0==Project) ) {s = 3;}

                        else if ( (LA20_0==Protected) ) {s = 4;}

                        else if ( (LA20_0==Public) ) {s = 5;}

                        else if ( (LA20_0==External) ) {s = 6;}

                        else if ( (LA20_0==Abstract) ) {s = 7;}

                        else if ( (LA20_0==Static) ) {s = 8;}

                        else if ( (LA20_0==Const) && (synpred10_InternalN4JSParser())) {s = 9;}

                        else if ( (LA20_0==Class) ) {s = 10;}

                        else if ( (LA20_0==Interface) ) {s = 11;}

                        else if ( (LA20_0==Enum) && (synpred10_InternalN4JSParser())) {s = 12;}

                        else if ( (LA20_0==Async) ) {s = 13;}

                        else if ( (LA20_0==Function) ) {s = 14;}

                        else if ( (LA20_0==Var) && (synpred10_InternalN4JSParser())) {s = 15;}

                        else if ( (LA20_0==Let) ) {s = 16;}

                        else if ( ((LA20_0>=Intersection && LA20_0<=Implements)||LA20_0==Promisify||LA20_0==Delete||LA20_0==Import||(LA20_0>=Target && LA20_0<=Typeof)||LA20_0==Await||(LA20_0>=False && LA20_0<=Super)||LA20_0==Union||(LA20_0>=Yield && LA20_0<=This)||(LA20_0>=From && LA20_0<=Void)||LA20_0==Get||(LA20_0>=New && LA20_0<=Set)||LA20_0==PlusSignPlusSign||(LA20_0>=HyphenMinusHyphenMinus && LA20_0<=SolidusEqualsSign)||LA20_0==As||LA20_0==Of||LA20_0==ExclamationMark||LA20_0==LeftParenthesis||LA20_0==PlusSign||LA20_0==HyphenMinus||LA20_0==Solidus||LA20_0==LessThanSign||LA20_0==LeftSquareBracket||LA20_0==LeftCurlyBracket||LA20_0==Tilde||LA20_0==RULE_DOUBLE||(LA20_0>=RULE_HEX_INT && LA20_0<=RULE_LEGACY_OCTAL_INT)||LA20_0==RULE_SCIENTIFIC_INT||LA20_0==RULE_IDENTIFIER||LA20_0==RULE_STRING||(LA20_0>=RULE_TEMPLATE_HEAD && LA20_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA20_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index20_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_2 = input.LA(1);

                         
                        int index20_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_6 = input.LA(1);

                         
                        int index20_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA20_10 = input.LA(1);

                         
                        int index20_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA20_11 = input.LA(1);

                         
                        int index20_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA20_13 = input.LA(1);

                         
                        int index20_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA20_14 = input.LA(1);

                         
                        int index20_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA20_16 = input.LA(1);

                         
                        int index20_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\72\uffff";
    static final String dfa_26s = "\20\uffff\11\17\41\uffff";
    static final String dfa_27s = "\1\11\1\uffff\7\11\1\4\6\uffff\1\17\7\11\1\4\41\uffff";
    static final String dfa_28s = "\1\152\1\uffff\7\100\1\176\6\uffff\10\u0098\1\u00a4\41\uffff";
    static final String dfa_29s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\2\5\1\6\11\uffff\1\5\40\3";
    static final String dfa_30s = "\1\11\1\uffff\1\21\1\10\1\2\1\14\1\12\1\17\1\7\1\4\6\uffff\1\3\1\5\1\0\1\15\1\1\1\16\1\13\1\20\1\6\41\uffff}>";
    static final String[] dfa_31s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17",
            "\3\17\1\uffff\1\17\1\30\1\23\1\26\2\uffff\1\25\1\16\3\uffff\1\21\1\22\3\uffff\1\24\1\uffff\1\27\1\uffff\1\17\1\uffff\1\20\1\17\2\uffff\1\12\1\11\3\uffff\1\17\1\uffff\2\17\2\uffff\1\14\1\17\3\uffff\1\17\7\uffff\2\17\1\uffff\2\17\1\uffff\1\17\21\uffff\1\17\3\uffff\1\17\23\uffff\2\17\2\uffff\1\17\17\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\16\120\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\40\uffff\1\31\4\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\17\4\uffff\1\17\37\uffff\1\17\3\uffff\2\17\1\uffff\1\17\10\uffff\1\17\45\uffff\1\17\1\uffff\1\17",
            "\1\53\1\46\1\60\1\uffff\1\55\1\61\1\63\1\42\2\uffff\1\41\2\uffff\1\70\1\uffff\1\62\1\40\3\uffff\1\64\1\uffff\1\43\1\uffff\1\50\1\uffff\1\57\1\56\7\uffff\1\52\1\uffff\1\34\1\54\3\uffff\1\45\3\uffff\1\51\7\uffff\1\35\1\37\1\uffff\1\65\1\36\23\uffff\1\44\3\uffff\1\47\11\uffff\1\17\3\uffff\2\17\1\67\1\17\6\uffff\1\71\1\uffff\1\17\1\32\14\uffff\1\33\27\uffff\1\17\1\uffff\1\17\13\uffff\1\66",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "1210:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedExportableElement_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4ClassDeclaration_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4InterfaceDeclaration_2= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration[null] )? ) )=>this_N4EnumDeclaration_3= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_4= ruleFunctionDeclaration ) | this_ExportedVariableStatement_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_18 = input.LA(1);

                         
                        int index26_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_18==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_18==Private) ) {s = 2;}

                        else if ( (LA26_18==Project) ) {s = 3;}

                        else if ( (LA26_18==Protected) ) {s = 4;}

                        else if ( (LA26_18==Public) ) {s = 5;}

                        else if ( (LA26_18==External) ) {s = 6;}

                        else if ( (LA26_18==Abstract) ) {s = 7;}

                        else if ( (LA26_18==Static) ) {s = 8;}

                        else if ( (LA26_18==Const) ) {s = 9;}

                        else if ( (LA26_18==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_18==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_18==EOF||LA26_18==Let||LA26_18==Var||LA26_18==Comma||(LA26_18>=Colon && LA26_18<=Semicolon)||LA26_18==EqualsSign||LA26_18==RightCurlyBracket||LA26_18==RULE_ML_COMMENT||LA26_18==RULE_EOL) ) {s = 15;}

                        else if ( (LA26_18==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_18==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index26_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_20 = input.LA(1);

                         
                        int index26_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_20==EOF||LA26_20==Let||LA26_20==Var||LA26_20==Comma||(LA26_20>=Colon && LA26_20<=Semicolon)||LA26_20==EqualsSign||LA26_20==RightCurlyBracket||LA26_20==RULE_ML_COMMENT||LA26_20==RULE_EOL) ) {s = 15;}

                        else if ( (LA26_20==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_20==Private) ) {s = 2;}

                        else if ( (LA26_20==Project) ) {s = 3;}

                        else if ( (LA26_20==Protected) ) {s = 4;}

                        else if ( (LA26_20==Public) ) {s = 5;}

                        else if ( (LA26_20==External) ) {s = 6;}

                        else if ( (LA26_20==Abstract) ) {s = 7;}

                        else if ( (LA26_20==Static) ) {s = 8;}

                        else if ( (LA26_20==Const) ) {s = 9;}

                        else if ( (LA26_20==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_20==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_20==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_20==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index26_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_4 = input.LA(1);

                         
                        int index26_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_4==Let||LA26_4==Var) ) {s = 15;}

                        else if ( (LA26_4==Const) ) {s = 9;}

                        else if ( (LA26_4==Private) ) {s = 2;}

                        else if ( (LA26_4==Project) ) {s = 3;}

                        else if ( (LA26_4==Protected) ) {s = 4;}

                        else if ( (LA26_4==Public) ) {s = 5;}

                        else if ( (LA26_4==External) ) {s = 6;}

                        else if ( (LA26_4==Abstract) ) {s = 7;}

                        else if ( (LA26_4==Static) ) {s = 8;}

                        else if ( (LA26_4==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_4==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_4==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_4==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_4==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index26_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_16 = input.LA(1);

                         
                        int index26_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_16==EOF||LA26_16==Comma||(LA26_16>=Colon && LA26_16<=Semicolon)||LA26_16==EqualsSign||LA26_16==RightCurlyBracket||LA26_16==RULE_ML_COMMENT||LA26_16==RULE_EOL) ) {s = 15;}

                        else if ( (LA26_16==RULE_NO_LINE_TERMINATOR) && (synpred15_InternalN4JSParser())) {s = 25;}

                        else if ( (LA26_16==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index26_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_9==Async) ) {s = 16;}

                        else if ( (LA26_9==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_9==Private) ) {s = 17;}

                        else if ( (LA26_9==Project) ) {s = 18;}

                        else if ( (LA26_9==Protected) ) {s = 19;}

                        else if ( (LA26_9==Public) ) {s = 20;}

                        else if ( (LA26_9==External) ) {s = 21;}

                        else if ( (LA26_9==Abstract) ) {s = 22;}

                        else if ( (LA26_9==Static) ) {s = 23;}

                        else if ( (LA26_9==Const) ) {s = 9;}

                        else if ( ((LA26_9>=Intersection && LA26_9<=Implements)||LA26_9==Promisify||LA26_9==Target||LA26_9==Await||LA26_9==Union||(LA26_9>=Yield && LA26_9<=This)||LA26_9==From||LA26_9==Type||(LA26_9>=Get && LA26_9<=Let)||(LA26_9>=Out && LA26_9<=Set)||LA26_9==Var||LA26_9==As||LA26_9==Of||(LA26_9>=CommercialAt && LA26_9<=LeftSquareBracket)||LA26_9==LeftCurlyBracket||LA26_9==RULE_IDENTIFIER) ) {s = 15;}

                        else if ( (LA26_9==Interface) ) {s = 24;}

                        else if ( (LA26_9==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_9==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_17 = input.LA(1);

                         
                        int index26_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_17==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_17==Private) ) {s = 2;}

                        else if ( (LA26_17==Project) ) {s = 3;}

                        else if ( (LA26_17==Protected) ) {s = 4;}

                        else if ( (LA26_17==Public) ) {s = 5;}

                        else if ( (LA26_17==External) ) {s = 6;}

                        else if ( (LA26_17==Abstract) ) {s = 7;}

                        else if ( (LA26_17==Static) ) {s = 8;}

                        else if ( (LA26_17==Const) ) {s = 9;}

                        else if ( (LA26_17==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_17==EOF||LA26_17==Let||LA26_17==Var||LA26_17==Comma||(LA26_17>=Colon && LA26_17<=Semicolon)||LA26_17==EqualsSign||LA26_17==RightCurlyBracket||LA26_17==RULE_ML_COMMENT||LA26_17==RULE_EOL) ) {s = 15;}

                        else if ( (LA26_17==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_17==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_17==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index26_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_24 = input.LA(1);

                         
                        int index26_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA26_24>=4 && LA26_24<=164 && (s=T2S.M_1[LA26_24-(4)])>=0) && (synpred13_InternalN4JSParser())) { /* 32 cases */ }
                        else if ( (LA26_24==EOF||LA26_24==Comma||(LA26_24>=Colon && LA26_24<=Semicolon)||LA26_24==EqualsSign||LA26_24==RightCurlyBracket||LA26_24==RULE_ML_COMMENT||LA26_24==RULE_EOL) ) {s = 15;}

                         
                        input.seek(index26_24);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_8==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_8==Private) ) {s = 2;}

                        else if ( (LA26_8==Project) ) {s = 3;}

                        else if ( (LA26_8==Protected) ) {s = 4;}

                        else if ( (LA26_8==Public) ) {s = 5;}

                        else if ( (LA26_8==External) ) {s = 6;}

                        else if ( (LA26_8==Abstract) ) {s = 7;}

                        else if ( (LA26_8==Static) ) {s = 8;}

                        else if ( (LA26_8==Const) ) {s = 9;}

                        else if ( (LA26_8==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_8==Let||LA26_8==Var) ) {s = 15;}

                        else if ( (LA26_8==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_8==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_8==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_3 = input.LA(1);

                         
                        int index26_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_3==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_3==Private) ) {s = 2;}

                        else if ( (LA26_3==Project) ) {s = 3;}

                        else if ( (LA26_3==Protected) ) {s = 4;}

                        else if ( (LA26_3==Public) ) {s = 5;}

                        else if ( (LA26_3==External) ) {s = 6;}

                        else if ( (LA26_3==Abstract) ) {s = 7;}

                        else if ( (LA26_3==Static) ) {s = 8;}

                        else if ( (LA26_3==Const) ) {s = 9;}

                        else if ( (LA26_3==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_3==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_3==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_3==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_3==Let||LA26_3==Var) ) {s = 15;}

                         
                        input.seek(index26_3);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_0==CommercialAt) && (synpred11_InternalN4JSParser())) {s = 1;}

                        else if ( (LA26_0==Private) ) {s = 2;}

                        else if ( (LA26_0==Project) ) {s = 3;}

                        else if ( (LA26_0==Protected) ) {s = 4;}

                        else if ( (LA26_0==Public) ) {s = 5;}

                        else if ( (LA26_0==External) ) {s = 6;}

                        else if ( (LA26_0==Abstract) ) {s = 7;}

                        else if ( (LA26_0==Static) ) {s = 8;}

                        else if ( (LA26_0==Const) ) {s = 9;}

                        else if ( (LA26_0==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_0==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_0==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_0==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_0==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_0==Let||LA26_0==Var) ) {s = 15;}

                         
                        input.seek(index26_0);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_6 = input.LA(1);

                         
                        int index26_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_6==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_6==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_6==Private) ) {s = 2;}

                        else if ( (LA26_6==Project) ) {s = 3;}

                        else if ( (LA26_6==Protected) ) {s = 4;}

                        else if ( (LA26_6==Public) ) {s = 5;}

                        else if ( (LA26_6==External) ) {s = 6;}

                        else if ( (LA26_6==Abstract) ) {s = 7;}

                        else if ( (LA26_6==Static) ) {s = 8;}

                        else if ( (LA26_6==Const) ) {s = 9;}

                        else if ( (LA26_6==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_6==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_6==Let||LA26_6==Var) ) {s = 15;}

                        else if ( (LA26_6==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index26_6);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_22 = input.LA(1);

                         
                        int index26_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_22==EOF||LA26_22==Let||LA26_22==Var||LA26_22==Comma||(LA26_22>=Colon && LA26_22<=Semicolon)||LA26_22==EqualsSign||LA26_22==RightCurlyBracket||LA26_22==RULE_ML_COMMENT||LA26_22==RULE_EOL) ) {s = 15;}

                        else if ( (LA26_22==Const) ) {s = 9;}

                        else if ( (LA26_22==Private) ) {s = 2;}

                        else if ( (LA26_22==Project) ) {s = 3;}

                        else if ( (LA26_22==Protected) ) {s = 4;}

                        else if ( (LA26_22==Public) ) {s = 5;}

                        else if ( (LA26_22==External) ) {s = 6;}

                        else if ( (LA26_22==Abstract) ) {s = 7;}

                        else if ( (LA26_22==Static) ) {s = 8;}

                        else if ( (LA26_22==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_22==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_22==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_22==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_22==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index26_22);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA26_5 = input.LA(1);

                         
                        int index26_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_5==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_5==Private) ) {s = 2;}

                        else if ( (LA26_5==Project) ) {s = 3;}

                        else if ( (LA26_5==Protected) ) {s = 4;}

                        else if ( (LA26_5==Public) ) {s = 5;}

                        else if ( (LA26_5==External) ) {s = 6;}

                        else if ( (LA26_5==Abstract) ) {s = 7;}

                        else if ( (LA26_5==Static) ) {s = 8;}

                        else if ( (LA26_5==Const) ) {s = 9;}

                        else if ( (LA26_5==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_5==Let||LA26_5==Var) ) {s = 15;}

                        else if ( (LA26_5==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_5==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_5==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index26_5);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA26_19 = input.LA(1);

                         
                        int index26_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_19==EOF||LA26_19==Let||LA26_19==Var||LA26_19==Comma||(LA26_19>=Colon && LA26_19<=Semicolon)||LA26_19==EqualsSign||LA26_19==RightCurlyBracket||LA26_19==RULE_ML_COMMENT||LA26_19==RULE_EOL) ) {s = 15;}

                        else if ( (LA26_19==Const) ) {s = 9;}

                        else if ( (LA26_19==Private) ) {s = 2;}

                        else if ( (LA26_19==Project) ) {s = 3;}

                        else if ( (LA26_19==Protected) ) {s = 4;}

                        else if ( (LA26_19==Public) ) {s = 5;}

                        else if ( (LA26_19==External) ) {s = 6;}

                        else if ( (LA26_19==Abstract) ) {s = 7;}

                        else if ( (LA26_19==Static) ) {s = 8;}

                        else if ( (LA26_19==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_19==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_19==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_19==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_19==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index26_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA26_21 = input.LA(1);

                         
                        int index26_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_21==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_21==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_21==Private) ) {s = 2;}

                        else if ( (LA26_21==Project) ) {s = 3;}

                        else if ( (LA26_21==Protected) ) {s = 4;}

                        else if ( (LA26_21==Public) ) {s = 5;}

                        else if ( (LA26_21==External) ) {s = 6;}

                        else if ( (LA26_21==Abstract) ) {s = 7;}

                        else if ( (LA26_21==Static) ) {s = 8;}

                        else if ( (LA26_21==Const) ) {s = 9;}

                        else if ( (LA26_21==EOF||LA26_21==Let||LA26_21==Var||LA26_21==Comma||(LA26_21>=Colon && LA26_21<=Semicolon)||LA26_21==EqualsSign||LA26_21==RightCurlyBracket||LA26_21==RULE_ML_COMMENT||LA26_21==RULE_EOL) ) {s = 15;}

                        else if ( (LA26_21==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_21==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_21==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index26_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA26_7 = input.LA(1);

                         
                        int index26_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_7==Let||LA26_7==Var) ) {s = 15;}

                        else if ( (LA26_7==Const) ) {s = 9;}

                        else if ( (LA26_7==Private) ) {s = 2;}

                        else if ( (LA26_7==Project) ) {s = 3;}

                        else if ( (LA26_7==Protected) ) {s = 4;}

                        else if ( (LA26_7==Public) ) {s = 5;}

                        else if ( (LA26_7==External) ) {s = 6;}

                        else if ( (LA26_7==Abstract) ) {s = 7;}

                        else if ( (LA26_7==Static) ) {s = 8;}

                        else if ( (LA26_7==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_7==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_7==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                        else if ( (LA26_7==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_7==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index26_7);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA26_23 = input.LA(1);

                         
                        int index26_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_23==EOF||LA26_23==Let||LA26_23==Var||LA26_23==Comma||(LA26_23>=Colon && LA26_23<=Semicolon)||LA26_23==EqualsSign||LA26_23==RightCurlyBracket||LA26_23==RULE_ML_COMMENT||LA26_23==RULE_EOL) ) {s = 15;}

                        else if ( (LA26_23==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_23==Private) ) {s = 2;}

                        else if ( (LA26_23==Project) ) {s = 3;}

                        else if ( (LA26_23==Protected) ) {s = 4;}

                        else if ( (LA26_23==Public) ) {s = 5;}

                        else if ( (LA26_23==External) ) {s = 6;}

                        else if ( (LA26_23==Abstract) ) {s = 7;}

                        else if ( (LA26_23==Static) ) {s = 8;}

                        else if ( (LA26_23==Const) ) {s = 9;}

                        else if ( (LA26_23==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_23==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_23==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_23==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index26_23);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA26_2==Interface) && (synpred13_InternalN4JSParser())) {s = 11;}

                        else if ( (LA26_2==Private) ) {s = 2;}

                        else if ( (LA26_2==Project) ) {s = 3;}

                        else if ( (LA26_2==Protected) ) {s = 4;}

                        else if ( (LA26_2==Public) ) {s = 5;}

                        else if ( (LA26_2==External) ) {s = 6;}

                        else if ( (LA26_2==Abstract) ) {s = 7;}

                        else if ( (LA26_2==Static) ) {s = 8;}

                        else if ( (LA26_2==Const) ) {s = 9;}

                        else if ( (LA26_2==Enum) && (synpred14_InternalN4JSParser())) {s = 12;}

                        else if ( (LA26_2==Let||LA26_2==Var) ) {s = 15;}

                        else if ( (LA26_2==Class) && (synpred12_InternalN4JSParser())) {s = 10;}

                        else if ( (LA26_2==Async) && (synpred15_InternalN4JSParser())) {s = 13;}

                        else if ( (LA26_2==Function) && (synpred15_InternalN4JSParser())) {s = 14;}

                         
                        input.seek(index26_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\26\uffff";
    static final String dfa_33s = "\15\uffff\11\12";
    static final String dfa_34s = "\10\11\1\4\4\uffff\1\4\7\11\1\17";
    static final String dfa_35s = "\10\100\1\176\4\uffff\11\u0098";
    static final String dfa_36s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_37s = "\26\uffff}>";
    static final String[] dfa_38s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\15\1\20\1\23\2\uffff\1\22\1\11\3\uffff\1\16\1\17\3\uffff\1\21\1\uffff\1\24\1\uffff\1\12\1\uffff\1\25\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\27\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\45\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\4\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "1404:3: ( ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_3= ruleAsyncNoTrailingLineBreak[$current] this_FunctionImpl_4= ruleFunctionImpl[$current] ) | ( () ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* ( (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( (lv_varDeclsOrBindings_8_0= ruleExportedVariableDeclarationOrBinding ) ) (otherlv_9= Comma ( (lv_varDeclsOrBindings_10_0= ruleExportedVariableDeclarationOrBinding ) ) )* ruleSemi ) | ( ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeVariables_17= ruleTypeVariables[$current] )? (this_ClassExtendsImplements_18= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeVariables_24= ruleTypeVariables[$current] )? (this_InterfaceExtendsList_25= ruleInterfaceExtendsList[$current] )? ) ) this_Members_26= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_28_0= ruleN4Modifier ) )* otherlv_29= Enum ( (lv_name_30_0= ruleBindingIdentifier ) ) otherlv_31= LeftCurlyBracket ( (lv_literals_32_0= ruleN4EnumLiteral ) ) (otherlv_33= Comma ( (lv_literals_34_0= ruleN4EnumLiteral ) ) )* otherlv_35= RightCurlyBracket ) )";
        }
    }
    static final String dfa_39s = "\14\uffff";
    static final String dfa_40s = "\4\uffff\10\1";
    static final String dfa_41s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_42s = "\1\100\1\uffff\1\176\1\uffff\10\u0098";
    static final String dfa_43s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_44s = "\14\uffff}>";
    static final String[] dfa_45s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\12\1\7\2\uffff\1\6\4\uffff\1\11\1\5\3\uffff\1\13\1\uffff\1\10\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\27\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 1464:5: ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )*";
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "1556:5: ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeVariables_17= ruleTypeVariables[$current] )? (this_ClassExtendsImplements_18= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeVariables_24= ruleTypeVariables[$current] )? (this_InterfaceExtendsList_25= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_46s = "\36\uffff";
    static final String dfa_47s = "\1\uffff\33\35\2\uffff";
    static final String dfa_48s = "\1\4\33\122\2\uffff";
    static final String dfa_49s = "\1\176\33\160\2\uffff";
    static final String dfa_50s = "\34\uffff\1\2\1\1";
    static final String dfa_51s = "\36\uffff}>";
    static final String[] dfa_52s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "2148:2: ( ( ( ruleBindingIdentifier ) ) | ( ( ( ruleIdentifierName ) ) otherlv_2= As ( (lv_alias_3_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_53s = "\134\uffff";
    static final String dfa_54s = "\1\2\1\uffff\1\6\3\uffff\1\133\125\uffff";
    static final String dfa_55s = "\1\4\1\0\1\4\1\0\2\uffff\1\0\125\uffff";
    static final String dfa_56s = "\1\u0098\1\0\1\u0094\1\0\2\uffff\1\0\125\uffff";
    static final String dfa_57s = "\4\uffff\1\1\1\2\1\uffff\125\1";
    static final String dfa_58s = "\1\1\1\0\1\2\1\4\2\uffff\1\3\125\uffff}>";
    static final String[] dfa_59s = {
            "\3\5\1\uffff\11\5\2\uffff\16\5\1\uffff\23\5\4\uffff\10\5\5\uffff\1\5\1\uffff\2\5\6\uffff\1\5\1\uffff\3\5\1\uffff\1\5\2\uffff\1\5\2\uffff\1\5\2\uffff\1\5\1\uffff\1\5\1\uffff\1\5\1\uffff\1\1\1\5\3\uffff\2\5\2\uffff\1\5\1\uffff\1\3\1\5\3\uffff\1\5\1\uffff\4\5\1\uffff\1\5\1\uffff\1\5\2\uffff\1\5\11\uffff\2\5\7\uffff\1\5\1\uffff\1\4\1\uffff\1\4",
            "\1\uffff",
            "\1\47\1\42\1\53\1\uffff\1\51\1\22\1\13\1\16\1\117\1\126\1\15\1\30\1\131\2\uffff\1\11\1\12\1\102\1\25\1\24\1\14\1\121\1\17\1\123\1\44\1\104\1\27\1\52\1\120\1\uffff\1\21\1\20\1\72\1\60\1\124\1\46\1\115\1\35\1\50\1\132\1\130\1\23\1\41\1\74\1\57\1\71\1\45\1\103\1\122\4\uffff\1\116\1\36\1\32\1\56\1\54\1\37\1\125\1\31\5\uffff\1\105\1\uffff\1\106\1\76\6\uffff\1\7\1\uffff\1\40\1\114\1\113\1\uffff\1\43\2\uffff\1\112\2\uffff\1\55\2\uffff\1\107\1\uffff\1\110\1\uffff\1\75\1\uffff\1\33\1\61\3\uffff\1\10\1\77\2\uffff\1\26\1\uffff\1\127\1\111\3\uffff\1\62\1\uffff\1\67\1\64\1\65\1\66\1\uffff\1\70\1\uffff\1\34\2\uffff\1\73\11\uffff\1\101\1\100\7\uffff\1\63",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "2417:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_1 = input.LA(1);

                         
                        int index52_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index52_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_0 = input.LA(1);

                         
                        int index52_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_0==Semicolon) ) {s = 1;}

                        else if ( (LA52_0==EOF) ) {s = 2;}

                        else if ( (LA52_0==RightCurlyBracket) ) {s = 3;}

                        else if ( (LA52_0==RULE_ML_COMMENT||LA52_0==RULE_EOL) && (synpred19_InternalN4JSParser())) {s = 4;}

                        else if ( ((LA52_0>=Intersection && LA52_0<=Implements)||(LA52_0>=Promisify && LA52_0<=Default)||(LA52_0>=Private && LA52_0<=Break)||(LA52_0>=Class && LA52_0<=With)||(LA52_0>=For && LA52_0<=Var)||LA52_0==PlusSignPlusSign||(LA52_0>=HyphenMinusHyphenMinus && LA52_0<=SolidusEqualsSign)||LA52_0==CommercialAtCommercialAt||(LA52_0>=As && LA52_0<=If)||LA52_0==Of||LA52_0==ExclamationMark||LA52_0==LeftParenthesis||LA52_0==PlusSign||LA52_0==HyphenMinus||LA52_0==Solidus||LA52_0==LessThanSign||(LA52_0>=CommercialAt && LA52_0<=LeftSquareBracket)||LA52_0==LeftCurlyBracket||LA52_0==Tilde||LA52_0==RULE_DOUBLE||(LA52_0>=RULE_HEX_INT && LA52_0<=RULE_LEGACY_OCTAL_INT)||LA52_0==RULE_SCIENTIFIC_INT||LA52_0==RULE_IDENTIFIER||LA52_0==RULE_STRING||(LA52_0>=RULE_TEMPLATE_HEAD && LA52_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA52_0==RULE_INT) ) {s = 5;}

                         
                        input.seek(index52_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_2 = input.LA(1);

                         
                        int index52_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_2==EOF) ) {s = 6;}

                        
                        else if ((LA52_2>=-1 && LA52_2<=148 && (s=T2S.M_2[LA52_2-(-1)])>=0) && (synpred19_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index52_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_6 = input.LA(1);

                         
                        int index52_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_6==EOF) && (synpred19_InternalN4JSParser())) {s = 91;}

                         
                        input.seek(index52_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_3 = input.LA(1);

                         
                        int index52_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSParser()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index52_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_60s = "\130\uffff";
    static final String dfa_61s = "\1\2\127\uffff";
    static final String dfa_62s = "\1\4\1\0\126\uffff";
    static final String dfa_63s = "\1\u0098\1\0\126\uffff";
    static final String dfa_64s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_65s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_66s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\6\uffff\1\2\1\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[][] dfa_66 = unpackEncodedStringArray(dfa_66s);

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "3145:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_1 = input.LA(1);

                         
                        int index75_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalN4JSParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "3181:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_1 = input.LA(1);

                         
                        int index76_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_InternalN4JSParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index76_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\100\uffff";
    static final String dfa_68s = "\1\4\1\0\76\uffff";
    static final String dfa_69s = "\1\u0094\1\0\76\uffff";
    static final String dfa_70s = "\2\uffff\1\2\74\uffff\1\1";
    static final String dfa_71s = "\1\uffff\1\0\76\uffff}>";
    static final String[] dfa_72s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\2\2\10\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "3768:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_1 = input.LA(1);

                         
                        int index82_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index82_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4016:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_1 = input.LA(1);

                         
                        int index86_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index86_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4264:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_1 = input.LA(1);

                         
                        int index90_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index90_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "4512:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_1 = input.LA(1);

                         
                        int index94_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index94_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_73s = "\44\uffff";
    static final String dfa_74s = "\1\4\1\0\42\uffff";
    static final String dfa_75s = "\1\176\1\0\42\uffff";
    static final String dfa_76s = "\2\uffff\1\1\1\2\40\uffff";
    static final String dfa_77s = "\1\0\1\1\42\uffff}>";
    static final String[] dfa_78s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\uffff\1\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\23\uffff\1\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "5411:3: ( ( ( ( ruleBindingPattern ) )=> (lv_bindingPattern_0_0= ruleBindingPattern ) ) | ( ( (lv_annotations_1_0= ruleAnnotation ) )* (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )? ( (lv_variadic_3_0= FullStopFullStopFullStop ) )? ( (lv_name_4_0= ruleBindingIdentifier ) ) (this_ColonSepDeclaredTypeRef_5= ruleColonSepDeclaredTypeRef[$current] )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_0 = input.LA(1);

                         
                        int index113_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA113_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA113_0==LeftSquareBracket) && (synpred58_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA113_0>=Intersection && LA113_0<=Implements)||(LA113_0>=Promisify && LA113_0<=Abstract)||LA113_0==External||LA113_0==Default||(LA113_0>=Private && LA113_0<=Project)||LA113_0==Public||LA113_0==Static||LA113_0==Target||(LA113_0>=Async && LA113_0<=Await)||LA113_0==Union||(LA113_0>=Yield && LA113_0<=This)||LA113_0==From||LA113_0==This_1||(LA113_0>=Type && LA113_0<=Void)||LA113_0==FullStopFullStopFullStop||(LA113_0>=Get && LA113_0<=Let)||(LA113_0>=Out && LA113_0<=Set)||LA113_0==As||LA113_0==Of||LA113_0==CommercialAt||LA113_0==Tilde||LA113_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index113_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA113_1 = input.LA(1);

                         
                        int index113_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index113_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\2\uffff\11\13\1\uffff";
    static final String dfa_80s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_81s = "\1\176\1\uffff\5\u00a4\4\156\1\uffff";
    static final String dfa_82s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_83s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "5456:5: (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_84s = "\43\uffff";
    static final String dfa_85s = "\1\4\1\0\41\uffff";
    static final String dfa_86s = "\1\176\1\0\41\uffff";
    static final String dfa_87s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_88s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_89s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\uffff\1\3\2\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\23\uffff\1\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "5565:3: ( ( ( ( norm1_BindingPattern ) )=> (lv_bindingPattern_0_0= norm1_BindingPattern ) ) | ( ( (lv_annotations_1_0= ruleAnnotation ) )* (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )? ( (lv_variadic_3_0= FullStopFullStopFullStop ) )? ( (lv_name_4_0= norm1_BindingIdentifier ) ) (this_ColonSepDeclaredTypeRef_5= ruleColonSepDeclaredTypeRef[$current] )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_0 = input.LA(1);

                         
                        int index120_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA120_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA120_0==LeftSquareBracket) && (synpred59_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA120_0>=Intersection && LA120_0<=Implements)||(LA120_0>=Promisify && LA120_0<=Abstract)||LA120_0==External||LA120_0==Default||(LA120_0>=Private && LA120_0<=Project)||LA120_0==Public||LA120_0==Static||LA120_0==Target||(LA120_0>=Async && LA120_0<=Await)||LA120_0==Union||LA120_0==This||LA120_0==From||LA120_0==This_1||(LA120_0>=Type && LA120_0<=Void)||LA120_0==FullStopFullStopFullStop||(LA120_0>=Get && LA120_0<=Let)||(LA120_0>=Out && LA120_0<=Set)||LA120_0==As||LA120_0==Of||LA120_0==CommercialAt||LA120_0==Tilde||LA120_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index120_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA120_1 = input.LA(1);

                         
                        int index120_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index120_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_90s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_90 = unpackEncodedStringArray(dfa_90s);

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_90;
        }
        public String getDescription() {
            return "5610:5: (this_BogusTypeRefFragment_2= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_91s = "\121\uffff";
    static final String dfa_92s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_93s = "\1\u0094\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_94s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_95s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\60\uffff}>";
    static final String[] dfa_96s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\41\1\uffff\1\41\1\5\1\110\1\10\1\112\1\27\1\41\1\12\1\35\1\107\1\uffff\1\41\1\11\2\41\1\113\1\31\1\103\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\111\4\uffff\1\103\1\21\1\15\1\41\1\40\1\22\1\114\1\14\5\uffff\1\41\1\uffff\2\41\10\uffff\1\23\1\103\1\102\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\7\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[][] dfa_96 = unpackEncodedStringArray(dfa_96s);

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "5874:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= ruleBlock ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= ruleFunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm1_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= ruleLabelledStatement ) | this_ExpressionStatement_5= ruleExpressionStatement | this_IfStatement_6= ruleIfStatement | this_IterationStatement_7= ruleIterationStatement | this_ContinueStatement_8= ruleContinueStatement | this_BreakStatement_9= ruleBreakStatement | this_ReturnStatement_10= ruleReturnStatement | this_WithStatement_11= ruleWithStatement | this_SwitchStatement_12= ruleSwitchStatement | this_ThrowStatement_13= ruleThrowStatement | this_TryStatement_14= ruleTryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_0 = input.LA(1);

                         
                        int index125_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA125_0>=10 && LA125_0<=110 && (s=T2S.M_3[LA125_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA125_0==Var) && (synpred64_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA125_0>=4 && LA125_0<=126 && (s=T2S.M_4[LA125_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA125_0==Delete||LA125_0==Import||LA125_0==Typeof||LA125_0==Class||(LA125_0>=False && LA125_0<=Super)||(LA125_0>=Null && LA125_0<=True)||LA125_0==Void||LA125_0==New||LA125_0==PlusSignPlusSign||(LA125_0>=HyphenMinusHyphenMinus && LA125_0<=SolidusEqualsSign)||LA125_0==ExclamationMark||LA125_0==LeftParenthesis||LA125_0==PlusSign||LA125_0==HyphenMinus||LA125_0==Solidus||LA125_0==LessThanSign||(LA125_0>=CommercialAt && LA125_0<=LeftSquareBracket)||LA125_0==Tilde||LA125_0==RULE_DOUBLE||(LA125_0>=RULE_HEX_INT && LA125_0<=RULE_LEGACY_OCTAL_INT)||LA125_0==RULE_SCIENTIFIC_INT||LA125_0==RULE_STRING||(LA125_0>=RULE_TEMPLATE_HEAD && LA125_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA125_0==RULE_INT) ) {s = 33;}

                        else if ( (LA125_0==If) ) {s = 66;}

                        else if ( (LA125_0==While||LA125_0==For||LA125_0==Do) ) {s = 67;}

                        else if ( (LA125_0==Continue) ) {s = 70;}

                        else if ( (LA125_0==Break) ) {s = 71;}

                        else if ( (LA125_0==Return) ) {s = 72;}

                        else if ( (LA125_0==With) ) {s = 73;}

                        else if ( (LA125_0==Switch) ) {s = 74;}

                        else if ( (LA125_0==Throw) ) {s = 75;}

                        else if ( (LA125_0==Try) ) {s = 76;}

                        else if ( (LA125_0==Debugger) ) {s = 77;}

                         
                        input.seek(index125_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA125_2 = input.LA(1);

                         
                        int index125_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA125_3 = input.LA(1);

                         
                        int index125_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA125_4 = input.LA(1);

                         
                        int index125_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA125_5 = input.LA(1);

                         
                        int index125_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA125_6 = input.LA(1);

                         
                        int index125_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA125_7 = input.LA(1);

                         
                        int index125_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA125_8 = input.LA(1);

                         
                        int index125_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA125_9 = input.LA(1);

                         
                        int index125_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred64_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index125_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA125_10 = input.LA(1);

                         
                        int index125_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA125_11 = input.LA(1);

                         
                        int index125_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA125_13 = input.LA(1);

                         
                        int index125_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA125_15 = input.LA(1);

                         
                        int index125_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA125_16 = input.LA(1);

                         
                        int index125_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA125_17 = input.LA(1);

                         
                        int index125_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA125_18 = input.LA(1);

                         
                        int index125_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA125_19 = input.LA(1);

                         
                        int index125_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA125_20 = input.LA(1);

                         
                        int index125_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA125_21 = input.LA(1);

                         
                        int index125_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA125_22 = input.LA(1);

                         
                        int index125_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA125_23 = input.LA(1);

                         
                        int index125_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA125_24 = input.LA(1);

                         
                        int index125_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA125_25 = input.LA(1);

                         
                        int index125_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA125_26 = input.LA(1);

                         
                        int index125_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA125_27 = input.LA(1);

                         
                        int index125_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA125_28 = input.LA(1);

                         
                        int index125_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA125_29 = input.LA(1);

                         
                        int index125_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA125_30 = input.LA(1);

                         
                        int index125_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA125_31 = input.LA(1);

                         
                        int index125_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA125_32 = input.LA(1);

                         
                        int index125_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index125_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_97s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_98s = "\1\u0094\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_99s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\41\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_100s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\61\uffff}>";
    static final String[] dfa_101s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\40\1\uffff\1\40\1\5\1\110\1\10\1\112\1\26\1\40\1\12\1\34\1\107\1\uffff\1\40\1\11\2\40\1\113\1\30\1\103\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\111\4\uffff\1\103\1\20\1\15\1\40\1\37\1\21\1\114\1\14\5\uffff\1\40\1\uffff\2\40\10\uffff\1\22\1\103\1\102\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\7\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "6075:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= norm1_Block ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= norm1_FunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm3_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= norm1_LabelledStatement ) | this_ExpressionStatement_5= norm1_ExpressionStatement | this_IfStatement_6= norm1_IfStatement | this_IterationStatement_7= norm1_IterationStatement | this_ContinueStatement_8= norm1_ContinueStatement | this_BreakStatement_9= norm1_BreakStatement | this_ReturnStatement_10= norm1_ReturnStatement | this_WithStatement_11= norm1_WithStatement | this_SwitchStatement_12= norm1_SwitchStatement | this_ThrowStatement_13= norm1_ThrowStatement | this_TryStatement_14= norm1_TryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_0 = input.LA(1);

                         
                        int index126_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA126_0>=10 && LA126_0<=110 && (s=T2S.M_3[LA126_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA126_0==Var) && (synpred68_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA126_0>=4 && LA126_0<=126 && (s=T2S.M_6[LA126_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA126_0==Delete||LA126_0==Import||LA126_0==Typeof||LA126_0==Class||(LA126_0>=False && LA126_0<=Super)||LA126_0==Yield||(LA126_0>=Null && LA126_0<=True)||LA126_0==Void||LA126_0==New||LA126_0==PlusSignPlusSign||(LA126_0>=HyphenMinusHyphenMinus && LA126_0<=SolidusEqualsSign)||LA126_0==ExclamationMark||LA126_0==LeftParenthesis||LA126_0==PlusSign||LA126_0==HyphenMinus||LA126_0==Solidus||LA126_0==LessThanSign||(LA126_0>=CommercialAt && LA126_0<=LeftSquareBracket)||LA126_0==Tilde||LA126_0==RULE_DOUBLE||(LA126_0>=RULE_HEX_INT && LA126_0<=RULE_LEGACY_OCTAL_INT)||LA126_0==RULE_SCIENTIFIC_INT||LA126_0==RULE_STRING||(LA126_0>=RULE_TEMPLATE_HEAD && LA126_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA126_0==RULE_INT) ) {s = 32;}

                        else if ( (LA126_0==If) ) {s = 66;}

                        else if ( (LA126_0==While||LA126_0==For||LA126_0==Do) ) {s = 67;}

                        else if ( (LA126_0==Continue) ) {s = 70;}

                        else if ( (LA126_0==Break) ) {s = 71;}

                        else if ( (LA126_0==Return) ) {s = 72;}

                        else if ( (LA126_0==With) ) {s = 73;}

                        else if ( (LA126_0==Switch) ) {s = 74;}

                        else if ( (LA126_0==Throw) ) {s = 75;}

                        else if ( (LA126_0==Try) ) {s = 76;}

                        else if ( (LA126_0==Debugger) ) {s = 77;}

                         
                        input.seek(index126_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_1 = input.LA(1);

                         
                        int index126_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA126_2 = input.LA(1);

                         
                        int index126_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA126_3 = input.LA(1);

                         
                        int index126_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA126_4 = input.LA(1);

                         
                        int index126_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA126_5 = input.LA(1);

                         
                        int index126_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA126_6 = input.LA(1);

                         
                        int index126_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA126_7 = input.LA(1);

                         
                        int index126_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA126_8 = input.LA(1);

                         
                        int index126_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA126_9 = input.LA(1);

                         
                        int index126_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred68_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index126_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA126_10 = input.LA(1);

                         
                        int index126_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA126_11 = input.LA(1);

                         
                        int index126_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA126_13 = input.LA(1);

                         
                        int index126_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA126_15 = input.LA(1);

                         
                        int index126_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA126_16 = input.LA(1);

                         
                        int index126_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA126_17 = input.LA(1);

                         
                        int index126_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA126_18 = input.LA(1);

                         
                        int index126_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA126_19 = input.LA(1);

                         
                        int index126_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA126_20 = input.LA(1);

                         
                        int index126_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA126_21 = input.LA(1);

                         
                        int index126_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA126_22 = input.LA(1);

                         
                        int index126_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA126_23 = input.LA(1);

                         
                        int index126_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA126_24 = input.LA(1);

                         
                        int index126_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA126_25 = input.LA(1);

                         
                        int index126_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA126_26 = input.LA(1);

                         
                        int index126_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA126_27 = input.LA(1);

                         
                        int index126_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA126_28 = input.LA(1);

                         
                        int index126_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA126_29 = input.LA(1);

                         
                        int index126_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA126_30 = input.LA(1);

                         
                        int index126_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA126_31 = input.LA(1);

                         
                        int index126_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index126_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\117\uffff";
    static final String dfa_103s = "\1\4\1\0\115\uffff";
    static final String dfa_104s = "\1\u0094\1\0\115\uffff";
    static final String dfa_105s = "\2\uffff\1\2\113\uffff\1\1";
    static final String dfa_106s = "\1\uffff\1\0\115\uffff}>";
    static final String[] dfa_107s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\1\uffff\12\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\10\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[][] dfa_107 = unpackEncodedStringArray(dfa_107s);

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "6282:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= ruleAnnotatedFunctionDeclaration ) | this_RootStatement_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_1 = input.LA(1);

                         
                        int index127_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index127_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "6327:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= norm1_AnnotatedFunctionDeclaration ) | this_RootStatement_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA128_1 = input.LA(1);

                         
                        int index128_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index128_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_108s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\27\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\45\uffff\1\1\1\uffff\1\1"
    };
    static final short[][] dfa_108 = unpackEncodedStringArray(dfa_108s);

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_108;
        }
        public String getDescription() {
            return "()* loopback of 6594:3: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_109s = "\35\uffff";
    static final String dfa_110s = "\1\4\34\uffff";
    static final String dfa_111s = "\1\176\34\uffff";
    static final String dfa_112s = "\1\uffff\33\2\1\1";
    static final String dfa_113s = "\1\0\34\uffff}>";
    static final String[] dfa_114s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_109 = DFA.unpackEncodedString(dfa_109s);
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[][] dfa_114 = unpackEncodedStringArray(dfa_114s);

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "()* loopback of 7598:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_0 = input.LA(1);

                         
                        int index143_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA143_0>=4 && LA143_0<=126 && (s=T2S.M_7[LA143_0-(4)])>=0) && (synpred88_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA143_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index143_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "()* loopback of 7684:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_0 = input.LA(1);

                         
                        int index145_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA145_0>=4 && LA145_0<=126 && (s=T2S.M_7[LA145_0-(4)])>=0) && (synpred89_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA145_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index145_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_115s = "\34\uffff";
    static final String dfa_116s = "\1\4\33\uffff";
    static final String dfa_117s = "\1\176\33\uffff";
    static final String dfa_118s = "\1\uffff\32\2\1\1";
    static final String dfa_119s = "\1\0\33\uffff}>";
    static final String[] dfa_120s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_115 = DFA.unpackEncodedString(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final char[] dfa_117 = DFA.unpackEncodedStringToUnsignedChars(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final short[][] dfa_120 = unpackEncodedStringArray(dfa_120s);

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "()* loopback of 7770:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_0 = input.LA(1);

                         
                        int index147_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA147_0>=4 && LA147_0<=126 && (s=T2S.M_9[LA147_0-(4)])>=0) && (synpred90_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA147_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index147_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "()* loopback of 7856:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_0 = input.LA(1);

                         
                        int index149_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA149_0>=4 && LA149_0<=126 && (s=T2S.M_9[LA149_0-(4)])>=0) && (synpred91_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA149_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index149_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "()* loopback of 7942:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_0 = input.LA(1);

                         
                        int index151_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA151_0>=4 && LA151_0<=126 && (s=T2S.M_7[LA151_0-(4)])>=0) && (synpred92_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA151_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index151_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = dfa_109;
            this.eof = dfa_109;
            this.min = dfa_110;
            this.max = dfa_111;
            this.accept = dfa_112;
            this.special = dfa_113;
            this.transition = dfa_114;
        }
        public String getDescription() {
            return "()* loopback of 8048:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_0 = input.LA(1);

                         
                        int index154_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA154_0>=4 && LA154_0<=126 && (s=T2S.M_7[LA154_0-(4)])>=0) && (synpred93_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA154_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index154_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "()* loopback of 8154:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_0 = input.LA(1);

                         
                        int index157_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA157_0>=4 && LA157_0<=126 && (s=T2S.M_9[LA157_0-(4)])>=0) && (synpred94_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA157_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index157_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = dfa_115;
            this.eof = dfa_115;
            this.min = dfa_116;
            this.max = dfa_117;
            this.accept = dfa_118;
            this.special = dfa_119;
            this.transition = dfa_120;
        }
        public String getDescription() {
            return "()* loopback of 8260:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_0 = input.LA(1);

                         
                        int index160_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA160_0>=4 && LA160_0<=126 && (s=T2S.M_9[LA160_0-(4)])>=0) && (synpred95_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA160_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index160_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_121s = "\1\0\1\4\1\2\1\3\2\uffff\1\1\125\uffff}>";
    static final short[] dfa_121 = DFA.unpackEncodedString(dfa_121s);

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_121;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "9082:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_0 = input.LA(1);

                         
                        int index169_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA169_0==Semicolon) ) {s = 1;}

                        else if ( (LA169_0==EOF) ) {s = 2;}

                        else if ( (LA169_0==RightCurlyBracket) ) {s = 3;}

                        else if ( (LA169_0==RULE_ML_COMMENT||LA169_0==RULE_EOL) && (synpred102_InternalN4JSParser())) {s = 4;}

                        else if ( ((LA169_0>=Intersection && LA169_0<=Implements)||(LA169_0>=Promisify && LA169_0<=Default)||(LA169_0>=Private && LA169_0<=Break)||(LA169_0>=Class && LA169_0<=With)||(LA169_0>=For && LA169_0<=Var)||LA169_0==PlusSignPlusSign||(LA169_0>=HyphenMinusHyphenMinus && LA169_0<=SolidusEqualsSign)||LA169_0==CommercialAtCommercialAt||(LA169_0>=As && LA169_0<=If)||LA169_0==Of||LA169_0==ExclamationMark||LA169_0==LeftParenthesis||LA169_0==PlusSign||LA169_0==HyphenMinus||LA169_0==Solidus||LA169_0==LessThanSign||(LA169_0>=CommercialAt && LA169_0<=LeftSquareBracket)||LA169_0==LeftCurlyBracket||LA169_0==Tilde||LA169_0==RULE_DOUBLE||(LA169_0>=RULE_HEX_INT && LA169_0<=RULE_LEGACY_OCTAL_INT)||LA169_0==RULE_SCIENTIFIC_INT||LA169_0==RULE_IDENTIFIER||LA169_0==RULE_STRING||(LA169_0>=RULE_TEMPLATE_HEAD && LA169_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA169_0==RULE_INT) ) {s = 5;}

                         
                        input.seek(index169_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA169_6 = input.LA(1);

                         
                        int index169_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA169_6==EOF) && (synpred102_InternalN4JSParser())) {s = 91;}

                         
                        input.seek(index169_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA169_2 = input.LA(1);

                         
                        int index169_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA169_2==EOF) ) {s = 6;}

                        
                        else if ((LA169_2>=-1 && LA169_2<=148 && (s=T2S.M_2[LA169_2-(-1)])>=0) && (synpred102_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index169_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA169_3 = input.LA(1);

                         
                        int index169_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index169_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA169_1 = input.LA(1);

                         
                        int index169_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index169_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_122s = "\103\uffff";
    static final String dfa_123s = "\1\4\1\0\101\uffff";
    static final String dfa_124s = "\1\u0094\1\0\101\uffff";
    static final String dfa_125s = "\2\uffff\1\2\77\uffff\1\1";
    static final String dfa_126s = "\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_127s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\2\2\10\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final char[] dfa_123 = DFA.unpackEncodedStringToUnsignedChars(dfa_123s);
    static final char[] dfa_124 = DFA.unpackEncodedStringToUnsignedChars(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final short[] dfa_126 = DFA.unpackEncodedString(dfa_126s);
    static final short[][] dfa_127 = unpackEncodedStringArray(dfa_127s);

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "9335:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_3_0= ruleLetIdentifierRef ) ) ( (lv_forIn_4_0= In ) ) ( (lv_expression_5_0= norm1_Expression ) ) otherlv_6= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm1_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm1_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm1_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_23_0= ruleExpression ) ) ( (otherlv_24= Semicolon ( (lv_expression_25_0= norm1_Expression ) )? otherlv_26= Semicolon ( (lv_updateExpr_27_0= norm1_Expression ) )? ) | ( ( (lv_forIn_28_0= In ) ) ( (lv_expression_29_0= norm1_Expression ) )? ) | ( ( (lv_forOf_30_0= Of ) ) ( (lv_expression_31_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_32= Semicolon ( (lv_expression_33_0= norm1_Expression ) )? otherlv_34= Semicolon ( (lv_updateExpr_35_0= norm1_Expression ) )? ) ) otherlv_36= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA188_1 = input.LA(1);

                         
                        int index188_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_InternalN4JSParser()) ) {s = 66;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index188_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_128s = "\1\4\2\uffff\1\0\76\uffff";
    static final String dfa_129s = "\1\u0094\2\uffff\1\0\76\uffff";
    static final String dfa_130s = "\1\uffff\2\1\1\uffff\1\2\74\uffff\1\3";
    static final String dfa_131s = "\1\0\2\uffff\1\1\76\uffff}>";
    static final String[] dfa_132s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\101\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_128 = DFA.unpackEncodedStringToUnsignedChars(dfa_128s);
    static final char[] dfa_129 = DFA.unpackEncodedStringToUnsignedChars(dfa_129s);
    static final short[] dfa_130 = DFA.unpackEncodedString(dfa_130s);
    static final short[] dfa_131 = DFA.unpackEncodedString(dfa_131s);
    static final short[][] dfa_132 = unpackEncodedStringArray(dfa_132s);

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_128;
            this.max = dfa_129;
            this.accept = dfa_130;
            this.special = dfa_131;
            this.transition = dfa_132;
        }
        public String getDescription() {
            return "9417:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm1_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm1_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm1_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_23_0= ruleExpression ) ) ( (otherlv_24= Semicolon ( (lv_expression_25_0= norm1_Expression ) )? otherlv_26= Semicolon ( (lv_updateExpr_27_0= norm1_Expression ) )? ) | ( ( (lv_forIn_28_0= In ) ) ( (lv_expression_29_0= norm1_Expression ) )? ) | ( ( (lv_forOf_30_0= Of ) ) ( (lv_expression_31_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_32= Semicolon ( (lv_expression_33_0= norm1_Expression ) )? otherlv_34= Semicolon ( (lv_updateExpr_35_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_0 = input.LA(1);

                         
                        int index187_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_0==Var) && (synpred105_InternalN4JSParser())) {s = 1;}

                        else if ( (LA187_0==Const) && (synpred105_InternalN4JSParser())) {s = 2;}

                        else if ( (LA187_0==Let) ) {s = 3;}

                        else if ( ((LA187_0>=Intersection && LA187_0<=Implements)||(LA187_0>=Promisify && LA187_0<=Abstract)||(LA187_0>=External && LA187_0<=Function)||(LA187_0>=Private && LA187_0<=Delete)||(LA187_0>=Import && LA187_0<=Public)||LA187_0==Static||(LA187_0>=Target && LA187_0<=Await)||LA187_0==Class||(LA187_0>=False && LA187_0<=Super)||LA187_0==Union||(LA187_0>=Yield && LA187_0<=This)||(LA187_0>=From && LA187_0<=Void)||LA187_0==Get||(LA187_0>=New && LA187_0<=Set)||LA187_0==PlusSignPlusSign||(LA187_0>=HyphenMinusHyphenMinus && LA187_0<=SolidusEqualsSign)||LA187_0==As||LA187_0==Of||LA187_0==ExclamationMark||LA187_0==LeftParenthesis||LA187_0==PlusSign||LA187_0==HyphenMinus||LA187_0==Solidus||LA187_0==LessThanSign||(LA187_0>=CommercialAt && LA187_0<=LeftSquareBracket)||LA187_0==LeftCurlyBracket||LA187_0==Tilde||LA187_0==RULE_DOUBLE||(LA187_0>=RULE_HEX_INT && LA187_0<=RULE_LEGACY_OCTAL_INT)||LA187_0==RULE_SCIENTIFIC_INT||LA187_0==RULE_IDENTIFIER||LA187_0==RULE_STRING||(LA187_0>=RULE_TEMPLATE_HEAD && LA187_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA187_0==RULE_INT) ) {s = 4;}

                        else if ( (LA187_0==Semicolon) ) {s = 65;}

                         
                        input.seek(index187_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA187_3 = input.LA(1);

                         
                        int index187_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index187_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_133s = "\40\uffff";
    static final String dfa_134s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_135s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_136s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_137s = "\35\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_138s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final char[] dfa_134 = DFA.unpackEncodedStringToUnsignedChars(dfa_134s);
    static final char[] dfa_135 = DFA.unpackEncodedStringToUnsignedChars(dfa_135s);
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final short[][] dfa_138 = unpackEncodedStringArray(dfa_138s);

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = dfa_133;
            this.eof = dfa_133;
            this.min = dfa_134;
            this.max = dfa_135;
            this.accept = dfa_136;
            this.special = dfa_137;
            this.transition = dfa_138;
        }
        public String getDescription() {
            return "9439:7: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm1_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm1_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm1_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_29 = input.LA(1);

                         
                        int index179_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index179_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA179_30 = input.LA(1);

                         
                        int index179_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index179_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_139s = "\1\4\77\uffff";
    static final String dfa_140s = "\1\u0094\77\uffff";
    static final String dfa_141s = "\1\uffff\76\1\1\2";
    static final String dfa_142s = "\1\0\77\uffff}>";
    static final String[] dfa_143s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\1\uffff\1\42\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\55\1\37\1\52\1\23\1\67\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\71\1\uffff\1\72\1\57\10\uffff\1\16\3\uffff\1\21\2\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\41\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\11\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final char[] dfa_140 = DFA.unpackEncodedStringToUnsignedChars(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[] dfa_142 = DFA.unpackEncodedString(dfa_142s);
    static final short[][] dfa_143 = unpackEncodedStringArray(dfa_143s);

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_139;
            this.max = dfa_140;
            this.accept = dfa_141;
            this.special = dfa_142;
            this.transition = dfa_143;
        }
        public String getDescription() {
            return "9638:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA172_0 = input.LA(1);

                         
                        int index172_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA172_0>=4 && LA172_0<=148 && (s=T2S.M_16[LA172_0-(4)])>=0) && (synpred107_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA172_0==RightParenthesis) ) {s = 63;}

                         
                        input.seek(index172_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 172, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA206 extends DFA {

        public DFA206(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 206;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "10078:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_3_0= ruleLetIdentifierRef ) ) ( (lv_forIn_4_0= In ) ) ( (lv_expression_5_0= norm3_Expression ) ) otherlv_6= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm3_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm3_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm3_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_23_0= norm2_Expression ) ) ( (otherlv_24= Semicolon ( (lv_expression_25_0= norm3_Expression ) )? otherlv_26= Semicolon ( (lv_updateExpr_27_0= norm3_Expression ) )? ) | ( ( (lv_forIn_28_0= In ) ) ( (lv_expression_29_0= norm3_Expression ) )? ) | ( ( (lv_forOf_30_0= Of ) ) ( (lv_expression_31_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_32= Semicolon ( (lv_expression_33_0= norm3_Expression ) )? otherlv_34= Semicolon ( (lv_updateExpr_35_0= norm3_Expression ) )? ) ) otherlv_36= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA206_1 = input.LA(1);

                         
                        int index206_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_InternalN4JSParser()) ) {s = 66;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index206_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 206, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_128;
            this.max = dfa_129;
            this.accept = dfa_130;
            this.special = dfa_131;
            this.transition = dfa_132;
        }
        public String getDescription() {
            return "10160:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm3_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm3_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm3_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_23_0= norm2_Expression ) ) ( (otherlv_24= Semicolon ( (lv_expression_25_0= norm3_Expression ) )? otherlv_26= Semicolon ( (lv_updateExpr_27_0= norm3_Expression ) )? ) | ( ( (lv_forIn_28_0= In ) ) ( (lv_expression_29_0= norm3_Expression ) )? ) | ( ( (lv_forOf_30_0= Of ) ) ( (lv_expression_31_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_32= Semicolon ( (lv_expression_33_0= norm3_Expression ) )? otherlv_34= Semicolon ( (lv_updateExpr_35_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA205_0 = input.LA(1);

                         
                        int index205_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA205_0==Var) && (synpred109_InternalN4JSParser())) {s = 1;}

                        else if ( (LA205_0==Const) && (synpred109_InternalN4JSParser())) {s = 2;}

                        else if ( (LA205_0==Let) ) {s = 3;}

                        else if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||(LA205_0>=External && LA205_0<=Function)||(LA205_0>=Private && LA205_0<=Delete)||(LA205_0>=Import && LA205_0<=Public)||LA205_0==Static||(LA205_0>=Target && LA205_0<=Await)||LA205_0==Class||(LA205_0>=False && LA205_0<=Super)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||(LA205_0>=From && LA205_0<=Void)||LA205_0==Get||(LA205_0>=New && LA205_0<=Set)||LA205_0==PlusSignPlusSign||(LA205_0>=HyphenMinusHyphenMinus && LA205_0<=SolidusEqualsSign)||LA205_0==As||LA205_0==Of||LA205_0==ExclamationMark||LA205_0==LeftParenthesis||LA205_0==PlusSign||LA205_0==HyphenMinus||LA205_0==Solidus||LA205_0==LessThanSign||(LA205_0>=CommercialAt && LA205_0<=LeftSquareBracket)||LA205_0==LeftCurlyBracket||LA205_0==Tilde||LA205_0==RULE_DOUBLE||(LA205_0>=RULE_HEX_INT && LA205_0<=RULE_LEGACY_OCTAL_INT)||LA205_0==RULE_SCIENTIFIC_INT||LA205_0==RULE_IDENTIFIER||LA205_0==RULE_STRING||(LA205_0>=RULE_TEMPLATE_HEAD && LA205_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA205_0==RULE_INT) ) {s = 4;}

                        else if ( (LA205_0==Semicolon) ) {s = 65;}

                         
                        input.seek(index205_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA205_3 = input.LA(1);

                         
                        int index205_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index205_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 205, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_144s = "\37\uffff";
    static final String dfa_145s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_146s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_147s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_148s = "\34\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_149s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final char[] dfa_146 = DFA.unpackEncodedStringToUnsignedChars(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[] dfa_148 = DFA.unpackEncodedString(dfa_148s);
    static final short[][] dfa_149 = unpackEncodedStringArray(dfa_149s);

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = dfa_144;
            this.eof = dfa_144;
            this.min = dfa_145;
            this.max = dfa_146;
            this.accept = dfa_147;
            this.special = dfa_148;
            this.transition = dfa_149;
        }
        public String getDescription() {
            return "10182:7: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_8_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_9_0= In ) ) | ( (lv_forOf_10_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_12_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_13= Comma ( (lv_varDeclsOrBindings_14_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_15= Semicolon ( (lv_expression_16_0= norm3_Expression ) )? otherlv_17= Semicolon ( (lv_updateExpr_18_0= norm3_Expression ) )? ) | ( ( (lv_forIn_19_0= In ) ) ( (lv_expression_20_0= norm3_Expression ) )? ) | ( ( (lv_forOf_21_0= Of ) ) ( (lv_expression_22_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA197_28 = input.LA(1);

                         
                        int index197_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index197_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA197_29 = input.LA(1);

                         
                        int index197_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index197_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_150s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\71\1\uffff\1\72\1\57\10\uffff\1\15\3\uffff\1\20\2\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\41\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\11\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_150 = unpackEncodedStringArray(dfa_150s);

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_139;
            this.max = dfa_140;
            this.accept = dfa_141;
            this.special = dfa_142;
            this.transition = dfa_150;
        }
        public String getDescription() {
            return "10381:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_11_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA190_0 = input.LA(1);

                         
                        int index190_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA190_0>=4 && LA190_0<=148 && (s=T2S.M_17[LA190_0-(4)])>=0) && (synpred111_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA190_0==RightParenthesis) ) {s = 63;}

                         
                        input.seek(index190_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_151s = "\1\4\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_152s = "\1\176\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_153s = "\2\uffff\1\1\33\uffff\1\3\3\uffff\1\2";
    static final String dfa_154s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\uffff}>";
    static final String[] dfa_155s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\1\uffff\1\36\2\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[][] dfa_155 = unpackEncodedStringArray(dfa_155s);

    class DFA228 extends DFA {

        public DFA228(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 228;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_153;
            this.special = dfa_154;
            this.transition = dfa_155;
        }
        public String getDescription() {
            return "12428:2: ( ( ( ( ruleBindingPattern ) )=> (lv_bindingPattern_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )? ( (lv_name_4_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA228_0 = input.LA(1);

                         
                        int index228_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA228_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA228_0==LeftSquareBracket) && (synpred118_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA228_0>=4 && LA228_0<=126 && (s=T2S.M_18[LA228_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA228_0==Default||LA228_0==This_1||LA228_0==Void||LA228_0==Tilde) ) {s = 30;}

                         
                        input.seek(index228_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA228_1 = input.LA(1);

                         
                        int index228_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred118_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA228_3 = input.LA(1);

                         
                        int index228_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA228_4 = input.LA(1);

                         
                        int index228_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA228_5 = input.LA(1);

                         
                        int index228_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA228_6 = input.LA(1);

                         
                        int index228_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA228_7 = input.LA(1);

                         
                        int index228_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA228_8 = input.LA(1);

                         
                        int index228_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA228_9 = input.LA(1);

                         
                        int index228_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA228_10 = input.LA(1);

                         
                        int index228_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA228_11 = input.LA(1);

                         
                        int index228_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA228_12 = input.LA(1);

                         
                        int index228_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA228_13 = input.LA(1);

                         
                        int index228_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA228_14 = input.LA(1);

                         
                        int index228_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA228_15 = input.LA(1);

                         
                        int index228_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA228_16 = input.LA(1);

                         
                        int index228_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA228_17 = input.LA(1);

                         
                        int index228_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA228_18 = input.LA(1);

                         
                        int index228_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA228_19 = input.LA(1);

                         
                        int index228_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA228_20 = input.LA(1);

                         
                        int index228_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA228_21 = input.LA(1);

                         
                        int index228_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA228_22 = input.LA(1);

                         
                        int index228_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA228_23 = input.LA(1);

                         
                        int index228_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA228_24 = input.LA(1);

                         
                        int index228_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA228_25 = input.LA(1);

                         
                        int index228_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA228_26 = input.LA(1);

                         
                        int index228_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA228_27 = input.LA(1);

                         
                        int index228_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA228_28 = input.LA(1);

                         
                        int index228_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA228_29 = input.LA(1);

                         
                        int index228_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index228_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 228, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_156s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_156 = unpackEncodedStringArray(dfa_156s);

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_156;
        }
        public String getDescription() {
            return "12501:4: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_157s = "\42\uffff";
    static final String dfa_158s = "\1\4\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_159s = "\1\176\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_160s = "\2\uffff\1\1\32\uffff\1\3\3\uffff\1\2";
    static final String dfa_161s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\5\uffff}>";
    static final String[] dfa_162s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\1\uffff\1\35\2\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_157 = DFA.unpackEncodedString(dfa_157s);
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final char[] dfa_159 = DFA.unpackEncodedStringToUnsignedChars(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[] dfa_161 = DFA.unpackEncodedString(dfa_161s);
    static final short[][] dfa_162 = unpackEncodedStringArray(dfa_162s);

    class DFA230 extends DFA {

        public DFA230(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 230;
            this.eot = dfa_157;
            this.eof = dfa_157;
            this.min = dfa_158;
            this.max = dfa_159;
            this.accept = dfa_160;
            this.special = dfa_161;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "12546:2: ( ( ( ( norm1_BindingPattern ) )=> (lv_bindingPattern_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= norm1_BindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )? ( (lv_name_4_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA230_0 = input.LA(1);

                         
                        int index230_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA230_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA230_0==LeftSquareBracket) && (synpred121_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA230_0>=4 && LA230_0<=126 && (s=T2S.M_19[LA230_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA230_0==Default||LA230_0==This_1||LA230_0==Void||LA230_0==Tilde) ) {s = 29;}

                         
                        input.seek(index230_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA230_1 = input.LA(1);

                         
                        int index230_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA230_3 = input.LA(1);

                         
                        int index230_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA230_4 = input.LA(1);

                         
                        int index230_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA230_5 = input.LA(1);

                         
                        int index230_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA230_6 = input.LA(1);

                         
                        int index230_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA230_7 = input.LA(1);

                         
                        int index230_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA230_8 = input.LA(1);

                         
                        int index230_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA230_9 = input.LA(1);

                         
                        int index230_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA230_10 = input.LA(1);

                         
                        int index230_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA230_11 = input.LA(1);

                         
                        int index230_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA230_12 = input.LA(1);

                         
                        int index230_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA230_13 = input.LA(1);

                         
                        int index230_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA230_14 = input.LA(1);

                         
                        int index230_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA230_15 = input.LA(1);

                         
                        int index230_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA230_16 = input.LA(1);

                         
                        int index230_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA230_17 = input.LA(1);

                         
                        int index230_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA230_18 = input.LA(1);

                         
                        int index230_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA230_19 = input.LA(1);

                         
                        int index230_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA230_20 = input.LA(1);

                         
                        int index230_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA230_21 = input.LA(1);

                         
                        int index230_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA230_22 = input.LA(1);

                         
                        int index230_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA230_23 = input.LA(1);

                         
                        int index230_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA230_24 = input.LA(1);

                         
                        int index230_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA230_25 = input.LA(1);

                         
                        int index230_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA230_26 = input.LA(1);

                         
                        int index230_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA230_27 = input.LA(1);

                         
                        int index230_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA230_28 = input.LA(1);

                         
                        int index230_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index230_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 230, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_163s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1\45\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_163 = unpackEncodedStringArray(dfa_163s);

    class DFA229 extends DFA {

        public DFA229(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 229;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_163;
        }
        public String getDescription() {
            return "12619:4: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_164s = "\52\uffff";
    static final String dfa_165s = "\4\uffff\1\3\45\uffff";
    static final String dfa_166s = "\1\4\3\uffff\1\6\1\4\14\uffff\1\4\1\uffff\10\4\1\uffff\3\4\1\10\11\4";
    static final String dfa_167s = "\1\u0094\3\uffff\1\u00a4\1\176\14\uffff\1\u00a4\1\uffff\10\u00a4\1\uffff\6\176\7\u00a4";
    static final String dfa_168s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\4\1\uffff\1\5\10\uffff\1\7\15\uffff";
    static final String dfa_169s = "\4\uffff\1\0\45\uffff}>";
    static final String[] dfa_170s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\10\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\6\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\1\3\2\uffff\1\7\11\uffff\2\16\7\uffff\1\7",
            "",
            "",
            "",
            "\2\3\7\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\14\3\1\uffff\2\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\17\4\uffff\1\3\1\uffff\1\3\13\uffff\1\3",
            "\1\30\1\24\1\23\1\uffff\1\32\3\23\2\uffff\1\23\1\uffff\1\34\2\uffff\2\23\3\uffff\1\23\1\uffff\1\23\1\uffff\1\25\1\uffff\1\23\1\33\7\uffff\1\27\1\uffff\1\23\1\31\3\uffff\1\23\1\uffff\1\34\1\uffff\1\26\1\34\6\uffff\2\23\1\uffff\2\23\23\uffff\1\23\3\uffff\1\23\5\uffff\1\34\13\uffff\1\21\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\35\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\36",
            "",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\40\17\uffff\1\23\45\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\35\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\36",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\40\17\uffff\1\23\45\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\41\17\uffff\1\23\45\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\42\17\uffff\1\23\45\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\35\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\36",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\35\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\36",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\35\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\36",
            "",
            "\4\23\1\46\7\23\1\50\13\23\1\47\2\23\1\45\12\23\1\44\10\23\1\43\1\23\4\uffff\10\23\21\uffff\5\23\17\uffff\1\23\27\uffff\1\51",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23",
            "\3\34\1\uffff\4\34\2\uffff\1\34\4\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\2\34\7\uffff\1\34\1\uffff\2\34\3\uffff\1\34\3\uffff\1\34\7\uffff\2\34\1\uffff\2\34\23\uffff\1\34\3\uffff\1\34\17\uffff\1\23\7\uffff\1\23\17\uffff\1\34",
            "\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\12\uffff\1\34\5\uffff\1\34\2\uffff\1\34\2\uffff\1\23\62\uffff\1\34\24\uffff\1\34",
            "\2\34\2\uffff\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\7\uffff\1\34\2\uffff\1\34\5\uffff\1\34\1\uffff\2\34\2\uffff\1\23\45\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\34",
            "\2\34\2\uffff\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\7\uffff\1\34\2\uffff\1\34\5\uffff\1\34\1\uffff\2\34\2\uffff\1\23\45\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34"
    };

    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final short[] dfa_165 = DFA.unpackEncodedString(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final char[] dfa_167 = DFA.unpackEncodedStringToUnsignedChars(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[] dfa_169 = DFA.unpackEncodedString(dfa_169s);
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);

    class DFA231 extends DFA {

        public DFA231(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 231;
            this.eot = dfa_164;
            this.eof = dfa_165;
            this.min = dfa_166;
            this.max = dfa_167;
            this.accept = dfa_168;
            this.special = dfa_169;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "12811:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= ruleIdentifierRef | this_JSXFragment_3= ruleJSXFragment | this_JSXElement_4= ruleJSXElement | this_ImportCallExpression_5= ruleImportCallExpression | this_ParameterizedCallExpression_6= ruleParameterizedCallExpression | this_Literal_7= ruleLiteral | this_ArrayLiteral_8= ruleArrayLiteral | this_ObjectLiteral_9= ruleObjectLiteral | this_ParenExpression_10= ruleParenExpression | this_AnnotatedExpression_11= ruleAnnotatedExpression | this_FunctionExpression_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_13= ruleAsyncFunctionExpression ) | this_N4ClassExpression_14= ruleN4ClassExpression | this_TemplateLiteral_15= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA231_4 = input.LA(1);

                         
                        int index231_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA231_4==RULE_NO_LINE_TERMINATOR) && (synpred126_InternalN4JSParser())) {s = 15;}

                        else if ( (LA231_4==Function) && (synpred126_InternalN4JSParser())) {s = 16;}

                        else if ( (LA231_4==EOF||(LA231_4>=Implements && LA231_4<=Instanceof)||LA231_4==ExclamationMarkEqualsSignEqualsSign||(LA231_4>=LessThanSignLessThanSignEqualsSign && LA231_4<=EqualsSignEqualsSignEqualsSign)||(LA231_4>=ExclamationMarkEqualsSign && LA231_4<=EqualsSignEqualsSign)||(LA231_4>=QuestionMarkFullStop && LA231_4<=QuestionMarkQuestionMark)||(LA231_4>=CircumflexAccentEqualsSign && LA231_4<=As)||(LA231_4>=In && LA231_4<=VerticalLineVerticalLine)||(LA231_4>=PercentSign && LA231_4<=QuestionMark)||(LA231_4>=LeftSquareBracket && LA231_4<=RightCurlyBracket)||(LA231_4>=RULE_TEMPLATE_HEAD && LA231_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA231_4==RULE_ML_COMMENT||LA231_4==RULE_EOL||LA231_4==RULE_VERSION) ) {s = 3;}

                         
                        input.seek(index231_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 231, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_171s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\10\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\6\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\1\3\2\uffff\1\7\11\uffff\2\16\7\uffff\1\7",
            "",
            "",
            "",
            "\2\3\7\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\14\3\1\uffff\2\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\17\4\uffff\1\3\1\uffff\1\3\13\uffff\1\3",
            "\1\30\1\24\1\23\1\uffff\1\32\3\23\2\uffff\1\23\1\uffff\1\34\2\uffff\2\23\3\uffff\1\23\1\uffff\1\23\1\uffff\1\25\1\uffff\1\23\1\33\7\uffff\1\27\1\uffff\1\23\1\31\3\uffff\1\23\1\uffff\1\34\1\uffff\1\26\1\34\6\uffff\2\23\1\uffff\2\23\23\uffff\1\23\3\uffff\1\23\5\uffff\1\34\13\uffff\1\21\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\35",
            "",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\40\17\uffff\1\23\45\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\35",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\40\17\uffff\1\23\45\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\41\17\uffff\1\23\45\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\13\uffff\2\23\4\uffff\1\23\5\uffff\1\42\17\uffff\1\23\45\uffff\1\23",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\35",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\35",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\1\36\1\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\35",
            "",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23",
            "\4\23\1\46\7\23\1\50\13\23\1\47\2\23\1\45\12\23\1\44\10\23\1\43\1\23\4\uffff\10\23\21\uffff\5\23\17\uffff\1\23\27\uffff\1\51",
            "\3\34\1\uffff\4\34\2\uffff\1\34\4\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\34\1\uffff\2\34\7\uffff\1\34\2\uffff\1\34\3\uffff\1\34\3\uffff\1\34\7\uffff\2\34\1\uffff\2\34\23\uffff\1\34\3\uffff\1\34\17\uffff\1\23\7\uffff\1\23\17\uffff\1\34",
            "\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\12\uffff\1\34\5\uffff\1\34\2\uffff\1\34\2\uffff\1\23\62\uffff\1\34\24\uffff\1\34",
            "\2\34\2\uffff\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\7\uffff\1\34\2\uffff\1\34\5\uffff\1\34\1\uffff\2\34\2\uffff\1\23\45\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\34",
            "\2\34\2\uffff\1\34\7\uffff\1\34\13\uffff\1\34\2\uffff\1\34\7\uffff\1\34\2\uffff\1\34\5\uffff\1\34\1\uffff\2\34\2\uffff\1\23\45\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34",
            "\61\23\4\uffff\10\23\15\uffff\1\23\3\uffff\5\23\4\uffff\1\34\3\uffff\2\34\1\uffff\2\23\2\uffff\1\34\1\uffff\1\37\1\34\1\uffff\1\34\2\uffff\1\23\1\34\16\uffff\1\23\45\uffff\1\34"
    };
    static final short[][] dfa_171 = unpackEncodedStringArray(dfa_171s);

    class DFA232 extends DFA {

        public DFA232(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 232;
            this.eot = dfa_164;
            this.eof = dfa_165;
            this.min = dfa_166;
            this.max = dfa_167;
            this.accept = dfa_168;
            this.special = dfa_169;
            this.transition = dfa_171;
        }
        public String getDescription() {
            return "12979:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= norm1_IdentifierRef | this_JSXFragment_3= ruleJSXFragment | this_JSXElement_4= ruleJSXElement | this_ImportCallExpression_5= norm1_ImportCallExpression | this_ParameterizedCallExpression_6= norm1_ParameterizedCallExpression | this_Literal_7= ruleLiteral | this_ArrayLiteral_8= norm1_ArrayLiteral | this_ObjectLiteral_9= norm1_ObjectLiteral | this_ParenExpression_10= norm1_ParenExpression | this_AnnotatedExpression_11= norm1_AnnotatedExpression | this_FunctionExpression_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_13= ruleAsyncFunctionExpression ) | this_N4ClassExpression_14= norm1_N4ClassExpression | this_TemplateLiteral_15= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA232_4 = input.LA(1);

                         
                        int index232_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA232_4==EOF||(LA232_4>=Implements && LA232_4<=Instanceof)||LA232_4==ExclamationMarkEqualsSignEqualsSign||(LA232_4>=LessThanSignLessThanSignEqualsSign && LA232_4<=EqualsSignEqualsSignEqualsSign)||(LA232_4>=ExclamationMarkEqualsSign && LA232_4<=EqualsSignEqualsSign)||(LA232_4>=QuestionMarkFullStop && LA232_4<=QuestionMarkQuestionMark)||(LA232_4>=CircumflexAccentEqualsSign && LA232_4<=As)||(LA232_4>=In && LA232_4<=VerticalLineVerticalLine)||(LA232_4>=PercentSign && LA232_4<=QuestionMark)||(LA232_4>=LeftSquareBracket && LA232_4<=RightCurlyBracket)||(LA232_4>=RULE_TEMPLATE_HEAD && LA232_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA232_4==RULE_ML_COMMENT||LA232_4==RULE_EOL||LA232_4==RULE_VERSION) ) {s = 3;}

                        else if ( (LA232_4==RULE_NO_LINE_TERMINATOR) && (synpred127_InternalN4JSParser())) {s = 15;}

                        else if ( (LA232_4==Function) && (synpred127_InternalN4JSParser())) {s = 16;}

                         
                        input.seek(index232_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 232, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_172s = "\34\4\2\uffff";
    static final String dfa_173s = "\1\176\33\u00a4\2\uffff";
    static final String[] dfa_174s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\47\uffff\1\1",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\14\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "",
            ""
    };
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[][] dfa_174 = unpackEncodedStringArray(dfa_174s);

    class DFA233 extends DFA {

        public DFA233(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 233;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "13239:2: ( ( ( ruleBindingIdentifier ) ) | ( () ( ( ruleBindingIdentifier ) ) this_VersionRequest_3= ruleVersionRequest[$current] ) )";
        }
    }
    static final String dfa_175s = "\1\uffff\32\34\2\uffff";
    static final String dfa_176s = "\1\4\32\6\2\uffff";
    static final String dfa_177s = "\1\176\32\u00a4\2\uffff";
    static final String dfa_178s = "\33\uffff\1\2\1\1";
    static final String dfa_179s = "\35\uffff}>";
    static final String[] dfa_180s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\47\uffff\1\1",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "\2\34\55\uffff\1\34\1\uffff\2\34\10\uffff\14\34\1\uffff\2\34\1\uffff\2\34\2\uffff\4\34\1\uffff\20\34\1\uffff\6\34\32\uffff\2\34\11\uffff\1\34\1\uffff\1\34\13\uffff\1\33",
            "",
            ""
    };
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final char[] dfa_176 = DFA.unpackEncodedStringToUnsignedChars(dfa_176s);
    static final char[] dfa_177 = DFA.unpackEncodedStringToUnsignedChars(dfa_177s);
    static final short[] dfa_178 = DFA.unpackEncodedString(dfa_178s);
    static final short[] dfa_179 = DFA.unpackEncodedString(dfa_179s);
    static final short[][] dfa_180 = unpackEncodedStringArray(dfa_180s);

    class DFA234 extends DFA {

        public DFA234(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 234;
            this.eot = dfa_109;
            this.eof = dfa_175;
            this.min = dfa_176;
            this.max = dfa_177;
            this.accept = dfa_178;
            this.special = dfa_179;
            this.transition = dfa_180;
        }
        public String getDescription() {
            return "13305:2: ( ( ( norm1_BindingIdentifier ) ) | ( () ( ( norm1_BindingIdentifier ) ) this_VersionRequest_3= ruleVersionRequest[$current] ) )";
        }
    }
    static final String dfa_181s = "\5\uffff";
    static final String dfa_182s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_183s = "\1\154\1\u0094\1\uffff\1\u0094\1\uffff";
    static final String dfa_184s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_185s = "\5\uffff}>";
    static final String[] dfa_186s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\7\uffff\1\4",
            ""
    };

    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final char[] dfa_182 = DFA.unpackEncodedStringToUnsignedChars(dfa_182s);
    static final char[] dfa_183 = DFA.unpackEncodedStringToUnsignedChars(dfa_183s);
    static final short[] dfa_184 = DFA.unpackEncodedString(dfa_184s);
    static final short[] dfa_185 = DFA.unpackEncodedString(dfa_185s);
    static final short[][] dfa_186 = unpackEncodedStringArray(dfa_186s);

    class DFA237 extends DFA {

        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = dfa_181;
            this.eof = dfa_181;
            this.min = dfa_182;
            this.max = dfa_183;
            this.accept = dfa_184;
            this.special = dfa_185;
            this.transition = dfa_186;
        }
        public String getDescription() {
            return "()* loopback of 13488:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA243 extends DFA {

        public DFA243(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 243;
            this.eot = dfa_181;
            this.eof = dfa_181;
            this.min = dfa_182;
            this.max = dfa_183;
            this.accept = dfa_184;
            this.special = dfa_185;
            this.transition = dfa_186;
        }
        public String getDescription() {
            return "()* loopback of 13635:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_187s = "\122\uffff";
    static final String dfa_188s = "\1\4\1\uffff\110\0\10\uffff";
    static final String dfa_189s = "\1\u0094\1\uffff\110\0\10\uffff";
    static final String dfa_190s = "\1\uffff\1\1\110\uffff\2\5\1\6\1\uffff\1\7\1\2\1\3\1\4";
    static final String dfa_191s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\10\uffff}>";
    static final String[] dfa_192s = {
            "\1\17\1\14\1\75\1\42\1\5\1\76\1\100\1\67\1\25\1\26\1\66\1\36\1\7\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\6\1\51\1\74\1\4\1\20\1\22\1\23\1\24\1\60\1\45\1\47\1\16\1\53\1\55\1\3\1\21\1\31\1\61\1\72\1\56\1\12\1\57\1\13\1\2\1\54\1\uffff\1\116\2\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\114\1\uffff\1\113\7\uffff\1\112\2\uffff\1\114\1\1\1\111\2\uffff\1\15\2\uffff\1\11\3\uffff\1\104\1\uffff\1\107\1\uffff\1\106\2\uffff\1\110\1\uffff\1\10\2\uffff\1\103\22\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final char[] dfa_188 = DFA.unpackEncodedStringToUnsignedChars(dfa_188s);
    static final char[] dfa_189 = DFA.unpackEncodedStringToUnsignedChars(dfa_189s);
    static final short[] dfa_190 = DFA.unpackEncodedString(dfa_190s);
    static final short[] dfa_191 = DFA.unpackEncodedString(dfa_191s);
    static final short[][] dfa_192 = unpackEncodedStringArray(dfa_192s);

    class DFA255 extends DFA {

        public DFA255(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 255;
            this.eot = dfa_187;
            this.eof = dfa_187;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_191;
            this.transition = dfa_192;
        }
        public String getDescription() {
            return "14045:2: (this_AnnotatedPropertyAssignment_0= ruleAnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= rulePropertyNameValuePair ) | ( ( ( () ruleGetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= rulePropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= rulePropertySetterDeclaration ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= rulePropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= rulePropertyNameValuePairSingleName | this_PropertySpread_6= rulePropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA255_0 = input.LA(1);

                         
                        int index255_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA255_0>=4 && LA255_0<=148 && (s=T2S.M_20[LA255_0-(4)])>=0)) { /* 73 cases */ }
                        else if ( (LA255_0==LessThanSign) && (synpred131_InternalN4JSParser())) {s = 74;}

                        else if ( (LA255_0==Asterisk) && (synpred131_InternalN4JSParser())) {s = 75;}

                        else if ( (LA255_0==LeftParenthesis||LA255_0==QuestionMark) ) {s = 76;}

                        else if ( (LA255_0==FullStopFullStopFullStop) ) {s = 78;}

                         
                        input.seek(index255_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA255_2 = input.LA(1);

                         
                        int index255_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA255_3 = input.LA(1);

                         
                        int index255_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA255_4 = input.LA(1);

                         
                        int index255_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA255_5 = input.LA(1);

                         
                        int index255_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA255_6 = input.LA(1);

                         
                        int index255_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA255_7 = input.LA(1);

                         
                        int index255_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA255_8 = input.LA(1);

                         
                        int index255_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA255_9 = input.LA(1);

                         
                        int index255_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA255_10 = input.LA(1);

                         
                        int index255_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA255_11 = input.LA(1);

                         
                        int index255_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA255_12 = input.LA(1);

                         
                        int index255_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA255_13 = input.LA(1);

                         
                        int index255_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA255_14 = input.LA(1);

                         
                        int index255_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA255_15 = input.LA(1);

                         
                        int index255_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA255_16 = input.LA(1);

                         
                        int index255_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA255_17 = input.LA(1);

                         
                        int index255_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA255_18 = input.LA(1);

                         
                        int index255_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA255_19 = input.LA(1);

                         
                        int index255_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA255_20 = input.LA(1);

                         
                        int index255_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA255_21 = input.LA(1);

                         
                        int index255_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA255_22 = input.LA(1);

                         
                        int index255_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA255_23 = input.LA(1);

                         
                        int index255_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA255_24 = input.LA(1);

                         
                        int index255_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA255_25 = input.LA(1);

                         
                        int index255_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA255_26 = input.LA(1);

                         
                        int index255_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA255_27 = input.LA(1);

                         
                        int index255_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA255_28 = input.LA(1);

                         
                        int index255_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA255_29 = input.LA(1);

                         
                        int index255_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA255_30 = input.LA(1);

                         
                        int index255_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA255_31 = input.LA(1);

                         
                        int index255_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA255_32 = input.LA(1);

                         
                        int index255_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA255_33 = input.LA(1);

                         
                        int index255_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA255_34 = input.LA(1);

                         
                        int index255_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA255_35 = input.LA(1);

                         
                        int index255_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA255_36 = input.LA(1);

                         
                        int index255_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA255_37 = input.LA(1);

                         
                        int index255_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA255_38 = input.LA(1);

                         
                        int index255_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA255_39 = input.LA(1);

                         
                        int index255_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA255_40 = input.LA(1);

                         
                        int index255_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA255_41 = input.LA(1);

                         
                        int index255_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA255_42 = input.LA(1);

                         
                        int index255_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA255_43 = input.LA(1);

                         
                        int index255_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA255_44 = input.LA(1);

                         
                        int index255_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA255_45 = input.LA(1);

                         
                        int index255_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA255_46 = input.LA(1);

                         
                        int index255_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA255_47 = input.LA(1);

                         
                        int index255_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA255_48 = input.LA(1);

                         
                        int index255_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA255_49 = input.LA(1);

                         
                        int index255_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA255_50 = input.LA(1);

                         
                        int index255_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred129_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA255_51 = input.LA(1);

                         
                        int index255_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA255_52 = input.LA(1);

                         
                        int index255_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA255_53 = input.LA(1);

                         
                        int index255_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA255_54 = input.LA(1);

                         
                        int index255_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA255_55 = input.LA(1);

                         
                        int index255_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA255_56 = input.LA(1);

                         
                        int index255_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA255_57 = input.LA(1);

                         
                        int index255_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA255_58 = input.LA(1);

                         
                        int index255_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA255_59 = input.LA(1);

                         
                        int index255_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA255_60 = input.LA(1);

                         
                        int index255_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA255_61 = input.LA(1);

                         
                        int index255_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA255_62 = input.LA(1);

                         
                        int index255_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA255_63 = input.LA(1);

                         
                        int index255_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA255_64 = input.LA(1);

                         
                        int index255_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA255_65 = input.LA(1);

                         
                        int index255_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA255_66 = input.LA(1);

                         
                        int index255_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA255_67 = input.LA(1);

                         
                        int index255_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA255_68 = input.LA(1);

                         
                        int index255_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA255_69 = input.LA(1);

                         
                        int index255_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA255_70 = input.LA(1);

                         
                        int index255_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA255_71 = input.LA(1);

                         
                        int index255_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA255_72 = input.LA(1);

                         
                        int index255_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index255_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA255_73 = input.LA(1);

                         
                        int index255_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred131_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index255_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 255, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA256 extends DFA {

        public DFA256(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 256;
            this.eot = dfa_187;
            this.eof = dfa_187;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_191;
            this.transition = dfa_192;
        }
        public String getDescription() {
            return "14339:2: (this_AnnotatedPropertyAssignment_0= norm1_AnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= norm1_PropertyNameValuePair ) | ( ( ( () norm1_GetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= norm1_PropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= norm1_PropertySetterDeclaration ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= norm1_PropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= norm1_PropertyNameValuePairSingleName | this_PropertySpread_6= norm1_PropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA256_0 = input.LA(1);

                         
                        int index256_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA256_0>=4 && LA256_0<=148 && (s=T2S.M_20[LA256_0-(4)])>=0)) { /* 73 cases */ }
                        else if ( (LA256_0==LessThanSign) && (synpred135_InternalN4JSParser())) {s = 74;}

                        else if ( (LA256_0==Asterisk) && (synpred135_InternalN4JSParser())) {s = 75;}

                        else if ( (LA256_0==LeftParenthesis||LA256_0==QuestionMark) ) {s = 76;}

                        else if ( (LA256_0==FullStopFullStopFullStop) ) {s = 78;}

                         
                        input.seek(index256_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA256_2 = input.LA(1);

                         
                        int index256_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA256_3 = input.LA(1);

                         
                        int index256_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA256_4 = input.LA(1);

                         
                        int index256_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA256_5 = input.LA(1);

                         
                        int index256_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA256_6 = input.LA(1);

                         
                        int index256_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA256_7 = input.LA(1);

                         
                        int index256_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA256_8 = input.LA(1);

                         
                        int index256_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA256_9 = input.LA(1);

                         
                        int index256_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA256_10 = input.LA(1);

                         
                        int index256_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA256_11 = input.LA(1);

                         
                        int index256_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA256_12 = input.LA(1);

                         
                        int index256_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA256_13 = input.LA(1);

                         
                        int index256_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA256_14 = input.LA(1);

                         
                        int index256_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA256_15 = input.LA(1);

                         
                        int index256_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA256_16 = input.LA(1);

                         
                        int index256_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA256_17 = input.LA(1);

                         
                        int index256_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA256_18 = input.LA(1);

                         
                        int index256_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA256_19 = input.LA(1);

                         
                        int index256_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA256_20 = input.LA(1);

                         
                        int index256_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA256_21 = input.LA(1);

                         
                        int index256_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA256_22 = input.LA(1);

                         
                        int index256_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA256_23 = input.LA(1);

                         
                        int index256_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA256_24 = input.LA(1);

                         
                        int index256_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA256_25 = input.LA(1);

                         
                        int index256_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA256_26 = input.LA(1);

                         
                        int index256_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA256_27 = input.LA(1);

                         
                        int index256_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA256_28 = input.LA(1);

                         
                        int index256_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA256_29 = input.LA(1);

                         
                        int index256_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA256_30 = input.LA(1);

                         
                        int index256_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA256_31 = input.LA(1);

                         
                        int index256_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA256_32 = input.LA(1);

                         
                        int index256_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA256_33 = input.LA(1);

                         
                        int index256_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA256_34 = input.LA(1);

                         
                        int index256_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA256_35 = input.LA(1);

                         
                        int index256_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA256_36 = input.LA(1);

                         
                        int index256_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA256_37 = input.LA(1);

                         
                        int index256_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA256_38 = input.LA(1);

                         
                        int index256_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA256_39 = input.LA(1);

                         
                        int index256_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA256_40 = input.LA(1);

                         
                        int index256_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA256_41 = input.LA(1);

                         
                        int index256_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA256_42 = input.LA(1);

                         
                        int index256_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA256_43 = input.LA(1);

                         
                        int index256_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA256_44 = input.LA(1);

                         
                        int index256_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA256_45 = input.LA(1);

                         
                        int index256_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA256_46 = input.LA(1);

                         
                        int index256_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA256_47 = input.LA(1);

                         
                        int index256_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA256_48 = input.LA(1);

                         
                        int index256_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA256_49 = input.LA(1);

                         
                        int index256_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA256_50 = input.LA(1);

                         
                        int index256_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA256_51 = input.LA(1);

                         
                        int index256_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred134_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA256_52 = input.LA(1);

                         
                        int index256_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA256_53 = input.LA(1);

                         
                        int index256_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA256_54 = input.LA(1);

                         
                        int index256_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA256_55 = input.LA(1);

                         
                        int index256_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA256_56 = input.LA(1);

                         
                        int index256_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA256_57 = input.LA(1);

                         
                        int index256_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA256_58 = input.LA(1);

                         
                        int index256_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA256_59 = input.LA(1);

                         
                        int index256_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA256_60 = input.LA(1);

                         
                        int index256_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA256_61 = input.LA(1);

                         
                        int index256_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA256_62 = input.LA(1);

                         
                        int index256_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA256_63 = input.LA(1);

                         
                        int index256_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA256_64 = input.LA(1);

                         
                        int index256_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA256_65 = input.LA(1);

                         
                        int index256_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA256_66 = input.LA(1);

                         
                        int index256_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA256_67 = input.LA(1);

                         
                        int index256_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA256_68 = input.LA(1);

                         
                        int index256_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA256_69 = input.LA(1);

                         
                        int index256_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA256_70 = input.LA(1);

                         
                        int index256_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA256_71 = input.LA(1);

                         
                        int index256_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA256_72 = input.LA(1);

                         
                        int index256_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                         
                        input.seek(index256_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA256_73 = input.LA(1);

                         
                        int index256_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred135_InternalN4JSParser()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index256_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 256, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_193s = "\1\4\110\0\10\uffff";
    static final String dfa_194s = "\1\u0094\110\0\10\uffff";
    static final String dfa_195s = "\111\uffff\2\4\1\5\1\uffff\1\6\1\1\1\2\1\3";
    static final String dfa_196s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\10\uffff}>";
    static final String[] dfa_197s = {
            "\1\16\1\13\1\74\1\41\1\4\1\75\1\77\1\66\1\24\1\25\1\65\1\35\1\6\1\32\1\33\1\76\1\64\1\26\1\31\1\37\1\100\1\43\1\67\1\45\1\5\1\50\1\73\1\3\1\17\1\21\1\22\1\23\1\57\1\44\1\46\1\15\1\52\1\54\1\2\1\20\1\30\1\60\1\71\1\55\1\11\1\56\1\12\1\1\1\53\1\uffff\1\115\2\uffff\1\34\1\61\1\63\1\42\1\101\1\62\1\47\1\51\21\uffff\1\70\1\27\1\36\1\40\1\72\5\uffff\1\113\1\uffff\1\112\7\uffff\1\111\2\uffff\1\113\1\uffff\1\110\2\uffff\1\14\2\uffff\1\10\3\uffff\1\103\1\uffff\1\106\1\uffff\1\105\2\uffff\1\107\1\uffff\1\7\2\uffff\1\102\22\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_193 = DFA.unpackEncodedStringToUnsignedChars(dfa_193s);
    static final char[] dfa_194 = DFA.unpackEncodedStringToUnsignedChars(dfa_194s);
    static final short[] dfa_195 = DFA.unpackEncodedString(dfa_195s);
    static final short[] dfa_196 = DFA.unpackEncodedString(dfa_196s);
    static final short[][] dfa_197 = unpackEncodedStringArray(dfa_197s);

    class DFA265 extends DFA {

        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "14648:3: ( ( ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )? ( (lv_declaredName_3_0= ruleLiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( () ruleGetterHeader[null] ) )=> ( () this_GetterHeader_7= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= ruleFormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeVariables_18= ruleTypeVariables[$current] )? ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )? ( (lv_identifierRef_28_0= ruleIdentifierRef ) ) (otherlv_29= EqualsSign ( (lv_expression_30_0= norm1_AssignmentExpression ) ) )? ) | ( () otherlv_32= FullStopFullStopFullStop ( (lv_expression_33_0= norm1_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA265_0 = input.LA(1);

                         
                        int index265_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA265_0>=4 && LA265_0<=148 && (s=T2S.M_22[LA265_0-(4)])>=0)) { /* 72 cases */ }
                        else if ( (LA265_0==LessThanSign) && (synpred142_InternalN4JSParser())) {s = 73;}

                        else if ( (LA265_0==Asterisk) && (synpred142_InternalN4JSParser())) {s = 74;}

                        else if ( (LA265_0==LeftParenthesis||LA265_0==QuestionMark) ) {s = 75;}

                        else if ( (LA265_0==FullStopFullStopFullStop) ) {s = 77;}

                         
                        input.seek(index265_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA265_1 = input.LA(1);

                         
                        int index265_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA265_2 = input.LA(1);

                         
                        int index265_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA265_3 = input.LA(1);

                         
                        int index265_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA265_4 = input.LA(1);

                         
                        int index265_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA265_5 = input.LA(1);

                         
                        int index265_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA265_6 = input.LA(1);

                         
                        int index265_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA265_7 = input.LA(1);

                         
                        int index265_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA265_8 = input.LA(1);

                         
                        int index265_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA265_9 = input.LA(1);

                         
                        int index265_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA265_10 = input.LA(1);

                         
                        int index265_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA265_11 = input.LA(1);

                         
                        int index265_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA265_12 = input.LA(1);

                         
                        int index265_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA265_13 = input.LA(1);

                         
                        int index265_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA265_14 = input.LA(1);

                         
                        int index265_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA265_15 = input.LA(1);

                         
                        int index265_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA265_16 = input.LA(1);

                         
                        int index265_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA265_17 = input.LA(1);

                         
                        int index265_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA265_18 = input.LA(1);

                         
                        int index265_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA265_19 = input.LA(1);

                         
                        int index265_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA265_20 = input.LA(1);

                         
                        int index265_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA265_21 = input.LA(1);

                         
                        int index265_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA265_22 = input.LA(1);

                         
                        int index265_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA265_23 = input.LA(1);

                         
                        int index265_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA265_24 = input.LA(1);

                         
                        int index265_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA265_25 = input.LA(1);

                         
                        int index265_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA265_26 = input.LA(1);

                         
                        int index265_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA265_27 = input.LA(1);

                         
                        int index265_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA265_28 = input.LA(1);

                         
                        int index265_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA265_29 = input.LA(1);

                         
                        int index265_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA265_30 = input.LA(1);

                         
                        int index265_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA265_31 = input.LA(1);

                         
                        int index265_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA265_32 = input.LA(1);

                         
                        int index265_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA265_33 = input.LA(1);

                         
                        int index265_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA265_34 = input.LA(1);

                         
                        int index265_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA265_35 = input.LA(1);

                         
                        int index265_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA265_36 = input.LA(1);

                         
                        int index265_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA265_37 = input.LA(1);

                         
                        int index265_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA265_38 = input.LA(1);

                         
                        int index265_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA265_39 = input.LA(1);

                         
                        int index265_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA265_40 = input.LA(1);

                         
                        int index265_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA265_41 = input.LA(1);

                         
                        int index265_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA265_42 = input.LA(1);

                         
                        int index265_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA265_43 = input.LA(1);

                         
                        int index265_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA265_44 = input.LA(1);

                         
                        int index265_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA265_45 = input.LA(1);

                         
                        int index265_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA265_46 = input.LA(1);

                         
                        int index265_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA265_47 = input.LA(1);

                         
                        int index265_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA265_48 = input.LA(1);

                         
                        int index265_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA265_49 = input.LA(1);

                         
                        int index265_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA265_50 = input.LA(1);

                         
                        int index265_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred139_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA265_51 = input.LA(1);

                         
                        int index265_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA265_52 = input.LA(1);

                         
                        int index265_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA265_53 = input.LA(1);

                         
                        int index265_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA265_54 = input.LA(1);

                         
                        int index265_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA265_55 = input.LA(1);

                         
                        int index265_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA265_56 = input.LA(1);

                         
                        int index265_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA265_57 = input.LA(1);

                         
                        int index265_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA265_58 = input.LA(1);

                         
                        int index265_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA265_59 = input.LA(1);

                         
                        int index265_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA265_60 = input.LA(1);

                         
                        int index265_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA265_61 = input.LA(1);

                         
                        int index265_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA265_62 = input.LA(1);

                         
                        int index265_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA265_63 = input.LA(1);

                         
                        int index265_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA265_64 = input.LA(1);

                         
                        int index265_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA265_65 = input.LA(1);

                         
                        int index265_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA265_66 = input.LA(1);

                         
                        int index265_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA265_67 = input.LA(1);

                         
                        int index265_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA265_68 = input.LA(1);

                         
                        int index265_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA265_69 = input.LA(1);

                         
                        int index265_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA265_70 = input.LA(1);

                         
                        int index265_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA265_71 = input.LA(1);

                         
                        int index265_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index265_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA265_72 = input.LA(1);

                         
                        int index265_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index265_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 265, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_198s = "\17\uffff";
    static final String dfa_199s = "\10\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_200s = "\1\u0094\7\u00a4\1\uffff\1\u0094\4\156\1\uffff";
    static final String dfa_201s = "\10\uffff\1\1\5\uffff\1\2";
    static final String dfa_202s = "\17\uffff}>";
    static final String[] dfa_203s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            ""
    };

    static final short[] dfa_198 = DFA.unpackEncodedString(dfa_198s);
    static final char[] dfa_199 = DFA.unpackEncodedStringToUnsignedChars(dfa_199s);
    static final char[] dfa_200 = DFA.unpackEncodedStringToUnsignedChars(dfa_200s);
    static final short[] dfa_201 = DFA.unpackEncodedString(dfa_201s);
    static final short[] dfa_202 = DFA.unpackEncodedString(dfa_202s);
    static final short[][] dfa_203 = unpackEncodedStringArray(dfa_203s);

    class DFA257 extends DFA {

        public DFA257(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 257;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_199;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "14675:7: ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_204s = "\10\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_205s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\7\uffff\1\16\14\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\11\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            ""
    };
    static final char[] dfa_204 = DFA.unpackEncodedStringToUnsignedChars(dfa_204s);
    static final short[][] dfa_205 = unpackEncodedStringArray(dfa_205s);

    class DFA260 extends DFA {

        public DFA260(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "15107:7: ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_206s = "\15\uffff";
    static final String dfa_207s = "\2\uffff\11\13\1\uffff\1\13";
    static final String dfa_208s = "\1\4\1\uffff\5\4\4\140\1\uffff\1\4";
    static final String dfa_209s = "\1\176\1\uffff\11\u00a4\1\uffff\1\176";
    static final String dfa_210s = "\1\uffff\1\1\11\uffff\1\2\1\uffff";
    static final String dfa_211s = "\15\uffff}>";
    static final String[] dfa_212s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1"
    };

    static final short[] dfa_206 = DFA.unpackEncodedString(dfa_206s);
    static final short[] dfa_207 = DFA.unpackEncodedString(dfa_207s);
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final char[] dfa_209 = DFA.unpackEncodedStringToUnsignedChars(dfa_209s);
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[] dfa_211 = DFA.unpackEncodedString(dfa_211s);
    static final short[][] dfa_212 = unpackEncodedStringArray(dfa_212s);

    class DFA263 extends DFA {

        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = dfa_206;
            this.eof = dfa_207;
            this.min = dfa_208;
            this.max = dfa_209;
            this.accept = dfa_210;
            this.special = dfa_211;
            this.transition = dfa_212;
        }
        public String getDescription() {
            return "15231:5: ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )?";
        }
    }

    class DFA274 extends DFA {

        public DFA274(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 274;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "15350:3: ( ( ( ( ( () ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )? ( (lv_declaredName_3_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( () norm1_GetterHeader[null] ) )=> ( () this_GetterHeader_7= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= norm1_FormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeVariables_18= ruleTypeVariables[$current] )? ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )? ( (lv_identifierRef_28_0= norm1_IdentifierRef ) ) (otherlv_29= EqualsSign ( (lv_expression_30_0= norm3_AssignmentExpression ) ) )? ) | ( () otherlv_32= FullStopFullStopFullStop ( (lv_expression_33_0= norm3_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA274_0 = input.LA(1);

                         
                        int index274_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA274_0>=4 && LA274_0<=148 && (s=T2S.M_22[LA274_0-(4)])>=0)) { /* 72 cases */ }
                        else if ( (LA274_0==LessThanSign) && (synpred151_InternalN4JSParser())) {s = 73;}

                        else if ( (LA274_0==Asterisk) && (synpred151_InternalN4JSParser())) {s = 74;}

                        else if ( (LA274_0==LeftParenthesis||LA274_0==QuestionMark) ) {s = 75;}

                        else if ( (LA274_0==FullStopFullStopFullStop) ) {s = 77;}

                         
                        input.seek(index274_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA274_1 = input.LA(1);

                         
                        int index274_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA274_2 = input.LA(1);

                         
                        int index274_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA274_3 = input.LA(1);

                         
                        int index274_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA274_4 = input.LA(1);

                         
                        int index274_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA274_5 = input.LA(1);

                         
                        int index274_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA274_6 = input.LA(1);

                         
                        int index274_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA274_7 = input.LA(1);

                         
                        int index274_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA274_8 = input.LA(1);

                         
                        int index274_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA274_9 = input.LA(1);

                         
                        int index274_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA274_10 = input.LA(1);

                         
                        int index274_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA274_11 = input.LA(1);

                         
                        int index274_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA274_12 = input.LA(1);

                         
                        int index274_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA274_13 = input.LA(1);

                         
                        int index274_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA274_14 = input.LA(1);

                         
                        int index274_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA274_15 = input.LA(1);

                         
                        int index274_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA274_16 = input.LA(1);

                         
                        int index274_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA274_17 = input.LA(1);

                         
                        int index274_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA274_18 = input.LA(1);

                         
                        int index274_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA274_19 = input.LA(1);

                         
                        int index274_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA274_20 = input.LA(1);

                         
                        int index274_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA274_21 = input.LA(1);

                         
                        int index274_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA274_22 = input.LA(1);

                         
                        int index274_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA274_23 = input.LA(1);

                         
                        int index274_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA274_24 = input.LA(1);

                         
                        int index274_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA274_25 = input.LA(1);

                         
                        int index274_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA274_26 = input.LA(1);

                         
                        int index274_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA274_27 = input.LA(1);

                         
                        int index274_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA274_28 = input.LA(1);

                         
                        int index274_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA274_29 = input.LA(1);

                         
                        int index274_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA274_30 = input.LA(1);

                         
                        int index274_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA274_31 = input.LA(1);

                         
                        int index274_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA274_32 = input.LA(1);

                         
                        int index274_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA274_33 = input.LA(1);

                         
                        int index274_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA274_34 = input.LA(1);

                         
                        int index274_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA274_35 = input.LA(1);

                         
                        int index274_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA274_36 = input.LA(1);

                         
                        int index274_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA274_37 = input.LA(1);

                         
                        int index274_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA274_38 = input.LA(1);

                         
                        int index274_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA274_39 = input.LA(1);

                         
                        int index274_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA274_40 = input.LA(1);

                         
                        int index274_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA274_41 = input.LA(1);

                         
                        int index274_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA274_42 = input.LA(1);

                         
                        int index274_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA274_43 = input.LA(1);

                         
                        int index274_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA274_44 = input.LA(1);

                         
                        int index274_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA274_45 = input.LA(1);

                         
                        int index274_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA274_46 = input.LA(1);

                         
                        int index274_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA274_47 = input.LA(1);

                         
                        int index274_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA274_48 = input.LA(1);

                         
                        int index274_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA274_49 = input.LA(1);

                         
                        int index274_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred146_InternalN4JSParser()) ) {s = 79;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA274_50 = input.LA(1);

                         
                        int index274_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred148_InternalN4JSParser()) ) {s = 80;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA274_51 = input.LA(1);

                         
                        int index274_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA274_52 = input.LA(1);

                         
                        int index274_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA274_53 = input.LA(1);

                         
                        int index274_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA274_54 = input.LA(1);

                         
                        int index274_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA274_55 = input.LA(1);

                         
                        int index274_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA274_56 = input.LA(1);

                         
                        int index274_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA274_57 = input.LA(1);

                         
                        int index274_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA274_58 = input.LA(1);

                         
                        int index274_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA274_59 = input.LA(1);

                         
                        int index274_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA274_60 = input.LA(1);

                         
                        int index274_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA274_61 = input.LA(1);

                         
                        int index274_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA274_62 = input.LA(1);

                         
                        int index274_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA274_63 = input.LA(1);

                         
                        int index274_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA274_64 = input.LA(1);

                         
                        int index274_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA274_65 = input.LA(1);

                         
                        int index274_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA274_66 = input.LA(1);

                         
                        int index274_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA274_67 = input.LA(1);

                         
                        int index274_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA274_68 = input.LA(1);

                         
                        int index274_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA274_69 = input.LA(1);

                         
                        int index274_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA274_70 = input.LA(1);

                         
                        int index274_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA274_71 = input.LA(1);

                         
                        int index274_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                         
                        input.seek(index274_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA274_72 = input.LA(1);

                         
                        int index274_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred151_InternalN4JSParser()) ) {s = 74;}

                        else if ( (true) ) {s = 75;}

                         
                        input.seek(index274_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 274, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA266 extends DFA {

        public DFA266(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 266;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_199;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "15377:7: ( (lv_declaredTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA269 extends DFA {

        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "15809:7: ( (lv_returnTypeRef_19_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_213s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\45\uffff\1\14",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\63\uffff\1\13",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1"
    };
    static final short[][] dfa_213 = unpackEncodedStringArray(dfa_213s);

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = dfa_206;
            this.eof = dfa_206;
            this.min = dfa_208;
            this.max = dfa_209;
            this.accept = dfa_210;
            this.special = dfa_211;
            this.transition = dfa_213;
        }
        public String getDescription() {
            return "15933:5: ( (lv_declaredTypeRef_27_0= ruleTypeRef ) )?";
        }
    }

    class DFA276 extends DFA {

        public DFA276(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 276;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "16109:5: ( (lv_returnTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA280 extends DFA {

        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "16295:5: ( (lv_returnTypeRef_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_214s = "\20\uffff";
    static final String dfa_215s = "\10\4\1\uffff\1\4\4\144\1\uffff\1\4";
    static final String dfa_216s = "\1\u0094\7\u00a4\1\uffff\1\u0094\4\156\1\uffff\1\u0094";
    static final String dfa_217s = "\10\uffff\1\1\5\uffff\1\2\1\uffff";
    static final String dfa_218s = "\20\uffff}>";
    static final String[] dfa_219s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\15\uffff\1\16\6\uffff\1\10\11\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10"
    };

    static final short[] dfa_214 = DFA.unpackEncodedString(dfa_214s);
    static final char[] dfa_215 = DFA.unpackEncodedStringToUnsignedChars(dfa_215s);
    static final char[] dfa_216 = DFA.unpackEncodedStringToUnsignedChars(dfa_216s);
    static final short[] dfa_217 = DFA.unpackEncodedString(dfa_217s);
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final short[][] dfa_219 = unpackEncodedStringArray(dfa_219s);

    class DFA283 extends DFA {

        public DFA283(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = dfa_214;
            this.eof = dfa_214;
            this.min = dfa_215;
            this.max = dfa_216;
            this.accept = dfa_217;
            this.special = dfa_218;
            this.transition = dfa_219;
        }
        public String getDescription() {
            return "16458:5: ( (lv_declaredTypeRef_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA285 extends DFA {

        public DFA285(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 285;
            this.eot = dfa_214;
            this.eof = dfa_214;
            this.min = dfa_215;
            this.max = dfa_216;
            this.accept = dfa_217;
            this.special = dfa_218;
            this.transition = dfa_219;
        }
        public String getDescription() {
            return "16578:5: ( (lv_declaredTypeRef_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA287 extends DFA {

        public DFA287(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 287;
            this.eot = dfa_206;
            this.eof = dfa_207;
            this.min = dfa_208;
            this.max = dfa_209;
            this.accept = dfa_210;
            this.special = dfa_211;
            this.transition = dfa_212;
        }
        public String getDescription() {
            return "16674:3: ( (lv_declaredTypeRef_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA289 extends DFA {

        public DFA289(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 289;
            this.eot = dfa_206;
            this.eof = dfa_206;
            this.min = dfa_208;
            this.max = dfa_209;
            this.accept = dfa_210;
            this.special = dfa_211;
            this.transition = dfa_213;
        }
        public String getDescription() {
            return "16750:3: ( (lv_declaredTypeRef_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_220s = "\71\uffff";
    static final String dfa_221s = "\2\4\67\uffff";
    static final String dfa_222s = "\2\u0094\67\uffff";
    static final String dfa_223s = "\2\uffff\1\3\65\2\1\1";
    static final String dfa_224s = "\1\uffff\1\0\67\uffff}>";
    static final String[] dfa_225s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\10\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\2\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\5\1\uffff\1\25\1\uffff\1\7\1\27\3\uffff\1\20\1\55\1\4\1\52\1\24\7\uffff\1\10\1\12\1\3\1\40\1\11\12\uffff\1\57\10\uffff\1\17\3\uffff\1\22\5\uffff\1\62\5\uffff\1\70\1\56\2\uffff\1\41\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\6\2\uffff\1\54\11\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_220 = DFA.unpackEncodedString(dfa_220s);
    static final char[] dfa_221 = DFA.unpackEncodedStringToUnsignedChars(dfa_221s);
    static final char[] dfa_222 = DFA.unpackEncodedStringToUnsignedChars(dfa_222s);
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final short[][] dfa_225 = unpackEncodedStringArray(dfa_225s);

    class DFA319 extends DFA {

        public DFA319(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 319;
            this.eot = dfa_220;
            this.eof = dfa_220;
            this.min = dfa_221;
            this.max = dfa_222;
            this.accept = dfa_223;
            this.special = dfa_224;
            this.transition = dfa_225;
        }
        public String getDescription() {
            return "18488:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= ruleMemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= ruleArguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_16_0= QuestionMarkFullStop ) )? ( (lv_template_17_0= ruleTemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_18= rulePrimaryExpression ( ( () this_IndexedAccessExpressionTail_20= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_22= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_24_0= QuestionMarkFullStop ) )? ( (lv_template_25_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA319_1 = input.LA(1);

                         
                        int index319_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA319_1>=4 && LA319_1<=148 && (s=T2S.M_24[LA319_1-(4)])>=0) && (synpred175_InternalN4JSParser())) { /* 53 cases */ }
                        else if ( (LA319_1==FullStop) && (synpred174_InternalN4JSParser())) {s = 56;}

                         
                        input.seek(index319_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 319, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_226s = "\70\uffff";
    static final String dfa_227s = "\2\4\66\uffff";
    static final String dfa_228s = "\2\u0094\66\uffff";
    static final String dfa_229s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_230s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_231s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\10\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\2\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\55\1\5\1\52\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\12\uffff\1\57\10\uffff\1\17\3\uffff\1\22\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\41\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_226 = DFA.unpackEncodedString(dfa_226s);
    static final char[] dfa_227 = DFA.unpackEncodedStringToUnsignedChars(dfa_227s);
    static final char[] dfa_228 = DFA.unpackEncodedStringToUnsignedChars(dfa_228s);
    static final short[] dfa_229 = DFA.unpackEncodedString(dfa_229s);
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[][] dfa_231 = unpackEncodedStringArray(dfa_231s);

    class DFA327 extends DFA {

        public DFA327(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 327;
            this.eot = dfa_226;
            this.eof = dfa_226;
            this.min = dfa_227;
            this.max = dfa_228;
            this.accept = dfa_229;
            this.special = dfa_230;
            this.transition = dfa_231;
        }
        public String getDescription() {
            return "18810:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= norm1_Arguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_16_0= QuestionMarkFullStop ) )? ( (lv_template_17_0= norm1_TemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_18= norm1_PrimaryExpression ( ( () this_IndexedAccessExpressionTail_20= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_22= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_24_0= QuestionMarkFullStop ) )? ( (lv_template_25_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA327_1 = input.LA(1);

                         
                        int index327_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA327_1==FullStop) && (synpred178_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA327_1>=4 && LA327_1<=148 && (s=T2S.M_25[LA327_1-(4)])>=0) && (synpred179_InternalN4JSParser())) { /* 53 cases */ }
                        input.seek(index327_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 327, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_232s = "\1\1\101\uffff";
    static final String dfa_233s = "\1\7\1\uffff\1\4\77\uffff";
    static final String dfa_234s = "\1\u0098\1\uffff\1\u0094\77\uffff";
    static final String dfa_235s = "\1\uffff\1\2\1\uffff\77\1";
    static final String dfa_236s = "\1\0\1\uffff\1\1\77\uffff}>";
    static final String[] dfa_237s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\65\3\uffff\1\36\1\14\1\71\1\uffff\1\43\1\40\1\uffff\1\17\1\uffff\1\24\1\73\1\33\1\32\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\56\1\5\1\53\1\25\1\72\6\uffff\1\11\1\13\1\4\1\41\1\12\7\uffff\1\74\1\uffff\1\75\1\60\10\uffff\1\20\3\uffff\1\23\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\42\1\1\2\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\7\2\uffff\1\55\11\uffff\1\70\1\67\7\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final char[] dfa_233 = DFA.unpackEncodedStringToUnsignedChars(dfa_233s);
    static final char[] dfa_234 = DFA.unpackEncodedStringToUnsignedChars(dfa_234s);
    static final short[] dfa_235 = DFA.unpackEncodedString(dfa_235s);
    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final short[][] dfa_237 = unpackEncodedStringArray(dfa_237s);

    class DFA342 extends DFA {

        public DFA342(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 342;
            this.eot = dfa_19;
            this.eof = dfa_232;
            this.min = dfa_233;
            this.max = dfa_234;
            this.accept = dfa_235;
            this.special = dfa_236;
            this.transition = dfa_237;
        }
        public String getDescription() {
            return "()* loopback of 19955:3: ( ( ( ( () ( ( ruleAdditiveOperator ) ) ) )=> ( () ( (lv_op_2_0= ruleAdditiveOperator ) ) ) ) ( (lv_rhs_3_0= ruleMultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA342_0 = input.LA(1);

                         
                        int index342_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA342_0==EOF||LA342_0==Instanceof||LA342_0==ExclamationMarkEqualsSignEqualsSign||(LA342_0>=LessThanSignLessThanSignEqualsSign && LA342_0<=EqualsSignEqualsSignEqualsSign)||(LA342_0>=ExclamationMarkEqualsSign && LA342_0<=AsteriskEqualsSign)||LA342_0==PlusSignEqualsSign||(LA342_0>=SolidusEqualsSign && LA342_0<=EqualsSignEqualsSign)||LA342_0==QuestionMarkQuestionMark||LA342_0==CircumflexAccentEqualsSign||(LA342_0>=In && LA342_0<=VerticalLineVerticalLine)||LA342_0==Ampersand||LA342_0==RightParenthesis||LA342_0==Comma||(LA342_0>=Colon && LA342_0<=QuestionMark)||(LA342_0>=RightSquareBracket && LA342_0<=CircumflexAccent)||(LA342_0>=VerticalLine && LA342_0<=RightCurlyBracket)||LA342_0==RULE_ML_COMMENT||LA342_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA342_0==HyphenMinus) ) {s = 2;}

                        else if ( (LA342_0==PlusSign) && (synpred188_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index342_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA342_2 = input.LA(1);

                         
                        int index342_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA342_2==EqualsSign) ) {s = 1;}

                        
                        else if ((LA342_2>=4 && LA342_2<=148 && (s=T2S.M_26[LA342_2-(4)])>=0) && (synpred188_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index342_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 342, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_238s = "\101\uffff";
    static final String dfa_239s = "\1\1\100\uffff";
    static final String dfa_240s = "\1\7\1\uffff\1\4\76\uffff";
    static final String dfa_241s = "\1\u0098\1\uffff\1\u0094\76\uffff";
    static final String dfa_242s = "\1\uffff\1\2\1\uffff\76\1";
    static final String dfa_243s = "\1\1\1\uffff\1\0\76\uffff}>";
    static final String[] dfa_244s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\1\70\1\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\72\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\55\1\5\1\52\1\24\1\71\6\uffff\1\10\1\12\1\4\1\40\1\11\7\uffff\1\73\1\uffff\1\74\1\57\10\uffff\1\17\3\uffff\1\22\2\uffff\1\100\2\uffff\1\62\2\uffff\1\75\1\uffff\1\76\1\uffff\1\56\2\uffff\1\41\1\1\2\uffff\1\63\1\60\2\uffff\1\61\2\uffff\1\77\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_238 = DFA.unpackEncodedString(dfa_238s);
    static final short[] dfa_239 = DFA.unpackEncodedString(dfa_239s);
    static final char[] dfa_240 = DFA.unpackEncodedStringToUnsignedChars(dfa_240s);
    static final char[] dfa_241 = DFA.unpackEncodedStringToUnsignedChars(dfa_241s);
    static final short[] dfa_242 = DFA.unpackEncodedString(dfa_242s);
    static final short[] dfa_243 = DFA.unpackEncodedString(dfa_243s);
    static final short[][] dfa_244 = unpackEncodedStringArray(dfa_244s);

    class DFA343 extends DFA {

        public DFA343(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 343;
            this.eot = dfa_238;
            this.eof = dfa_239;
            this.min = dfa_240;
            this.max = dfa_241;
            this.accept = dfa_242;
            this.special = dfa_243;
            this.transition = dfa_244;
        }
        public String getDescription() {
            return "()* loopback of 20037:3: ( ( ( ( () ( ( ruleAdditiveOperator ) ) ) )=> ( () ( (lv_op_2_0= ruleAdditiveOperator ) ) ) ) ( (lv_rhs_3_0= norm1_MultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA343_2 = input.LA(1);

                         
                        int index343_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA343_2>=4 && LA343_2<=148 && (s=T2S.M_27[LA343_2-(4)])>=0) && (synpred189_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA343_2==EqualsSign) ) {s = 1;}

                         
                        input.seek(index343_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA343_0 = input.LA(1);

                         
                        int index343_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA343_0==EOF||LA343_0==Instanceof||LA343_0==ExclamationMarkEqualsSignEqualsSign||(LA343_0>=LessThanSignLessThanSignEqualsSign && LA343_0<=EqualsSignEqualsSignEqualsSign)||(LA343_0>=ExclamationMarkEqualsSign && LA343_0<=AsteriskEqualsSign)||LA343_0==PlusSignEqualsSign||(LA343_0>=SolidusEqualsSign && LA343_0<=EqualsSignEqualsSign)||LA343_0==QuestionMarkQuestionMark||LA343_0==CircumflexAccentEqualsSign||(LA343_0>=In && LA343_0<=VerticalLineVerticalLine)||LA343_0==Ampersand||LA343_0==RightParenthesis||LA343_0==Comma||(LA343_0>=Colon && LA343_0<=QuestionMark)||(LA343_0>=RightSquareBracket && LA343_0<=CircumflexAccent)||(LA343_0>=VerticalLine && LA343_0<=RightCurlyBracket)||LA343_0==RULE_ML_COMMENT||LA343_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA343_0==HyphenMinus) ) {s = 2;}

                        else if ( (LA343_0==PlusSign) && (synpred189_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index343_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 343, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_245s = "\104\uffff";
    static final String dfa_246s = "\1\1\103\uffff";
    static final String dfa_247s = "\1\7\1\uffff\1\4\1\uffff\2\4\76\uffff";
    static final String dfa_248s = "\1\u0098\1\uffff\1\u0094\1\uffff\2\u0094\76\uffff";
    static final String dfa_249s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\76\1";
    static final String dfa_250s = "\1\2\3\uffff\1\1\1\0\76\uffff}>";
    static final String[] dfa_251s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\7\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\60\1\7\1\55\1\27\1\74\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\1\5\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\11\2\uffff\1\57\11\uffff\1\72\1\71\7\uffff\1\47",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\60\1\7\1\55\1\27\1\74\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\2\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\11\2\uffff\1\57\11\uffff\1\72\1\71\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[] dfa_246 = DFA.unpackEncodedString(dfa_246s);
    static final char[] dfa_247 = DFA.unpackEncodedStringToUnsignedChars(dfa_247s);
    static final char[] dfa_248 = DFA.unpackEncodedStringToUnsignedChars(dfa_248s);
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final short[] dfa_250 = DFA.unpackEncodedString(dfa_250s);
    static final short[][] dfa_251 = unpackEncodedStringArray(dfa_251s);

    class DFA344 extends DFA {

        public DFA344(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 344;
            this.eot = dfa_245;
            this.eof = dfa_246;
            this.min = dfa_247;
            this.max = dfa_248;
            this.accept = dfa_249;
            this.special = dfa_250;
            this.transition = dfa_251;
        }
        public String getDescription() {
            return "()* loopback of 20125:3: ( ( ( () ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA344_5 = input.LA(1);

                         
                        int index344_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA344_5==EqualsSign) ) {s = 1;}

                        
                        else if ((LA344_5>=4 && LA344_5<=148 && (s=T2S.M_28[LA344_5-(4)])>=0) && (synpred190_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index344_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA344_4 = input.LA(1);

                         
                        int index344_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA344_4==GreaterThanSign) ) {s = 5;}

                        else if ( (LA344_4==EqualsSign) ) {s = 1;}

                        
                        else if ((LA344_4>=4 && LA344_4<=148 && (s=T2S.M_29[LA344_4-(4)])>=0) && (synpred190_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index344_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA344_0 = input.LA(1);

                         
                        int index344_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA344_0==EOF||LA344_0==Instanceof||LA344_0==ExclamationMarkEqualsSignEqualsSign||(LA344_0>=LessThanSignLessThanSignEqualsSign && LA344_0<=EqualsSignEqualsSignEqualsSign)||(LA344_0>=ExclamationMarkEqualsSign && LA344_0<=AsteriskEqualsSign)||LA344_0==PlusSignEqualsSign||LA344_0==SolidusEqualsSign||(LA344_0>=LessThanSignEqualsSign && LA344_0<=EqualsSignEqualsSign)||LA344_0==QuestionMarkQuestionMark||LA344_0==CircumflexAccentEqualsSign||(LA344_0>=In && LA344_0<=VerticalLineVerticalLine)||LA344_0==Ampersand||LA344_0==RightParenthesis||(LA344_0>=Comma && LA344_0<=HyphenMinus)||(LA344_0>=Colon && LA344_0<=EqualsSign)||LA344_0==QuestionMark||(LA344_0>=RightSquareBracket && LA344_0<=CircumflexAccent)||(LA344_0>=VerticalLine && LA344_0<=RightCurlyBracket)||LA344_0==RULE_ML_COMMENT||LA344_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA344_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA344_0==LessThanSignLessThanSign) && (synpred190_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index344_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 344, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_252s = "\1\1\102\uffff";
    static final String dfa_253s = "\1\7\1\uffff\1\4\1\uffff\2\4\75\uffff";
    static final String dfa_254s = "\1\u0098\1\uffff\1\u0094\1\uffff\2\u0094\75\uffff";
    static final String dfa_255s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\75\1";
    static final String dfa_256s = "\1\2\3\uffff\1\0\1\1\75\uffff}>";
    static final String[] dfa_257s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\7\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\66\3\uffff\1\37\1\15\1\72\1\uffff\1\44\1\41\1\uffff\1\20\1\uffff\1\25\1\74\1\34\1\33\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\57\1\7\1\54\1\26\1\73\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\75\1\uffff\1\76\1\61\10\uffff\1\21\3\uffff\1\24\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\7\uffff\1\46",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\66\3\uffff\1\37\1\15\1\72\1\uffff\1\44\1\41\1\uffff\1\20\1\uffff\1\25\1\74\1\34\1\33\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\57\1\7\1\54\1\26\1\73\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\75\1\uffff\1\76\1\61\10\uffff\1\21\3\uffff\1\24\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\2\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\7\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_252 = DFA.unpackEncodedString(dfa_252s);
    static final char[] dfa_253 = DFA.unpackEncodedStringToUnsignedChars(dfa_253s);
    static final char[] dfa_254 = DFA.unpackEncodedStringToUnsignedChars(dfa_254s);
    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[] dfa_256 = DFA.unpackEncodedString(dfa_256s);
    static final short[][] dfa_257 = unpackEncodedStringArray(dfa_257s);

    class DFA345 extends DFA {

        public DFA345(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 345;
            this.eot = dfa_122;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_254;
            this.accept = dfa_255;
            this.special = dfa_256;
            this.transition = dfa_257;
        }
        public String getDescription() {
            return "()* loopback of 20331:3: ( ( ( () ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA345_4 = input.LA(1);

                         
                        int index345_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA345_4==GreaterThanSign) ) {s = 5;}

                        else if ( (LA345_4==EqualsSign) ) {s = 1;}

                        
                        else if ((LA345_4>=4 && LA345_4<=148 && (s=T2S.M_30[LA345_4-(4)])>=0) && (synpred192_InternalN4JSParser())) { /* 61 cases */ }
                        input.seek(index345_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA345_5 = input.LA(1);

                         
                        int index345_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA345_5==EqualsSign) ) {s = 1;}

                        
                        else if ((LA345_5>=4 && LA345_5<=148 && (s=T2S.M_31[LA345_5-(4)])>=0) && (synpred192_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index345_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA345_0 = input.LA(1);

                         
                        int index345_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA345_0==EOF||LA345_0==Instanceof||LA345_0==ExclamationMarkEqualsSignEqualsSign||(LA345_0>=LessThanSignLessThanSignEqualsSign && LA345_0<=EqualsSignEqualsSignEqualsSign)||(LA345_0>=ExclamationMarkEqualsSign && LA345_0<=AsteriskEqualsSign)||LA345_0==PlusSignEqualsSign||LA345_0==SolidusEqualsSign||(LA345_0>=LessThanSignEqualsSign && LA345_0<=EqualsSignEqualsSign)||LA345_0==QuestionMarkQuestionMark||LA345_0==CircumflexAccentEqualsSign||(LA345_0>=In && LA345_0<=VerticalLineVerticalLine)||LA345_0==Ampersand||LA345_0==RightParenthesis||(LA345_0>=Comma && LA345_0<=HyphenMinus)||(LA345_0>=Colon && LA345_0<=EqualsSign)||LA345_0==QuestionMark||(LA345_0>=RightSquareBracket && LA345_0<=CircumflexAccent)||(LA345_0>=VerticalLine && LA345_0<=RightCurlyBracket)||LA345_0==RULE_ML_COMMENT||LA345_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA345_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA345_0==LessThanSignLessThanSign) && (synpred192_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index345_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 345, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_258s = "\105\uffff";
    static final String dfa_259s = "\1\1\104\uffff";
    static final String dfa_260s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_261s = "\1\160\1\uffff\1\u0094\102\uffff";
    static final String dfa_262s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_263s = "\1\1\1\uffff\1\0\102\uffff}>";
    static final String[] dfa_264s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\70\3\uffff\1\41\1\17\1\74\1\uffff\1\46\1\43\1\uffff\1\22\1\uffff\1\27\1\76\1\36\1\35\2\uffff\1\71\1\uffff\1\57\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\61\1\10\1\56\1\30\1\75\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\77\1\uffff\1\100\1\63\10\uffff\1\23\3\uffff\1\26\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\6\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\12\2\uffff\1\60\11\uffff\1\73\1\72\7\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_258 = DFA.unpackEncodedString(dfa_258s);
    static final short[] dfa_259 = DFA.unpackEncodedString(dfa_259s);
    static final char[] dfa_260 = DFA.unpackEncodedStringToUnsignedChars(dfa_260s);
    static final char[] dfa_261 = DFA.unpackEncodedStringToUnsignedChars(dfa_261s);
    static final short[] dfa_262 = DFA.unpackEncodedString(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final short[][] dfa_264 = unpackEncodedStringArray(dfa_264s);

    class DFA348 extends DFA {

        public DFA348(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 348;
            this.eot = dfa_258;
            this.eof = dfa_259;
            this.min = dfa_260;
            this.max = dfa_261;
            this.accept = dfa_262;
            this.special = dfa_263;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "()* loopback of 20585:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA348_2 = input.LA(1);

                         
                        int index348_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA348_2==GreaterThanSign) ) {s = 1;}

                        
                        else if ((LA348_2>=4 && LA348_2<=148 && (s=T2S.M_32[LA348_2-(4)])>=0) && (synpred194_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index348_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA348_0 = input.LA(1);

                         
                        int index348_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA348_0==EOF||LA348_0==ExclamationMarkEqualsSignEqualsSign||(LA348_0>=LessThanSignLessThanSignEqualsSign && LA348_0<=EqualsSignEqualsSignEqualsSign)||(LA348_0>=ExclamationMarkEqualsSign && LA348_0<=AsteriskEqualsSign)||LA348_0==PlusSignEqualsSign||LA348_0==SolidusEqualsSign||LA348_0==EqualsSignEqualsSign||LA348_0==QuestionMarkQuestionMark||LA348_0==CircumflexAccentEqualsSign||(LA348_0>=In && LA348_0<=VerticalLineVerticalLine)||LA348_0==Ampersand||(LA348_0>=Comma && LA348_0<=HyphenMinus)||LA348_0==Semicolon||LA348_0==EqualsSign||LA348_0==QuestionMark||LA348_0==CircumflexAccent||(LA348_0>=VerticalLine && LA348_0<=RightCurlyBracket)) ) {s = 1;}

                        else if ( (LA348_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA348_0==LessThanSign) && (synpred194_InternalN4JSParser())) {s = 3;}

                        else if ( (LA348_0==LessThanSignEqualsSign) && (synpred194_InternalN4JSParser())) {s = 4;}

                        else if ( (LA348_0==Instanceof) && (synpred194_InternalN4JSParser())) {s = 5;}

                         
                        input.seek(index348_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 348, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_265s = "\106\uffff";
    static final String dfa_266s = "\1\1\105\uffff";
    static final String dfa_267s = "\1\7\1\uffff\1\4\103\uffff";
    static final String dfa_268s = "\1\u0098\1\uffff\1\u0094\103\uffff";
    static final String dfa_269s = "\1\uffff\1\2\1\uffff\103\1";
    static final String dfa_270s = "\1\0\1\uffff\1\1\103\uffff}>";
    static final String[] dfa_271s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\71\3\uffff\1\42\1\20\1\75\1\uffff\1\47\1\44\1\uffff\1\23\1\uffff\1\30\1\77\1\37\1\36\2\uffff\1\72\1\uffff\1\60\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\62\1\11\1\57\1\31\1\76\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\100\1\uffff\1\101\1\64\10\uffff\1\24\3\uffff\1\27\2\uffff\1\105\2\uffff\1\67\2\uffff\1\102\1\uffff\1\103\1\uffff\1\63\2\uffff\1\46\1\7\1\1\1\uffff\1\70\1\65\2\uffff\1\66\2\uffff\1\104\3\uffff\1\50\1\uffff\1\55\1\52\1\53\1\54\1\uffff\1\56\1\uffff\1\13\2\uffff\1\61\11\uffff\1\74\1\73\7\uffff\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_265 = DFA.unpackEncodedString(dfa_265s);
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);
    static final char[] dfa_267 = DFA.unpackEncodedStringToUnsignedChars(dfa_267s);
    static final char[] dfa_268 = DFA.unpackEncodedStringToUnsignedChars(dfa_268s);
    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);
    static final short[][] dfa_271 = unpackEncodedStringArray(dfa_271s);

    class DFA349 extends DFA {

        public DFA349(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 349;
            this.eot = dfa_265;
            this.eof = dfa_266;
            this.min = dfa_267;
            this.max = dfa_268;
            this.accept = dfa_269;
            this.special = dfa_270;
            this.transition = dfa_271;
        }
        public String getDescription() {
            return "()* loopback of 20791:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA349_0 = input.LA(1);

                         
                        int index349_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA349_0==EOF||LA349_0==ExclamationMarkEqualsSignEqualsSign||(LA349_0>=LessThanSignLessThanSignEqualsSign && LA349_0<=EqualsSignEqualsSignEqualsSign)||(LA349_0>=ExclamationMarkEqualsSign && LA349_0<=AsteriskEqualsSign)||LA349_0==PlusSignEqualsSign||LA349_0==SolidusEqualsSign||LA349_0==EqualsSignEqualsSign||LA349_0==QuestionMarkQuestionMark||LA349_0==CircumflexAccentEqualsSign||(LA349_0>=VerticalLineEqualsSign && LA349_0<=VerticalLineVerticalLine)||LA349_0==Ampersand||LA349_0==RightParenthesis||(LA349_0>=Comma && LA349_0<=HyphenMinus)||(LA349_0>=Colon && LA349_0<=Semicolon)||LA349_0==EqualsSign||LA349_0==QuestionMark||(LA349_0>=RightSquareBracket && LA349_0<=CircumflexAccent)||(LA349_0>=VerticalLine && LA349_0<=RightCurlyBracket)||LA349_0==RULE_ML_COMMENT||LA349_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA349_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA349_0==LessThanSign) && (synpred196_InternalN4JSParser())) {s = 3;}

                        else if ( (LA349_0==LessThanSignEqualsSign) && (synpred196_InternalN4JSParser())) {s = 4;}

                        else if ( (LA349_0==Instanceof) && (synpred196_InternalN4JSParser())) {s = 5;}

                        else if ( (LA349_0==In) && (synpred196_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index349_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA349_2 = input.LA(1);

                         
                        int index349_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA349_2>=4 && LA349_2<=148 && (s=T2S.M_33[LA349_2-(4)])>=0) && (synpred196_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA349_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index349_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 349, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_272s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_273s = "\1\157\1\uffff\1\u0094\101\uffff";
    static final String dfa_274s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_275s = "\1\1\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_276s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\60\1\10\1\55\1\27\1\74\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\6\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_272 = DFA.unpackEncodedStringToUnsignedChars(dfa_272s);
    static final char[] dfa_273 = DFA.unpackEncodedStringToUnsignedChars(dfa_273s);
    static final short[] dfa_274 = DFA.unpackEncodedString(dfa_274s);
    static final short[] dfa_275 = DFA.unpackEncodedString(dfa_275s);
    static final short[][] dfa_276 = unpackEncodedStringArray(dfa_276s);

    class DFA350 extends DFA {

        public DFA350(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 350;
            this.eot = dfa_245;
            this.eof = dfa_246;
            this.min = dfa_272;
            this.max = dfa_273;
            this.accept = dfa_274;
            this.special = dfa_275;
            this.transition = dfa_276;
        }
        public String getDescription() {
            return "()* loopback of 20997:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA350_2 = input.LA(1);

                         
                        int index350_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_2==GreaterThanSign) ) {s = 1;}

                        
                        else if ((LA350_2>=4 && LA350_2<=148 && (s=T2S.M_34[LA350_2-(4)])>=0) && (synpred198_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index350_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA350_0 = input.LA(1);

                         
                        int index350_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_0==EOF||LA350_0==ExclamationMarkEqualsSignEqualsSign||(LA350_0>=LessThanSignLessThanSignEqualsSign && LA350_0<=EqualsSignEqualsSignEqualsSign)||(LA350_0>=ExclamationMarkEqualsSign && LA350_0<=AsteriskEqualsSign)||LA350_0==PlusSignEqualsSign||LA350_0==SolidusEqualsSign||LA350_0==EqualsSignEqualsSign||LA350_0==QuestionMarkQuestionMark||LA350_0==CircumflexAccentEqualsSign||(LA350_0>=In && LA350_0<=VerticalLineVerticalLine)||LA350_0==Ampersand||(LA350_0>=Comma && LA350_0<=HyphenMinus)||LA350_0==Semicolon||LA350_0==EqualsSign||LA350_0==QuestionMark||LA350_0==CircumflexAccent||LA350_0==VerticalLine) ) {s = 1;}

                        else if ( (LA350_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA350_0==LessThanSign) && (synpred198_InternalN4JSParser())) {s = 3;}

                        else if ( (LA350_0==LessThanSignEqualsSign) && (synpred198_InternalN4JSParser())) {s = 4;}

                        else if ( (LA350_0==Instanceof) && (synpred198_InternalN4JSParser())) {s = 5;}

                         
                        input.seek(index350_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 350, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_277s = "\1\u0098\1\uffff\1\u0094\102\uffff";
    static final String dfa_278s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_279s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\45\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\70\3\uffff\1\41\1\17\1\74\1\uffff\1\46\1\43\1\uffff\1\22\1\uffff\1\27\1\76\1\36\1\35\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\61\1\11\1\56\1\30\1\75\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\77\1\uffff\1\100\1\63\10\uffff\1\23\3\uffff\1\26\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\7\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\7\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_277 = DFA.unpackEncodedStringToUnsignedChars(dfa_277s);
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final short[][] dfa_279 = unpackEncodedStringArray(dfa_279s);

    class DFA351 extends DFA {

        public DFA351(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 351;
            this.eot = dfa_258;
            this.eof = dfa_259;
            this.min = dfa_260;
            this.max = dfa_277;
            this.accept = dfa_262;
            this.special = dfa_278;
            this.transition = dfa_279;
        }
        public String getDescription() {
            return "()* loopback of 21201:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA351_0 = input.LA(1);

                         
                        int index351_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_0==EOF||LA351_0==ExclamationMarkEqualsSignEqualsSign||(LA351_0>=LessThanSignLessThanSignEqualsSign && LA351_0<=EqualsSignEqualsSignEqualsSign)||(LA351_0>=ExclamationMarkEqualsSign && LA351_0<=AsteriskEqualsSign)||LA351_0==PlusSignEqualsSign||LA351_0==SolidusEqualsSign||LA351_0==EqualsSignEqualsSign||LA351_0==QuestionMarkQuestionMark||LA351_0==CircumflexAccentEqualsSign||(LA351_0>=VerticalLineEqualsSign && LA351_0<=VerticalLineVerticalLine)||LA351_0==Ampersand||LA351_0==RightParenthesis||(LA351_0>=Comma && LA351_0<=HyphenMinus)||(LA351_0>=Colon && LA351_0<=Semicolon)||LA351_0==EqualsSign||LA351_0==QuestionMark||(LA351_0>=RightSquareBracket && LA351_0<=CircumflexAccent)||(LA351_0>=VerticalLine && LA351_0<=RightCurlyBracket)||LA351_0==RULE_ML_COMMENT||LA351_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA351_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA351_0==LessThanSign) && (synpred200_InternalN4JSParser())) {s = 3;}

                        else if ( (LA351_0==LessThanSignEqualsSign) && (synpred200_InternalN4JSParser())) {s = 4;}

                        else if ( (LA351_0==Instanceof) && (synpred200_InternalN4JSParser())) {s = 5;}

                        else if ( (LA351_0==In) && (synpred200_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index351_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA351_2 = input.LA(1);

                         
                        int index351_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_2==GreaterThanSign) ) {s = 1;}

                        
                        else if ((LA351_2>=4 && LA351_2<=148 && (s=T2S.M_35[LA351_2-(4)])>=0) && (synpred200_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index351_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 351, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_280s = "\1\4\35\0\44\uffff";
    static final String dfa_281s = "\1\u0094\35\0\44\uffff";
    static final String dfa_282s = "\36\uffff\1\4\40\uffff\1\1\1\3\1\2";
    static final String dfa_283s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\44\uffff}>";
    static final String[] dfa_284s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\1\uffff\1\36\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\2\36\10\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\7\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_280 = DFA.unpackEncodedStringToUnsignedChars(dfa_280s);
    static final char[] dfa_281 = DFA.unpackEncodedStringToUnsignedChars(dfa_281s);
    static final short[] dfa_282 = DFA.unpackEncodedString(dfa_282s);
    static final short[] dfa_283 = DFA.unpackEncodedString(dfa_283s);
    static final short[][] dfa_284 = unpackEncodedStringArray(dfa_284s);

    class DFA389 extends DFA {

        public DFA389(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 389;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_280;
            this.max = dfa_281;
            this.accept = dfa_282;
            this.special = dfa_283;
            this.transition = dfa_284;
        }
        public String getDescription() {
            return "24226:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= ruleAwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= rulePromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= ruleArrowExpression ) | (this_ConditionalExpression_3= ruleConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA389_1 = input.LA(1);

                         
                        int index389_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSParser()) ) {s = 63;}

                        else if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA389_2 = input.LA(1);

                         
                        int index389_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA389_3 = input.LA(1);

                         
                        int index389_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA389_4 = input.LA(1);

                         
                        int index389_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA389_5 = input.LA(1);

                         
                        int index389_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA389_6 = input.LA(1);

                         
                        int index389_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA389_7 = input.LA(1);

                         
                        int index389_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA389_8 = input.LA(1);

                         
                        int index389_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA389_9 = input.LA(1);

                         
                        int index389_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA389_10 = input.LA(1);

                         
                        int index389_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA389_11 = input.LA(1);

                         
                        int index389_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA389_12 = input.LA(1);

                         
                        int index389_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA389_13 = input.LA(1);

                         
                        int index389_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA389_14 = input.LA(1);

                         
                        int index389_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA389_15 = input.LA(1);

                         
                        int index389_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA389_16 = input.LA(1);

                         
                        int index389_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA389_17 = input.LA(1);

                         
                        int index389_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA389_18 = input.LA(1);

                         
                        int index389_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA389_19 = input.LA(1);

                         
                        int index389_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA389_20 = input.LA(1);

                         
                        int index389_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA389_21 = input.LA(1);

                         
                        int index389_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA389_22 = input.LA(1);

                         
                        int index389_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA389_23 = input.LA(1);

                         
                        int index389_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA389_24 = input.LA(1);

                         
                        int index389_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA389_25 = input.LA(1);

                         
                        int index389_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA389_26 = input.LA(1);

                         
                        int index389_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA389_27 = input.LA(1);

                         
                        int index389_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA389_28 = input.LA(1);

                         
                        int index389_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA389_29 = input.LA(1);

                         
                        int index389_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index389_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 389, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_285s = "\1\14\15\uffff";
    static final String dfa_286s = "\1\67\13\0\2\uffff";
    static final String dfa_287s = "\1\160\13\0\2\uffff";
    static final String dfa_288s = "\14\uffff\1\2\1\1";
    static final String dfa_289s = "\1\uffff\1\0\1\11\1\6\1\3\1\1\1\7\1\4\1\2\1\12\1\10\1\5\2\uffff}>";
    static final String[] dfa_290s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final char[] dfa_286 = DFA.unpackEncodedStringToUnsignedChars(dfa_286s);
    static final char[] dfa_287 = DFA.unpackEncodedStringToUnsignedChars(dfa_287s);
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final short[] dfa_289 = DFA.unpackEncodedString(dfa_289s);
    static final short[][] dfa_290 = unpackEncodedStringArray(dfa_290s);

    class DFA388 extends DFA {

        public DFA388(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 388;
            this.eot = dfa_7;
            this.eof = dfa_285;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_289;
            this.transition = dfa_290;
        }
        public String getDescription() {
            return "24330:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA388_1 = input.LA(1);

                         
                        int index388_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA388_5 = input.LA(1);

                         
                        int index388_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA388_8 = input.LA(1);

                         
                        int index388_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA388_4 = input.LA(1);

                         
                        int index388_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA388_7 = input.LA(1);

                         
                        int index388_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA388_11 = input.LA(1);

                         
                        int index388_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA388_3 = input.LA(1);

                         
                        int index388_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA388_6 = input.LA(1);

                         
                        int index388_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA388_10 = input.LA(1);

                         
                        int index388_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA388_2 = input.LA(1);

                         
                        int index388_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_2);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA388_9 = input.LA(1);

                         
                        int index388_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index388_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 388, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA391 extends DFA {

        public DFA391(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 391;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_280;
            this.max = dfa_281;
            this.accept = dfa_282;
            this.special = dfa_283;
            this.transition = dfa_284;
        }
        public String getDescription() {
            return "24404:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm1_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm1_PromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm1_ArrowExpression ) | (this_ConditionalExpression_3= norm1_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA391_1 = input.LA(1);

                         
                        int index391_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 63;}

                        else if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA391_2 = input.LA(1);

                         
                        int index391_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA391_3 = input.LA(1);

                         
                        int index391_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA391_4 = input.LA(1);

                         
                        int index391_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA391_5 = input.LA(1);

                         
                        int index391_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA391_6 = input.LA(1);

                         
                        int index391_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA391_7 = input.LA(1);

                         
                        int index391_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA391_8 = input.LA(1);

                         
                        int index391_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA391_9 = input.LA(1);

                         
                        int index391_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA391_10 = input.LA(1);

                         
                        int index391_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA391_11 = input.LA(1);

                         
                        int index391_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA391_12 = input.LA(1);

                         
                        int index391_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA391_13 = input.LA(1);

                         
                        int index391_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA391_14 = input.LA(1);

                         
                        int index391_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA391_15 = input.LA(1);

                         
                        int index391_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA391_16 = input.LA(1);

                         
                        int index391_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA391_17 = input.LA(1);

                         
                        int index391_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA391_18 = input.LA(1);

                         
                        int index391_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA391_19 = input.LA(1);

                         
                        int index391_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA391_20 = input.LA(1);

                         
                        int index391_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA391_21 = input.LA(1);

                         
                        int index391_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA391_22 = input.LA(1);

                         
                        int index391_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA391_23 = input.LA(1);

                         
                        int index391_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA391_24 = input.LA(1);

                         
                        int index391_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA391_25 = input.LA(1);

                         
                        int index391_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA391_26 = input.LA(1);

                         
                        int index391_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA391_27 = input.LA(1);

                         
                        int index391_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA391_28 = input.LA(1);

                         
                        int index391_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA391_29 = input.LA(1);

                         
                        int index391_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index391_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 391, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_291s = "\1\u0098\13\0\2\uffff";
    static final String dfa_292s = "\1\uffff\1\3\1\0\1\11\1\5\1\4\1\6\1\7\1\1\1\2\1\12\1\10\2\uffff}>";
    static final String[] dfa_293s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\1\6\2\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\45\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_291 = DFA.unpackEncodedStringToUnsignedChars(dfa_291s);
    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final short[][] dfa_293 = unpackEncodedStringArray(dfa_293s);

    class DFA390 extends DFA {

        public DFA390(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 390;
            this.eot = dfa_7;
            this.eof = dfa_285;
            this.min = dfa_286;
            this.max = dfa_291;
            this.accept = dfa_288;
            this.special = dfa_292;
            this.transition = dfa_293;
        }
        public String getDescription() {
            return "24508:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA390_2 = input.LA(1);

                         
                        int index390_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA390_8 = input.LA(1);

                         
                        int index390_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA390_9 = input.LA(1);

                         
                        int index390_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA390_1 = input.LA(1);

                         
                        int index390_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA390_5 = input.LA(1);

                         
                        int index390_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA390_4 = input.LA(1);

                         
                        int index390_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA390_6 = input.LA(1);

                         
                        int index390_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA390_7 = input.LA(1);

                         
                        int index390_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA390_11 = input.LA(1);

                         
                        int index390_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA390_3 = input.LA(1);

                         
                        int index390_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA390_10 = input.LA(1);

                         
                        int index390_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index390_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 390, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_294s = "\1\4\34\0\45\uffff";
    static final String dfa_295s = "\1\u0094\34\0\45\uffff";
    static final String dfa_296s = "\35\uffff\1\4\1\5\40\uffff\1\1\1\3\1\2";
    static final String dfa_297s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\45\uffff}>";
    static final String[] dfa_298s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\1\uffff\1\36\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\2\36\10\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\7\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_294 = DFA.unpackEncodedStringToUnsignedChars(dfa_294s);
    static final char[] dfa_295 = DFA.unpackEncodedStringToUnsignedChars(dfa_295s);
    static final short[] dfa_296 = DFA.unpackEncodedString(dfa_296s);
    static final short[] dfa_297 = DFA.unpackEncodedString(dfa_297s);
    static final short[][] dfa_298 = unpackEncodedStringArray(dfa_298s);

    class DFA393 extends DFA {

        public DFA393(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 393;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_294;
            this.max = dfa_295;
            this.accept = dfa_296;
            this.special = dfa_297;
            this.transition = dfa_298;
        }
        public String getDescription() {
            return "24582:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm2_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm2_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm2_ArrowExpression ) | this_YieldExpression_3= ruleYieldExpression | (this_ConditionalExpression_4= norm2_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA393_1 = input.LA(1);

                         
                        int index393_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 63;}

                        else if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA393_2 = input.LA(1);

                         
                        int index393_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA393_3 = input.LA(1);

                         
                        int index393_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA393_4 = input.LA(1);

                         
                        int index393_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA393_5 = input.LA(1);

                         
                        int index393_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA393_6 = input.LA(1);

                         
                        int index393_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA393_7 = input.LA(1);

                         
                        int index393_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA393_8 = input.LA(1);

                         
                        int index393_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA393_9 = input.LA(1);

                         
                        int index393_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA393_10 = input.LA(1);

                         
                        int index393_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA393_11 = input.LA(1);

                         
                        int index393_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA393_12 = input.LA(1);

                         
                        int index393_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA393_13 = input.LA(1);

                         
                        int index393_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA393_14 = input.LA(1);

                         
                        int index393_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA393_15 = input.LA(1);

                         
                        int index393_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA393_16 = input.LA(1);

                         
                        int index393_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA393_17 = input.LA(1);

                         
                        int index393_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA393_18 = input.LA(1);

                         
                        int index393_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA393_19 = input.LA(1);

                         
                        int index393_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA393_20 = input.LA(1);

                         
                        int index393_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA393_21 = input.LA(1);

                         
                        int index393_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA393_22 = input.LA(1);

                         
                        int index393_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA393_23 = input.LA(1);

                         
                        int index393_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA393_24 = input.LA(1);

                         
                        int index393_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA393_25 = input.LA(1);

                         
                        int index393_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA393_26 = input.LA(1);

                         
                        int index393_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA393_27 = input.LA(1);

                         
                        int index393_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA393_28 = input.LA(1);

                         
                        int index393_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index393_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 393, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_299s = "\1\150\13\0\2\uffff";
    static final String dfa_300s = "\1\uffff\1\2\1\10\1\3\1\11\1\4\1\1\1\5\1\12\1\6\1\0\1\7\2\uffff}>";
    static final String[] dfa_301s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_299 = DFA.unpackEncodedStringToUnsignedChars(dfa_299s);
    static final short[] dfa_300 = DFA.unpackEncodedString(dfa_300s);
    static final short[][] dfa_301 = unpackEncodedStringArray(dfa_301s);

    class DFA392 extends DFA {

        public DFA392(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 392;
            this.eot = dfa_7;
            this.eof = dfa_285;
            this.min = dfa_286;
            this.max = dfa_299;
            this.accept = dfa_288;
            this.special = dfa_300;
            this.transition = dfa_301;
        }
        public String getDescription() {
            return "24695:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA392_10 = input.LA(1);

                         
                        int index392_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA392_6 = input.LA(1);

                         
                        int index392_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA392_1 = input.LA(1);

                         
                        int index392_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA392_3 = input.LA(1);

                         
                        int index392_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA392_5 = input.LA(1);

                         
                        int index392_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA392_7 = input.LA(1);

                         
                        int index392_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA392_9 = input.LA(1);

                         
                        int index392_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA392_11 = input.LA(1);

                         
                        int index392_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA392_2 = input.LA(1);

                         
                        int index392_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_2);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA392_4 = input.LA(1);

                         
                        int index392_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA392_8 = input.LA(1);

                         
                        int index392_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index392_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 392, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA395 extends DFA {

        public DFA395(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 395;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_294;
            this.max = dfa_295;
            this.accept = dfa_296;
            this.special = dfa_297;
            this.transition = dfa_298;
        }
        public String getDescription() {
            return "24769:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm3_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm3_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>this_ArrowExpression_2= norm3_ArrowExpression ) | this_YieldExpression_3= norm1_YieldExpression | (this_ConditionalExpression_4= norm3_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA395_1 = input.LA(1);

                         
                        int index395_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 63;}

                        else if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA395_2 = input.LA(1);

                         
                        int index395_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA395_3 = input.LA(1);

                         
                        int index395_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA395_4 = input.LA(1);

                         
                        int index395_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA395_5 = input.LA(1);

                         
                        int index395_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA395_6 = input.LA(1);

                         
                        int index395_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA395_7 = input.LA(1);

                         
                        int index395_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA395_8 = input.LA(1);

                         
                        int index395_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA395_9 = input.LA(1);

                         
                        int index395_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA395_10 = input.LA(1);

                         
                        int index395_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA395_11 = input.LA(1);

                         
                        int index395_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA395_12 = input.LA(1);

                         
                        int index395_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA395_13 = input.LA(1);

                         
                        int index395_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA395_14 = input.LA(1);

                         
                        int index395_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA395_15 = input.LA(1);

                         
                        int index395_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA395_16 = input.LA(1);

                         
                        int index395_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA395_17 = input.LA(1);

                         
                        int index395_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA395_18 = input.LA(1);

                         
                        int index395_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA395_19 = input.LA(1);

                         
                        int index395_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA395_20 = input.LA(1);

                         
                        int index395_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA395_21 = input.LA(1);

                         
                        int index395_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA395_22 = input.LA(1);

                         
                        int index395_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA395_23 = input.LA(1);

                         
                        int index395_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA395_24 = input.LA(1);

                         
                        int index395_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA395_25 = input.LA(1);

                         
                        int index395_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA395_26 = input.LA(1);

                         
                        int index395_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA395_27 = input.LA(1);

                         
                        int index395_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA395_28 = input.LA(1);

                         
                        int index395_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index395_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 395, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_302s = "\1\uffff\1\1\1\5\1\2\1\6\1\3\1\0\1\10\1\7\1\11\1\4\1\12\2\uffff}>";
    static final short[] dfa_302 = DFA.unpackEncodedString(dfa_302s);

    class DFA394 extends DFA {

        public DFA394(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 394;
            this.eot = dfa_7;
            this.eof = dfa_285;
            this.min = dfa_286;
            this.max = dfa_291;
            this.accept = dfa_288;
            this.special = dfa_302;
            this.transition = dfa_293;
        }
        public String getDescription() {
            return "24882:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA394_6 = input.LA(1);

                         
                        int index394_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA394_1 = input.LA(1);

                         
                        int index394_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA394_3 = input.LA(1);

                         
                        int index394_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA394_5 = input.LA(1);

                         
                        int index394_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA394_10 = input.LA(1);

                         
                        int index394_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA394_2 = input.LA(1);

                         
                        int index394_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA394_4 = input.LA(1);

                         
                        int index394_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA394_8 = input.LA(1);

                         
                        int index394_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA394_7 = input.LA(1);

                         
                        int index394_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA394_9 = input.LA(1);

                         
                        int index394_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA394_11 = input.LA(1);

                         
                        int index394_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index394_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 394, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_303s = "\114\uffff";
    static final String dfa_304s = "\1\77\113\uffff";
    static final String dfa_305s = "\1\4\17\uffff\1\0\36\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_306s = "\1\u0094\17\uffff\1\0\36\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_307s = "\1\uffff\17\1\1\uffff\36\1\1\uffff\14\1\1\uffff\2\1\1\2\14\uffff";
    static final String dfa_308s = "\1\0\17\uffff\1\1\36\uffff\1\2\14\uffff\1\3\17\uffff}>";
    static final String[] dfa_309s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\3\uffff\1\77\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\57\7\uffff\1\77\1\15\2\uffff\1\77\1\20\1\77\1\uffff\1\76\2\uffff\1\3\2\uffff\1\73\1\77\1\74\1\uffff\1\56\1\uffff\1\77\1\41\2\77\1\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\11\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_303 = DFA.unpackEncodedString(dfa_303s);
    static final short[] dfa_304 = DFA.unpackEncodedString(dfa_304s);
    static final char[] dfa_305 = DFA.unpackEncodedStringToUnsignedChars(dfa_305s);
    static final char[] dfa_306 = DFA.unpackEncodedStringToUnsignedChars(dfa_306s);
    static final short[] dfa_307 = DFA.unpackEncodedString(dfa_307s);
    static final short[] dfa_308 = DFA.unpackEncodedString(dfa_308s);
    static final short[][] dfa_309 = unpackEncodedStringArray(dfa_309s);

    class DFA397 extends DFA {

        public DFA397(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 397;
            this.eot = dfa_303;
            this.eof = dfa_304;
            this.min = dfa_305;
            this.max = dfa_306;
            this.accept = dfa_307;
            this.special = dfa_308;
            this.transition = dfa_309;
        }
        public String getDescription() {
            return "24992:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA397_0 = input.LA(1);

                         
                        int index397_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA397_0>=5 && LA397_0<=126 && (s=T2S.M_36[LA397_0-(5)])>=0) && (synpred259_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA397_0==Of) ) {s = 16;}

                        
                        else if ((LA397_0>=4 && LA397_0<=148 && (s=T2S.M_37[LA397_0-(4)])>=0) && (synpred259_InternalN4JSParser())) { /* 31 cases */ }
                        else if ( (LA397_0==SolidusEqualsSign) ) {s = 47;}

                        
                        else if ((LA397_0>=15 && LA397_0<=140 && (s=T2S.M_38[LA397_0-(15)])>=0) && (synpred259_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA397_0==HyphenMinus) ) {s = 60;}

                        else if ( (LA397_0==Tilde) && (synpred259_InternalN4JSParser())) {s = 61;}

                        else if ( (LA397_0==ExclamationMark) && (synpred259_InternalN4JSParser())) {s = 62;}

                        else if ( (LA397_0==EOF||LA397_0==LessThanSignLessThanSignEqualsSign||LA397_0==PercentSignEqualsSign||(LA397_0>=AmpersandEqualsSign && LA397_0<=AsteriskEqualsSign)||LA397_0==PlusSignEqualsSign||LA397_0==CircumflexAccentEqualsSign||LA397_0==In||LA397_0==VerticalLineEqualsSign||LA397_0==Comma||LA397_0==Semicolon||(LA397_0>=EqualsSign && LA397_0<=GreaterThanSign)) ) {s = 63;}

                         
                        input.seek(index397_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA397_16 = input.LA(1);

                         
                        int index397_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index397_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA397_47 = input.LA(1);

                         
                        int index397_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index397_47);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA397_60 = input.LA(1);

                         
                        int index397_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index397_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 397, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_310s = "\120\uffff";
    static final String dfa_311s = "\1\77\117\uffff";
    static final String dfa_312s = "\1\4\56\uffff\1\0\14\uffff\1\0\23\uffff";
    static final String dfa_313s = "\1\u0098\56\uffff\1\0\14\uffff\1\0\23\uffff";
    static final String dfa_314s = "\1\uffff\56\1\1\uffff\14\1\1\uffff\2\1\1\2\20\uffff";
    static final String dfa_315s = "\1\0\56\uffff\1\1\14\uffff\1\2\23\uffff}>";
    static final String[] dfa_316s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\3\uffff\1\77\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\57\7\uffff\1\77\1\15\3\uffff\1\20\1\77\1\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\77\1\74\1\uffff\1\56\2\77\1\41\2\77\1\uffff\1\2\1\60\1\77\1\uffff\1\61\1\uffff\1\77\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\11\uffff\1\65\1\64\7\uffff\1\44\1\uffff\1\77\1\uffff\1\77",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final short[] dfa_311 = DFA.unpackEncodedString(dfa_311s);
    static final char[] dfa_312 = DFA.unpackEncodedStringToUnsignedChars(dfa_312s);
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final short[] dfa_314 = DFA.unpackEncodedString(dfa_314s);
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final short[][] dfa_316 = unpackEncodedStringArray(dfa_316s);

    class DFA399 extends DFA {

        public DFA399(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 399;
            this.eot = dfa_310;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "25054:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA399_0 = input.LA(1);

                         
                        int index399_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA399_0>=4 && LA399_0<=148 && (s=T2S.M_39[LA399_0-(4)])>=0) && (synpred261_InternalN4JSParser())) { /* 46 cases */ }
                        else if ( (LA399_0==SolidusEqualsSign) ) {s = 47;}

                        
                        else if ((LA399_0>=15 && LA399_0<=140 && (s=T2S.M_38[LA399_0-(15)])>=0) && (synpred261_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA399_0==HyphenMinus) ) {s = 60;}

                        else if ( (LA399_0==Tilde) && (synpred261_InternalN4JSParser())) {s = 61;}

                        else if ( (LA399_0==ExclamationMark) && (synpred261_InternalN4JSParser())) {s = 62;}

                        else if ( (LA399_0==EOF||LA399_0==LessThanSignLessThanSignEqualsSign||LA399_0==PercentSignEqualsSign||(LA399_0>=AmpersandEqualsSign && LA399_0<=AsteriskEqualsSign)||LA399_0==PlusSignEqualsSign||LA399_0==CircumflexAccentEqualsSign||LA399_0==VerticalLineEqualsSign||LA399_0==RightParenthesis||LA399_0==Comma||(LA399_0>=Colon && LA399_0<=Semicolon)||(LA399_0>=EqualsSign && LA399_0<=GreaterThanSign)||LA399_0==RightSquareBracket||LA399_0==RightCurlyBracket||LA399_0==RULE_ML_COMMENT||LA399_0==RULE_EOL) ) {s = 63;}

                         
                        input.seek(index399_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA399_47 = input.LA(1);

                         
                        int index399_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index399_47);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA399_60 = input.LA(1);

                         
                        int index399_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 63;}

                         
                        input.seek(index399_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 399, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_317s = "\136\uffff";
    static final String dfa_318s = "\1\2\135\uffff";
    static final String dfa_319s = "\1\4\1\0\134\uffff";
    static final String dfa_320s = "\1\u0094\1\0\134\uffff";
    static final String dfa_321s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_322s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_323s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\2\2\6\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_317 = DFA.unpackEncodedString(dfa_317s);
    static final short[] dfa_318 = DFA.unpackEncodedString(dfa_318s);
    static final char[] dfa_319 = DFA.unpackEncodedStringToUnsignedChars(dfa_319s);
    static final char[] dfa_320 = DFA.unpackEncodedStringToUnsignedChars(dfa_320s);
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final short[] dfa_322 = DFA.unpackEncodedString(dfa_322s);
    static final short[][] dfa_323 = unpackEncodedStringArray(dfa_323s);

    class DFA431 extends DFA {

        public DFA431(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 431;
            this.eot = dfa_317;
            this.eof = dfa_318;
            this.min = dfa_319;
            this.max = dfa_320;
            this.accept = dfa_321;
            this.special = dfa_322;
            this.transition = dfa_323;
        }
        public String getDescription() {
            return "27397:3: ( ( ( LeftParenthesis )=>otherlv_1= LeftParenthesis ) ( ( (lv_args_2_0= ruleAnnotationArgument ) ) (otherlv_3= Comma ( (lv_args_4_0= ruleAnnotationArgument ) ) )* )? otherlv_5= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA431_1 = input.LA(1);

                         
                        int index431_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 93;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index431_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 431, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_324s = "\12\uffff";
    static final String dfa_325s = "\1\uffff\7\11\2\uffff";
    static final String dfa_326s = "\1\10\7\4\2\uffff";
    static final String dfa_327s = "\1\176\7\u00a4\2\uffff";
    static final String dfa_328s = "\10\uffff\1\1\1\2";
    static final String dfa_329s = "\12\uffff}>";
    static final String[] dfa_330s = {
            "\1\4\7\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\112\uffff\1\7",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "\112\11\1\uffff\23\11\1\10\17\11\3\uffff\1\11\1\uffff\4\11\1\uffff\1\11\1\uffff\1\11\2\uffff\1\11\11\uffff\2\11\7\uffff\1\11\1\uffff\1\11\1\uffff\1\11\13\uffff\1\11",
            "",
            ""
    };

    static final short[] dfa_324 = DFA.unpackEncodedString(dfa_324s);
    static final short[] dfa_325 = DFA.unpackEncodedString(dfa_325s);
    static final char[] dfa_326 = DFA.unpackEncodedStringToUnsignedChars(dfa_326s);
    static final char[] dfa_327 = DFA.unpackEncodedStringToUnsignedChars(dfa_327s);
    static final short[] dfa_328 = DFA.unpackEncodedString(dfa_328s);
    static final short[] dfa_329 = DFA.unpackEncodedString(dfa_329s);
    static final short[][] dfa_330 = unpackEncodedStringArray(dfa_330s);

    class DFA437 extends DFA {

        public DFA437(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 437;
            this.eot = dfa_324;
            this.eof = dfa_325;
            this.min = dfa_326;
            this.max = dfa_327;
            this.accept = dfa_328;
            this.special = dfa_329;
            this.transition = dfa_330;
        }
        public String getDescription() {
            return "27798:3: ( ( ( ruleTypeReferenceName ) ) otherlv_1= FullStop )?";
        }
    }
    static final String dfa_331s = "\1\4\1\uffff\30\0\2\uffff\60\0\4\uffff";
    static final String dfa_332s = "\1\u0094\1\uffff\30\0\2\uffff\60\0\4\uffff";
    static final String dfa_333s = "\1\uffff\1\1\30\uffff\2\4\60\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_334s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\4\uffff}>";
    static final String[] dfa_335s = {
            "\1\27\1\24\1\102\1\56\1\15\1\103\1\4\1\7\1\41\1\42\1\6\1\52\1\17\1\47\1\50\1\2\1\3\1\43\1\46\1\54\1\5\1\60\1\10\1\62\1\16\1\65\1\34\1\14\1\35\1\37\1\40\1\11\1\74\1\61\1\63\1\26\1\67\1\71\1\13\1\36\1\45\1\75\1\100\1\72\1\22\1\73\1\23\1\12\1\70\4\uffff\1\51\1\30\1\76\1\57\1\104\1\31\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\5\uffff\1\114\1\uffff\1\33\7\uffff\1\32\3\uffff\1\1\1\113\2\uffff\1\25\2\uffff\1\21\3\uffff\1\106\1\uffff\1\111\1\uffff\1\110\2\uffff\1\112\1\uffff\1\20\2\uffff\1\105\22\uffff\1\107",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_331 = DFA.unpackEncodedStringToUnsignedChars(dfa_331s);
    static final char[] dfa_332 = DFA.unpackEncodedStringToUnsignedChars(dfa_332s);
    static final short[] dfa_333 = DFA.unpackEncodedString(dfa_333s);
    static final short[] dfa_334 = DFA.unpackEncodedString(dfa_334s);
    static final short[][] dfa_335 = unpackEncodedStringArray(dfa_335s);

    class DFA474 extends DFA {

        public DFA474(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 474;
            this.eot = dfa_310;
            this.eof = dfa_310;
            this.min = dfa_331;
            this.max = dfa_332;
            this.accept = dfa_333;
            this.special = dfa_334;
            this.transition = dfa_335;
        }
        public String getDescription() {
            return "29053:2: (this_AnnotatedN4MemberDeclaration_0= ruleAnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=>this_N4GetterDeclaration_1= ruleN4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= ruleN4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= ruleN4MethodDeclaration ) | this_N4FieldDeclaration_4= ruleN4FieldDeclaration | this_N4CallableConstructorDeclaration_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA474_0 = input.LA(1);

                         
                        int index474_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_0>=4 && LA474_0<=126 && (s=T2S.M_41[LA474_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA474_0==LessThanSign) && (synpred280_InternalN4JSParser())) {s = 26;}

                        else if ( (LA474_0==Asterisk) && (synpred280_InternalN4JSParser())) {s = 27;}

                        
                        else if ((LA474_0>=6 && LA474_0<=148 && (s=T2S.M_42[LA474_0-(6)])>=0)) { /* 49 cases */ }
                        input.seek(index474_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA474_2 = input.LA(1);

                         
                        int index474_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA474_3 = input.LA(1);

                         
                        int index474_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA474_4 = input.LA(1);

                         
                        int index474_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA474_5 = input.LA(1);

                         
                        int index474_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA474_6 = input.LA(1);

                         
                        int index474_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA474_7 = input.LA(1);

                         
                        int index474_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA474_8 = input.LA(1);

                         
                        int index474_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA474_9 = input.LA(1);

                         
                        int index474_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA474_10 = input.LA(1);

                         
                        int index474_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA474_11 = input.LA(1);

                         
                        int index474_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA474_12 = input.LA(1);

                         
                        int index474_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA474_13 = input.LA(1);

                         
                        int index474_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA474_14 = input.LA(1);

                         
                        int index474_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA474_15 = input.LA(1);

                         
                        int index474_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA474_16 = input.LA(1);

                         
                        int index474_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA474_17 = input.LA(1);

                         
                        int index474_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA474_18 = input.LA(1);

                         
                        int index474_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA474_19 = input.LA(1);

                         
                        int index474_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA474_20 = input.LA(1);

                         
                        int index474_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA474_21 = input.LA(1);

                         
                        int index474_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA474_22 = input.LA(1);

                         
                        int index474_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA474_23 = input.LA(1);

                         
                        int index474_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA474_24 = input.LA(1);

                         
                        int index474_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA474_25 = input.LA(1);

                         
                        int index474_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA474_28 = input.LA(1);

                         
                        int index474_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA474_29 = input.LA(1);

                         
                        int index474_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA474_30 = input.LA(1);

                         
                        int index474_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA474_31 = input.LA(1);

                         
                        int index474_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA474_32 = input.LA(1);

                         
                        int index474_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA474_33 = input.LA(1);

                         
                        int index474_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA474_34 = input.LA(1);

                         
                        int index474_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA474_35 = input.LA(1);

                         
                        int index474_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA474_36 = input.LA(1);

                         
                        int index474_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA474_37 = input.LA(1);

                         
                        int index474_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA474_38 = input.LA(1);

                         
                        int index474_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA474_39 = input.LA(1);

                         
                        int index474_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA474_40 = input.LA(1);

                         
                        int index474_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA474_41 = input.LA(1);

                         
                        int index474_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA474_42 = input.LA(1);

                         
                        int index474_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA474_43 = input.LA(1);

                         
                        int index474_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA474_44 = input.LA(1);

                         
                        int index474_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA474_45 = input.LA(1);

                         
                        int index474_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA474_46 = input.LA(1);

                         
                        int index474_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA474_47 = input.LA(1);

                         
                        int index474_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA474_48 = input.LA(1);

                         
                        int index474_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA474_49 = input.LA(1);

                         
                        int index474_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA474_50 = input.LA(1);

                         
                        int index474_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA474_51 = input.LA(1);

                         
                        int index474_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA474_52 = input.LA(1);

                         
                        int index474_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA474_53 = input.LA(1);

                         
                        int index474_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA474_54 = input.LA(1);

                         
                        int index474_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA474_55 = input.LA(1);

                         
                        int index474_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA474_56 = input.LA(1);

                         
                        int index474_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA474_57 = input.LA(1);

                         
                        int index474_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA474_58 = input.LA(1);

                         
                        int index474_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA474_59 = input.LA(1);

                         
                        int index474_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA474_60 = input.LA(1);

                         
                        int index474_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA474_61 = input.LA(1);

                         
                        int index474_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA474_62 = input.LA(1);

                         
                        int index474_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA474_63 = input.LA(1);

                         
                        int index474_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA474_64 = input.LA(1);

                         
                        int index474_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA474_65 = input.LA(1);

                         
                        int index474_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA474_66 = input.LA(1);

                         
                        int index474_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA474_67 = input.LA(1);

                         
                        int index474_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA474_68 = input.LA(1);

                         
                        int index474_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA474_69 = input.LA(1);

                         
                        int index474_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA474_70 = input.LA(1);

                         
                        int index474_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA474_71 = input.LA(1);

                         
                        int index474_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA474_72 = input.LA(1);

                         
                        int index474_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_72);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA474_73 = input.LA(1);

                         
                        int index474_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_73);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA474_74 = input.LA(1);

                         
                        int index474_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_74);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA474_75 = input.LA(1);

                         
                        int index474_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index474_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 474, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA475 extends DFA {

        public DFA475(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 475;
            this.eot = dfa_310;
            this.eof = dfa_310;
            this.min = dfa_331;
            this.max = dfa_332;
            this.accept = dfa_333;
            this.special = dfa_334;
            this.transition = dfa_335;
        }
        public String getDescription() {
            return "29329:2: (this_AnnotatedN4MemberDeclaration_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=>this_N4GetterDeclaration_1= norm1_N4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= norm1_N4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= norm1_N4MethodDeclaration ) | this_N4FieldDeclaration_4= norm1_N4FieldDeclaration | this_N4CallableConstructorDeclaration_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA475_0 = input.LA(1);

                         
                        int index475_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA475_0>=4 && LA475_0<=126 && (s=T2S.M_41[LA475_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA475_0==LessThanSign) && (synpred283_InternalN4JSParser())) {s = 26;}

                        else if ( (LA475_0==Asterisk) && (synpred283_InternalN4JSParser())) {s = 27;}

                        
                        else if ((LA475_0>=6 && LA475_0<=148 && (s=T2S.M_42[LA475_0-(6)])>=0)) { /* 49 cases */ }
                        input.seek(index475_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA475_2 = input.LA(1);

                         
                        int index475_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA475_3 = input.LA(1);

                         
                        int index475_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA475_4 = input.LA(1);

                         
                        int index475_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA475_5 = input.LA(1);

                         
                        int index475_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA475_6 = input.LA(1);

                         
                        int index475_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA475_7 = input.LA(1);

                         
                        int index475_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA475_8 = input.LA(1);

                         
                        int index475_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA475_9 = input.LA(1);

                         
                        int index475_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA475_10 = input.LA(1);

                         
                        int index475_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA475_11 = input.LA(1);

                         
                        int index475_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA475_12 = input.LA(1);

                         
                        int index475_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA475_13 = input.LA(1);

                         
                        int index475_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA475_14 = input.LA(1);

                         
                        int index475_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA475_15 = input.LA(1);

                         
                        int index475_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA475_16 = input.LA(1);

                         
                        int index475_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA475_17 = input.LA(1);

                         
                        int index475_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA475_18 = input.LA(1);

                         
                        int index475_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA475_19 = input.LA(1);

                         
                        int index475_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA475_20 = input.LA(1);

                         
                        int index475_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA475_21 = input.LA(1);

                         
                        int index475_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA475_22 = input.LA(1);

                         
                        int index475_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA475_23 = input.LA(1);

                         
                        int index475_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA475_24 = input.LA(1);

                         
                        int index475_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 77;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA475_25 = input.LA(1);

                         
                        int index475_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA475_28 = input.LA(1);

                         
                        int index475_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA475_29 = input.LA(1);

                         
                        int index475_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA475_30 = input.LA(1);

                         
                        int index475_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA475_31 = input.LA(1);

                         
                        int index475_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA475_32 = input.LA(1);

                         
                        int index475_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA475_33 = input.LA(1);

                         
                        int index475_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA475_34 = input.LA(1);

                         
                        int index475_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA475_35 = input.LA(1);

                         
                        int index475_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA475_36 = input.LA(1);

                         
                        int index475_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA475_37 = input.LA(1);

                         
                        int index475_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA475_38 = input.LA(1);

                         
                        int index475_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA475_39 = input.LA(1);

                         
                        int index475_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA475_40 = input.LA(1);

                         
                        int index475_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA475_41 = input.LA(1);

                         
                        int index475_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA475_42 = input.LA(1);

                         
                        int index475_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA475_43 = input.LA(1);

                         
                        int index475_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA475_44 = input.LA(1);

                         
                        int index475_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA475_45 = input.LA(1);

                         
                        int index475_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA475_46 = input.LA(1);

                         
                        int index475_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA475_47 = input.LA(1);

                         
                        int index475_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA475_48 = input.LA(1);

                         
                        int index475_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA475_49 = input.LA(1);

                         
                        int index475_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA475_50 = input.LA(1);

                         
                        int index475_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA475_51 = input.LA(1);

                         
                        int index475_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA475_52 = input.LA(1);

                         
                        int index475_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA475_53 = input.LA(1);

                         
                        int index475_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA475_54 = input.LA(1);

                         
                        int index475_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA475_55 = input.LA(1);

                         
                        int index475_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA475_56 = input.LA(1);

                         
                        int index475_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA475_57 = input.LA(1);

                         
                        int index475_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA475_58 = input.LA(1);

                         
                        int index475_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA475_59 = input.LA(1);

                         
                        int index475_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA475_60 = input.LA(1);

                         
                        int index475_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA475_61 = input.LA(1);

                         
                        int index475_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA475_62 = input.LA(1);

                         
                        int index475_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA475_63 = input.LA(1);

                         
                        int index475_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA475_64 = input.LA(1);

                         
                        int index475_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA475_65 = input.LA(1);

                         
                        int index475_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA475_66 = input.LA(1);

                         
                        int index475_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA475_67 = input.LA(1);

                         
                        int index475_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA475_68 = input.LA(1);

                         
                        int index475_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA475_69 = input.LA(1);

                         
                        int index475_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA475_70 = input.LA(1);

                         
                        int index475_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA475_71 = input.LA(1);

                         
                        int index475_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA475_72 = input.LA(1);

                         
                        int index475_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_72);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA475_73 = input.LA(1);

                         
                        int index475_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_73);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA475_74 = input.LA(1);

                         
                        int index475_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_74);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA475_75 = input.LA(1);

                         
                        int index475_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index475_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 475, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_336s = "\116\uffff";
    static final String dfa_337s = "\1\4\30\0\2\uffff\60\0\3\uffff";
    static final String dfa_338s = "\1\u0094\30\0\2\uffff\60\0\3\uffff";
    static final String dfa_339s = "\31\uffff\2\3\60\uffff\1\1\1\2\1\4";
    static final String dfa_340s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\3\uffff}>";
    static final String[] dfa_341s = {
            "\1\26\1\23\1\101\1\55\1\14\1\102\1\3\1\6\1\40\1\41\1\5\1\51\1\16\1\46\1\47\1\1\1\2\1\42\1\45\1\53\1\4\1\57\1\7\1\61\1\15\1\64\1\33\1\13\1\34\1\36\1\37\1\10\1\73\1\60\1\62\1\25\1\66\1\70\1\12\1\35\1\44\1\74\1\77\1\71\1\21\1\72\1\22\1\11\1\67\4\uffff\1\50\1\27\1\75\1\56\1\103\1\30\1\63\1\65\21\uffff\1\76\1\43\1\52\1\54\1\100\7\uffff\1\32\7\uffff\1\31\4\uffff\1\112\2\uffff\1\24\2\uffff\1\20\3\uffff\1\105\1\uffff\1\110\1\uffff\1\107\2\uffff\1\111\1\uffff\1\17\2\uffff\1\104\22\uffff\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_336 = DFA.unpackEncodedString(dfa_336s);
    static final char[] dfa_337 = DFA.unpackEncodedStringToUnsignedChars(dfa_337s);
    static final char[] dfa_338 = DFA.unpackEncodedStringToUnsignedChars(dfa_338s);
    static final short[] dfa_339 = DFA.unpackEncodedString(dfa_339s);
    static final short[] dfa_340 = DFA.unpackEncodedString(dfa_340s);
    static final short[][] dfa_341 = unpackEncodedStringArray(dfa_341s);

    class DFA488 extends DFA {

        public DFA488(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 488;
            this.eot = dfa_336;
            this.eof = dfa_336;
            this.min = dfa_337;
            this.max = dfa_338;
            this.accept = dfa_339;
            this.special = dfa_340;
            this.transition = dfa_341;
        }
        public String getDescription() {
            return "29620:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= ruleBlock ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= ruleFormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= ruleBlock ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeVariables_18= ruleTypeVariables[$current] )? (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_22= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_23= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_24_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_25= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_26= Semicolon )? ) | ( () this_FieldDeclarationImpl_28= ruleFieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA488_0 = input.LA(1);

                         
                        int index488_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA488_0>=4 && LA488_0<=126 && (s=T2S.M_45[LA488_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA488_0==LessThanSign) && (synpred289_InternalN4JSParser())) {s = 25;}

                        else if ( (LA488_0==Asterisk) && (synpred289_InternalN4JSParser())) {s = 26;}

                        
                        else if ((LA488_0>=6 && LA488_0<=148 && (s=T2S.M_46[LA488_0-(6)])>=0)) { /* 48 cases */ }
                        input.seek(index488_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA488_1 = input.LA(1);

                         
                        int index488_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA488_2 = input.LA(1);

                         
                        int index488_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA488_3 = input.LA(1);

                         
                        int index488_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA488_4 = input.LA(1);

                         
                        int index488_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA488_5 = input.LA(1);

                         
                        int index488_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA488_6 = input.LA(1);

                         
                        int index488_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA488_7 = input.LA(1);

                         
                        int index488_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA488_8 = input.LA(1);

                         
                        int index488_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA488_9 = input.LA(1);

                         
                        int index488_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA488_10 = input.LA(1);

                         
                        int index488_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA488_11 = input.LA(1);

                         
                        int index488_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA488_12 = input.LA(1);

                         
                        int index488_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA488_13 = input.LA(1);

                         
                        int index488_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA488_14 = input.LA(1);

                         
                        int index488_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA488_15 = input.LA(1);

                         
                        int index488_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA488_16 = input.LA(1);

                         
                        int index488_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA488_17 = input.LA(1);

                         
                        int index488_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA488_18 = input.LA(1);

                         
                        int index488_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA488_19 = input.LA(1);

                         
                        int index488_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA488_20 = input.LA(1);

                         
                        int index488_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA488_21 = input.LA(1);

                         
                        int index488_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA488_22 = input.LA(1);

                         
                        int index488_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA488_23 = input.LA(1);

                         
                        int index488_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA488_24 = input.LA(1);

                         
                        int index488_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA488_27 = input.LA(1);

                         
                        int index488_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA488_28 = input.LA(1);

                         
                        int index488_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA488_29 = input.LA(1);

                         
                        int index488_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA488_30 = input.LA(1);

                         
                        int index488_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA488_31 = input.LA(1);

                         
                        int index488_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA488_32 = input.LA(1);

                         
                        int index488_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA488_33 = input.LA(1);

                         
                        int index488_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA488_34 = input.LA(1);

                         
                        int index488_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA488_35 = input.LA(1);

                         
                        int index488_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA488_36 = input.LA(1);

                         
                        int index488_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA488_37 = input.LA(1);

                         
                        int index488_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA488_38 = input.LA(1);

                         
                        int index488_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA488_39 = input.LA(1);

                         
                        int index488_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA488_40 = input.LA(1);

                         
                        int index488_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA488_41 = input.LA(1);

                         
                        int index488_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA488_42 = input.LA(1);

                         
                        int index488_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA488_43 = input.LA(1);

                         
                        int index488_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA488_44 = input.LA(1);

                         
                        int index488_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA488_45 = input.LA(1);

                         
                        int index488_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA488_46 = input.LA(1);

                         
                        int index488_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA488_47 = input.LA(1);

                         
                        int index488_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA488_48 = input.LA(1);

                         
                        int index488_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA488_49 = input.LA(1);

                         
                        int index488_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA488_50 = input.LA(1);

                         
                        int index488_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA488_51 = input.LA(1);

                         
                        int index488_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA488_52 = input.LA(1);

                         
                        int index488_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA488_53 = input.LA(1);

                         
                        int index488_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA488_54 = input.LA(1);

                         
                        int index488_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA488_55 = input.LA(1);

                         
                        int index488_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA488_56 = input.LA(1);

                         
                        int index488_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA488_57 = input.LA(1);

                         
                        int index488_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA488_58 = input.LA(1);

                         
                        int index488_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA488_59 = input.LA(1);

                         
                        int index488_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA488_60 = input.LA(1);

                         
                        int index488_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA488_61 = input.LA(1);

                         
                        int index488_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA488_62 = input.LA(1);

                         
                        int index488_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA488_63 = input.LA(1);

                         
                        int index488_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA488_64 = input.LA(1);

                         
                        int index488_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA488_65 = input.LA(1);

                         
                        int index488_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA488_66 = input.LA(1);

                         
                        int index488_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA488_67 = input.LA(1);

                         
                        int index488_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA488_68 = input.LA(1);

                         
                        int index488_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA488_69 = input.LA(1);

                         
                        int index488_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA488_70 = input.LA(1);

                         
                        int index488_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA488_71 = input.LA(1);

                         
                        int index488_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA488_72 = input.LA(1);

                         
                        int index488_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA488_73 = input.LA(1);

                         
                        int index488_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA488_74 = input.LA(1);

                         
                        int index488_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index488_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 488, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_342s = "\1\2\120\uffff";
    static final String dfa_343s = "\1\4\1\0\117\uffff";
    static final String dfa_344s = "\1\u0094\1\0\117\uffff";
    static final String dfa_345s = "\2\uffff\1\2\115\uffff\1\1";
    static final String dfa_346s = "\1\uffff\1\0\117\uffff}>";
    static final String[] dfa_347s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\22\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_342 = DFA.unpackEncodedString(dfa_342s);
    static final char[] dfa_343 = DFA.unpackEncodedStringToUnsignedChars(dfa_343s);
    static final char[] dfa_344 = DFA.unpackEncodedStringToUnsignedChars(dfa_344s);
    static final short[] dfa_345 = DFA.unpackEncodedString(dfa_345s);
    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final short[][] dfa_347 = unpackEncodedStringArray(dfa_347s);

    class DFA477 extends DFA {

        public DFA477(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 477;
            this.eot = dfa_91;
            this.eof = dfa_342;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_346;
            this.transition = dfa_347;
        }
        public String getDescription() {
            return "29674:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA477_1 = input.LA(1);

                         
                        int index477_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index477_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 477, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA481 extends DFA {

        public DFA481(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 481;
            this.eot = dfa_91;
            this.eof = dfa_342;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_346;
            this.transition = dfa_347;
        }
        public String getDescription() {
            return "29955:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA481_1 = input.LA(1);

                         
                        int index481_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred288_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index481_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 481, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_348s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_349s = "\1\u0094\1\uffff\10\u0094\1\uffff";
    static final String dfa_350s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_351s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\22\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12",
            ""
    };
    static final char[] dfa_348 = DFA.unpackEncodedStringToUnsignedChars(dfa_348s);
    static final char[] dfa_349 = DFA.unpackEncodedStringToUnsignedChars(dfa_349s);
    static final short[] dfa_350 = DFA.unpackEncodedString(dfa_350s);
    static final short[][] dfa_351 = unpackEncodedStringArray(dfa_351s);

    class DFA483 extends DFA {

        public DFA483(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 483;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "()* loopback of 30039:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }

    class DFA485 extends DFA {

        public DFA485(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 485;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "30071:7: (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA501 extends DFA {

        public DFA501(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 501;
            this.eot = dfa_336;
            this.eof = dfa_336;
            this.min = dfa_337;
            this.max = dfa_338;
            this.accept = dfa_339;
            this.special = dfa_340;
            this.transition = dfa_341;
        }
        public String getDescription() {
            return "30234:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= norm1_Block ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= norm1_FormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= norm1_Block ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeVariables[null] )? ( ruleBogusTypeRefFragment[null] )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeVariables_18= ruleTypeVariables[$current] )? (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_22= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_23= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_24_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_25= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_26= Semicolon )? ) | ( () this_FieldDeclarationImpl_28= norm1_FieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA501_0 = input.LA(1);

                         
                        int index501_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA501_0>=4 && LA501_0<=126 && (s=T2S.M_45[LA501_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA501_0==LessThanSign) && (synpred297_InternalN4JSParser())) {s = 25;}

                        else if ( (LA501_0==Asterisk) && (synpred297_InternalN4JSParser())) {s = 26;}

                        
                        else if ((LA501_0>=6 && LA501_0<=148 && (s=T2S.M_46[LA501_0-(6)])>=0)) { /* 48 cases */ }
                        input.seek(index501_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA501_1 = input.LA(1);

                         
                        int index501_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA501_2 = input.LA(1);

                         
                        int index501_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA501_3 = input.LA(1);

                         
                        int index501_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA501_4 = input.LA(1);

                         
                        int index501_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA501_5 = input.LA(1);

                         
                        int index501_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA501_6 = input.LA(1);

                         
                        int index501_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA501_7 = input.LA(1);

                         
                        int index501_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA501_8 = input.LA(1);

                         
                        int index501_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA501_9 = input.LA(1);

                         
                        int index501_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA501_10 = input.LA(1);

                         
                        int index501_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA501_11 = input.LA(1);

                         
                        int index501_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA501_12 = input.LA(1);

                         
                        int index501_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA501_13 = input.LA(1);

                         
                        int index501_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA501_14 = input.LA(1);

                         
                        int index501_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA501_15 = input.LA(1);

                         
                        int index501_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA501_16 = input.LA(1);

                         
                        int index501_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA501_17 = input.LA(1);

                         
                        int index501_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA501_18 = input.LA(1);

                         
                        int index501_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA501_19 = input.LA(1);

                         
                        int index501_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA501_20 = input.LA(1);

                         
                        int index501_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA501_21 = input.LA(1);

                         
                        int index501_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA501_22 = input.LA(1);

                         
                        int index501_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA501_23 = input.LA(1);

                         
                        int index501_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA501_24 = input.LA(1);

                         
                        int index501_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA501_27 = input.LA(1);

                         
                        int index501_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA501_28 = input.LA(1);

                         
                        int index501_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA501_29 = input.LA(1);

                         
                        int index501_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA501_30 = input.LA(1);

                         
                        int index501_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA501_31 = input.LA(1);

                         
                        int index501_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA501_32 = input.LA(1);

                         
                        int index501_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA501_33 = input.LA(1);

                         
                        int index501_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA501_34 = input.LA(1);

                         
                        int index501_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA501_35 = input.LA(1);

                         
                        int index501_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA501_36 = input.LA(1);

                         
                        int index501_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA501_37 = input.LA(1);

                         
                        int index501_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA501_38 = input.LA(1);

                         
                        int index501_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA501_39 = input.LA(1);

                         
                        int index501_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA501_40 = input.LA(1);

                         
                        int index501_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA501_41 = input.LA(1);

                         
                        int index501_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA501_42 = input.LA(1);

                         
                        int index501_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA501_43 = input.LA(1);

                         
                        int index501_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA501_44 = input.LA(1);

                         
                        int index501_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA501_45 = input.LA(1);

                         
                        int index501_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA501_46 = input.LA(1);

                         
                        int index501_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA501_47 = input.LA(1);

                         
                        int index501_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA501_48 = input.LA(1);

                         
                        int index501_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA501_49 = input.LA(1);

                         
                        int index501_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA501_50 = input.LA(1);

                         
                        int index501_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA501_51 = input.LA(1);

                         
                        int index501_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA501_52 = input.LA(1);

                         
                        int index501_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA501_53 = input.LA(1);

                         
                        int index501_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA501_54 = input.LA(1);

                         
                        int index501_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA501_55 = input.LA(1);

                         
                        int index501_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA501_56 = input.LA(1);

                         
                        int index501_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA501_57 = input.LA(1);

                         
                        int index501_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA501_58 = input.LA(1);

                         
                        int index501_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA501_59 = input.LA(1);

                         
                        int index501_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA501_60 = input.LA(1);

                         
                        int index501_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA501_61 = input.LA(1);

                         
                        int index501_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA501_62 = input.LA(1);

                         
                        int index501_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA501_63 = input.LA(1);

                         
                        int index501_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA501_64 = input.LA(1);

                         
                        int index501_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA501_65 = input.LA(1);

                         
                        int index501_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA501_66 = input.LA(1);

                         
                        int index501_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA501_67 = input.LA(1);

                         
                        int index501_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA501_68 = input.LA(1);

                         
                        int index501_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA501_69 = input.LA(1);

                         
                        int index501_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA501_70 = input.LA(1);

                         
                        int index501_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA501_71 = input.LA(1);

                         
                        int index501_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA501_72 = input.LA(1);

                         
                        int index501_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA501_73 = input.LA(1);

                         
                        int index501_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA501_74 = input.LA(1);

                         
                        int index501_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 77;}

                         
                        input.seek(index501_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 501, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_352s = "\1\4\1\0\116\uffff";
    static final String dfa_353s = "\1\u0094\1\0\116\uffff";
    static final String dfa_354s = "\2\uffff\1\2\114\uffff\1\1";
    static final String dfa_355s = "\1\uffff\1\0\116\uffff}>";
    static final String[] dfa_356s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\22\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_352 = DFA.unpackEncodedStringToUnsignedChars(dfa_352s);
    static final char[] dfa_353 = DFA.unpackEncodedStringToUnsignedChars(dfa_353s);
    static final short[] dfa_354 = DFA.unpackEncodedString(dfa_354s);
    static final short[] dfa_355 = DFA.unpackEncodedString(dfa_355s);
    static final short[][] dfa_356 = unpackEncodedStringArray(dfa_356s);

    class DFA490 extends DFA {

        public DFA490(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 490;
            this.eot = dfa_310;
            this.eof = dfa_310;
            this.min = dfa_352;
            this.max = dfa_353;
            this.accept = dfa_354;
            this.special = dfa_355;
            this.transition = dfa_356;
        }
        public String getDescription() {
            return "30288:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA490_1 = input.LA(1);

                         
                        int index490_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index490_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 490, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA494 extends DFA {

        public DFA494(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 494;
            this.eot = dfa_310;
            this.eof = dfa_310;
            this.min = dfa_352;
            this.max = dfa_353;
            this.accept = dfa_354;
            this.special = dfa_355;
            this.transition = dfa_356;
        }
        public String getDescription() {
            return "30569:5: ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA494_1 = input.LA(1);

                         
                        int index494_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index494_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 494, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA496 extends DFA {

        public DFA496(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 496;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "()* loopback of 30653:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }

    class DFA498 extends DFA {

        public DFA498(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 498;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "30685:7: (this_BogusTypeRefFragment_19= ruleBogusTypeRefFragment[$current] )?";
        }
    }
    static final String dfa_357s = "\2\uffff\10\1\1\uffff";
    static final String dfa_358s = "\1\u0094\1\uffff\10\u0098\1\uffff";
    static final String[] dfa_359s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\24\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\22\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\22\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final char[] dfa_358 = DFA.unpackEncodedStringToUnsignedChars(dfa_358s);
    static final short[][] dfa_359 = unpackEncodedStringArray(dfa_359s);

    class DFA502 extends DFA {

        public DFA502(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 502;
            this.eot = dfa_13;
            this.eof = dfa_357;
            this.min = dfa_348;
            this.max = dfa_358;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_359;
        }
        public String getDescription() {
            return "()* loopback of 30840:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_360s = "\1\uffff\7\16\1\uffff\5\16\1\uffff\1\16";
    static final String dfa_361s = "\1\u0094\7\u00a4\1\uffff\5\u0098\1\uffff\1\u0098";
    static final String[] dfa_362s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\22\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\2\16\1\10\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16\13\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\2\16\1\uffff\1\16\1\uffff\1\17\1\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16",
            "\2\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\10\1\uffff\1\16\45\uffff\1\16\1\uffff\1\16",
            "\2\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\10\1\uffff\1\16\45\uffff\1\16\1\uffff\1\16",
            "\2\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\10\1\uffff\1\16\45\uffff\1\16\1\uffff\1\16",
            "\2\16\1\uffff\1\16\1\uffff\1\16\4\uffff\1\10\1\uffff\1\16\45\uffff\1\16\1\uffff\1\16",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\15\uffff\2\16\1\uffff\1\16\3\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\22\uffff\1\10\1\uffff\1\16\1\uffff\1\16"
    };
    static final short[] dfa_360 = DFA.unpackEncodedString(dfa_360s);
    static final char[] dfa_361 = DFA.unpackEncodedStringToUnsignedChars(dfa_361s);
    static final short[][] dfa_362 = unpackEncodedStringArray(dfa_362s);

    class DFA503 extends DFA {

        public DFA503(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 503;
            this.eot = dfa_214;
            this.eof = dfa_360;
            this.min = dfa_215;
            this.max = dfa_361;
            this.accept = dfa_217;
            this.special = dfa_218;
            this.transition = dfa_362;
        }
        public String getDescription() {
            return "30859:3: (this_BogusTypeRefFragment_1= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA507 extends DFA {

        public DFA507(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 507;
            this.eot = dfa_13;
            this.eof = dfa_357;
            this.min = dfa_348;
            this.max = dfa_358;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_359;
        }
        public String getDescription() {
            return "()* loopback of 30963:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }

    class DFA508 extends DFA {

        public DFA508(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 508;
            this.eot = dfa_214;
            this.eof = dfa_360;
            this.min = dfa_215;
            this.max = dfa_361;
            this.accept = dfa_217;
            this.special = dfa_218;
            this.transition = dfa_362;
        }
        public String getDescription() {
            return "30982:3: (this_BogusTypeRefFragment_1= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA512 extends DFA {

        public DFA512(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 512;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "()* loopback of 31210:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }

    class DFA514 extends DFA {

        public DFA514(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 514;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "31242:5: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA517 extends DFA {

        public DFA517(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 517;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "()* loopback of 31424:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }

    class DFA519 extends DFA {

        public DFA519(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 519;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "31456:5: (this_BogusTypeRefFragment_3= ruleBogusTypeRefFragment[$current] )?";
        }
    }

    class DFA527 extends DFA {

        public DFA527(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 527;
            this.eot = dfa_91;
            this.eof = dfa_342;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_346;
            this.transition = dfa_347;
        }
        public String getDescription() {
            return "31776:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA527_1 = input.LA(1);

                         
                        int index527_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index527_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 527, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA529 extends DFA {

        public DFA529(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 529;
            this.eot = dfa_91;
            this.eof = dfa_342;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_346;
            this.transition = dfa_347;
        }
        public String getDescription() {
            return "31838:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA529_1 = input.LA(1);

                         
                        int index529_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index529_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 529, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA531 extends DFA {

        public DFA531(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 531;
            this.eot = dfa_91;
            this.eof = dfa_342;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_346;
            this.transition = dfa_347;
        }
        public String getDescription() {
            return "31934:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_3_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA531_1 = input.LA(1);

                         
                        int index531_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index531_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 531, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA534 extends DFA {

        public DFA534(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 534;
            this.eot = dfa_310;
            this.eof = dfa_310;
            this.min = dfa_352;
            this.max = dfa_353;
            this.accept = dfa_354;
            this.special = dfa_355;
            this.transition = dfa_356;
        }
        public String getDescription() {
            return "32030:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_3_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA534_1 = input.LA(1);

                         
                        int index534_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index534_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 534, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA544 extends DFA {

        public DFA544(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 544;
            this.eot = dfa_91;
            this.eof = dfa_342;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_346;
            this.transition = dfa_347;
        }
        public String getDescription() {
            return "32497:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA544_1 = input.LA(1);

                         
                        int index544_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index544_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 544, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA548 extends DFA {

        public DFA548(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 548;
            this.eot = dfa_310;
            this.eof = dfa_310;
            this.min = dfa_352;
            this.max = dfa_353;
            this.accept = dfa_354;
            this.special = dfa_355;
            this.transition = dfa_356;
        }
        public String getDescription() {
            return "32788:3: ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA548_1 = input.LA(1);

                         
                        int index548_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index548_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 548, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_363s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_364s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_363 = DFA.unpackEncodedStringToUnsignedChars(dfa_363s);
    static final short[][] dfa_364 = unpackEncodedStringArray(dfa_364s);

    class DFA558 extends DFA {

        public DFA558(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 558;
            this.eot = dfa_181;
            this.eof = dfa_181;
            this.min = dfa_182;
            this.max = dfa_363;
            this.accept = dfa_184;
            this.special = dfa_185;
            this.transition = dfa_364;
        }
        public String getDescription() {
            return "()* loopback of 33108:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_365s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_365 = unpackEncodedStringArray(dfa_365s);

    class DFA564 extends DFA {

        public DFA564(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 564;
            this.eot = dfa_181;
            this.eof = dfa_181;
            this.min = dfa_182;
            this.max = dfa_363;
            this.accept = dfa_184;
            this.special = dfa_185;
            this.transition = dfa_365;
        }
        public String getDescription() {
            return "()* loopback of 33245:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_366s = "\111\uffff";
    static final String dfa_367s = "\1\uffff\1\107\40\uffff\1\107\4\uffff\31\107\11\uffff";
    static final String dfa_368s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\11\uffff";
    static final String dfa_369s = "\1\u0094\1\160\40\uffff\1\160\4\uffff\31\160\11\uffff";
    static final String dfa_370s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\7\1\1\2\1\1";
    static final String dfa_371s = "\1\6\1\16\40\uffff\1\7\4\uffff\1\30\1\0\1\3\1\10\1\13\1\17\1\22\1\25\1\31\1\1\1\4\1\11\1\14\1\20\1\23\1\26\1\32\1\2\1\5\1\12\1\15\1\21\1\24\1\27\1\33\11\uffff}>";
    static final String[] dfa_372s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\107\1\106\11\uffff\1\101\1\uffff\1\104\1\uffff\1\103\2\uffff\1\105\1\uffff\1\1\2\uffff\1\100\22\uffff\1\102",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_366 = DFA.unpackEncodedString(dfa_366s);
    static final short[] dfa_367 = DFA.unpackEncodedString(dfa_367s);
    static final char[] dfa_368 = DFA.unpackEncodedStringToUnsignedChars(dfa_368s);
    static final char[] dfa_369 = DFA.unpackEncodedStringToUnsignedChars(dfa_369s);
    static final short[] dfa_370 = DFA.unpackEncodedString(dfa_370s);
    static final short[] dfa_371 = DFA.unpackEncodedString(dfa_371s);
    static final short[][] dfa_372 = unpackEncodedStringArray(dfa_372s);

    class DFA568 extends DFA {

        public DFA568(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 568;
            this.eot = dfa_366;
            this.eof = dfa_367;
            this.min = dfa_368;
            this.max = dfa_369;
            this.accept = dfa_370;
            this.special = dfa_371;
            this.transition = dfa_372;
        }
        public String getDescription() {
            return "33337:2: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= ruleLiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= ruleBindingElement ) ) ) | ( (lv_value_3_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA568_40 = input.LA(1);

                         
                        int index568_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_40==EOF||LA568_40==Comma||LA568_40==EqualsSign||LA568_40==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_40==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_40);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA568_48 = input.LA(1);

                         
                        int index568_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_48==EOF||LA568_48==Comma||LA568_48==EqualsSign||LA568_48==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_48==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_48);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA568_56 = input.LA(1);

                         
                        int index568_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_56==EOF||LA568_56==Comma||LA568_56==EqualsSign||LA568_56==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_56==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_56);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA568_41 = input.LA(1);

                         
                        int index568_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_41==EOF||LA568_41==Comma||LA568_41==EqualsSign||LA568_41==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_41==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA568_49 = input.LA(1);

                         
                        int index568_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_49==EOF||LA568_49==Comma||LA568_49==EqualsSign||LA568_49==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_49==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_49);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA568_57 = input.LA(1);

                         
                        int index568_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_57==EOF||LA568_57==Comma||LA568_57==EqualsSign||LA568_57==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_57==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_57);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA568_0 = input.LA(1);

                         
                        int index568_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA568_0>=7 && LA568_0<=126 && (s=T2S.M_49[LA568_0-(7)])>=0) && (synpred322_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA568_0==Yield) ) {s = 34;}

                        else if ( (LA568_0==Null) && (synpred322_InternalN4JSParser())) {s = 35;}

                        else if ( (LA568_0==True) && (synpred322_InternalN4JSParser())) {s = 36;}

                        else if ( (LA568_0==False) && (synpred322_InternalN4JSParser())) {s = 37;}

                        else if ( (LA568_0==Enum) && (synpred322_InternalN4JSParser())) {s = 38;}

                        
                        else if ((LA568_0>=4 && LA568_0<=86 && (s=T2S.M_50[LA568_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA568_0==RULE_STRING) && (synpred322_InternalN4JSParser())) {s = 64;}

                        else if ( (LA568_0==RULE_DOUBLE) && (synpred322_InternalN4JSParser())) {s = 65;}

                        else if ( (LA568_0==RULE_INT) && (synpred322_InternalN4JSParser())) {s = 66;}

                        else if ( (LA568_0==RULE_OCTAL_INT) && (synpred322_InternalN4JSParser())) {s = 67;}

                        else if ( (LA568_0==RULE_HEX_INT) && (synpred322_InternalN4JSParser())) {s = 68;}

                        else if ( (LA568_0==RULE_SCIENTIFIC_INT) && (synpred322_InternalN4JSParser())) {s = 69;}

                        else if ( (LA568_0==LeftSquareBracket) && (synpred322_InternalN4JSParser())) {s = 70;}

                        else if ( (LA568_0==CommercialAt) ) {s = 71;}

                         
                        input.seek(index568_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA568_34 = input.LA(1);

                         
                        int index568_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_34==EOF||LA568_34==Comma||LA568_34==EqualsSign||LA568_34==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_34==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_34);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA568_42 = input.LA(1);

                         
                        int index568_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_42==EOF||LA568_42==Comma||LA568_42==EqualsSign||LA568_42==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_42==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_42);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA568_50 = input.LA(1);

                         
                        int index568_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_50==EOF||LA568_50==Comma||LA568_50==EqualsSign||LA568_50==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_50==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA568_58 = input.LA(1);

                         
                        int index568_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_58==EOF||LA568_58==Comma||LA568_58==EqualsSign||LA568_58==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_58==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_58);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA568_43 = input.LA(1);

                         
                        int index568_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_43==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                        else if ( (LA568_43==EOF||LA568_43==Comma||LA568_43==EqualsSign||LA568_43==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index568_43);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA568_51 = input.LA(1);

                         
                        int index568_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_51==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                        else if ( (LA568_51==EOF||LA568_51==Comma||LA568_51==EqualsSign||LA568_51==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index568_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA568_59 = input.LA(1);

                         
                        int index568_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_59==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                        else if ( (LA568_59==EOF||LA568_59==Comma||LA568_59==EqualsSign||LA568_59==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index568_59);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA568_1 = input.LA(1);

                         
                        int index568_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_1==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                        else if ( (LA568_1==EOF||LA568_1==Comma||LA568_1==EqualsSign||LA568_1==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index568_1);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA568_44 = input.LA(1);

                         
                        int index568_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_44==EOF||LA568_44==Comma||LA568_44==EqualsSign||LA568_44==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_44==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_44);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA568_52 = input.LA(1);

                         
                        int index568_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_52==EOF||LA568_52==Comma||LA568_52==EqualsSign||LA568_52==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_52==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_52);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA568_60 = input.LA(1);

                         
                        int index568_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_60==EOF||LA568_60==Comma||LA568_60==EqualsSign||LA568_60==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_60==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_60);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA568_45 = input.LA(1);

                         
                        int index568_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_45==EOF||LA568_45==Comma||LA568_45==EqualsSign||LA568_45==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_45==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_45);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA568_53 = input.LA(1);

                         
                        int index568_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_53==EOF||LA568_53==Comma||LA568_53==EqualsSign||LA568_53==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_53==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_53);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA568_61 = input.LA(1);

                         
                        int index568_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_61==EOF||LA568_61==Comma||LA568_61==EqualsSign||LA568_61==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_61==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_61);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA568_46 = input.LA(1);

                         
                        int index568_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_46==EOF||LA568_46==Comma||LA568_46==EqualsSign||LA568_46==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_46==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_46);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA568_54 = input.LA(1);

                         
                        int index568_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_54==EOF||LA568_54==Comma||LA568_54==EqualsSign||LA568_54==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_54==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_54);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA568_62 = input.LA(1);

                         
                        int index568_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_62==EOF||LA568_62==Comma||LA568_62==EqualsSign||LA568_62==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA568_62==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index568_62);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA568_39 = input.LA(1);

                         
                        int index568_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_39==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                        else if ( (LA568_39==EOF||LA568_39==Comma||LA568_39==EqualsSign||LA568_39==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index568_39);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA568_47 = input.LA(1);

                         
                        int index568_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_47==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                        else if ( (LA568_47==EOF||LA568_47==Comma||LA568_47==EqualsSign||LA568_47==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index568_47);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA568_55 = input.LA(1);

                         
                        int index568_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_55==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                        else if ( (LA568_55==EOF||LA568_55==Comma||LA568_55==EqualsSign||LA568_55==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index568_55);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA568_63 = input.LA(1);

                         
                        int index568_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_63==Colon) && (synpred322_InternalN4JSParser())) {s = 72;}

                        else if ( (LA568_63==EOF||LA568_63==Comma||LA568_63==EqualsSign||LA568_63==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index568_63);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 568, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_373s = "\1\4\1\140\45\uffff\31\140\11\uffff";
    static final String dfa_374s = "\1\u0094\1\160\45\uffff\31\160\11\uffff";
    static final String dfa_375s = "\2\uffff\45\1\31\uffff\7\1\1\2\1\1";
    static final String dfa_376s = "\1\27\1\17\45\uffff\1\23\1\30\1\0\1\3\1\6\1\11\1\14\1\20\1\24\1\31\1\1\1\4\1\7\1\12\1\15\1\21\1\25\1\32\1\2\1\5\1\10\1\13\1\16\1\22\1\26\11\uffff}>";
    static final String[] dfa_377s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\107\1\106\11\uffff\1\101\1\uffff\1\104\1\uffff\1\103\2\uffff\1\105\1\uffff\1\1\2\uffff\1\100\22\uffff\1\102",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "\1\107\3\uffff\1\110\2\uffff\1\107\10\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_373 = DFA.unpackEncodedStringToUnsignedChars(dfa_373s);
    static final char[] dfa_374 = DFA.unpackEncodedStringToUnsignedChars(dfa_374s);
    static final short[] dfa_375 = DFA.unpackEncodedString(dfa_375s);
    static final short[] dfa_376 = DFA.unpackEncodedString(dfa_376s);
    static final short[][] dfa_377 = unpackEncodedStringArray(dfa_377s);

    class DFA569 extends DFA {

        public DFA569(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 569;
            this.eot = dfa_366;
            this.eof = dfa_366;
            this.min = dfa_373;
            this.max = dfa_374;
            this.accept = dfa_375;
            this.special = dfa_376;
            this.transition = dfa_377;
        }
        public String getDescription() {
            return "33427:2: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= norm1_BindingElement ) ) ) | ( (lv_value_3_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA569_41 = input.LA(1);

                         
                        int index569_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_41==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_41==Comma||LA569_41==EqualsSign||LA569_41==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_41);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA569_49 = input.LA(1);

                         
                        int index569_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_49==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_49==Comma||LA569_49==EqualsSign||LA569_49==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_49);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA569_57 = input.LA(1);

                         
                        int index569_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_57==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_57==Comma||LA569_57==EqualsSign||LA569_57==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_57);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA569_42 = input.LA(1);

                         
                        int index569_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_42==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_42==Comma||LA569_42==EqualsSign||LA569_42==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA569_50 = input.LA(1);

                         
                        int index569_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_50==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_50==Comma||LA569_50==EqualsSign||LA569_50==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_50);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA569_58 = input.LA(1);

                         
                        int index569_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_58==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_58==Comma||LA569_58==EqualsSign||LA569_58==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_58);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA569_43 = input.LA(1);

                         
                        int index569_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_43==Comma||LA569_43==EqualsSign||LA569_43==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_43==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_43);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA569_51 = input.LA(1);

                         
                        int index569_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_51==Comma||LA569_51==EqualsSign||LA569_51==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_51==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_51);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA569_59 = input.LA(1);

                         
                        int index569_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_59==Comma||LA569_59==EqualsSign||LA569_59==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_59==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_59);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA569_44 = input.LA(1);

                         
                        int index569_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_44==Comma||LA569_44==EqualsSign||LA569_44==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_44==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_44);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA569_52 = input.LA(1);

                         
                        int index569_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_52==Comma||LA569_52==EqualsSign||LA569_52==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_52==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_52);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA569_60 = input.LA(1);

                         
                        int index569_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_60==Comma||LA569_60==EqualsSign||LA569_60==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_60==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_60);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA569_45 = input.LA(1);

                         
                        int index569_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_45==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_45==Comma||LA569_45==EqualsSign||LA569_45==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA569_53 = input.LA(1);

                         
                        int index569_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_53==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_53==Comma||LA569_53==EqualsSign||LA569_53==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_53);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA569_61 = input.LA(1);

                         
                        int index569_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_61==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_61==Comma||LA569_61==EqualsSign||LA569_61==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_61);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA569_1 = input.LA(1);

                         
                        int index569_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_1==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_1==Comma||LA569_1==EqualsSign||LA569_1==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_1);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA569_46 = input.LA(1);

                         
                        int index569_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_46==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_46==Comma||LA569_46==EqualsSign||LA569_46==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_46);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA569_54 = input.LA(1);

                         
                        int index569_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_54==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_54==Comma||LA569_54==EqualsSign||LA569_54==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA569_62 = input.LA(1);

                         
                        int index569_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_62==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                        else if ( (LA569_62==Comma||LA569_62==EqualsSign||LA569_62==RightCurlyBracket) ) {s = 71;}

                         
                        input.seek(index569_62);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA569_39 = input.LA(1);

                         
                        int index569_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_39==Comma||LA569_39==EqualsSign||LA569_39==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_39==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_39);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA569_47 = input.LA(1);

                         
                        int index569_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_47==Comma||LA569_47==EqualsSign||LA569_47==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_47==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_47);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA569_55 = input.LA(1);

                         
                        int index569_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_55==Comma||LA569_55==EqualsSign||LA569_55==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_55==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_55);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA569_63 = input.LA(1);

                         
                        int index569_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_63==Comma||LA569_63==EqualsSign||LA569_63==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_63==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_63);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA569_0 = input.LA(1);

                         
                        int index569_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA569_0>=7 && LA569_0<=126 && (s=T2S.M_51[LA569_0-(7)])>=0) && (synpred323_InternalN4JSParser())) { /* 38 cases */ }
                        
                        else if ((LA569_0>=4 && LA569_0<=86 && (s=T2S.M_50[LA569_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA569_0==RULE_STRING) && (synpred323_InternalN4JSParser())) {s = 64;}

                        else if ( (LA569_0==RULE_DOUBLE) && (synpred323_InternalN4JSParser())) {s = 65;}

                        else if ( (LA569_0==RULE_INT) && (synpred323_InternalN4JSParser())) {s = 66;}

                        else if ( (LA569_0==RULE_OCTAL_INT) && (synpred323_InternalN4JSParser())) {s = 67;}

                        else if ( (LA569_0==RULE_HEX_INT) && (synpred323_InternalN4JSParser())) {s = 68;}

                        else if ( (LA569_0==RULE_SCIENTIFIC_INT) && (synpred323_InternalN4JSParser())) {s = 69;}

                        else if ( (LA569_0==LeftSquareBracket) && (synpred323_InternalN4JSParser())) {s = 70;}

                        else if ( (LA569_0==CommercialAt) ) {s = 71;}

                         
                        input.seek(index569_0);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA569_40 = input.LA(1);

                         
                        int index569_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_40==Comma||LA569_40==EqualsSign||LA569_40==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_40==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_40);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA569_48 = input.LA(1);

                         
                        int index569_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_48==Comma||LA569_48==EqualsSign||LA569_48==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_48==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_48);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA569_56 = input.LA(1);

                         
                        int index569_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_56==Comma||LA569_56==EqualsSign||LA569_56==RightCurlyBracket) ) {s = 71;}

                        else if ( (LA569_56==Colon) && (synpred323_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index569_56);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 569, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_378s = "\107\uffff";
    static final String dfa_379s = "\1\106\106\uffff";
    static final String dfa_380s = "\1\4\6\uffff\77\0\1\uffff";
    static final String dfa_381s = "\1\u0094\6\uffff\77\0\1\uffff";
    static final String dfa_382s = "\1\uffff\6\1\77\uffff\1\2";
    static final String dfa_383s = "\1\40\6\uffff\1\77\1\34\1\24\1\14\1\4\1\72\1\63\1\54\1\45\1\35\1\25\1\15\1\5\1\73\1\64\1\55\1\46\1\33\1\23\1\13\1\3\1\74\1\65\1\56\1\47\1\36\1\26\1\16\1\6\1\75\1\66\1\57\1\50\1\37\1\27\1\17\1\7\1\76\1\41\1\30\1\20\1\10\1\0\1\67\1\60\1\51\1\42\1\31\1\21\1\11\1\1\1\70\1\61\1\52\1\43\1\32\1\22\1\12\1\2\1\71\1\62\1\53\1\44\1\uffff}>";
    static final String[] dfa_384s = {
            "\1\73\1\66\1\100\1\33\1\75\1\101\1\103\1\62\1\15\1\16\1\61\1\27\1\17\1\24\1\25\1\102\1\60\1\20\1\23\1\31\1\104\1\35\1\63\1\37\1\70\1\43\1\77\1\76\1\10\1\12\1\13\1\14\1\53\1\36\1\41\1\72\1\46\1\50\1\74\1\11\1\22\1\54\1\65\1\51\1\40\1\52\1\71\1\45\1\47\4\uffff\1\26\1\55\1\57\1\34\1\105\1\56\1\42\1\44\7\uffff\1\106\11\uffff\1\64\1\21\1\30\1\32\1\67\12\uffff\1\106\1\uffff\1\106\3\uffff\2\106\5\uffff\1\106\10\uffff\1\2\1\3\1\4\1\6\1\uffff\1\5\1\uffff\1\7\25\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_378 = DFA.unpackEncodedString(dfa_378s);
    static final short[] dfa_379 = DFA.unpackEncodedString(dfa_379s);
    static final char[] dfa_380 = DFA.unpackEncodedStringToUnsignedChars(dfa_380s);
    static final char[] dfa_381 = DFA.unpackEncodedStringToUnsignedChars(dfa_381s);
    static final short[] dfa_382 = DFA.unpackEncodedString(dfa_382s);
    static final short[] dfa_383 = DFA.unpackEncodedString(dfa_383s);
    static final short[][] dfa_384 = unpackEncodedStringArray(dfa_384s);

    class DFA587 extends DFA {

        public DFA587(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 587;
            this.eot = dfa_378;
            this.eof = dfa_379;
            this.min = dfa_380;
            this.max = dfa_381;
            this.accept = dfa_382;
            this.special = dfa_383;
            this.transition = dfa_384;
        }
        public String getDescription() {
            return "34673:4: ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | RULE_INT | RULE_HEX_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_SCIENTIFIC_INT | RULE_LEGACY_OCTAL_INT | RULE_IDENTIFIER )=> (this_INT_3= RULE_INT | this_HEX_INT_4= RULE_HEX_INT | this_BINARY_INT_5= RULE_BINARY_INT | this_OCTAL_INT_6= RULE_OCTAL_INT | this_SCIENTIFIC_INT_7= RULE_SCIENTIFIC_INT | this_LEGACY_OCTAL_INT_8= RULE_LEGACY_OCTAL_INT | this_IdentifierName_9= ruleIdentifierName ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA587_49 = input.LA(1);

                         
                        int index587_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_49);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA587_57 = input.LA(1);

                         
                        int index587_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_57);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA587_65 = input.LA(1);

                         
                        int index587_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_65);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA587_27 = input.LA(1);

                         
                        int index587_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_27);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA587_11 = input.LA(1);

                         
                        int index587_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA587_19 = input.LA(1);

                         
                        int index587_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA587_35 = input.LA(1);

                         
                        int index587_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_35);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA587_43 = input.LA(1);

                         
                        int index587_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_43);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA587_48 = input.LA(1);

                         
                        int index587_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA587_56 = input.LA(1);

                         
                        int index587_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_56);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA587_64 = input.LA(1);

                         
                        int index587_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_64);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA587_26 = input.LA(1);

                         
                        int index587_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_26);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA587_10 = input.LA(1);

                         
                        int index587_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_10);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA587_18 = input.LA(1);

                         
                        int index587_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_18);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA587_34 = input.LA(1);

                         
                        int index587_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_34);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA587_42 = input.LA(1);

                         
                        int index587_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_42);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA587_47 = input.LA(1);

                         
                        int index587_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_47);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA587_55 = input.LA(1);

                         
                        int index587_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA587_63 = input.LA(1);

                         
                        int index587_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_63);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA587_25 = input.LA(1);

                         
                        int index587_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA587_9 = input.LA(1);

                         
                        int index587_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_9);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA587_17 = input.LA(1);

                         
                        int index587_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_17);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA587_33 = input.LA(1);

                         
                        int index587_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_33);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA587_41 = input.LA(1);

                         
                        int index587_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_41);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA587_46 = input.LA(1);

                         
                        int index587_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_46);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA587_54 = input.LA(1);

                         
                        int index587_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_54);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA587_62 = input.LA(1);

                         
                        int index587_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_62);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA587_24 = input.LA(1);

                         
                        int index587_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_24);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA587_8 = input.LA(1);

                         
                        int index587_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_8);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA587_16 = input.LA(1);

                         
                        int index587_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_16);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA587_32 = input.LA(1);

                         
                        int index587_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA587_40 = input.LA(1);

                         
                        int index587_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_40);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA587_0 = input.LA(1);

                         
                        int index587_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_0==RULE_INT) && (synpred326_InternalN4JSParser())) {s = 1;}

                        else if ( (LA587_0==RULE_HEX_INT) && (synpred326_InternalN4JSParser())) {s = 2;}

                        else if ( (LA587_0==RULE_BINARY_INT) && (synpred326_InternalN4JSParser())) {s = 3;}

                        else if ( (LA587_0==RULE_OCTAL_INT) && (synpred326_InternalN4JSParser())) {s = 4;}

                        else if ( (LA587_0==RULE_SCIENTIFIC_INT) && (synpred326_InternalN4JSParser())) {s = 5;}

                        else if ( (LA587_0==RULE_LEGACY_OCTAL_INT) && (synpred326_InternalN4JSParser())) {s = 6;}

                        
                        else if ((LA587_0>=4 && LA587_0<=126 && (s=T2S.M_53[LA587_0-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA587_0==EOF||LA587_0==HyphenMinusHyphenMinus||LA587_0==HyphenMinus||LA587_0==Solidus||(LA587_0>=EqualsSign && LA587_0<=GreaterThanSign)||LA587_0==LeftCurlyBracket) ) {s = 70;}

                         
                        input.seek(index587_0);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA587_45 = input.LA(1);

                         
                        int index587_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_45);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA587_53 = input.LA(1);

                         
                        int index587_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_53);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA587_61 = input.LA(1);

                         
                        int index587_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_61);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA587_69 = input.LA(1);

                         
                        int index587_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_69);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA587_15 = input.LA(1);

                         
                        int index587_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_15);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA587_23 = input.LA(1);

                         
                        int index587_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_23);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA587_31 = input.LA(1);

                         
                        int index587_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_31);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA587_39 = input.LA(1);

                         
                        int index587_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_39);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA587_52 = input.LA(1);

                         
                        int index587_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_52);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA587_60 = input.LA(1);

                         
                        int index587_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_60);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA587_68 = input.LA(1);

                         
                        int index587_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_68);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA587_14 = input.LA(1);

                         
                        int index587_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_14);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA587_22 = input.LA(1);

                         
                        int index587_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_22);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA587_30 = input.LA(1);

                         
                        int index587_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_30);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA587_38 = input.LA(1);

                         
                        int index587_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_38);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA587_51 = input.LA(1);

                         
                        int index587_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA587_59 = input.LA(1);

                         
                        int index587_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_59);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA587_67 = input.LA(1);

                         
                        int index587_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_67);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA587_13 = input.LA(1);

                         
                        int index587_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_13);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA587_21 = input.LA(1);

                         
                        int index587_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_21);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA587_29 = input.LA(1);

                         
                        int index587_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_29);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA587_37 = input.LA(1);

                         
                        int index587_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_37);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA587_50 = input.LA(1);

                         
                        int index587_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_50);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA587_58 = input.LA(1);

                         
                        int index587_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA587_66 = input.LA(1);

                         
                        int index587_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_66);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA587_12 = input.LA(1);

                         
                        int index587_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_12);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA587_20 = input.LA(1);

                         
                        int index587_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_20);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA587_28 = input.LA(1);

                         
                        int index587_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_28);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA587_36 = input.LA(1);

                         
                        int index587_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_36);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA587_44 = input.LA(1);

                         
                        int index587_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_44);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA587_7 = input.LA(1);

                         
                        int index587_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_InternalN4JSParser()) ) {s = 6;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index587_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 587, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_385s = "\23\uffff";
    static final String dfa_386s = "\1\4\1\0\21\uffff";
    static final String dfa_387s = "\1\176\1\0\21\uffff";
    static final String dfa_388s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_389s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_390s = {
            "\2\3\2\uffff\1\3\7\uffff\1\3\13\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\16\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_385 = DFA.unpackEncodedString(dfa_385s);
    static final char[] dfa_386 = DFA.unpackEncodedStringToUnsignedChars(dfa_386s);
    static final char[] dfa_387 = DFA.unpackEncodedStringToUnsignedChars(dfa_387s);
    static final short[] dfa_388 = DFA.unpackEncodedString(dfa_388s);
    static final short[] dfa_389 = DFA.unpackEncodedString(dfa_389s);
    static final short[][] dfa_390 = unpackEncodedStringArray(dfa_390s);

    class DFA599 extends DFA {

        public DFA599(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 599;
            this.eot = dfa_385;
            this.eof = dfa_385;
            this.min = dfa_386;
            this.max = dfa_387;
            this.accept = dfa_388;
            this.special = dfa_389;
            this.transition = dfa_390;
        }
        public String getDescription() {
            return "35289:2: ( ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis EqualsSignGreaterThanSign ) )=>this_ArrowFunctionTypeExpression_0= ruleArrowFunctionTypeExpression ) | this_IterableTypeExpression_1= ruleIterableTypeExpression | this_TypeRefWithModifiers_2= ruleTypeRefWithModifiers | (otherlv_3= LeftParenthesis this_TypeRef_4= ruleTypeRef otherlv_5= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA599_1 = input.LA(1);

                         
                        int index599_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred330_InternalN4JSParser()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index599_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 599, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_391s = "\173\uffff";
    static final String dfa_392s = "\1\2\172\uffff";
    static final String dfa_393s = "\1\4\1\0\171\uffff";
    static final String dfa_394s = "\1\u0098\1\0\171\uffff";
    static final String dfa_395s = "\2\uffff\1\2\167\uffff\1\1";
    static final String dfa_396s = "\1\uffff\1\0\171\uffff}>";
    static final String[] dfa_397s = {
            "\112\2\1\uffff\23\2\1\uffff\6\2\1\1\10\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_391 = DFA.unpackEncodedString(dfa_391s);
    static final short[] dfa_392 = DFA.unpackEncodedString(dfa_392s);
    static final char[] dfa_393 = DFA.unpackEncodedStringToUnsignedChars(dfa_393s);
    static final char[] dfa_394 = DFA.unpackEncodedStringToUnsignedChars(dfa_394s);
    static final short[] dfa_395 = DFA.unpackEncodedString(dfa_395s);
    static final short[] dfa_396 = DFA.unpackEncodedString(dfa_396s);
    static final short[][] dfa_397 = unpackEncodedStringArray(dfa_397s);

    class DFA600 extends DFA {

        public DFA600(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 600;
            this.eot = dfa_391;
            this.eof = dfa_392;
            this.min = dfa_393;
            this.max = dfa_394;
            this.accept = dfa_395;
            this.special = dfa_396;
            this.transition = dfa_397;
        }
        public String getDescription() {
            return "35373:3: ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA600_1 = input.LA(1);

                         
                        int index600_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred331_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index600_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 600, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_398s = {
            "\112\2\1\uffff\20\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_398 = unpackEncodedStringArray(dfa_398s);

    class DFA602 extends DFA {

        public DFA602(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 602;
            this.eot = dfa_391;
            this.eof = dfa_392;
            this.min = dfa_393;
            this.max = dfa_394;
            this.accept = dfa_395;
            this.special = dfa_396;
            this.transition = dfa_398;
        }
        public String getDescription() {
            return "35430:4: ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA602_1 = input.LA(1);

                         
                        int index602_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index602_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 602, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_399s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_400s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_401s = "\1\176\1\u00a4\12\uffff\1\156\1\uffff\1\u00a4\3\156\3\u00a4\11\uffff";
    static final String dfa_402s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_403s = "\1\11\1\3\12\uffff\1\0\1\uffff\1\6\1\1\1\10\1\5\1\7\1\4\1\2\11\uffff}>";
    static final String[] dfa_404s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\1\uffff\1\34\2\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\64\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_399 = DFA.unpackEncodedString(dfa_399s);
    static final char[] dfa_400 = DFA.unpackEncodedStringToUnsignedChars(dfa_400s);
    static final char[] dfa_401 = DFA.unpackEncodedStringToUnsignedChars(dfa_401s);
    static final short[] dfa_402 = DFA.unpackEncodedString(dfa_402s);
    static final short[] dfa_403 = DFA.unpackEncodedString(dfa_403s);
    static final short[][] dfa_404 = unpackEncodedStringArray(dfa_404s);

    class DFA615 extends DFA {

        public DFA615(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 615;
            this.eot = dfa_46;
            this.eof = dfa_399;
            this.min = dfa_400;
            this.max = dfa_401;
            this.accept = dfa_402;
            this.special = dfa_403;
            this.transition = dfa_404;
        }
        public String getDescription() {
            return "36058:3: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA615_12 = input.LA(1);

                         
                        int index615_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_12==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA615_12==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index615_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA615_15 = input.LA(1);

                         
                        int index615_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_15==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA615_15==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index615_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA615_20 = input.LA(1);

                         
                        int index615_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_20==EOF||LA615_20==Ampersand||LA615_20==RightParenthesis||(LA615_20>=PlusSign && LA615_20<=Comma)||LA615_20==FullStop||(LA615_20>=LessThanSign && LA615_20<=EqualsSign)||LA615_20==QuestionMark||LA615_20==LeftSquareBracket||LA615_20==VerticalLine||LA615_20==RULE_VERSION) ) {s = 28;}

                        else if ( (LA615_20==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index615_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA615_1 = input.LA(1);

                         
                        int index615_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_1==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                        else if ( (LA615_1==EOF||LA615_1==Ampersand||LA615_1==RightParenthesis||(LA615_1>=PlusSign && LA615_1<=Comma)||LA615_1==FullStop||(LA615_1>=LessThanSign && LA615_1<=EqualsSign)||LA615_1==QuestionMark||LA615_1==LeftSquareBracket||LA615_1==VerticalLine||LA615_1==RULE_VERSION) ) {s = 28;}

                         
                        input.seek(index615_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA615_19 = input.LA(1);

                         
                        int index615_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_19==EOF||LA615_19==Ampersand||LA615_19==RightParenthesis||(LA615_19>=PlusSign && LA615_19<=Comma)||LA615_19==FullStop||(LA615_19>=LessThanSign && LA615_19<=EqualsSign)||LA615_19==QuestionMark||LA615_19==LeftSquareBracket||LA615_19==VerticalLine||LA615_19==RULE_VERSION) ) {s = 28;}

                        else if ( (LA615_19==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index615_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA615_17 = input.LA(1);

                         
                        int index615_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_17==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA615_17==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index615_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA615_14 = input.LA(1);

                         
                        int index615_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_14==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                        else if ( (LA615_14==EOF||LA615_14==Ampersand||LA615_14==RightParenthesis||(LA615_14>=PlusSign && LA615_14<=Comma)||LA615_14==FullStop||(LA615_14>=LessThanSign && LA615_14<=EqualsSign)||LA615_14==QuestionMark||LA615_14==LeftSquareBracket||LA615_14==VerticalLine||LA615_14==RULE_VERSION) ) {s = 28;}

                         
                        input.seek(index615_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA615_18 = input.LA(1);

                         
                        int index615_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_18==EOF||LA615_18==Ampersand||LA615_18==RightParenthesis||(LA615_18>=PlusSign && LA615_18<=Comma)||LA615_18==FullStop||(LA615_18>=LessThanSign && LA615_18<=EqualsSign)||LA615_18==QuestionMark||LA615_18==LeftSquareBracket||LA615_18==VerticalLine||LA615_18==RULE_VERSION) ) {s = 28;}

                        else if ( (LA615_18==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index615_18);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA615_16 = input.LA(1);

                         
                        int index615_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_16==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA615_16==Colon) && (synpred335_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index615_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA615_0 = input.LA(1);

                         
                        int index615_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA615_0>=11 && LA615_0<=126 && (s=T2S.M_54[LA615_0-(11)])>=0) && (synpred335_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA615_0==Constructor) ) {s = 12;}

                        else if ( (LA615_0==Of) && (synpred335_InternalN4JSParser())) {s = 13;}

                        else if ( (LA615_0==Target) ) {s = 14;}

                        else if ( (LA615_0==Type) ) {s = 15;}

                        else if ( (LA615_0==Union) ) {s = 16;}

                        else if ( (LA615_0==Intersection) ) {s = 17;}

                        else if ( (LA615_0==This) ) {s = 18;}

                        else if ( (LA615_0==Promisify) ) {s = 19;}

                        else if ( (LA615_0==Await) ) {s = 20;}

                        else if ( (LA615_0==Async) && (synpred335_InternalN4JSParser())) {s = 21;}

                        else if ( (LA615_0==Implements) && (synpred335_InternalN4JSParser())) {s = 22;}

                        else if ( (LA615_0==Interface) && (synpred335_InternalN4JSParser())) {s = 23;}

                        else if ( (LA615_0==Private) && (synpred335_InternalN4JSParser())) {s = 24;}

                        else if ( (LA615_0==Protected) && (synpred335_InternalN4JSParser())) {s = 25;}

                        else if ( (LA615_0==Public) && (synpred335_InternalN4JSParser())) {s = 26;}

                        else if ( (LA615_0==Out) && (synpred335_InternalN4JSParser())) {s = 27;}

                        else if ( (LA615_0==Default||LA615_0==This_1||LA615_0==Void||LA615_0==LeftParenthesis||LA615_0==QuestionMark||LA615_0==LeftSquareBracket||LA615_0==LeftCurlyBracket||LA615_0==Tilde) ) {s = 28;}

                         
                        input.seek(index615_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 615, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_405s = "\22\uffff";
    static final String dfa_406s = "\1\uffff\7\12\3\uffff\7\12";
    static final String dfa_407s = "\1\10\7\4\1\10\2\uffff\7\4";
    static final String dfa_408s = "\1\176\7\u00a4\1\176\2\uffff\7\u00a4";
    static final String dfa_409s = "\11\uffff\1\2\1\1\7\uffff";
    static final String dfa_410s = "\22\uffff}>";
    static final String[] dfa_411s = {
            "\1\4\7\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\112\uffff\1\7",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\1\16\7\uffff\1\20\13\uffff\1\17\2\uffff\1\15\12\uffff\1\14\10\uffff\1\13\112\uffff\1\21",
            "",
            "",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\112\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\11\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11"
    };

    static final short[] dfa_405 = DFA.unpackEncodedString(dfa_405s);
    static final short[] dfa_406 = DFA.unpackEncodedString(dfa_406s);
    static final char[] dfa_407 = DFA.unpackEncodedStringToUnsignedChars(dfa_407s);
    static final char[] dfa_408 = DFA.unpackEncodedStringToUnsignedChars(dfa_408s);
    static final short[] dfa_409 = DFA.unpackEncodedString(dfa_409s);
    static final short[] dfa_410 = DFA.unpackEncodedString(dfa_410s);
    static final short[][] dfa_411 = unpackEncodedStringArray(dfa_411s);

    class DFA621 extends DFA {

        public DFA621(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 621;
            this.eot = dfa_405;
            this.eof = dfa_406;
            this.min = dfa_407;
            this.max = dfa_408;
            this.accept = dfa_409;
            this.special = dfa_410;
            this.transition = dfa_411;
        }
        public String getDescription() {
            return "36402:3: (this_TypeReference_0= ruleTypeReference[$current] | ( () this_TypeReference_2= ruleTypeReference[$current] this_VersionRequest_3= ruleVersionRequest[$current] ) )";
        }
    }
    static final String[] dfa_412s = {
            "\112\2\1\uffff\23\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_412 = unpackEncodedStringArray(dfa_412s);

    class DFA622 extends DFA {

        public DFA622(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 622;
            this.eot = dfa_391;
            this.eof = dfa_392;
            this.min = dfa_393;
            this.max = dfa_394;
            this.accept = dfa_395;
            this.special = dfa_396;
            this.transition = dfa_412;
        }
        public String getDescription() {
            return "36447:3: ( ( LessThanSign )=>this_TypeArguments_4= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA622_1 = input.LA(1);

                         
                        int index622_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index622_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 622, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_413s = "\25\uffff";
    static final String dfa_414s = "\4\uffff\7\14\3\uffff\7\14";
    static final String dfa_415s = "\1\161\3\10\7\4\1\10\2\uffff\7\4";
    static final String dfa_416s = "\1\161\1\u0092\2\176\7\u00a4\1\176\2\uffff\7\u00a4";
    static final String dfa_417s = "\14\uffff\1\1\1\2\7\uffff";
    static final String dfa_418s = "\25\uffff}>";
    static final String[] dfa_419s = {
            "\1\1",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\75\uffff\1\2\14\uffff\1\12\23\uffff\1\3",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\112\uffff\1\12",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\112\uffff\1\12",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\13\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\1\21\7\uffff\1\23\13\uffff\1\22\2\uffff\1\20\12\uffff\1\17\10\uffff\1\16\112\uffff\1\24",
            "",
            "",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15",
            "\112\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\11\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\15"
    };

    static final short[] dfa_413 = DFA.unpackEncodedString(dfa_413s);
    static final short[] dfa_414 = DFA.unpackEncodedString(dfa_414s);
    static final char[] dfa_415 = DFA.unpackEncodedStringToUnsignedChars(dfa_415s);
    static final char[] dfa_416 = DFA.unpackEncodedStringToUnsignedChars(dfa_416s);
    static final short[] dfa_417 = DFA.unpackEncodedString(dfa_417s);
    static final short[] dfa_418 = DFA.unpackEncodedString(dfa_418s);
    static final short[][] dfa_419 = unpackEncodedStringArray(dfa_419s);

    class DFA623 extends DFA {

        public DFA623(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 623;
            this.eot = dfa_413;
            this.eof = dfa_414;
            this.min = dfa_415;
            this.max = dfa_416;
            this.accept = dfa_417;
            this.special = dfa_418;
            this.transition = dfa_419;
        }
        public String getDescription() {
            return "36480:3: ( ( ( (lv_definedTypingStrategy_0_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_1= ruleTypeReference[$current] ) | ( () ( (lv_definedTypingStrategy_3_0= ruleTypingStrategyUseSiteOperator ) ) this_TypeReference_4= ruleTypeReference[$current] this_VersionRequest_5= ruleVersionRequest[$current] ) )";
        }
    }

    class DFA624 extends DFA {

        public DFA624(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 624;
            this.eot = dfa_391;
            this.eof = dfa_392;
            this.min = dfa_393;
            this.max = dfa_394;
            this.accept = dfa_395;
            this.special = dfa_396;
            this.transition = dfa_412;
        }
        public String getDescription() {
            return "36565:3: ( ( LessThanSign )=>this_TypeArguments_6= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA624_1 = input.LA(1);

                         
                        int index624_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index624_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 624, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_420s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_421s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_422s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_423s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_424s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_420 = DFA.unpackEncodedStringToUnsignedChars(dfa_420s);
    static final char[] dfa_421 = DFA.unpackEncodedStringToUnsignedChars(dfa_421s);
    static final short[] dfa_422 = DFA.unpackEncodedString(dfa_422s);
    static final short[] dfa_423 = DFA.unpackEncodedString(dfa_423s);
    static final short[][] dfa_424 = unpackEncodedStringArray(dfa_424s);

    class DFA631 extends DFA {

        public DFA631(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 631;
            this.eot = dfa_245;
            this.eof = dfa_245;
            this.min = dfa_420;
            this.max = dfa_421;
            this.accept = dfa_422;
            this.special = dfa_423;
            this.transition = dfa_424;
        }
        public String getDescription() {
            return "36896:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( ruleTypeVariables[null] )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA631_0 = input.LA(1);

                         
                        int index631_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA631_0==Get) ) {s = 1;}

                        else if ( (LA631_0==Set) ) {s = 2;}

                        else if ( (LA631_0==LessThanSign) && (synpred341_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA631_0>=4 && LA631_0<=126 && (s=T2S.M_55[LA631_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index631_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA631_1 = input.LA(1);

                         
                        int index631_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_InternalN4JSParser()) ) {s = 65;}

                        else if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA631_2 = input.LA(1);

                         
                        int index631_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_InternalN4JSParser()) ) {s = 67;}

                        else if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA631_4 = input.LA(1);

                         
                        int index631_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA631_5 = input.LA(1);

                         
                        int index631_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA631_6 = input.LA(1);

                         
                        int index631_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA631_7 = input.LA(1);

                         
                        int index631_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA631_8 = input.LA(1);

                         
                        int index631_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA631_9 = input.LA(1);

                         
                        int index631_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA631_10 = input.LA(1);

                         
                        int index631_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA631_11 = input.LA(1);

                         
                        int index631_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA631_12 = input.LA(1);

                         
                        int index631_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA631_13 = input.LA(1);

                         
                        int index631_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA631_14 = input.LA(1);

                         
                        int index631_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA631_15 = input.LA(1);

                         
                        int index631_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA631_16 = input.LA(1);

                         
                        int index631_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA631_17 = input.LA(1);

                         
                        int index631_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA631_18 = input.LA(1);

                         
                        int index631_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA631_19 = input.LA(1);

                         
                        int index631_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA631_20 = input.LA(1);

                         
                        int index631_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA631_21 = input.LA(1);

                         
                        int index631_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA631_22 = input.LA(1);

                         
                        int index631_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA631_23 = input.LA(1);

                         
                        int index631_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA631_24 = input.LA(1);

                         
                        int index631_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA631_25 = input.LA(1);

                         
                        int index631_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA631_26 = input.LA(1);

                         
                        int index631_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA631_27 = input.LA(1);

                         
                        int index631_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA631_28 = input.LA(1);

                         
                        int index631_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA631_29 = input.LA(1);

                         
                        int index631_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA631_30 = input.LA(1);

                         
                        int index631_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA631_31 = input.LA(1);

                         
                        int index631_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA631_32 = input.LA(1);

                         
                        int index631_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA631_33 = input.LA(1);

                         
                        int index631_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA631_34 = input.LA(1);

                         
                        int index631_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA631_35 = input.LA(1);

                         
                        int index631_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA631_36 = input.LA(1);

                         
                        int index631_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA631_37 = input.LA(1);

                         
                        int index631_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA631_38 = input.LA(1);

                         
                        int index631_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA631_39 = input.LA(1);

                         
                        int index631_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA631_40 = input.LA(1);

                         
                        int index631_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA631_41 = input.LA(1);

                         
                        int index631_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA631_42 = input.LA(1);

                         
                        int index631_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA631_43 = input.LA(1);

                         
                        int index631_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA631_44 = input.LA(1);

                         
                        int index631_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA631_45 = input.LA(1);

                         
                        int index631_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA631_46 = input.LA(1);

                         
                        int index631_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA631_47 = input.LA(1);

                         
                        int index631_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA631_48 = input.LA(1);

                         
                        int index631_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA631_49 = input.LA(1);

                         
                        int index631_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA631_50 = input.LA(1);

                         
                        int index631_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA631_51 = input.LA(1);

                         
                        int index631_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA631_52 = input.LA(1);

                         
                        int index631_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA631_53 = input.LA(1);

                         
                        int index631_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA631_54 = input.LA(1);

                         
                        int index631_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA631_55 = input.LA(1);

                         
                        int index631_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA631_56 = input.LA(1);

                         
                        int index631_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA631_57 = input.LA(1);

                         
                        int index631_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA631_58 = input.LA(1);

                         
                        int index631_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA631_59 = input.LA(1);

                         
                        int index631_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA631_60 = input.LA(1);

                         
                        int index631_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA631_61 = input.LA(1);

                         
                        int index631_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA631_62 = input.LA(1);

                         
                        int index631_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA631_63 = input.LA(1);

                         
                        int index631_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA631_64 = input.LA(1);

                         
                        int index631_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index631_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 631, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA706 extends DFA {

        public DFA706(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 706;
            this.eot = dfa_214;
            this.eof = dfa_214;
            this.min = dfa_215;
            this.max = dfa_216;
            this.accept = dfa_217;
            this.special = dfa_218;
            this.transition = dfa_219;
        }
        public String getDescription() {
            return "14059:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA709 extends DFA {

        public DFA709(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 709;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "14269:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA711 extends DFA {

        public DFA711(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 711;
            this.eot = dfa_214;
            this.eof = dfa_214;
            this.min = dfa_215;
            this.max = dfa_216;
            this.accept = dfa_217;
            this.special = dfa_218;
            this.transition = dfa_219;
        }
        public String getDescription() {
            return "14353:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA714 extends DFA {

        public DFA714(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 714;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "14563:5: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA716 extends DFA {

        public DFA716(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 716;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_199;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "14654:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA718 extends DFA {

        public DFA718(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 718;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "15055:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA720 extends DFA {

        public DFA720(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 720;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_199;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_203;
        }
        public String getDescription() {
            return "15356:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA722 extends DFA {

        public DFA722(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 722;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "15757:7: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA759 extends DFA {

        public DFA759(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 759;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "()* loopback of 29252:5: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA761 extends DFA {

        public DFA761(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 761;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "29260:5: ( ruleBogusTypeRefFragment[null] )?";
        }
    }

    class DFA765 extends DFA {

        public DFA765(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 765;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "()* loopback of 29528:5: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA767 extends DFA {

        public DFA767(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 767;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "29536:5: ( ruleBogusTypeRefFragment[null] )?";
        }
    }

    class DFA771 extends DFA {

        public DFA771(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 771;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "()* loopback of 29993:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA773 extends DFA {

        public DFA773(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 773;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "30001:7: ( ruleBogusTypeRefFragment[null] )?";
        }
    }

    class DFA777 extends DFA {

        public DFA777(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 777;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_17;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "()* loopback of 30607:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA779 extends DFA {

        public DFA779(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 779;
            this.eot = dfa_198;
            this.eof = dfa_198;
            this.min = dfa_204;
            this.max = dfa_200;
            this.accept = dfa_201;
            this.special = dfa_202;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "30615:7: ( ruleBogusTypeRefFragment[null] )?";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0341L,0x0000000000101802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x7C0FE6BCF5B8CF70L,0x57A24C4A92440341L,0x0000000000101802L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000010440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000001000002000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925D0341L,0x0000000000101802L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000001000020000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925D0341L,0x0000001000101802L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024C0020440000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024C0000440000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0341L,0x0000001000101802L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x000D048090010130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x4002440000440000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_18;
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925D0341L,0x0000000000101802L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925D0341L,0x0000001000101802L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x7C0FC6BCF5B8CF70L,0x57A24C6A92440341L,0x0000000000101802L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C6A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x7C0FC6BCF5B8CF70L,0x57A24C6A92440341L,0x0000001000101802L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C6A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000001400000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C6A92440340L,0x0000000001501802L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C6A92440340L,0x0000001001501802L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x6C0D4680D5194F70L,0x4002480000440000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A25C4B92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4B92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A25C4B92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4B92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x52A34E40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x52A24E40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x52A24A40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24800007C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24800407C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000000L,0x0000000010004000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x7C07C6B4D598CF72L,0x57A04C4C10444200L,0x0000000000101802L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x7C07C6B4D598CF70L,0x57A04C4810440200L,0x0000000000101802L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000400L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000082L,0x0000014000000800L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000082L,0x0000014000200800L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0120000000000002L,0x0000000000001002L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x0080000000000002L,0x00000182008202B4L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4AD2440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C4A92440340L,0x0000000000101802L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C4A92440340L,0x0000001000101802L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x000F849090010130L,0x57A24A0830000200L,0x0000000000100002L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x000F849090010130L,0x57A24A0810000200L,0x0000000000100002L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x0008040090010100L,0x4000000000000000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34C40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x7C0FC6B4D599CF70L,0x57A04C4810440200L,0x0000000000101802L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24840407C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x040D048895194D30L,0x4002400000000000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24C40507C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x0000000000000000L,0x000102B000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000001400000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34C00007C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24C00007C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004108007C0001L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0000000000000002L,0x0000000400004000L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000100L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF2L,0x57800002007C0101L,0x0000000000100000L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x2000000000000000L,0x0000020000200000L});
    public static final BitSet FOLLOW_188 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_189 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_190 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_191 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_192 = new BitSet(new long[]{0x000D048090010130L,0x4002480000000000L});
    public static final BitSet FOLLOW_193 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_194 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_195 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_196 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_197 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_198 = new BitSet(new long[]{0x6C0D4680D5194F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_199 = new BitSet(new long[]{0x0008040090010102L,0x4000000000000000L});
    public static final BitSet FOLLOW_200 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_201 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_202 = new BitSet(new long[]{0x200D048090010130L,0x40025A0010200000L});
    public static final BitSet FOLLOW_203 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010040007C0001L});
    public static final BitSet FOLLOW_204 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010061007C0001L});
    public static final BitSet FOLLOW_205 = new BitSet(new long[]{0x0000000000000002L,0x0000021000000000L});
    public static final BitSet FOLLOW_206 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_207 = new BitSet(new long[]{0x0009040090010100L,0x4000020000000000L});
    public static final BitSet FOLLOW_208 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_209 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_210 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L,0x0000001000000000L});
    public static final BitSet FOLLOW_211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_212 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000100002L});
    public static final BitSet FOLLOW_213 = new BitSet(new long[]{0x7C0FC4B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000101802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 43, 38, 48, -1, 45, 49, 51, 34, -1, -1, 33, -1, -1, 56, -1, 50, 32, -1, -1, -1, 52, -1, 35, -1, 40, -1, 47, 46, -1, -1, -1, -1, -1, -1, -1, 42, -1, 28, 44, -1, -1, -1, 37, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, 29, 31, -1, 53, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54};
	final static int[] M_2 = { 6, -1, -1, -1, -1, 39, 34, 43, -1, 41, 18, 11, 14, 79, 86, 13, 24, 89, -1, -1, 9, 10, 66, 21, 20, 12, 81, 15, 83, 36, 68, 23, 42, 80, -1, 17, 16, 58, 48, 84, 38, 77, 29, 40, 90, 88, 19, 33, 60, 47, 57, 37, 67, 82, -1, -1, -1, -1, 78, 30, 26, 46, 44, 31, 85, 25, -1, -1, -1, -1, -1, 69, -1, 70, 62, -1, -1, -1, -1, -1, -1, 7, -1, 32, 76, 75, -1, 35, -1, -1, 74, -1, -1, 45, -1, -1, 71, -1, 72, -1, 61, -1, 27, 49, -1, -1, -1, 8, 63, -1, -1, 22, -1, 87, 73, -1, -1, -1, 50, -1, 55, 52, 53, 54, -1, 56, -1, 28, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 64, -1, -1, -1, -1, -1, -1, -1, 51};
	final static int[] M_3 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_4 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_6 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_9 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_16 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 50, -1, -1, -1, 26, 10, 54, -1, 34, 28, -1, 13, -1, 18, 56, 4, 1, -1, -1, 51, -1, 43, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 45, 31, 42, 19, 55, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 62, -1, -1, 3, -1, -1, 59, -1, 60, -1, 46, -1, -1, 33, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_17 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 50, -1, -1, -1, 25, 9, 54, -1, 34, 27, -1, 12, -1, 17, 56, 4, 1, -1, -1, 51, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 45, 31, 42, 18, 55, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 62, -1, -1, 3, -1, -1, 59, -1, 60, -1, 46, -1, -1, 33, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_18 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_19 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 15, 12, 61, 34, 5, 62, 64, 55, 21, 22, 54, 30, 7, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 6, 41, 60, 4, 16, 18, 19, 20, 48, 37, 39, 14, 43, 45, 3, 17, 25, 49, 58, 46, 10, 47, 11, 2, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 73, -1, -1, 13, -1, -1, 9, -1, -1, -1, 68, -1, 71, -1, 70, -1, -1, 72, -1, 8, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_22 = { 14, 11, 60, 33, 4, 61, 63, 54, 20, 21, 53, 29, 6, 26, 27, 62, 52, 22, 25, 31, 64, 35, 55, 37, 5, 40, 59, 3, 15, 17, 18, 19, 47, 36, 38, 13, 42, 44, 2, 16, 24, 48, 57, 45, 9, 46, 10, 1, 43, -1, -1, -1, -1, 28, 49, 51, 34, 65, 50, 39, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 23, 30, 32, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, 12, -1, -1, 8, -1, -1, -1, 67, -1, 70, -1, 69, -1, -1, 71, -1, 7, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68};
	final static int[] M_24 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, -1, -1, 34, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 53, -1, 43, 5, -1, 21, -1, 7, 23, -1, -1, -1, 16, 45, 4, 42, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 3, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 6, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_25 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, -1, -1, 34, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 53, -1, 43, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 45, 5, 42, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_26 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 53, -1, -1, -1, 30, 12, 57, -1, 35, 32, -1, 15, -1, 20, 59, 27, 26, -1, -1, 54, -1, 44, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 46, 5, 43, 21, 58, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, 48, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 34, 1, -1, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 7, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_27 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, 56, -1, 34, 31, -1, 14, -1, 19, 58, 26, 25, -1, -1, 53, -1, 43, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 45, 5, 42, 20, 57, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, 59, -1, 60, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, 64, -1, -1, 50, -1, -1, 61, -1, 62, -1, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, 63, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_28 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 48, 7, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 9, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_29 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 48, 7, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 9, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_30 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 54, -1, -1, -1, 31, 13, 58, -1, 36, 33, -1, 16, -1, 21, 60, 28, 27, -1, -1, 55, -1, 45, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 47, 7, 44, 22, 59, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_31 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 54, -1, -1, -1, 31, 13, 58, -1, 36, 33, -1, 16, -1, 21, 60, 28, 27, -1, -1, 55, -1, 45, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 47, 7, 44, 22, 59, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, 1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_32 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 56, -1, -1, -1, 33, 15, 60, -1, 38, 35, -1, 18, -1, 23, 62, 30, 29, -1, -1, 57, -1, 47, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 49, 8, 46, 24, 61, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 6, 1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 10, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_33 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 57, -1, -1, -1, 34, 16, 61, -1, 39, 36, -1, 19, -1, 24, 63, 31, 30, -1, -1, 58, -1, 48, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 50, 9, 47, 25, 62, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 64, -1, 65, 52, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 69, -1, -1, 55, -1, -1, 66, -1, 67, -1, 51, -1, -1, 38, 7, -1, -1, 56, 53, -1, -1, 54, -1, -1, 68, -1, -1, -1, 40, -1, 45, 42, 43, 44, -1, 46, -1, 11, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, 41};
	final static int[] M_34 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 48, 8, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 6, 1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 10, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_35 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 56, -1, -1, -1, 33, 15, 60, -1, 38, 35, -1, 18, -1, 23, 62, 30, 29, -1, -1, 57, -1, 47, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 49, 9, 46, 24, 61, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 7, 1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_36 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_37 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 34, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 45, 31, 42, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_38 = { 50, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52};
	final static int[] M_39 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, 34, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 45, 31, 42, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_41 = { 23, 20, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, 15, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 22, -1, -1, 11, -1, -1, -1, -1, -1, 18, -1, 19, 10, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 21, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16};
	final static int[] M_42 = { 66, 46, -1, 67, -1, -1, 33, 34, -1, 42, -1, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, 28, -1, 29, 31, 32, -1, 60, 49, 51, -1, 55, 57, -1, 30, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, 73, -1, 72, -1, -1, 74, -1, -1, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71};
	final static int[] M_45 = { 22, 19, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, 14, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 21, -1, -1, 10, -1, -1, -1, -1, -1, 17, -1, 18, 9, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_46 = { 65, 45, -1, 66, -1, -1, 32, 33, -1, 41, -1, 38, 39, -1, -1, 34, 37, 43, -1, 47, -1, 49, -1, 52, 27, -1, 28, 30, 31, -1, 59, 48, 50, -1, 54, 56, -1, 29, 36, 60, 63, 57, -1, 58, -1, -1, 55, -1, -1, -1, -1, 40, -1, 61, 46, 67, -1, 51, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 35, 42, 44, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, 72, -1, 71, -1, -1, 73, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_49 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_50 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_51 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_53 = { 59, 54, 64, 27, 61, 65, 67, 50, 13, 14, 49, 23, 15, 20, 21, 66, 48, 16, 19, 25, 68, 29, 51, 31, 56, 35, 63, 62, 8, 10, 11, 12, 43, 30, 33, 58, 38, 40, 60, 9, 18, 44, 53, 41, 32, 42, 57, 37, 39, -1, -1, -1, -1, 22, 45, 47, 28, 69, 46, 34, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 17, 24, 26, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
	final static int[] M_54 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_55 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}