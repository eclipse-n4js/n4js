package org.eclipse.n4js.parser.antlr.internal;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.n4js.services.N4JSGrammarAccess;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Namespace", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "QuestionMarkFullStop", "QuestionMarkQuestionMark", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_HASH_BANG", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_IDENTIFIER_PART", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_NO_WHITE_SPACE", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_IDENTIFIER", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_INT", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_HEX_INT", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=22;
    public static final int Enum=46;
    public static final int RULE_REGEX_CHAR=118;
    public static final int Import=24;
    public static final int Var=65;
    public static final int RULE_ACTUAL_TEMPLATE_END=126;
    public static final int Break=33;
    public static final int False=37;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=123;
    public static final int Throw=39;
    public static final int Private=20;
    public static final int Extends=18;
    public static final int RULE_REGEX_TAIL=122;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=54;
    public static final int GreaterThanSign=104;
    public static final int RULE_TEMPLATE_HEAD=124;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=127;
    public static final int RULE_STRUCTMODSUFFIX=133;
    public static final int RULE_EOL=154;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=125;
    public static final int Namespace=10;
    public static final int Out=62;
    public static final int RULE_ZWNJ=163;
    public static final int Project=21;
    public static final int EqualsSignEqualsSign=77;
    public static final int RULE_HASH_BANG=115;
    public static final int Switch=28;
    public static final int RULE_OCTAL_INT=143;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=137;
    public static final int Get=59;
    public static final int RULE_ML_COMMENT=152;
    public static final int LeftSquareBracket=107;
    public static final int LessThanSignLessThanSign=75;
    public static final int If=84;
    public static final int RULE_REGEX_START=121;
    public static final int Finally=19;
    public static final int Intersection=4;
    public static final int QuestionMarkQuestionMark=79;
    public static final int Set=63;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=158;
    public static final int In=85;
    public static final int Catch=34;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=146;
    public static final int RULE_TEMPLATE_MIDDLE=128;
    public static final int RULE_EXPONENT_PART=139;
    public static final int Union=40;
    public static final int Case=44;
    public static final int QuestionMarkFullStop=78;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=117;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=168;
    public static final int Target=29;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int RULE_IDENTIFIER_PART=119;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=167;
    public static final int Export=23;
    public static final int LessThanSignEqualsSign=76;
    public static final int CommercialAtCommercialAt=80;
    public static final int Solidus=99;
    public static final int RightCurlyBracket=112;
    public static final int PercentSignEqualsSign=67;
    public static final int RULE_HEX_INT=145;
    public static final int FullStop=98;
    public static final int Constructor=5;
    public static final int Abstract=12;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=147;
    public static final int Default=17;
    public static final int CommercialAt=106;
    public static final int Semicolon=101;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=114;
    public static final int Type=51;
    public static final int PlusSignPlusSign=71;
    public static final int QuestionMark=105;
    public static final int Else=45;
    public static final int RULE_HEX_DIGIT=157;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=162;
    public static final int Yield=42;
    public static final int ExclamationMarkEqualsSign=66;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=130;
    public static final int HyphenMinusHyphenMinus=73;
    public static final int New=61;
    public static final int Null=48;
    public static final int AmpersandEqualsSign=69;
    public static final int Typeof=30;
    public static final int SolidusEqualsSign=74;
    public static final int True=50;
    public static final int FullStopFullStopFullStop=55;
    public static final int RULE_NO_WHITE_SPACE=132;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=134;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=155;
    public static final int Super=38;
    public static final int Async=31;
    public static final int This=43;
    public static final int Try=64;
    public static final int Ampersand=91;
    public static final int AsteriskEqualsSign=70;
    public static final int Void=52;
    public static final int VerticalLineEqualsSign=87;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=142;
    public static final int Protected=11;
    public static final int Const=36;
    public static final int RULE_ACTUAL_REGEX_TAIL=120;
    public static final int For=58;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=160;
    public static final int Public=25;
    public static final int Do=83;
    public static final int RULE_LEGACY_OCTAL_INT=144;
    public static final int RULE_DOUBLE_STRING_CHAR=148;
    public static final int EqualsSignEqualsSignEqualsSign=57;
    public static final int RULE_TEMPLATE_END=129;
    public static final int This_1=49;
    public static final int RULE_NO_LINE_TERMINATOR=131;
    public static final int RULE_DOT_DOT=165;
    public static final int External=15;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=35;
    public static final int Static=27;
    public static final int Debugger=14;
    public static final int RULE_SINGLE_STRING_CHAR=149;
    public static final int LessThanSignLessThanSignEqualsSign=56;
    public static final int RULE_INT_SUFFIX=141;
    public static final int RULE_IDENTIFIER=135;
    public static final int RULE_ML_COMMENT_FRAGMENT=151;
    public static final int RULE_STRING=150;
    public static final int Continue=13;
    public static final int With=53;
    public static final int RULE_SL_COMMENT=153;
    public static final int Function=16;
    public static final int EqualsSign=103;
    public static final int RULE_ZWJ=164;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=161;
    public static final int AmpersandAmpersand=68;
    public static final int RULE_DOUBLE=140;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int RULE_BACKSLASH_SEQUENCE=116;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=72;
    public static final int Return=26;
    public static final int RULE_WS=156;
    public static final int RULE_BOM=166;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int While=41;
    public static final int From=47;
    public static final int RULE_ANY_OTHER=169;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=159;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=138;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=136;
    public static final int Let=60;
    public static final int Await=32;
        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }
    protected void setInRegularExpression() {}
    protected void setInTemplateSegment() {}
    protected boolean forcedRewind(int position) { return true; } // overridden in subtype
    protected void promoteEOL() {} // overridden in subtype
    protected void addASIMessage() {} // overridden in subtype
    protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    protected boolean hasDisallowedWhiteSpace() { return false; } // overridden in subtype
     	private N4JSGrammarAccess grammarAccess;
        public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }
        @Override
        protected String getFirstRuleName() {
        	return "Script";
       	}
       	@Override
       	protected N4JSGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}
    public final EObject entryRuleScript() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScript = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScript=ruleScript();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScript; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScript() throws RecognitionException {
        EObject current = null;
        Token lv_hashbang_1_0=null;
        EObject lv_annotations_2_0 = null;
        EObject lv_scriptElements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getScriptAccess().getScriptAction_0(),
              					current);
            }
            }
            int alt1=2;
            int LA1_0 = input.LA(1);
            if ( (LA1_0==RULE_HASH_BANG) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    {
                    {
                    lv_hashbang_1_0=(Token)match(input,RULE_HASH_BANG,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_hashbang_1_0, grammarAccess.getScriptAccess().getHashbangHASH_BANGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getScriptRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"hashbang",
                      						lv_hashbang_1_0,
                      						"org.eclipse.n4js.N4JS.HASH_BANG");
                    }
                    }
                    }
                    break;
            }
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==CommercialAtCommercialAt) ) {
                    alt2=1;
                }
                else if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||(LA2_0>=HyphenMinusHyphenMinus && LA2_0<=SolidusEqualsSign)||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_INT||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_BINARY_INT && LA2_0<=RULE_SCIENTIFIC_INT)||LA2_0==RULE_STRING) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getScriptAccess().getAnnotationsScriptAnnotationParserRuleCall_2_0_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_annotations_2_0=ruleScriptAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getScriptRule());
            	      						}
            	      						add(
            	      							current,
            	      							"annotations",
            	      							lv_annotations_2_0,
            	      							"org.eclipse.n4js.N4JS.ScriptAnnotation");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	case 2 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getScriptAccess().getScriptElementsScriptElementParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_scriptElements_3_0=ruleScriptElement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getScriptRule());
            	      						}
            	      						add(
            	      							current,
            	      							"scriptElements",
            	      							lv_scriptElements_3_0,
            	      							"org.eclipse.n4js.N4JS.ScriptElement");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScriptElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptElement=ruleScriptElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedScriptElement_0 = null;
        EObject this_N4NamespaceDeclaration_1 = null;
        EObject this_N4ClassDeclaration_2 = null;
        EObject this_N4InterfaceDeclaration_3 = null;
        EObject this_N4EnumDeclaration_4 = null;
        EObject this_N4TypeAliasDeclaration_5 = null;
        EObject this_ImportDeclaration_6 = null;
        EObject this_ExportDeclaration_7 = null;
        EObject this_RootStatement_8 = null;
        	enterRule();
        try {
            {
            int alt3=9;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedScriptElement_0=ruleAnnotatedScriptElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedScriptElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4NamespaceDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4NamespaceDeclaration_1=ruleN4NamespaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4NamespaceDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_2=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_3=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_4=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getN4TypeAliasDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4TypeAliasDeclaration_5=ruleN4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4TypeAliasDeclaration_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclaration_6=ruleImportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ImportDeclaration_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_7=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportDeclaration_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_8=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4NamespaceDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4NamespaceDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4NamespaceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4NamespaceDeclaration=ruleN4NamespaceDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4NamespaceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4NamespaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject lv_ownedElementsRaw_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4NamespaceDeclarationAccess().getN4NamespaceDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);
                if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                    alt4=1;
                }
                switch (alt4) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop4;
                }
            } while (true);
            otherlv_2=(Token)match(input,Namespace,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4NamespaceDeclarationAccess().getNamespaceKeyword_0_0_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
            }
            pushFollow(FOLLOW_6);
            lv_name_3_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_3_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_7); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getN4NamespaceDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);
                if ( ((LA5_0>=Interface && LA5_0<=Abstract)||(LA5_0>=External && LA5_0<=Function)||(LA5_0>=Private && LA5_0<=Project)||LA5_0==Export||LA5_0==Public||LA5_0==Static||LA5_0==Async||(LA5_0>=Class && LA5_0<=Const)||LA5_0==Enum||LA5_0==Type||LA5_0==Let||LA5_0==Var||LA5_0==CommercialAt) ) {
                    alt5=1;
                }
                switch (alt5) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getOwnedElementsRawNamespaceElementParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_7);
            	    lv_ownedElementsRaw_5_0=ruleNamespaceElement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedElementsRaw",
            	      						lv_ownedElementsRaw_5_0,
            	      						"org.eclipse.n4js.N4JS.NamespaceElement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop5;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getN4NamespaceDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4NamespaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject lv_ownedElementsRaw_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4NamespaceDeclarationAccess().getN4NamespaceDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);
                if ( ((LA6_0>=Protected && LA6_0<=Abstract)||LA6_0==External||(LA6_0>=Private && LA6_0<=Project)||LA6_0==Public||LA6_0==Static||LA6_0==Const) ) {
                    alt6=1;
                }
                switch (alt6) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_4);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop6;
                }
            } while (true);
            otherlv_2=(Token)match(input,Namespace,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4NamespaceDeclarationAccess().getNamespaceKeyword_0_0_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
            }
            pushFollow(FOLLOW_6);
            lv_name_3_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_3_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_7); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getN4NamespaceDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( ((LA7_0>=Interface && LA7_0<=Abstract)||(LA7_0>=External && LA7_0<=Function)||(LA7_0>=Private && LA7_0<=Project)||LA7_0==Export||LA7_0==Public||LA7_0==Static||LA7_0==Async||(LA7_0>=Class && LA7_0<=Const)||LA7_0==Enum||LA7_0==Type||LA7_0==Let||LA7_0==Var||LA7_0==CommercialAt) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getN4NamespaceDeclarationAccess().getOwnedElementsRawNamespaceElementParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_7);
            	    lv_ownedElementsRaw_5_0=norm1_NamespaceElement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4NamespaceDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedElementsRaw",
            	      						lv_ownedElementsRaw_5_0,
            	      						"org.eclipse.n4js.N4JS.NamespaceElement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getN4NamespaceDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamespaceElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceElement=ruleNamespaceElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedNamespaceElement_0 = null;
        EObject this_N4NamespaceDeclaration_1 = null;
        EObject this_N4ClassDeclaration_2 = null;
        EObject this_N4InterfaceDeclaration_3 = null;
        EObject this_N4EnumDeclaration_4 = null;
        EObject this_N4TypeAliasDeclaration_5 = null;
        EObject this_FunctionDeclaration_6 = null;
        EObject this_VariableStatementWithModifier_7 = null;
        EObject this_ExportDeclaration_8 = null;
        	enterRule();
        try {
            {
            int alt8=9;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getAnnotatedNamespaceElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedNamespaceElement_0=ruleAnnotatedNamespaceElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedNamespaceElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4NamespaceDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4NamespaceDeclaration_1=ruleN4NamespaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4NamespaceDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4ClassDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_2=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4InterfaceDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_3=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4EnumDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_4=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4TypeAliasDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4TypeAliasDeclaration_5=ruleN4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4TypeAliasDeclaration_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getFunctionDeclarationParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_6=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNamespaceElementAccess().getVariableStatementWithModifierParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatementWithModifier_7=ruleVariableStatementWithModifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableStatementWithModifier_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNamespaceElementAccess().getExportDeclarationParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_8=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportDeclaration_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_NamespaceElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedNamespaceElement_0 = null;
        EObject this_N4NamespaceDeclaration_1 = null;
        EObject this_N4ClassDeclaration_2 = null;
        EObject this_N4InterfaceDeclaration_3 = null;
        EObject this_N4EnumDeclaration_4 = null;
        EObject this_N4TypeAliasDeclaration_5 = null;
        EObject this_FunctionDeclaration_6 = null;
        EObject this_VariableStatementWithModifier_7 = null;
        EObject this_ExportDeclaration_8 = null;
        	enterRule();
        try {
            {
            int alt9=9;
            alt9 = dfa9.predict(input);
            switch (alt9) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getAnnotatedNamespaceElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedNamespaceElement_0=ruleAnnotatedNamespaceElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedNamespaceElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4NamespaceDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4NamespaceDeclaration_1=norm1_N4NamespaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4NamespaceDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4ClassDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_2=norm1_N4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4InterfaceDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_3=norm1_N4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4EnumDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_4=norm1_N4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getN4TypeAliasDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4TypeAliasDeclaration_5=norm1_N4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4TypeAliasDeclaration_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getNamespaceElementAccess().getFunctionDeclarationParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_6=norm1_FunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNamespaceElementAccess().getVariableStatementWithModifierParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatementWithModifier_7=norm1_VariableStatementWithModifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableStatementWithModifier_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNamespaceElementAccess().getExportDeclarationParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclaration_8=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExportDeclaration_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedScriptElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedScriptElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedScriptElement=ruleAnnotatedScriptElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedScriptElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedScriptElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_11=null;
        Token otherlv_18=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token otherlv_35=null;
        Token otherlv_38=null;
        EObject this_AnnotationList_0 = null;
        EObject this_ExportDeclarationImpl_2 = null;
        EObject this_ImportDeclarationImpl_4 = null;
        Enumerator lv_declaredModifiers_6_0 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        Enumerator lv_declaredModifiers_10_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_12_0 = null;
        AntlrDatatypeRuleToken lv_name_13_0 = null;
        EObject this_TypeParameters_14 = null;
        EObject this_ClassExtendsImplements_15 = null;
        Enumerator lv_declaredModifiers_17_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_19_0 = null;
        AntlrDatatypeRuleToken lv_name_20_0 = null;
        EObject this_TypeParameters_21 = null;
        EObject this_InterfaceExtendsList_22 = null;
        EObject this_Members_23 = null;
        Enumerator lv_declaredModifiers_25_0 = null;
        AntlrDatatypeRuleToken lv_name_27_0 = null;
        EObject lv_literals_29_0 = null;
        EObject lv_literals_31_0 = null;
        Enumerator lv_declaredModifiers_34_0 = null;
        AntlrDatatypeRuleToken lv_name_36_0 = null;
        EObject this_TypeParameters_37 = null;
        EObject lv_declaredTypeRefNode_39_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_8);
            this_AnnotationList_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
            }
            }
            int alt24=6;
            alt24 = dfa24.predict(input);
            switch (alt24) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExportDeclarationImpl_2=ruleExportDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ExportDeclarationImpl_2;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportDeclarationImpl_4=ruleImportDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ImportDeclarationImpl_4;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getFunctionDeclarationAnnotationListAction_1_2_0(),
                      							current);
                    }
                    }
                    {
                    {
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);
                        if ( ((LA10_0>=Protected && LA10_0<=Abstract)||LA10_0==External||(LA10_0>=Private && LA10_0<=Project)||LA10_0==Public||LA10_0==Static||LA10_0==Const) ) {
                            alt10=1;
                        }
                        switch (alt10) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_1_0_0_0());
                    	    }
                    	    pushFollow(FOLLOW_9);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_6_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop10;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1());
                    }
                    pushFollow(FOLLOW_9);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_AsyncNoTrailingLineBreak_7;
                      							afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      								}
                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=ruleFunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_FunctionImpl_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    int alt19=2;
                    alt19 = dfa19.predict(input);
                    switch (alt19) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4ClassDeclarationAnnotationListAction_1_3_0_0_0(),
                              									current);
                            }
                            }
                            loop11:
                            do {
                                int alt11=2;
                                int LA11_0 = input.LA(1);
                                if ( ((LA11_0>=Protected && LA11_0<=Abstract)||LA11_0==External||(LA11_0>=Private && LA11_0<=Project)||LA11_0==Public||LA11_0==Static||LA11_0==Const) ) {
                                    alt11=1;
                                }
                                switch (alt11) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_0_1_0());
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_10_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_10_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop11;
                                }
                            } while (true);
                            otherlv_11=(Token)match(input,Class,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_11, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);
                            if ( (LA12_0==Tilde) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0());
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_typingStrategy_12_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_12_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_0_4_0());
                            }
                            pushFollow(FOLLOW_12);
                            lv_name_13_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_13_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt13=2;
                            int LA13_0 = input.LA(1);
                            if ( (LA13_0==LessThanSign) ) {
                                alt13=1;
                            }
                            switch (alt13) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeParametersParserRuleCall_1_3_0_0_5());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_TypeParameters_14=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_14;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt14=2;
                            int LA14_0 = input.LA(1);
                            if ( (LA14_0==Implements||LA14_0==Extends) ) {
                                alt14=1;
                            }
                            switch (alt14) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsImplementsParserRuleCall_1_3_0_0_6());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_ClassExtendsImplements_15=ruleClassExtendsImplements(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_ClassExtendsImplements_15;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedScriptElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_3_0_1_0(),
                              									current);
                            }
                            }
                            loop15:
                            do {
                                int alt15=2;
                                int LA15_0 = input.LA(1);
                                if ( ((LA15_0>=Protected && LA15_0<=Abstract)||LA15_0==External||(LA15_0>=Private && LA15_0<=Project)||LA15_0==Public||LA15_0==Static||LA15_0==Const) ) {
                                    alt15=1;
                                }
                                switch (alt15) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_0_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_13);
                            	    lv_declaredModifiers_17_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_17_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop15;
                                }
                            } while (true);
                            otherlv_18=(Token)match(input,Interface,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_18, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                            }
                            int alt16=2;
                            int LA16_0 = input.LA(1);
                            if ( (LA16_0==Tilde) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0());
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_typingStrategy_19_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_19_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_3_0_1_4_0());
                            }
                            pushFollow(FOLLOW_12);
                            lv_name_20_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_20_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt17=2;
                            int LA17_0 = input.LA(1);
                            if ( (LA17_0==LessThanSign) ) {
                                alt17=1;
                            }
                            switch (alt17) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeParametersParserRuleCall_1_3_0_1_5());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_TypeParameters_21=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_21;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt18=2;
                            int LA18_0 = input.LA(1);
                            if ( (LA18_0==Implements||LA18_0==Extends) ) {
                                alt18=1;
                            }
                            switch (alt18) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getInterfaceExtendsListParserRuleCall_1_3_0_1_6());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_InterfaceExtendsList_22=ruleInterfaceExtendsList(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_InterfaceExtendsList_22;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_23=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_23;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getN4EnumDeclarationAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    loop20:
                    do {
                        int alt20=2;
                        int LA20_0 = input.LA(1);
                        if ( ((LA20_0>=Protected && LA20_0<=Abstract)||LA20_0==External||(LA20_0>=Private && LA20_0<=Project)||LA20_0==Public||LA20_0==Static||LA20_0==Const) ) {
                            alt20=1;
                        }
                        switch (alt20) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_4_1_0());
                    	    }
                    	    pushFollow(FOLLOW_14);
                    	    lv_declaredModifiers_25_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_25_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop20;
                        }
                    } while (true);
                    otherlv_26=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_26, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_4_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_27_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_27_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_28=(Token)match(input,LeftCurlyBracket,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_28, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_5_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_literals_29_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_29_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);
                        if ( (LA21_0==Comma) ) {
                            alt21=1;
                        }
                        switch (alt21) {
                    	case 1 :
                    	    {
                    	    otherlv_30=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_30, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_literals_31_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_31_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop21;
                        }
                    } while (true);
                    otherlv_32=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_32, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedScriptElementAccess().getN4TypeAliasDeclarationAnnotationListAction_1_5_0(),
                      							current);
                    }
                    }
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);
                        if ( ((LA22_0>=Protected && LA22_0<=Abstract)||LA22_0==External||(LA22_0>=Private && LA22_0<=Project)||LA22_0==Public||LA22_0==Static) ) {
                            alt22=1;
                        }
                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_1_5_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_declaredModifiers_34_0=ruleN4ModifierWithoutConst();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_34_0,
                    	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop22;
                        }
                    } while (true);
                    otherlv_35=(Token)match(input,Type,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedScriptElementAccess().getTypeKeyword_1_5_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getNameBindingIdentifierParserRuleCall_1_5_3_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_name_36_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_36_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt23=2;
                    int LA23_0 = input.LA(1);
                    if ( (LA23_0==LessThanSign) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedScriptElementRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getTypeParametersParserRuleCall_1_5_4());
                            }
                            pushFollow(FOLLOW_19);
                            this_TypeParameters_37=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_TypeParameters_37;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    otherlv_38=(Token)match(input,EqualsSign,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_38, grammarAccess.getAnnotatedScriptElementAccess().getEqualsSignKeyword_1_5_5());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedScriptElementAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_1_5_6_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredTypeRefNode_39_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedScriptElementRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_39_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedNamespaceElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedNamespaceElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedNamespaceElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedNamespaceElement=ruleAnnotatedNamespaceElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedNamespaceElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedNamespaceElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_7=null;
        Token otherlv_14=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token otherlv_31=null;
        Token otherlv_34=null;
        EObject this_AnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject this_FunctionImpl_4 = null;
        Enumerator lv_declaredModifiers_6_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_8_0 = null;
        AntlrDatatypeRuleToken lv_name_9_0 = null;
        EObject this_TypeParameters_10 = null;
        EObject this_ClassExtendsImplements_11 = null;
        Enumerator lv_declaredModifiers_13_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_15_0 = null;
        AntlrDatatypeRuleToken lv_name_16_0 = null;
        EObject this_TypeParameters_17 = null;
        EObject this_InterfaceExtendsList_18 = null;
        EObject this_Members_19 = null;
        Enumerator lv_declaredModifiers_21_0 = null;
        AntlrDatatypeRuleToken lv_name_23_0 = null;
        EObject lv_literals_25_0 = null;
        EObject lv_literals_27_0 = null;
        Enumerator lv_declaredModifiers_30_0 = null;
        AntlrDatatypeRuleToken lv_name_32_0 = null;
        EObject this_TypeParameters_33 = null;
        EObject lv_declaredTypeRefNode_35_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_21);
            this_AnnotationList_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
            }
            }
            int alt39=4;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedNamespaceElementAccess().getFunctionDeclarationAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    {
                    {
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);
                        if ( ((LA25_0>=Protected && LA25_0<=Abstract)||LA25_0==External||(LA25_0>=Private && LA25_0<=Project)||LA25_0==Public||LA25_0==Static||LA25_0==Const) ) {
                            alt25=1;
                        }
                        switch (alt25) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_1_0_0_0());
                    	    }
                    	    pushFollow(FOLLOW_9);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop25;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedNamespaceElementRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_1_0_1());
                    }
                    pushFollow(FOLLOW_9);
                    this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_AsyncNoTrailingLineBreak_3;
                      							afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getAnnotatedNamespaceElementRule());
                      								}
                      								newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getFunctionImplParserRuleCall_1_0_1_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_4=ruleFunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_FunctionImpl_4;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt34=2;
                    alt34 = dfa34.predict(input);
                    switch (alt34) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedNamespaceElementAccess().getN4ClassDeclarationAnnotationListAction_1_1_0_0_0(),
                              									current);
                            }
                            }
                            loop26:
                            do {
                                int alt26=2;
                                int LA26_0 = input.LA(1);
                                if ( ((LA26_0>=Protected && LA26_0<=Abstract)||LA26_0==External||(LA26_0>=Private && LA26_0<=Project)||LA26_0==Public||LA26_0==Static||LA26_0==Const) ) {
                                    alt26=1;
                                }
                                switch (alt26) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_6_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_6_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop26;
                                }
                            } while (true);
                            otherlv_7=(Token)match(input,Class,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_7, grammarAccess.getAnnotatedNamespaceElementAccess().getClassKeyword_1_1_0_0_2());
                            }
                            int alt27=2;
                            int LA27_0 = input.LA(1);
                            if ( (LA27_0==Tilde) ) {
                                alt27=1;
                            }
                            switch (alt27) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_1_0_0_3_0());
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_typingStrategy_8_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_8_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_4_0());
                            }
                            pushFollow(FOLLOW_12);
                            lv_name_9_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_9_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt28=2;
                            int LA28_0 = input.LA(1);
                            if ( (LA28_0==LessThanSign) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedNamespaceElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getTypeParametersParserRuleCall_1_1_0_0_5());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_TypeParameters_10=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_10;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt29=2;
                            int LA29_0 = input.LA(1);
                            if ( (LA29_0==Implements||LA29_0==Extends) ) {
                                alt29=1;
                            }
                            switch (alt29) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedNamespaceElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getClassExtendsImplementsParserRuleCall_1_1_0_0_6());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_ClassExtendsImplements_11=ruleClassExtendsImplements(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_ClassExtendsImplements_11;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedNamespaceElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_1_0_1_0(),
                              									current);
                            }
                            }
                            loop30:
                            do {
                                int alt30=2;
                                int LA30_0 = input.LA(1);
                                if ( ((LA30_0>=Protected && LA30_0<=Abstract)||LA30_0==External||(LA30_0>=Private && LA30_0<=Project)||LA30_0==Public||LA30_0==Static||LA30_0==Const) ) {
                                    alt30=1;
                                }
                                switch (alt30) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_13);
                            	    lv_declaredModifiers_13_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_13_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop30;
                                }
                            } while (true);
                            otherlv_14=(Token)match(input,Interface,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_14, grammarAccess.getAnnotatedNamespaceElementAccess().getInterfaceKeyword_1_1_0_1_2());
                            }
                            int alt31=2;
                            int LA31_0 = input.LA(1);
                            if ( (LA31_0==Tilde) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_1_0_1_3_0());
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_typingStrategy_15_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_15_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getNameBindingIdentifierParserRuleCall_1_1_0_1_4_0());
                            }
                            pushFollow(FOLLOW_12);
                            lv_name_16_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_16_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt32=2;
                            int LA32_0 = input.LA(1);
                            if ( (LA32_0==LessThanSign) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedNamespaceElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getTypeParametersParserRuleCall_1_1_0_1_5());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_TypeParameters_17=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_17;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt33=2;
                            int LA33_0 = input.LA(1);
                            if ( (LA33_0==Implements||LA33_0==Extends) ) {
                                alt33=1;
                            }
                            switch (alt33) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedNamespaceElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getInterfaceExtendsListParserRuleCall_1_1_0_1_6());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_InterfaceExtendsList_18=ruleInterfaceExtendsList(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_InterfaceExtendsList_18;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedNamespaceElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getMembersParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_19=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_19;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedNamespaceElementAccess().getN4EnumDeclarationAnnotationListAction_1_2_0(),
                      							current);
                    }
                    }
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);
                        if ( ((LA35_0>=Protected && LA35_0<=Abstract)||LA35_0==External||(LA35_0>=Private && LA35_0<=Project)||LA35_0==Public||LA35_0==Static||LA35_0==Const) ) {
                            alt35=1;
                        }
                        switch (alt35) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_1_0());
                    	    }
                    	    pushFollow(FOLLOW_14);
                    	    lv_declaredModifiers_21_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_21_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop35;
                        }
                    } while (true);
                    otherlv_22=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_22, grammarAccess.getAnnotatedNamespaceElementAccess().getEnumKeyword_1_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getNameBindingIdentifierParserRuleCall_1_2_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_23_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_23_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_24=(Token)match(input,LeftCurlyBracket,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_24, grammarAccess.getAnnotatedNamespaceElementAccess().getLeftCurlyBracketKeyword_1_2_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_2_5_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_literals_25_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_25_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);
                        if ( (LA36_0==Comma) ) {
                            alt36=1;
                        }
                        switch (alt36) {
                    	case 1 :
                    	    {
                    	    otherlv_26=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_26, grammarAccess.getAnnotatedNamespaceElementAccess().getCommaKeyword_1_2_6_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_2_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_literals_27_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_27_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop36;
                        }
                    } while (true);
                    otherlv_28=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_28, grammarAccess.getAnnotatedNamespaceElementAccess().getRightCurlyBracketKeyword_1_2_7());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedNamespaceElementAccess().getN4TypeAliasDeclarationAnnotationListAction_1_3_0(),
                      							current);
                    }
                    }
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);
                        if ( ((LA37_0>=Protected && LA37_0<=Abstract)||LA37_0==External||(LA37_0>=Private && LA37_0<=Project)||LA37_0==Public||LA37_0==Static) ) {
                            alt37=1;
                        }
                        switch (alt37) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_declaredModifiers_30_0=ruleN4ModifierWithoutConst();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_30_0,
                    	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop37;
                        }
                    } while (true);
                    otherlv_31=(Token)match(input,Type,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_31, grammarAccess.getAnnotatedNamespaceElementAccess().getTypeKeyword_1_3_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getNameBindingIdentifierParserRuleCall_1_3_3_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_name_32_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_32_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt38=2;
                    int LA38_0 = input.LA(1);
                    if ( (LA38_0==LessThanSign) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedNamespaceElementRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getTypeParametersParserRuleCall_1_3_4());
                            }
                            pushFollow(FOLLOW_19);
                            this_TypeParameters_33=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_TypeParameters_33;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    otherlv_34=(Token)match(input,EqualsSign,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_34, grammarAccess.getAnnotatedNamespaceElementAccess().getEqualsSignKeyword_1_3_5());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedNamespaceElementAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_1_3_6_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredTypeRefNode_35_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedNamespaceElementRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_35_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportDeclaration=ruleExportDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_ExportDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExportDeclarationAccess().getExportDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getExportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ExportDeclarationImpl_1=ruleExportDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_defaultExport_8_0=null;
        EObject this_NamespaceExportClause_1 = null;
        EObject this_ExportFromClause_2 = null;
        EObject this_NamedExportClause_4 = null;
        EObject this_ExportFromClause_5 = null;
        EObject lv_exportedElement_7_0 = null;
        EObject lv_exportedElement_9_0 = null;
        EObject lv_defaultExportedExpression_10_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Export,FOLLOW_22); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
            }
            int alt42=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt42=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt42=2;
                }
                break;
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Type:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt42=3;
                }
                break;
            case Default:
                {
                alt42=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);
                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getNamespaceExportClauseParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_23);
                    this_NamespaceExportClause_1=ruleNamespaceExportClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_NamespaceExportClause_1;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_24);
                    this_ExportFromClause_2=ruleExportFromClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_ExportFromClause_2;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      					}
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getNamedExportClauseParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_25);
                    this_NamedExportClause_4=ruleNamedExportClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_NamedExportClause_4;
                      					afterParserOrEnumRuleCall();
                    }
                    int alt40=2;
                    int LA40_0 = input.LA(1);
                    if ( (LA40_0==From) && (synpred30_InternalN4JSParser())) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                              						}
                              						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1());
                            }
                            pushFollow(FOLLOW_24);
                            this_ExportFromClause_5=ruleExportFromClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ExportFromClause_5;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_exportedElement_7_0=ruleExportableElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"exportedElement",
                      							lv_exportedElement_7_0,
                      							"org.eclipse.n4js.N4JS.ExportableElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    lv_defaultExport_8_0=(Token)match(input,Default,FOLLOW_26); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_defaultExport_8_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getExportDeclarationImplRule());
                      							}
                      							setWithLastConsumed(current, "defaultExport", lv_defaultExport_8_0 != null, "default");
                    }
                    }
                    }
                    int alt41=2;
                    alt41 = dfa41.predict(input);
                    switch (alt41) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getExportedElementExportableElementParserRuleCall_1_3_1_0_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_exportedElement_9_0=ruleExportableElement();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              								}
                              								set(
                              									current,
                              									"exportedElement",
                              									lv_exportedElement_9_0,
                              									"org.eclipse.n4js.N4JS.ExportableElement");
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0());
                            }
                            pushFollow(FOLLOW_24);
                            lv_defaultExportedExpression_10_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getExportDeclarationImplRule());
                              									}
                              									set(
                              										current,
                              										"defaultExportedExpression",
                              										lv_defaultExportedExpression_10_0,
                              										"org.eclipse.n4js.N4JS.AssignmentExpression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            ruleSemi();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportFromClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,From,FOLLOW_27); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getExportFromClauseRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExportFromClauseAccess().getModuleTModuleCrossReference_1_0());
            }
            pushFollow(FOLLOW_2);
            ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceExportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_namespaceExport_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getNamespaceExportClauseAccess().getNamespaceExportNamespaceExportSpecifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_namespaceExport_0_0=ruleNamespaceExportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getNamespaceExportClauseRule());
              				}
              				set(
              					current,
              					"namespaceExport",
              					lv_namespaceExport_0_0,
              					"org.eclipse.n4js.N4JS.NamespaceExportSpecifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamedExportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_namedExports_1_0 = null;
        EObject lv_namedExports_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_28); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getNamedExportClauseAccess().getLeftCurlyBracketKeyword_0());
            }
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( ((LA45_0>=Intersection && LA45_0<=Implements)||(LA45_0>=Promisify && LA45_0<=Abstract)||LA45_0==External||(LA45_0>=Private && LA45_0<=Project)||LA45_0==Public||LA45_0==Static||LA45_0==Target||(LA45_0>=Async && LA45_0<=Await)||LA45_0==Union||(LA45_0>=Yield && LA45_0<=This)||LA45_0==From||LA45_0==Type||(LA45_0>=Get && LA45_0<=Let)||(LA45_0>=Out && LA45_0<=Set)||LA45_0==As||LA45_0==Of||LA45_0==RULE_IDENTIFIER) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedExportClauseAccess().getNamedExportsNamedExportSpecifierParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_namedExports_1_0=ruleNamedExportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNamedExportClauseRule());
                      						}
                      						add(
                      							current,
                      							"namedExports",
                      							lv_namedExports_1_0,
                      							"org.eclipse.n4js.N4JS.NamedExportSpecifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);
                        if ( (LA43_0==Comma) ) {
                            int LA43_1 = input.LA(2);
                            if ( ((LA43_1>=Intersection && LA43_1<=Implements)||(LA43_1>=Promisify && LA43_1<=Abstract)||LA43_1==External||(LA43_1>=Private && LA43_1<=Project)||LA43_1==Public||LA43_1==Static||LA43_1==Target||(LA43_1>=Async && LA43_1<=Await)||LA43_1==Union||(LA43_1>=Yield && LA43_1<=This)||LA43_1==From||LA43_1==Type||(LA43_1>=Get && LA43_1<=Let)||(LA43_1>=Out && LA43_1<=Set)||LA43_1==As||LA43_1==Of||LA43_1==RULE_IDENTIFIER) ) {
                                alt43=1;
                            }
                        }
                        switch (alt43) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getNamedExportClauseAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getNamedExportClauseAccess().getNamedExportsNamedExportSpecifierParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_namedExports_3_0=ruleNamedExportSpecifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getNamedExportClauseRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"namedExports",
                    	      								lv_namedExports_3_0,
                    	      								"org.eclipse.n4js.N4JS.NamedExportSpecifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop43;
                        }
                    } while (true);
                    int alt44=2;
                    int LA44_0 = input.LA(1);
                    if ( (LA44_0==Comma) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            {
                            otherlv_4=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_4, grammarAccess.getNamedExportClauseAccess().getCommaKeyword_1_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getNamedExportClauseAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceExportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamespaceExportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceExportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceExportSpecifier=ruleNamespaceExportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceExportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceExportSpecifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNamespaceExportSpecifierAccess().getNamespaceExportSpecifierAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Asterisk,FOLLOW_30); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getNamespaceExportSpecifierAccess().getAsteriskKeyword_1());
            }
            int alt46=2;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==As) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,As,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getNamespaceExportSpecifierAccess().getAsKeyword_2_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamespaceExportSpecifierAccess().getAliasIdentifierNameParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_3_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNamespaceExportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_3_0,
                      							"org.eclipse.n4js.TypeExpressions.IdentifierName");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamedExportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamedExportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamedExportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamedExportSpecifier=ruleNamedExportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamedExportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamedExportSpecifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_exportedElement_0_0 = null;
        AntlrDatatypeRuleToken lv_alias_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getNamedExportSpecifierAccess().getExportedElementIdentifierRefParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_30);
            lv_exportedElement_0_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNamedExportSpecifierRule());
              					}
              					set(
              						current,
              						"exportedElement",
              						lv_exportedElement_0_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==As) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,As,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getNamedExportSpecifierAccess().getAsKeyword_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedExportSpecifierAccess().getAliasIdentifierNameParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_alias_2_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNamedExportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_2_0,
                      							"org.eclipse.n4js.TypeExpressions.IdentifierName");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExportableElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExportableElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExportableElement=ruleExportableElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExportableElement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedExportableElement_0 = null;
        EObject this_N4NamespaceDeclaration_1 = null;
        EObject this_N4ClassDeclaration_2 = null;
        EObject this_N4InterfaceDeclaration_3 = null;
        EObject this_N4EnumDeclaration_4 = null;
        EObject this_N4TypeAliasDeclaration_5 = null;
        EObject this_FunctionDeclaration_6 = null;
        EObject this_VariableStatementWithModifier_7 = null;
        	enterRule();
        try {
            {
            int alt48=8;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExportableElement_0=ruleAnnotatedExportableElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedExportableElement_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4NamespaceDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4NamespaceDeclaration_1=ruleN4NamespaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4NamespaceDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassDeclaration_2=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4ClassDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4InterfaceDeclaration_3=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4InterfaceDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4EnumDeclaration_4=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4EnumDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getN4TypeAliasDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4TypeAliasDeclaration_5=ruleN4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4TypeAliasDeclaration_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getExportableElementAccess().getFunctionDeclarationParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_6=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getExportableElementAccess().getVariableStatementWithModifierParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatementWithModifier_7=ruleVariableStatementWithModifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableStatementWithModifier_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedExportableElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExportableElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExportableElement=ruleAnnotatedExportableElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExportableElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExportableElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_9=null;
        Token otherlv_14=null;
        Token otherlv_21=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_38=null;
        Token otherlv_41=null;
        EObject this_AnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject this_FunctionImpl_4 = null;
        Enumerator lv_declaredModifiers_6_0 = null;
        Enumerator lv_varStmtKeyword_7_0 = null;
        EObject lv_varDeclsOrBindings_8_0 = null;
        EObject lv_varDeclsOrBindings_10_0 = null;
        Enumerator lv_declaredModifiers_13_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_15_0 = null;
        AntlrDatatypeRuleToken lv_name_16_0 = null;
        EObject this_TypeParameters_17 = null;
        EObject this_ClassExtendsImplements_18 = null;
        Enumerator lv_declaredModifiers_20_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_22_0 = null;
        AntlrDatatypeRuleToken lv_name_23_0 = null;
        EObject this_TypeParameters_24 = null;
        EObject this_InterfaceExtendsList_25 = null;
        EObject this_Members_26 = null;
        Enumerator lv_declaredModifiers_28_0 = null;
        AntlrDatatypeRuleToken lv_name_30_0 = null;
        EObject lv_literals_32_0 = null;
        EObject lv_literals_34_0 = null;
        Enumerator lv_declaredModifiers_37_0 = null;
        AntlrDatatypeRuleToken lv_name_39_0 = null;
        EObject this_TypeParameters_40 = null;
        EObject lv_declaredTypeRefNode_42_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_31);
            this_AnnotationList_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				current = this_AnnotationList_0;
              				afterParserOrEnumRuleCall();
            }
            }
            int alt65=5;
            alt65 = dfa65.predict(input);
            switch (alt65) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getFunctionDeclarationAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);
                        if ( ((LA49_0>=Protected && LA49_0<=Abstract)||LA49_0==External||(LA49_0>=Private && LA49_0<=Project)||LA49_0==Public||LA49_0==Static||LA49_0==Const) ) {
                            alt49=1;
                        }
                        switch (alt49) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_9);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_2_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop49;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2());
                    }
                    pushFollow(FOLLOW_9);
                    this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_3;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_4=ruleFunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_4;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getVariableStatementAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    loop50:
                    do {
                        int alt50=2;
                        alt50 = dfa50.predict(input);
                        switch (alt50) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_32);
                    	    lv_declaredModifiers_6_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_6_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop50;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_1_1_2_0());
                    }
                    pushFollow(FOLLOW_33);
                    lv_varStmtKeyword_7_0=ruleVariableStatementKeyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"varStmtKeyword",
                      								lv_varStmtKeyword_7_0,
                      								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_34);
                    lv_varDeclsOrBindings_8_0=norm1_VariableDeclarationOrBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"varDeclsOrBindings",
                      								lv_varDeclsOrBindings_8_0,
                      								"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);
                        if ( (LA51_0==Comma) ) {
                            alt51=1;
                        }
                        switch (alt51) {
                    	case 1 :
                    	    {
                    	    otherlv_9=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_9, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0());
                    	    }
                    	    pushFollow(FOLLOW_34);
                    	    lv_varDeclsOrBindings_10_0=norm1_VariableDeclarationOrBinding();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"varDeclsOrBindings",
                    	      									lv_varDeclsOrBindings_10_0,
                    	      									"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop51;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    int alt60=2;
                    alt60 = dfa60.predict(input);
                    switch (alt60) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4ClassDeclarationAnnotationListAction_1_2_0_0_0(),
                              									current);
                            }
                            }
                            loop52:
                            do {
                                int alt52=2;
                                int LA52_0 = input.LA(1);
                                if ( ((LA52_0>=Protected && LA52_0<=Abstract)||LA52_0==External||(LA52_0>=Private && LA52_0<=Project)||LA52_0==Public||LA52_0==Static||LA52_0==Const) ) {
                                    alt52=1;
                                }
                                switch (alt52) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_declaredModifiers_13_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_13_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop52;
                                }
                            } while (true);
                            otherlv_14=(Token)match(input,Class,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_14, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                            }
                            int alt53=2;
                            int LA53_0 = input.LA(1);
                            if ( (LA53_0==Tilde) ) {
                                alt53=1;
                            }
                            switch (alt53) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0());
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_typingStrategy_15_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_15_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_0_4_0());
                            }
                            pushFollow(FOLLOW_12);
                            lv_name_16_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_16_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt54=2;
                            int LA54_0 = input.LA(1);
                            if ( (LA54_0==LessThanSign) ) {
                                alt54=1;
                            }
                            switch (alt54) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeParametersParserRuleCall_1_2_0_0_5());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_TypeParameters_17=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_17;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt55=2;
                            int LA55_0 = input.LA(1);
                            if ( (LA55_0==Implements||LA55_0==Extends) ) {
                                alt55=1;
                            }
                            switch (alt55) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsImplementsParserRuleCall_1_2_0_0_6());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_ClassExtendsImplements_18=ruleClassExtendsImplements(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_ClassExtendsImplements_18;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAnnotatedExportableElementAccess().getN4InterfaceDeclarationAnnotationListAction_1_2_0_1_0(),
                              									current);
                            }
                            }
                            loop56:
                            do {
                                int alt56=2;
                                int LA56_0 = input.LA(1);
                                if ( ((LA56_0>=Protected && LA56_0<=Abstract)||LA56_0==External||(LA56_0>=Private && LA56_0<=Project)||LA56_0==Public||LA56_0==Static||LA56_0==Const) ) {
                                    alt56=1;
                                }
                                switch (alt56) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_13);
                            	    lv_declaredModifiers_20_0=ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                            	      									}
                            	      									add(
                            	      										current,
                            	      										"declaredModifiers",
                            	      										lv_declaredModifiers_20_0,
                            	      										"org.eclipse.n4js.N4JS.N4Modifier");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop56;
                                }
                            } while (true);
                            otherlv_21=(Token)match(input,Interface,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_21, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                            }
                            int alt57=2;
                            int LA57_0 = input.LA(1);
                            if ( (LA57_0==Tilde) ) {
                                alt57=1;
                            }
                            switch (alt57) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0());
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_typingStrategy_22_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"typingStrategy",
                                      										lv_typingStrategy_22_0,
                                      										"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_2_0_1_4_0());
                            }
                            pushFollow(FOLLOW_12);
                            lv_name_23_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                              									}
                              									set(
                              										current,
                              										"name",
                              										lv_name_23_0,
                              										"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt58=2;
                            int LA58_0 = input.LA(1);
                            if ( (LA58_0==LessThanSign) ) {
                                alt58=1;
                            }
                            switch (alt58) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeParametersParserRuleCall_1_2_0_1_5());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_TypeParameters_24=ruleTypeParameters(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_TypeParameters_24;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            int alt59=2;
                            int LA59_0 = input.LA(1);
                            if ( (LA59_0==Implements||LA59_0==Extends) ) {
                                alt59=1;
                            }
                            switch (alt59) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      								if (current==null) {
                                      									current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                                      								}
                                      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getInterfaceExtendsListParserRuleCall_1_2_0_1_6());
                                    }
                                    pushFollow(FOLLOW_12);
                                    this_InterfaceExtendsList_25=ruleInterfaceExtendsList(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      								current = this_InterfaceExtendsList_25;
                                      								afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_26=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_26;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getN4EnumDeclarationAnnotationListAction_1_3_0(),
                      							current);
                    }
                    }
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);
                        if ( ((LA61_0>=Protected && LA61_0<=Abstract)||LA61_0==External||(LA61_0>=Private && LA61_0<=Project)||LA61_0==Public||LA61_0==Static||LA61_0==Const) ) {
                            alt61=1;
                        }
                        switch (alt61) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_14);
                    	    lv_declaredModifiers_28_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_28_0,
                    	      								"org.eclipse.n4js.N4JS.N4Modifier");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop61;
                        }
                    } while (true);
                    otherlv_29=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_29, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_3_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_30_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_30_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_31=(Token)match(input,LeftCurlyBracket,FOLLOW_15); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_31, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_5_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_literals_32_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							add(
                      								current,
                      								"literals",
                      								lv_literals_32_0,
                      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop62:
                    do {
                        int alt62=2;
                        int LA62_0 = input.LA(1);
                        if ( (LA62_0==Comma) ) {
                            alt62=1;
                        }
                        switch (alt62) {
                    	case 1 :
                    	    {
                    	    otherlv_33=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_33, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getLiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_literals_34_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"literals",
                    	      									lv_literals_34_0,
                    	      									"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop62;
                        }
                    } while (true);
                    otherlv_35=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_35, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExportableElementAccess().getN4TypeAliasDeclarationAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    loop63:
                    do {
                        int alt63=2;
                        int LA63_0 = input.LA(1);
                        if ( ((LA63_0>=Protected && LA63_0<=Abstract)||LA63_0==External||(LA63_0>=Private && LA63_0<=Project)||LA63_0==Public||LA63_0==Static) ) {
                            alt63=1;
                        }
                        switch (alt63) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_1_4_1_0());
                    	    }
                    	    pushFollow(FOLLOW_17);
                    	    lv_declaredModifiers_37_0=ruleN4ModifierWithoutConst();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"declaredModifiers",
                    	      								lv_declaredModifiers_37_0,
                    	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop63;
                        }
                    } while (true);
                    otherlv_38=(Token)match(input,Type,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_38, grammarAccess.getAnnotatedExportableElementAccess().getTypeKeyword_1_4_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getNameBindingIdentifierParserRuleCall_1_4_3_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_name_39_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_39_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt64=2;
                    int LA64_0 = input.LA(1);
                    if ( (LA64_0==LessThanSign) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExportableElementRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getTypeParametersParserRuleCall_1_4_4());
                            }
                            pushFollow(FOLLOW_19);
                            this_TypeParameters_40=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_TypeParameters_40;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    otherlv_41=(Token)match(input,EqualsSign,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_41, grammarAccess.getAnnotatedExportableElementAccess().getEqualsSignKeyword_1_4_5());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedExportableElementAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_1_4_6_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredTypeRefNode_42_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedExportableElementRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_42_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleImportDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportDeclaration=ruleImportDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_ImportDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getImportDeclarationAccess().getImportDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ImportDeclarationImpl_1=ruleImportDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ImportDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_importFrom_2_0=null;
        EObject this_ImportClause_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_35); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( ((LA66_0>=Intersection && LA66_0<=Implements)||(LA66_0>=Promisify && LA66_0<=Abstract)||LA66_0==External||(LA66_0>=Private && LA66_0<=Project)||LA66_0==Public||LA66_0==Static||LA66_0==Target||(LA66_0>=Async && LA66_0<=Await)||LA66_0==Union||(LA66_0>=Yield && LA66_0<=This)||LA66_0==From||LA66_0==Type||(LA66_0>=Get && LA66_0<=Let)||(LA66_0>=Out && LA66_0<=Set)||LA66_0==As||LA66_0==Of||LA66_0==Asterisk||LA66_0==LeftCurlyBracket||LA66_0==RULE_IDENTIFIER) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_23);
                    this_ImportClause_1=ruleImportClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ImportClause_1;
                      				afterParserOrEnumRuleCall();
                    }
                    {
                    {
                    lv_importFrom_2_0=(Token)match(input,From,FOLLOW_27); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_importFrom_2_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getImportDeclarationImplRule());
                      						}
                      						setWithLastConsumed(current, "importFrom", lv_importFrom_2_0 != null, "from");
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getImportDeclarationImplRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getModuleTModuleCrossReference_2_0());
            }
            pushFollow(FOLLOW_24);
            ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_importSpecifiers_0_0 = null;
        EObject this_ImportSpecifiersExceptDefault_2 = null;
        EObject this_ImportSpecifiersExceptDefault_3 = null;
        	enterRule();
        try {
            {
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( ((LA68_0>=Intersection && LA68_0<=Implements)||(LA68_0>=Promisify && LA68_0<=Abstract)||LA68_0==External||(LA68_0>=Private && LA68_0<=Project)||LA68_0==Public||LA68_0==Static||LA68_0==Target||(LA68_0>=Async && LA68_0<=Await)||LA68_0==Union||(LA68_0>=Yield && LA68_0<=This)||LA68_0==From||LA68_0==Type||(LA68_0>=Get && LA68_0<=Let)||(LA68_0>=Out && LA68_0<=Set)||LA68_0==As||LA68_0==Of||LA68_0==RULE_IDENTIFIER) ) {
                alt68=1;
            }
            else if ( (LA68_0==Asterisk||LA68_0==LeftCurlyBracket) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);
                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_importSpecifiers_0_0=ruleDefaultImportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getImportClauseRule());
                      						}
                      						add(
                      							current,
                      							"importSpecifiers",
                      							lv_importSpecifiers_0_0,
                      							"org.eclipse.n4js.N4JS.DefaultImportSpecifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt67=2;
                    int LA67_0 = input.LA(1);
                    if ( (LA67_0==Comma) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,Comma,FOLLOW_37); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getImportClauseRule());
                              					}
                              					newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ImportSpecifiersExceptDefault_2=ruleImportSpecifiersExceptDefault(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ImportSpecifiersExceptDefault_2;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getImportClauseRule());
                      			}
                      			newCompositeNode(grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportSpecifiersExceptDefault_3=ruleImportSpecifiersExceptDefault(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportSpecifiersExceptDefault_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportSpecifiersExceptDefault(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_importSpecifiers_0_0 = null;
        EObject lv_importSpecifiers_2_0 = null;
        EObject lv_importSpecifiers_4_0 = null;
        	enterRule();
        try {
            {
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==Asterisk) ) {
                alt72=1;
            }
            else if ( (LA72_0==LeftCurlyBracket) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);
                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_importSpecifiers_0_0=ruleNamespaceImportSpecifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                      					}
                      					add(
                      						current,
                      						"importSpecifiers",
                      						lv_importSpecifiers_0_0,
                      						"org.eclipse.n4js.N4JS.NamespaceImportSpecifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_38); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                    }
                    int alt71=2;
                    int LA71_0 = input.LA(1);
                    if ( ((LA71_0>=Intersection && LA71_0<=With)||(LA71_0>=For && LA71_0<=Var)||(LA71_0>=As && LA71_0<=Of)||LA71_0==RULE_IDENTIFIER) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0());
                            }
                            pushFollow(FOLLOW_16);
                            lv_importSpecifiers_2_0=ruleNamedImportSpecifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                              							}
                              							add(
                              								current,
                              								"importSpecifiers",
                              								lv_importSpecifiers_2_0,
                              								"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            loop69:
                            do {
                                int alt69=2;
                                int LA69_0 = input.LA(1);
                                if ( (LA69_0==Comma) ) {
                                    int LA69_1 = input.LA(2);
                                    if ( ((LA69_1>=Intersection && LA69_1<=With)||(LA69_1>=For && LA69_1<=Var)||(LA69_1>=As && LA69_1<=Of)||LA69_1==RULE_IDENTIFIER) ) {
                                        alt69=1;
                                    }
                                }
                                switch (alt69) {
                            	case 1 :
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      						newLeafNode(otherlv_3, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								newCompositeNode(grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_16);
                            	    lv_importSpecifiers_4_0=ruleNamedImportSpecifier();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getImportSpecifiersExceptDefaultRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"importSpecifiers",
                            	      									lv_importSpecifiers_4_0,
                            	      									"org.eclipse.n4js.N4JS.NamedImportSpecifier");
                            	      								afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop69;
                                }
                            } while (true);
                            int alt70=2;
                            int LA70_0 = input.LA(1);
                            if ( (LA70_0==Comma) ) {
                                alt70=1;
                            }
                            switch (alt70) {
                                case 1 :
                                    {
                                    otherlv_5=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						newLeafNode(otherlv_5, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamedImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamedImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamedImportSpecifier=ruleNamedImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamedImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamedImportSpecifier() throws RecognitionException {
        EObject current = null;
        Token lv_declaredDynamic_1_0=null;
        Token otherlv_3=null;
        Token lv_declaredDynamic_5_0=null;
        AntlrDatatypeRuleToken lv_alias_4_0 = null;
        	enterRule();
        try {
            {
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      						}
                    }
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0_0_0());
                    }
                    pushFollow(FOLLOW_39);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt73=2;
                    int LA73_0 = input.LA(1);
                    if ( (LA73_0==PlusSign) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            {
                            {
                            lv_declaredDynamic_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_declaredDynamic_1_0, grammarAccess.getNamedImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_0_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                              						}
                              						setWithLastConsumed(current, "declaredDynamic", lv_declaredDynamic_1_0 != null, "+");
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                      						}
                    }
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getImportedElementTExportableElementCrossReference_1_0_0());
                    }
                    pushFollow(FOLLOW_40);
                    ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,As,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getNamedImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_39);
                    lv_alias_4_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getNamedImportSpecifierRule());
                      						}
                      						set(
                      							current,
                      							"alias",
                      							lv_alias_4_0,
                      							"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt74=2;
                    int LA74_0 = input.LA(1);
                    if ( (LA74_0==PlusSign) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            {
                            {
                            lv_declaredDynamic_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_declaredDynamic_5_0, grammarAccess.getNamedImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_1_3_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getNamedImportSpecifierRule());
                              						}
                              						setWithLastConsumed(current, "declaredDynamic", lv_declaredDynamic_5_0 != null, "+");
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDefaultImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultImportSpecifier=ruleDefaultImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultImportSpecifier() throws RecognitionException {
        EObject current = null;
        Token lv_declaredDynamic_1_0=null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getDefaultImportSpecifierRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDefaultImportSpecifierAccess().getImportedElementTExportableElementCrossReference_0_0());
            }
            pushFollow(FOLLOW_39);
            ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==PlusSign) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    {
                    lv_declaredDynamic_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredDynamic_1_0, grammarAccess.getDefaultImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultImportSpecifierRule());
                      					}
                      					setWithLastConsumed(current, "declaredDynamic", lv_declaredDynamic_1_0 != null, "+");
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamespaceImportSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceImportSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceImportSpecifier=ruleNamespaceImportSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceImportSpecifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceImportSpecifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_declaredDynamic_4_0=null;
        AntlrDatatypeRuleToken lv_alias_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNamespaceImportSpecifierAccess().getNamespaceImportSpecifierAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Asterisk,FOLLOW_40); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
            }
            otherlv_2=(Token)match(input,As,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getNamespaceImportSpecifierAccess().getAliasBindingIdentifierParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_39);
            lv_alias_3_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNamespaceImportSpecifierRule());
              					}
              					set(
              						current,
              						"alias",
              						lv_alias_3_0,
              						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==PlusSign) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    {
                    lv_declaredDynamic_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredDynamic_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getNamespaceImportSpecifierRule());
                      					}
                      					setWithLastConsumed(current, "declaredDynamic", lv_declaredDynamic_4_0 != null, "+");
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleModuleSpecifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleModuleSpecifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getModuleSpecifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleModuleSpecifier=ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleModuleSpecifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleModuleSpecifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_STRING_0=null;
        	enterRule();
        try {
            {
            this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(this_STRING_0);
            }
            if ( state.backtracking==0 ) {
              		newLeafNode(this_STRING_0, grammarAccess.getModuleSpecifierAccess().getSTRINGTerminalRuleCall());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionDeclaration=ruleFunctionDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);
                if ( ((LA78_0>=Protected && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Const) ) {
                    alt78=1;
                }
                switch (alt78) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop78;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_9);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
            }
            {
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_41);
            this_FunctionImpl_3=ruleFunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt79=2;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionDeclaration() throws RecognitionException {
        EObject current = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);
                if ( ((LA80_0>=Protected && LA80_0<=Abstract)||LA80_0==External||(LA80_0>=Private && LA80_0<=Project)||LA80_0==Public||LA80_0==Static||LA80_0==Const) ) {
                    alt80=1;
                }
                switch (alt80) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop80;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_9);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_2;
              					afterParserOrEnumRuleCall();
            }
            {
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElement(grammarAccess.getFunctionDeclarationRule());
              						}
              						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_41);
            this_FunctionImpl_3=norm3_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						current = this_FunctionImpl_3;
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==Semicolon) ) {
                int LA81_1 = input.LA(2);
                if ( (synpred45_InternalN4JSParser()) ) {
                    alt81=1;
                }
            }
            else if ( (LA81_0==EOF||LA81_0==RULE_ML_COMMENT||LA81_0==RULE_EOL) && (synpred45_InternalN4JSParser())) {
                alt81=1;
            }
            else if ( (LA81_0==RightCurlyBracket) ) {
                int LA81_3 = input.LA(2);
                if ( (synpred45_InternalN4JSParser()) ) {
                    alt81=1;
                }
            }
            switch (alt81) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncNoTrailingLineBreak(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredAsync_0_0=null;
        EObject this_NoLineTerminator_1 = null;
        	enterRule();
        try {
            {
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==Async) ) {
                int LA82_1 = input.LA(2);
                if ( ((LA82_1>=Intersection && LA82_1<=With)||(LA82_1>=For && LA82_1<=Var)||(LA82_1>=As && LA82_1<=Of)||LA82_1==Asterisk||LA82_1==LeftSquareBracket||LA82_1==RULE_NO_LINE_TERMINATOR||LA82_1==RULE_IDENTIFIER||LA82_1==RULE_INT||LA82_1==RULE_DOUBLE||(LA82_1>=RULE_BINARY_INT && LA82_1<=RULE_OCTAL_INT)||(LA82_1>=RULE_HEX_INT && LA82_1<=RULE_SCIENTIFIC_INT)||LA82_1==RULE_STRING) ) {
                    alt82=1;
                }
            }
            switch (alt82) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      					}
                      					setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_0_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      			if (current==null) {
                      				current = createModelElement(grammarAccess.getAsyncNoTrailingLineBreakRule());
                      			}
                      			newCompositeNode(grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_NoLineTerminator_1=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NoLineTerminator_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=ruleFunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=norm3_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_FunctionImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject this_FunctionImplWithoutKeyword_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Function,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionImplRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_1=norm6_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==Asterisk) ) {
                alt83=1;
            }
            else if ( ((LA83_0>=Intersection && LA83_0<=Implements)||(LA83_0>=Promisify && LA83_0<=Abstract)||LA83_0==External||(LA83_0>=Private && LA83_0<=Project)||LA83_0==Public||LA83_0==Static||LA83_0==Target||(LA83_0>=Async && LA83_0<=Await)||LA83_0==Union||(LA83_0>=Yield && LA83_0<=This)||LA83_0==From||LA83_0==Type||(LA83_0>=Get && LA83_0<=Let)||(LA83_0>=Out && LA83_0<=Set)||LA83_0==As||LA83_0==Of||LA83_0==LeftParenthesis||LA83_0==LessThanSign||LA83_0==RULE_IDENTIFIER) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);
                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==Asterisk) ) {
                alt84=1;
            }
            else if ( ((LA84_0>=Intersection && LA84_0<=Implements)||(LA84_0>=Promisify && LA84_0<=Abstract)||LA84_0==External||(LA84_0>=Private && LA84_0<=Project)||LA84_0==Public||LA84_0==Static||LA84_0==Target||(LA84_0>=Async && LA84_0<=Await)||LA84_0==Union||LA84_0==This||LA84_0==From||LA84_0==Type||(LA84_0>=Get && LA84_0<=Let)||(LA84_0>=Out && LA84_0<=Set)||LA84_0==As||LA84_0==Of||LA84_0==LeftParenthesis||LA84_0==LessThanSign||LA84_0==RULE_IDENTIFIER) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);
                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt85=2;
            int LA85_0 = input.LA(1);
            if ( (LA85_0==Asterisk) ) {
                alt85=1;
            }
            else if ( ((LA85_0>=Intersection && LA85_0<=Implements)||(LA85_0>=Promisify && LA85_0<=Abstract)||LA85_0==External||(LA85_0>=Private && LA85_0<=Project)||LA85_0==Public||LA85_0==Static||LA85_0==Target||(LA85_0>=Async && LA85_0<=Await)||LA85_0==Union||(LA85_0>=Yield && LA85_0<=This)||LA85_0==From||LA85_0==Type||(LA85_0>=Get && LA85_0<=Let)||(LA85_0>=Out && LA85_0<=Set)||LA85_0==As||LA85_0==Of||LA85_0==LeftParenthesis||LA85_0==LessThanSign||LA85_0==RULE_IDENTIFIER) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);
                throw nvae;
            }
            switch (alt85) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==Asterisk) ) {
                alt86=1;
            }
            else if ( ((LA86_0>=Intersection && LA86_0<=Implements)||(LA86_0>=Promisify && LA86_0<=Abstract)||LA86_0==External||(LA86_0>=Private && LA86_0<=Project)||LA86_0==Public||LA86_0==Static||LA86_0==Target||(LA86_0>=Async && LA86_0<=Await)||LA86_0==Union||LA86_0==This||LA86_0==From||LA86_0==Type||(LA86_0>=Get && LA86_0<=Let)||(LA86_0>=Out && LA86_0<=Set)||LA86_0==As||LA86_0==Of||LA86_0==LeftParenthesis||LA86_0==LessThanSign||LA86_0==RULE_IDENTIFIER) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);
                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm1_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=ruleFunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt87=2;
            int LA87_0 = input.LA(1);
            if ( (LA87_0==Asterisk) ) {
                alt87=1;
            }
            else if ( ((LA87_0>=Intersection && LA87_0<=Implements)||(LA87_0>=Promisify && LA87_0<=Abstract)||LA87_0==External||(LA87_0>=Private && LA87_0<=Project)||LA87_0==Public||LA87_0==Static||LA87_0==Target||(LA87_0>=Async && LA87_0<=Await)||LA87_0==Union||(LA87_0>=Yield && LA87_0<=This)||LA87_0==From||LA87_0==Type||(LA87_0>=Get && LA87_0<=Let)||(LA87_0>=Out && LA87_0<=Set)||LA87_0==As||LA87_0==Of||LA87_0==LeftParenthesis||LA87_0==LessThanSign||LA87_0==RULE_IDENTIFIER) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);
                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==Asterisk) ) {
                alt88=1;
            }
            else if ( ((LA88_0>=Intersection && LA88_0<=Implements)||(LA88_0>=Promisify && LA88_0<=Abstract)||LA88_0==External||(LA88_0>=Private && LA88_0<=Project)||LA88_0==Public||LA88_0==Static||LA88_0==Target||(LA88_0>=Async && LA88_0<=Await)||LA88_0==Union||LA88_0==This||LA88_0==From||LA88_0==Type||(LA88_0>=Get && LA88_0<=Let)||(LA88_0>=Out && LA88_0<=Set)||LA88_0==As||LA88_0==Of||LA88_0==LeftParenthesis||LA88_0==LessThanSign||LA88_0==RULE_IDENTIFIER) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);
                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm2_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt89=2;
            int LA89_0 = input.LA(1);
            if ( (LA89_0==Asterisk) ) {
                alt89=1;
            }
            else if ( ((LA89_0>=Intersection && LA89_0<=Implements)||(LA89_0>=Promisify && LA89_0<=Abstract)||LA89_0==External||(LA89_0>=Private && LA89_0<=Project)||LA89_0==Public||LA89_0==Static||LA89_0==Target||(LA89_0>=Async && LA89_0<=Await)||LA89_0==Union||(LA89_0>=Yield && LA89_0<=This)||LA89_0==From||LA89_0==Type||(LA89_0>=Get && LA89_0<=Let)||(LA89_0>=Out && LA89_0<=Set)||LA89_0==As||LA89_0==Of||LA89_0==LeftParenthesis||LA89_0==LessThanSign||LA89_0==RULE_IDENTIFIER) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);
                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=ruleFunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_FunctionImplWithoutKeyword(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_generator_0_0=null;
        EObject this_FunctionHeader_1 = null;
        EObject this_FunctionBody_2 = null;
        EObject this_FunctionHeader_3 = null;
        EObject this_FunctionBody_4 = null;
        	enterRule();
        try {
            {
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==Asterisk) ) {
                alt90=1;
            }
            else if ( ((LA90_0>=Intersection && LA90_0<=Implements)||(LA90_0>=Promisify && LA90_0<=Abstract)||LA90_0==External||(LA90_0>=Private && LA90_0<=Project)||LA90_0==Public||LA90_0==Static||LA90_0==Target||(LA90_0>=Async && LA90_0<=Await)||LA90_0==Union||LA90_0==This||LA90_0==From||LA90_0==Type||(LA90_0>=Get && LA90_0<=Let)||(LA90_0>=Out && LA90_0<=Set)||LA90_0==As||LA90_0==Of||LA90_0==LeftParenthesis||LA90_0==LessThanSign||LA90_0==RULE_IDENTIFIER) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);
                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_0_0=(Token)match(input,Asterisk,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_generator_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      						}
                      						setWithLastConsumed(current, "generator", lv_generator_0_0 != null, "*");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_1=norm3_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_1;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_2=norm3_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_6);
                    this_FunctionHeader_3=norm1_FunctionHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionHeader_3;
                      				afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionImplWithoutKeywordRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionBody_4=norm2_FunctionBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionBody_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeParameters_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_StrictFormalParameters_2 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_3 = null;
        	enterRule();
        try {
            {
            {
            int alt91=2;
            int LA91_0 = input.LA(1);
            if ( (LA91_0==LessThanSign) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_45);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( ((LA92_0>=Intersection && LA92_0<=Implements)||(LA92_0>=Promisify && LA92_0<=Abstract)||LA92_0==External||(LA92_0>=Private && LA92_0<=Project)||LA92_0==Public||LA92_0==Static||LA92_0==Target||(LA92_0>=Async && LA92_0<=Await)||LA92_0==Union||(LA92_0>=Yield && LA92_0<=This)||LA92_0==From||LA92_0==Type||(LA92_0>=Get && LA92_0<=Let)||(LA92_0>=Out && LA92_0<=Set)||LA92_0==As||LA92_0==Of||LA92_0==RULE_IDENTIFIER) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_46);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
            }
            pushFollow(FOLLOW_47);
            this_StrictFormalParameters_2=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
            }
            int alt93=2;
            int LA93_0 = input.LA(1);
            if ( (LA93_0==Colon) && (synpred46_InternalN4JSParser())) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredReturnTypeRef_3=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeParameters_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_StrictFormalParameters_2 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_3 = null;
        	enterRule();
        try {
            {
            {
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==LessThanSign) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_45);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt95=2;
            int LA95_0 = input.LA(1);
            if ( ((LA95_0>=Intersection && LA95_0<=Implements)||(LA95_0>=Promisify && LA95_0<=Abstract)||LA95_0==External||(LA95_0>=Private && LA95_0<=Project)||LA95_0==Public||LA95_0==Static||LA95_0==Target||(LA95_0>=Async && LA95_0<=Await)||LA95_0==Union||LA95_0==This||LA95_0==From||LA95_0==Type||(LA95_0>=Get && LA95_0<=Let)||(LA95_0>=Out && LA95_0<=Set)||LA95_0==As||LA95_0==Of||LA95_0==RULE_IDENTIFIER) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_46);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
            }
            pushFollow(FOLLOW_47);
            this_StrictFormalParameters_2=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
            }
            int alt96=2;
            int LA96_0 = input.LA(1);
            if ( (LA96_0==Colon) && (synpred47_InternalN4JSParser())) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredReturnTypeRef_3=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeParameters_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_StrictFormalParameters_2 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_3 = null;
        	enterRule();
        try {
            {
            {
            int alt97=2;
            int LA97_0 = input.LA(1);
            if ( (LA97_0==LessThanSign) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_44);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt98=2;
            int LA98_0 = input.LA(1);
            if ( ((LA98_0>=Intersection && LA98_0<=Implements)||(LA98_0>=Promisify && LA98_0<=Abstract)||LA98_0==External||(LA98_0>=Private && LA98_0<=Project)||LA98_0==Public||LA98_0==Static||LA98_0==Target||(LA98_0>=Async && LA98_0<=Await)||LA98_0==Union||(LA98_0>=Yield && LA98_0<=This)||LA98_0==From||LA98_0==Type||(LA98_0>=Get && LA98_0<=Let)||(LA98_0>=Out && LA98_0<=Set)||LA98_0==As||LA98_0==Of||LA98_0==RULE_IDENTIFIER) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_44);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
            }
            pushFollow(FOLLOW_47);
            this_StrictFormalParameters_2=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
            }
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( (LA99_0==Colon) && (synpred48_InternalN4JSParser())) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredReturnTypeRef_3=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_TypeParameters_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_StrictFormalParameters_2 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_3 = null;
        	enterRule();
        try {
            {
            {
            int alt100=2;
            int LA100_0 = input.LA(1);
            if ( (LA100_0==LessThanSign) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_44);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt101=2;
            int LA101_0 = input.LA(1);
            if ( ((LA101_0>=Intersection && LA101_0<=Implements)||(LA101_0>=Promisify && LA101_0<=Abstract)||LA101_0==External||(LA101_0>=Private && LA101_0<=Project)||LA101_0==Public||LA101_0==Static||LA101_0==Target||(LA101_0>=Async && LA101_0<=Await)||LA101_0==Union||LA101_0==This||LA101_0==From||LA101_0==Type||(LA101_0>=Get && LA101_0<=Let)||(LA101_0>=Out && LA101_0<=Set)||LA101_0==As||LA101_0==Of||LA101_0==RULE_IDENTIFIER) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getFunctionHeaderAccess().getNameBindingIdentifierParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_44);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getFunctionHeaderRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_1_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionHeaderRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2());
            }
            pushFollow(FOLLOW_47);
            this_StrictFormalParameters_2=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_2;
              			afterParserOrEnumRuleCall();
            }
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==Colon) && (synpred49_InternalN4JSParser())) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredReturnTypeRef_3=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            int alt103=2;
            alt103 = dfa103.predict(input);
            switch (alt103) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            int alt104=2;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_0_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
                      				}
                      				set(
                      					current,
                      					"body",
                      					lv_body_0_0,
                      					"org.eclipse.n4js.N4JS.Block");
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_FunctionBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject lv_body_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getFunctionBodyAccess().getBodyBlockParserRuleCall_0_0_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_0_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
              				}
              				set(
              					current,
              					"body",
              					lv_body_0_0,
              					"org.eclipse.n4js.N4JS.Block");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedFunctionDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedFunctionDeclaration=ruleAnnotatedFunctionDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedFunctionDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject lv_annotationList_0_0 = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_9);
            lv_annotationList_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);
                if ( ((LA105_0>=Protected && LA105_0<=Abstract)||LA105_0==External||(LA105_0>=Private && LA105_0<=Project)||LA105_0==Public||LA105_0==Static||LA105_0==Const) ) {
                    alt105=1;
                }
                switch (alt105) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop105;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
            }
            pushFollow(FOLLOW_9);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=ruleFunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        EObject current = null;
        EObject lv_annotationList_0_0 = null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_AsyncNoTrailingLineBreak_2 = null;
        EObject this_FunctionImpl_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAnnotationListParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_9);
            lv_annotationList_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
              					}
              					set(
              						current,
              						"annotationList",
              						lv_annotationList_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationList");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);
                if ( ((LA106_0>=Protected && LA106_0<=Abstract)||LA106_0==External||(LA106_0>=Private && LA106_0<=Project)||LA106_0==Public||LA106_0==Static||LA106_0==Const) ) {
                    alt106=1;
                }
                switch (alt106) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_9);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotatedFunctionDeclarationRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop106;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2());
            }
            pushFollow(FOLLOW_9);
            this_AsyncNoTrailingLineBreak_2=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AsyncNoTrailingLineBreak_2;
              			afterParserOrEnumRuleCall();
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAnnotatedFunctionDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_3=norm3_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionExpression=ruleFunctionExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject this_FunctionImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFunctionExpressionAccess().getFunctionExpressionAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImpl_1=norm6_FunctionImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAsyncFunctionExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAsyncFunctionExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAsyncFunctionExpression=ruleAsyncFunctionExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAsyncFunctionExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAsyncFunctionExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_0_0=null;
        Token otherlv_2=null;
        EObject this_NoLineTerminator_1 = null;
        EObject this_FunctionImplWithoutKeyword_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            lv_declaredAsync_0_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							newLeafNode(lv_declaredAsync_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
            }
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              							}
              							setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_0_0 != null, "async");
            }
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_49);
            this_NoLineTerminator_1=ruleNoLineTerminator(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_NoLineTerminator_1;
              					afterParserOrEnumRuleCall();
            }
            otherlv_2=(Token)match(input,Function,FOLLOW_43); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getAsyncFunctionExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getAsyncFunctionExpressionAccess().getFunctionImplWithoutKeywordParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FunctionImplWithoutKeyword_3=norm6_FunctionImplWithoutKeyword(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FunctionImplWithoutKeyword_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrowExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowExpression=ruleArrowExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt109=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt109=1;
                }
                break;
            case Async:
                {
                int LA109_2 = input.LA(2);
                if ( (LA109_2==RULE_NO_LINE_TERMINATOR) && (synpred60_InternalN4JSParser())) {
                    alt109=2;
                }
                else if ( (LA109_2==LeftParenthesis) && (synpred60_InternalN4JSParser())) {
                    alt109=2;
                }
                else if ( (LA109_2==EqualsSign) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt109=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);
                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_50);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt107=2;
                    int LA107_0 = input.LA(1);
                    if ( (LA107_0==Colon) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_50);
                            this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_2_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_46);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_50);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt108=2;
                    int LA108_0 = input.LA(1);
                    if ( (LA108_0==Colon) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_50);
                            this_ColonSepDeclaredReturnTypeRef_5=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_50);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowExpressionAccess().getArrowParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_52);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt110=2;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", lv_hasBracesAroundBody_8_0 != null, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_29);
                    lv_body_9_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt113=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt113=1;
                }
                break;
            case Async:
                {
                int LA113_2 = input.LA(2);
                if ( (LA113_2==RULE_NO_LINE_TERMINATOR) && (synpred66_InternalN4JSParser())) {
                    alt113=2;
                }
                else if ( (LA113_2==LeftParenthesis) && (synpred66_InternalN4JSParser())) {
                    alt113=2;
                }
                else if ( (LA113_2==EqualsSign) ) {
                    alt113=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt113=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);
                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_50);
                    this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);
                    if ( (LA111_0==Colon) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_50);
                            this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_2_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_46);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_50);
                    this_StrictFormalParameters_4=ruleStrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);
                    if ( (LA112_0==Colon) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_50);
                            this_ColonSepDeclaredReturnTypeRef_5=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_50);
                    lv_fpars_6_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowExpressionAccess().getArrowParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_52);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt114=2;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", lv_hasBracesAroundBody_8_0 != null, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_29);
                    lv_body_9_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt117=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt117=1;
                }
                break;
            case Async:
                {
                int LA117_2 = input.LA(2);
                if ( (LA117_2==RULE_NO_LINE_TERMINATOR) && (synpred72_InternalN4JSParser())) {
                    alt117=2;
                }
                else if ( (LA117_2==LeftParenthesis) && (synpred72_InternalN4JSParser())) {
                    alt117=2;
                }
                else if ( (LA117_2==EqualsSign) ) {
                    alt117=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt117=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);
                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_50);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt115=2;
                    int LA115_0 = input.LA(1);
                    if ( (LA115_0==Colon) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_50);
                            this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_2_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_44);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_50);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt116=2;
                    int LA116_0 = input.LA(1);
                    if ( (LA116_0==Colon) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_50);
                            this_ColonSepDeclaredReturnTypeRef_5=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_50);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowExpressionAccess().getArrowParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_52);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt118=2;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", lv_hasBracesAroundBody_8_0 != null, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_29);
                    lv_body_9_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ArrowExpression() throws RecognitionException {
        EObject current = null;
        Token lv_declaredAsync_2_0=null;
        Token lv_hasBracesAroundBody_8_0=null;
        Token otherlv_10=null;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject this_NoLineTerminator_3 = null;
        EObject this_StrictFormalParameters_4 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_5 = null;
        EObject lv_fpars_6_0 = null;
        EObject lv_body_9_0 = null;
        EObject lv_body_11_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            int alt121=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt121=1;
                }
                break;
            case Async:
                {
                int LA121_2 = input.LA(2);
                if ( (LA121_2==RULE_NO_LINE_TERMINATOR) && (synpred78_InternalN4JSParser())) {
                    alt121=2;
                }
                else if ( (LA121_2==LeftParenthesis) && (synpred78_InternalN4JSParser())) {
                    alt121=2;
                }
                else if ( (LA121_2==EqualsSign) ) {
                    alt121=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt121=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);
                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_50);
                    this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_StrictFormalParameters_0;
                      							afterParserOrEnumRuleCall();
                    }
                    int alt119=2;
                    int LA119_0 = input.LA(1);
                    if ( (LA119_0==Colon) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1());
                            }
                            pushFollow(FOLLOW_50);
                            this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_1;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    lv_declaredAsync_2_0=(Token)match(input,Async,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      											newLeafNode(lv_declaredAsync_2_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      											if (current==null) {
                      												current = createModelElement(grammarAccess.getArrowExpressionRule());
                      											}
                      											setWithLastConsumed(current, "declaredAsync", lv_declaredAsync_2_0 != null, "async");
                    }
                    }
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getArrowExpressionRule());
                      									}
                      									newCompositeNode(grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1());
                    }
                    pushFollow(FOLLOW_44);
                    this_NoLineTerminator_3=ruleNoLineTerminator(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									current = this_NoLineTerminator_3;
                      									afterParserOrEnumRuleCall();
                    }
                    {
                    if ( state.backtracking==0 ) {
                      										if (current==null) {
                      											current = createModelElement(grammarAccess.getArrowExpressionRule());
                      										}
                      										newCompositeNode(grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2());
                    }
                    pushFollow(FOLLOW_50);
                    this_StrictFormalParameters_4=norm1_StrictFormalParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      										current = this_StrictFormalParameters_4;
                      										afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt120=2;
                    int LA120_0 = input.LA(1);
                    if ( (LA120_0==Colon) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getArrowExpressionRule());
                              								}
                              								newCompositeNode(grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1());
                            }
                            pushFollow(FOLLOW_50);
                            this_ColonSepDeclaredReturnTypeRef_5=ruleColonSepDeclaredReturnTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_ColonSepDeclaredReturnTypeRef_5;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getArrowExpressionAccess().getFparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_50);
                    lv_fpars_6_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      								}
                      								add(
                      									current,
                      									"fpars",
                      									lv_fpars_6_0,
                      									"org.eclipse.n4js.N4JS.BindingIdentifierAsFormalParameter");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowExpressionAccess().getArrowParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_52);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_hasBracesAroundBody_8_0=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_hasBracesAroundBody_8_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getArrowExpressionRule());
                      							}
                      							setWithLastConsumed(current, "hasBracesAroundBody", lv_hasBracesAroundBody_8_0 != null, "{");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyBlockMinusBracesParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_29);
                    lv_body_9_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_9_0,
                      								"org.eclipse.n4js.N4JS.BlockMinusBraces");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrowExpressionAccess().getBodyExpressionDisguisedAsBlockParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_11_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrowExpressionRule());
                      						}
                      						set(
                      							current,
                      							"body",
                      							lv_body_11_0,
                      							"org.eclipse.n4js.N4JS.ExpressionDisguisedAsBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;
        EObject lv_fpars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt124=2;
            int LA124_0 = input.LA(1);
            if ( ((LA124_0>=Intersection && LA124_0<=Implements)||(LA124_0>=Promisify && LA124_0<=Abstract)||LA124_0==External||(LA124_0>=Private && LA124_0<=Project)||LA124_0==Public||LA124_0==Static||LA124_0==Target||(LA124_0>=Async && LA124_0<=Await)||LA124_0==Union||(LA124_0>=Yield && LA124_0<=This)||LA124_0==From||LA124_0==Type||LA124_0==FullStopFullStopFullStop||(LA124_0>=Get && LA124_0<=Let)||(LA124_0>=Out && LA124_0<=Set)||LA124_0==As||LA124_0==Of||(LA124_0>=CommercialAt && LA124_0<=LeftSquareBracket)||LA124_0==LeftCurlyBracket||LA124_0==RULE_IDENTIFIER) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_56);
                    lv_fpars_1_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop123:
                    do {
                        int alt123=2;
                        int LA123_0 = input.LA(1);
                        if ( (LA123_0==Comma) ) {
                            alt123=1;
                        }
                        switch (alt123) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_56);
                    	    lv_fpars_3_0=ruleFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop123;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_StrictFormalParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_fpars_1_0 = null;
        EObject lv_fpars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt126=2;
            int LA126_0 = input.LA(1);
            if ( ((LA126_0>=Intersection && LA126_0<=Implements)||(LA126_0>=Promisify && LA126_0<=Abstract)||LA126_0==External||(LA126_0>=Private && LA126_0<=Project)||LA126_0==Public||LA126_0==Static||LA126_0==Target||(LA126_0>=Async && LA126_0<=Await)||LA126_0==Union||LA126_0==This||LA126_0==From||LA126_0==Type||LA126_0==FullStopFullStopFullStop||(LA126_0>=Get && LA126_0<=Let)||(LA126_0>=Out && LA126_0<=Set)||LA126_0==As||LA126_0==Of||(LA126_0>=CommercialAt && LA126_0<=LeftSquareBracket)||LA126_0==LeftCurlyBracket||LA126_0==RULE_IDENTIFIER) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_56);
                    lv_fpars_1_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                      						}
                      						add(
                      							current,
                      							"fpars",
                      							lv_fpars_1_0,
                      							"org.eclipse.n4js.N4JS.FormalParameter");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);
                        if ( (LA125_0==Comma) ) {
                            alt125=1;
                        }
                        switch (alt125) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getStrictFormalParametersAccess().getFparsFormalParameterParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_56);
                    	    lv_fpars_3_0=norm1_FormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getStrictFormalParametersRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"fpars",
                    	      								lv_fpars_3_0,
                    	      								"org.eclipse.n4js.N4JS.FormalParameter");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop125;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingIdentifierAsFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsFormalParameter=ruleBindingIdentifierAsFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsFormalParameterRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBlockMinusBraces = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockMinusBracesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlockMinusBraces=ruleBlockMinusBraces();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlockMinusBraces; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
            }
            }
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);
                if ( ((LA127_0>=Intersection && LA127_0<=Implements)||(LA127_0>=Promisify && LA127_0<=Function)||(LA127_0>=Private && LA127_0<=Delete)||(LA127_0>=Import && LA127_0<=Break)||(LA127_0>=Class && LA127_0<=This)||(LA127_0>=From && LA127_0<=With)||(LA127_0>=For && LA127_0<=Var)||LA127_0==PlusSignPlusSign||(LA127_0>=HyphenMinusHyphenMinus && LA127_0<=SolidusEqualsSign)||(LA127_0>=As && LA127_0<=If)||LA127_0==Of||LA127_0==ExclamationMark||LA127_0==LeftParenthesis||LA127_0==PlusSign||LA127_0==HyphenMinus||LA127_0==Solidus||(LA127_0>=Semicolon && LA127_0<=LessThanSign)||(LA127_0>=CommercialAt && LA127_0<=LeftSquareBracket)||LA127_0==LeftCurlyBracket||LA127_0==Tilde||(LA127_0>=RULE_TEMPLATE_HEAD && LA127_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA127_0==RULE_IDENTIFIER||LA127_0==RULE_INT||LA127_0==RULE_DOUBLE||(LA127_0>=RULE_BINARY_INT && LA127_0<=RULE_SCIENTIFIC_INT)||LA127_0==RULE_STRING) ) {
                    alt127=1;
                }
                switch (alt127) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_1_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop127;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BlockMinusBraces() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBlockMinusBracesAccess().getBlockAction_0(),
              					current);
            }
            }
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);
                if ( ((LA128_0>=Intersection && LA128_0<=Implements)||(LA128_0>=Promisify && LA128_0<=Function)||(LA128_0>=Private && LA128_0<=Delete)||(LA128_0>=Import && LA128_0<=Break)||(LA128_0>=Class && LA128_0<=This)||(LA128_0>=From && LA128_0<=With)||(LA128_0>=For && LA128_0<=Var)||LA128_0==PlusSignPlusSign||(LA128_0>=HyphenMinusHyphenMinus && LA128_0<=SolidusEqualsSign)||(LA128_0>=As && LA128_0<=If)||LA128_0==Of||LA128_0==ExclamationMark||LA128_0==LeftParenthesis||LA128_0==PlusSign||LA128_0==HyphenMinus||LA128_0==Solidus||(LA128_0>=Semicolon && LA128_0<=LessThanSign)||(LA128_0>=CommercialAt && LA128_0<=LeftSquareBracket)||LA128_0==LeftCurlyBracket||LA128_0==Tilde||(LA128_0>=RULE_TEMPLATE_HEAD && LA128_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA128_0==RULE_IDENTIFIER||LA128_0==RULE_INT||LA128_0==RULE_DOUBLE||(LA128_0>=RULE_BINARY_INT && LA128_0<=RULE_SCIENTIFIC_INT)||LA128_0==RULE_STRING) ) {
                    alt128=1;
                }
                switch (alt128) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockMinusBracesAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_1_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockMinusBracesRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_1_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop128;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionDisguisedAsBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionDisguisedAsBlock=ruleExpressionDisguisedAsBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionDisguisedAsBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        EObject current = null;
        EObject lv_statements_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionDisguisedAsBlockAccess().getBlockAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignmentExpressionStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statements_1_0=norm1_AssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionDisguisedAsBlockRule());
              					}
              					add(
              						current,
              						"statements",
              						lv_statements_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpressionStatement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAssignmentExpressionStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpressionStatement=ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getAssignmentExpressionStatementRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.AssignmentExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedExpression=ruleAnnotatedExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ClassExtendsImplements_4 = null;
        EObject this_Members_5 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_58);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==Class) ) {
                alt131=1;
            }
            else if ( (LA131_0==Function||LA131_0==Async) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);
                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    otherlv_2=(Token)match(input,Class,FOLLOW_59); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt129=2;
                    int LA129_0 = input.LA(1);
                    if ( ((LA129_0>=Intersection && LA129_0<=Constructor)||(LA129_0>=Promisify && LA129_0<=Abstract)||LA129_0==External||(LA129_0>=Private && LA129_0<=Project)||LA129_0==Public||LA129_0==Static||LA129_0==Target||(LA129_0>=Async && LA129_0<=Await)||LA129_0==Union||(LA129_0>=Yield && LA129_0<=This)||LA129_0==From||LA129_0==Type||(LA129_0>=Get && LA129_0<=Let)||(LA129_0>=Out && LA129_0<=Set)||LA129_0==As||LA129_0==Of||LA129_0==RULE_IDENTIFIER) ) {
                        alt129=1;
                    }
                    else if ( (LA129_0==Implements) ) {
                        int LA129_2 = input.LA(2);
                        if ( (LA129_2==Implements||LA129_2==Extends||LA129_2==LeftCurlyBracket) ) {
                            alt129=1;
                        }
                    }
                    switch (alt129) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                            }
                            pushFollow(FOLLOW_12);
                            lv_name_3_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt130=2;
                    int LA130_0 = input.LA(1);
                    if ( (LA130_0==Implements||LA130_0==Extends) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3());
                            }
                            pushFollow(FOLLOW_12);
                            this_ClassExtendsImplements_4=ruleClassExtendsImplements(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ClassExtendsImplements_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=ruleMembers(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_49);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ExpressionAnnotationList_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ClassExtendsImplements_4 = null;
        EObject this_Members_5 = null;
        EObject this_AsyncNoTrailingLineBreak_7 = null;
        EObject this_FunctionImpl_8 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_58);
            this_ExpressionAnnotationList_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ExpressionAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt134=2;
            int LA134_0 = input.LA(1);
            if ( (LA134_0==Class) ) {
                alt134=1;
            }
            else if ( (LA134_0==Function||LA134_0==Async) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);
                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getN4ClassExpressionAnnotationListAction_1_0_0(),
                      							current);
                    }
                    }
                    otherlv_2=(Token)match(input,Class,FOLLOW_60); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt132=2;
                    int LA132_0 = input.LA(1);
                    if ( ((LA132_0>=Intersection && LA132_0<=Constructor)||(LA132_0>=Promisify && LA132_0<=Abstract)||LA132_0==External||(LA132_0>=Private && LA132_0<=Project)||LA132_0==Public||LA132_0==Static||LA132_0==Target||(LA132_0>=Async && LA132_0<=Await)||LA132_0==Union||LA132_0==This||LA132_0==From||LA132_0==Type||(LA132_0>=Get && LA132_0<=Let)||(LA132_0>=Out && LA132_0<=Set)||LA132_0==As||LA132_0==Of||LA132_0==RULE_IDENTIFIER) ) {
                        alt132=1;
                    }
                    else if ( (LA132_0==Implements) ) {
                        int LA132_2 = input.LA(2);
                        if ( (LA132_2==Implements||LA132_2==Extends||LA132_2==LeftCurlyBracket) ) {
                            alt132=1;
                        }
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getNameBindingIdentifierParserRuleCall_1_0_2_0());
                            }
                            pushFollow(FOLLOW_60);
                            lv_name_3_0=norm1_BindingIdentifier();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
                              							}
                              							set(
                              								current,
                              								"name",
                              								lv_name_3_0,
                              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt133=2;
                    int LA133_0 = input.LA(1);
                    if ( (LA133_0==Implements||LA133_0==Extends) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                              						}
                              						newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3());
                            }
                            pushFollow(FOLLOW_60);
                            this_ClassExtendsImplements_4=norm1_ClassExtendsImplements(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ClassExtendsImplements_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_Members_5=norm1_Members(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_Members_5;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1());
                    }
                    pushFollow(FOLLOW_49);
                    this_AsyncNoTrailingLineBreak_7=ruleAsyncNoTrailingLineBreak(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_AsyncNoTrailingLineBreak_7;
                      					afterParserOrEnumRuleCall();
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedExpressionRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionImpl_8=norm6_FunctionImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FunctionImpl_8;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4TypeVariable() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4TypeVariable = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4TypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4TypeVariable=ruleN4TypeVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4TypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4TypeVariable() throws RecognitionException {
        EObject current = null;
        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token otherlv_3=null;
        Token lv_declaredOptional_5_0=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject lv_declaredUpperBoundNode_4_0 = null;
        EObject lv_declaredDefaultArgumentNode_6_0 = null;
        	enterRule();
        try {
            {
            {
            int alt135=3;
            int LA135_0 = input.LA(1);
            if ( (LA135_0==Out) ) {
                alt135=1;
            }
            else if ( (LA135_0==In) ) {
                alt135=2;
            }
            switch (alt135) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_61); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getN4TypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4TypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", lv_declaredCovariant_0_0 != null, "out");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_61); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getN4TypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4TypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", lv_declaredContravariant_1_0 != null, "in");
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4TypeVariableAccess().getNameIdentifierOrThisParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_62);
            lv_name_2_0=ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4TypeVariableRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.N4JS.IdentifierOrThis");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt136=2;
            int LA136_0 = input.LA(1);
            if ( (LA136_0==Extends) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getN4TypeVariableAccess().getExtendsKeyword_2_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4TypeVariableAccess().getDeclaredUpperBoundNodeTypeReferenceNodeParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_declaredUpperBoundNode_4_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4TypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBoundNode",
                      							lv_declaredUpperBoundNode_4_0,
                      							"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            int alt138=2;
            int LA138_0 = input.LA(1);
            if ( (LA138_0==EqualsSign) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredOptional_5_0=(Token)match(input,EqualsSign,FOLLOW_64); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredOptional_5_0, grammarAccess.getN4TypeVariableAccess().getDeclaredOptionalEqualsSignKeyword_3_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4TypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_5_0 != null, "=");
                    }
                    }
                    }
                    int alt137=2;
                    int LA137_0 = input.LA(1);
                    if ( ((LA137_0>=Intersection && LA137_0<=Constructor)||LA137_0==Promisify||LA137_0==Default||LA137_0==Target||LA137_0==Await||LA137_0==False||LA137_0==Union||LA137_0==This||(LA137_0>=This_1 && LA137_0<=Void)||LA137_0==LeftParenthesis||LA137_0==PlusSign||LA137_0==HyphenMinus||LA137_0==QuestionMark||LA137_0==LeftSquareBracket||LA137_0==LeftCurlyBracket||LA137_0==Tilde||LA137_0==RULE_IDENTIFIER||LA137_0==RULE_INT||LA137_0==RULE_DOUBLE||(LA137_0>=RULE_BINARY_INT && LA137_0<=RULE_SCIENTIFIC_INT)||LA137_0==RULE_STRING) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              						newCompositeNode(grammarAccess.getN4TypeVariableAccess().getDeclaredDefaultArgumentNodeTypeReferenceNodeParserRuleCall_3_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_declaredDefaultArgumentNode_6_0=ruleTypeReferenceNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getN4TypeVariableRule());
                              						}
                              						set(
                              							current,
                              							"declaredDefaultArgumentNode",
                              							lv_declaredDefaultArgumentNode_6_0,
                              							"org.eclipse.n4js.N4JS.TypeReferenceNode");
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFormalParameter=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementFragment_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=ruleBindingElementFragment(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FormalParameter() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementFragment_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFormalParameterAccess().getFormalParameterAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementFragment_1=norm1_BindingElementFragment(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementFragment_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_variadic_2_0=null;
        Token lv_hasInitializerAssignment_5_0=null;
        EObject lv_bindingPattern_0_0 = null;
        EObject lv_annotations_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ColonSepDeclaredTypeRef_4 = null;
        EObject lv_initializer_6_0 = null;
        	enterRule();
        try {
            {
            {
            int alt142=2;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==LeftCurlyBracket) && (synpred81_InternalN4JSParser())) {
                alt142=1;
            }
            else if ( (LA142_0==LeftSquareBracket) && (synpred81_InternalN4JSParser())) {
                alt142=1;
            }
            else if ( ((LA142_0>=Intersection && LA142_0<=Implements)||(LA142_0>=Promisify && LA142_0<=Abstract)||LA142_0==External||(LA142_0>=Private && LA142_0<=Project)||LA142_0==Public||LA142_0==Static||LA142_0==Target||(LA142_0>=Async && LA142_0<=Await)||LA142_0==Union||(LA142_0>=Yield && LA142_0<=This)||LA142_0==From||LA142_0==Type||LA142_0==FullStopFullStopFullStop||(LA142_0>=Get && LA142_0<=Let)||(LA142_0>=Out && LA142_0<=Set)||LA142_0==As||LA142_0==Of||LA142_0==CommercialAt||LA142_0==RULE_IDENTIFIER) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);
                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_bindingPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);
                        if ( (LA139_0==CommercialAt) ) {
                            alt139=1;
                        }
                        switch (alt139) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	    }
                    	    pushFollow(FOLLOW_65);
                    	    lv_annotations_1_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop139;
                        }
                    } while (true);
                    int alt140=2;
                    int LA140_0 = input.LA(1);
                    if ( (LA140_0==FullStopFullStopFullStop) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            {
                            {
                            lv_variadic_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_variadic_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", lv_variadic_2_0 != null, "...");
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_2_0());
                    }
                    pushFollow(FOLLOW_66);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt141=2;
                    int LA141_0 = input.LA(1);
                    if ( (LA141_0==Colon) ) {
                        alt141=1;
                    }
                    switch (alt141) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_3());
                            }
                            pushFollow(FOLLOW_63);
                            this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ColonSepDeclaredTypeRef_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt144=2;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==EqualsSign) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_5_0=(Token)match(input,EqualsSign,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_hasInitializerAssignment_5_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", lv_hasInitializerAssignment_5_0 != null, "=");
                    }
                    }
                    }
                    int alt143=2;
                    int LA143_0 = input.LA(1);
                    if ( ((LA143_0>=Intersection && LA143_0<=Implements)||(LA143_0>=Promisify && LA143_0<=Abstract)||(LA143_0>=External && LA143_0<=Function)||(LA143_0>=Private && LA143_0<=Delete)||(LA143_0>=Import && LA143_0<=Public)||LA143_0==Static||(LA143_0>=Target && LA143_0<=Await)||LA143_0==Class||(LA143_0>=False && LA143_0<=Super)||LA143_0==Union||(LA143_0>=Yield && LA143_0<=This)||(LA143_0>=From && LA143_0<=Void)||(LA143_0>=Get && LA143_0<=Set)||LA143_0==PlusSignPlusSign||(LA143_0>=HyphenMinusHyphenMinus && LA143_0<=SolidusEqualsSign)||LA143_0==As||LA143_0==Of||LA143_0==ExclamationMark||LA143_0==LeftParenthesis||LA143_0==PlusSign||LA143_0==HyphenMinus||LA143_0==Solidus||LA143_0==LessThanSign||(LA143_0>=CommercialAt && LA143_0<=LeftSquareBracket)||LA143_0==LeftCurlyBracket||LA143_0==Tilde||(LA143_0>=RULE_TEMPLATE_HEAD && LA143_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA143_0==RULE_IDENTIFIER||LA143_0==RULE_INT||LA143_0==RULE_DOUBLE||(LA143_0>=RULE_BINARY_INT && LA143_0<=RULE_SCIENTIFIC_INT)||LA143_0==RULE_STRING) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_6_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_6_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementFragment(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_variadic_2_0=null;
        Token lv_hasInitializerAssignment_5_0=null;
        EObject lv_bindingPattern_0_0 = null;
        EObject lv_annotations_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_ColonSepDeclaredTypeRef_4 = null;
        EObject lv_initializer_6_0 = null;
        	enterRule();
        try {
            {
            {
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==LeftCurlyBracket) && (synpred82_InternalN4JSParser())) {
                alt148=1;
            }
            else if ( (LA148_0==LeftSquareBracket) && (synpred82_InternalN4JSParser())) {
                alt148=1;
            }
            else if ( ((LA148_0>=Intersection && LA148_0<=Implements)||(LA148_0>=Promisify && LA148_0<=Abstract)||LA148_0==External||(LA148_0>=Private && LA148_0<=Project)||LA148_0==Public||LA148_0==Static||LA148_0==Target||(LA148_0>=Async && LA148_0<=Await)||LA148_0==Union||LA148_0==This||LA148_0==From||LA148_0==Type||LA148_0==FullStopFullStopFullStop||(LA148_0>=Get && LA148_0<=Let)||(LA148_0>=Out && LA148_0<=Set)||LA148_0==As||LA148_0==Of||LA148_0==CommercialAt||LA148_0==RULE_IDENTIFIER) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);
                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getBindingPatternBindingPatternParserRuleCall_0_0_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_bindingPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						set(
                      							current,
                      							"bindingPattern",
                      							lv_bindingPattern_0_0,
                      							"org.eclipse.n4js.N4JS.BindingPattern");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);
                        if ( (LA145_0==CommercialAt) ) {
                            alt145=1;
                        }
                        switch (alt145) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getAnnotationsAnnotationParserRuleCall_0_1_0_0());
                    	    }
                    	    pushFollow(FOLLOW_65);
                    	    lv_annotations_1_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"annotations",
                    	      								lv_annotations_1_0,
                    	      								"org.eclipse.n4js.N4JS.Annotation");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop145;
                        }
                    } while (true);
                    int alt146=2;
                    int LA146_0 = input.LA(1);
                    if ( (LA146_0==FullStopFullStopFullStop) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            {
                            {
                            lv_variadic_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_variadic_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              							}
                              							setWithLastConsumed(current, "variadic", lv_variadic_2_0 != null, "...");
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getNameBindingIdentifierParserRuleCall_0_1_2_0());
                    }
                    pushFollow(FOLLOW_66);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt147=2;
                    int LA147_0 = input.LA(1);
                    if ( (LA147_0==Colon) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_3());
                            }
                            pushFollow(FOLLOW_63);
                            this_ColonSepDeclaredTypeRef_4=ruleColonSepDeclaredTypeRef(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						current = this_ColonSepDeclaredTypeRef_4;
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==EqualsSign) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_5_0=(Token)match(input,EqualsSign,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_hasInitializerAssignment_5_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBindingElementFragmentRule());
                      						}
                      						setWithLastConsumed(current, "hasInitializerAssignment", lv_hasInitializerAssignment_5_0 != null, "=");
                    }
                    }
                    }
                    int alt149=2;
                    int LA149_0 = input.LA(1);
                    if ( ((LA149_0>=Intersection && LA149_0<=Implements)||(LA149_0>=Promisify && LA149_0<=Abstract)||(LA149_0>=External && LA149_0<=Function)||(LA149_0>=Private && LA149_0<=Delete)||(LA149_0>=Import && LA149_0<=Public)||LA149_0==Static||(LA149_0>=Target && LA149_0<=Await)||LA149_0==Class||(LA149_0>=False && LA149_0<=Super)||LA149_0==Union||(LA149_0>=Yield && LA149_0<=This)||(LA149_0>=From && LA149_0<=Void)||(LA149_0>=Get && LA149_0<=Set)||LA149_0==PlusSignPlusSign||(LA149_0>=HyphenMinusHyphenMinus && LA149_0<=SolidusEqualsSign)||LA149_0==As||LA149_0==Of||LA149_0==ExclamationMark||LA149_0==LeftParenthesis||LA149_0==PlusSign||LA149_0==HyphenMinus||LA149_0==Solidus||LA149_0==LessThanSign||(LA149_0>=CommercialAt && LA149_0<=LeftSquareBracket)||LA149_0==LeftCurlyBracket||LA149_0==Tilde||(LA149_0>=RULE_TEMPLATE_HEAD && LA149_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA149_0==RULE_IDENTIFIER||LA149_0==RULE_INT||LA149_0==RULE_DOUBLE||(LA149_0>=RULE_BINARY_INT && LA149_0<=RULE_SCIENTIFIC_INT)||LA149_0==RULE_STRING) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              						newCompositeNode(grammarAccess.getBindingElementFragmentAccess().getInitializerAssignmentExpressionParserRuleCall_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_initializer_6_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getBindingElementFragmentRule());
                              						}
                              						set(
                              							current,
                              							"initializer",
                              							lv_initializer_6_0,
                              							"org.eclipse.n4js.N4JS.AssignmentExpression");
                              						afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlock=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);
                if ( ((LA151_0>=Intersection && LA151_0<=Implements)||(LA151_0>=Promisify && LA151_0<=Function)||(LA151_0>=Private && LA151_0<=Delete)||(LA151_0>=Import && LA151_0<=Break)||(LA151_0>=Class && LA151_0<=This)||(LA151_0>=From && LA151_0<=With)||(LA151_0>=For && LA151_0<=Var)||LA151_0==PlusSignPlusSign||(LA151_0>=HyphenMinusHyphenMinus && LA151_0<=SolidusEqualsSign)||(LA151_0>=As && LA151_0<=If)||LA151_0==Of||LA151_0==ExclamationMark||LA151_0==LeftParenthesis||LA151_0==PlusSign||LA151_0==HyphenMinus||LA151_0==Solidus||(LA151_0>=Semicolon && LA151_0<=LessThanSign)||(LA151_0>=CommercialAt && LA151_0<=LeftSquareBracket)||LA151_0==LeftCurlyBracket||LA151_0==Tilde||(LA151_0>=RULE_TEMPLATE_HEAD && LA151_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA151_0==RULE_IDENTIFIER||LA151_0==RULE_INT||LA151_0==RULE_DOUBLE||(LA151_0>=RULE_BINARY_INT && LA151_0<=RULE_SCIENTIFIC_INT)||LA151_0==RULE_STRING) ) {
                    alt151=1;
                }
                switch (alt151) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_statements_2_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop151;
                }
            } while (true);
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Block() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_statements_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getBlockAccess().getBlockAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);
                if ( ((LA152_0>=Intersection && LA152_0<=Implements)||(LA152_0>=Promisify && LA152_0<=Function)||(LA152_0>=Private && LA152_0<=Delete)||(LA152_0>=Import && LA152_0<=Break)||(LA152_0>=Class && LA152_0<=This)||(LA152_0>=From && LA152_0<=With)||(LA152_0>=For && LA152_0<=Var)||LA152_0==PlusSignPlusSign||(LA152_0>=HyphenMinusHyphenMinus && LA152_0<=SolidusEqualsSign)||(LA152_0>=As && LA152_0<=If)||LA152_0==Of||LA152_0==ExclamationMark||LA152_0==LeftParenthesis||LA152_0==PlusSign||LA152_0==HyphenMinus||LA152_0==Solidus||(LA152_0>=Semicolon && LA152_0<=LessThanSign)||(LA152_0>=CommercialAt && LA152_0<=LeftSquareBracket)||LA152_0==LeftCurlyBracket||LA152_0==Tilde||(LA152_0>=RULE_TEMPLATE_HEAD && LA152_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA152_0==RULE_IDENTIFIER||LA152_0==RULE_INT||LA152_0==RULE_DOUBLE||(LA152_0>=RULE_BINARY_INT && LA152_0<=RULE_SCIENTIFIC_INT)||LA152_0==RULE_STRING) ) {
                    alt152=1;
                }
                switch (alt152) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_53);
            	    lv_statements_2_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getBlockRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_2_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop152;
                }
            } while (true);
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRootStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRootStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRootStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRootStatement=ruleRootStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRootStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRootStatement() throws RecognitionException {
        EObject current = null;
        EObject this_Block_0 = null;
        EObject this_FunctionDeclaration_1 = null;
        EObject this_VariableStatement_2 = null;
        EObject this_EmptyStatement_3 = null;
        EObject this_LabelledStatement_4 = null;
        EObject this_ExpressionStatement_5 = null;
        EObject this_IfStatement_6 = null;
        EObject this_IterationStatement_7 = null;
        EObject this_ContinueStatement_8 = null;
        EObject this_BreakStatement_9 = null;
        EObject this_ReturnStatement_10 = null;
        EObject this_WithStatement_11 = null;
        EObject this_SwitchStatement_12 = null;
        EObject this_ThrowStatement_13 = null;
        EObject this_TryStatement_14 = null;
        EObject this_DebuggerStatement_15 = null;
        	enterRule();
        try {
            {
            int alt153=16;
            alt153 = dfa153.predict(input);
            switch (alt153) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm1_VariableStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=ruleLabelledStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=ruleExpressionStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=ruleIfStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=ruleIterationStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=ruleContinueStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=ruleBreakStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=ruleReturnStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=ruleWithStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=ruleSwitchStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=ruleThrowStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=ruleTryStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RootStatement() throws RecognitionException {
        EObject current = null;
        EObject this_Block_0 = null;
        EObject this_FunctionDeclaration_1 = null;
        EObject this_VariableStatement_2 = null;
        EObject this_EmptyStatement_3 = null;
        EObject this_LabelledStatement_4 = null;
        EObject this_ExpressionStatement_5 = null;
        EObject this_IfStatement_6 = null;
        EObject this_IterationStatement_7 = null;
        EObject this_ContinueStatement_8 = null;
        EObject this_BreakStatement_9 = null;
        EObject this_ReturnStatement_10 = null;
        EObject this_WithStatement_11 = null;
        EObject this_SwitchStatement_12 = null;
        EObject this_ThrowStatement_13 = null;
        EObject this_TryStatement_14 = null;
        EObject this_DebuggerStatement_15 = null;
        	enterRule();
        try {
            {
            int alt154=16;
            alt154 = dfa154.predict(input);
            switch (alt154) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Block_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Block_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionDeclaration_1=norm1_FunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_FunctionDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableStatement_2=norm3_VariableStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableStatement_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_EmptyStatement_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_EmptyStatement_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LabelledStatement_4=norm1_LabelledStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_LabelledStatement_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ExpressionStatement_5=norm1_ExpressionStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ExpressionStatement_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_IfStatement_6=norm1_IfStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IfStatement_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_IterationStatement_7=norm1_IterationStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IterationStatement_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ContinueStatement_8=norm1_ContinueStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ContinueStatement_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_BreakStatement_9=norm1_BreakStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BreakStatement_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReturnStatement_10=norm1_ReturnStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ReturnStatement_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_WithStatement_11=norm1_WithStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WithStatement_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_SwitchStatement_12=norm1_SwitchStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SwitchStatement_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThrowStatement_13=norm1_ThrowStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThrowStatement_13;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_TryStatement_14=norm1_TryStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TryStatement_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_DebuggerStatement_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DebuggerStatement_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStatement=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStatement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedFunctionDeclaration_0 = null;
        EObject this_RootStatement_1 = null;
        	enterRule();
        try {
            {
            int alt155=2;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=ruleAnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Statement() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedFunctionDeclaration_0 = null;
        EObject this_RootStatement_1 = null;
        	enterRule();
        try {
            {
            int alt156=2;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedFunctionDeclaration_0=norm1_AnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AnnotatedFunctionDeclaration_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_RootStatement_1=norm1_RootStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RootStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;
        EObject lv_varDeclsOrBindings_2_0 = null;
        EObject lv_varDeclsOrBindings_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
            }
            pushFollow(FOLLOW_33);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_34);
            lv_varDeclsOrBindings_2_0=norm1_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);
                if ( (LA157_0==Comma) ) {
                    alt157=1;
                }
                switch (alt157) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_varDeclsOrBindings_4_0=norm1_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop157;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        Enumerator lv_varStmtKeyword_1_0 = null;
        EObject lv_varDeclsOrBindings_2_0 = null;
        EObject lv_varDeclsOrBindings_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getVariableStatementAccess().getVariableStatementAction_0_0_0(),
              							current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_0_0_1_0());
            }
            pushFollow(FOLLOW_33);
            lv_varStmtKeyword_1_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              							}
              							set(
              								current,
              								"varStmtKeyword",
              								lv_varStmtKeyword_1_0,
              								"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_34);
            lv_varDeclsOrBindings_2_0=norm3_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_2_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);
                if ( (LA158_0==Comma) ) {
                    alt158=1;
                }
                switch (alt158) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_varDeclsOrBindings_4_0=norm3_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_4_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop158;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableStatementWithModifier() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleVariableStatementWithModifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableStatementWithModifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableStatementWithModifier=ruleVariableStatementWithModifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableStatementWithModifier; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableStatementWithModifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        Enumerator lv_varStmtKeyword_2_0 = null;
        EObject lv_varDeclsOrBindings_3_0 = null;
        EObject lv_varDeclsOrBindings_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableStatementWithModifierAccess().getVariableStatementAction_0(),
              					current);
            }
            }
            loop159:
            do {
                int alt159=2;
                alt159 = dfa159.predict(input);
                switch (alt159) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableStatementWithModifierRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop159;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_2_0());
            }
            pushFollow(FOLLOW_33);
            lv_varStmtKeyword_2_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementWithModifierRule());
              					}
              					set(
              						current,
              						"varStmtKeyword",
              						lv_varStmtKeyword_2_0,
              						"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_34);
            lv_varDeclsOrBindings_3_0=norm1_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementWithModifierRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_3_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);
                if ( (LA160_0==Comma) ) {
                    alt160=1;
                }
                switch (alt160) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getVariableStatementWithModifierAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_varDeclsOrBindings_5_0=norm1_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementWithModifierRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_5_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop160;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getSemiParserRuleCall_5());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableStatementWithModifier() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        Enumerator lv_varStmtKeyword_2_0 = null;
        EObject lv_varDeclsOrBindings_3_0 = null;
        EObject lv_varDeclsOrBindings_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableStatementWithModifierAccess().getVariableStatementAction_0(),
              					current);
            }
            }
            loop161:
            do {
                int alt161=2;
                alt161 = dfa161.predict(input);
                switch (alt161) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableStatementWithModifierRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_1_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop161;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_2_0());
            }
            pushFollow(FOLLOW_33);
            lv_varStmtKeyword_2_0=ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementWithModifierRule());
              					}
              					set(
              						current,
              						"varStmtKeyword",
              						lv_varStmtKeyword_2_0,
              						"org.eclipse.n4js.N4JS.VariableStatementKeyword");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_34);
            lv_varDeclsOrBindings_3_0=norm3_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableStatementWithModifierRule());
              					}
              					add(
              						current,
              						"varDeclsOrBindings",
              						lv_varDeclsOrBindings_3_0,
              						"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);
                if ( (LA162_0==Comma) ) {
                    alt162=1;
                }
                switch (alt162) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getVariableStatementWithModifierAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_34);
            	    lv_varDeclsOrBindings_5_0=norm3_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getVariableStatementWithModifierRule());
            	      						}
            	      						add(
            	      							current,
            	      							"varDeclsOrBindings",
            	      							lv_varDeclsOrBindings_5_0,
            	      							"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop162;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getVariableStatementWithModifierAccess().getSemiParserRuleCall_5());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleVariableDeclarationOrBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDeclarationOrBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDeclarationOrBinding=ruleVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDeclarationOrBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt163=2;
            int LA163_0 = input.LA(1);
            if ( (LA163_0==LeftCurlyBracket) && (synpred97_InternalN4JSParser())) {
                alt163=1;
            }
            else if ( (LA163_0==LeftSquareBracket) && (synpred97_InternalN4JSParser())) {
                alt163=1;
            }
            else if ( ((LA163_0>=Intersection && LA163_0<=Implements)||(LA163_0>=Promisify && LA163_0<=Abstract)||LA163_0==External||(LA163_0>=Private && LA163_0<=Project)||LA163_0==Public||LA163_0==Static||LA163_0==Target||(LA163_0>=Async && LA163_0<=Await)||LA163_0==Union||(LA163_0>=Yield && LA163_0<=This)||LA163_0==From||LA163_0==Type||(LA163_0>=Get && LA163_0<=Let)||(LA163_0>=Out && LA163_0<=Set)||LA163_0==As||LA163_0==Of||LA163_0==CommercialAt||LA163_0==RULE_IDENTIFIER) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);
                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=ruleVariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==LeftCurlyBracket) && (synpred98_InternalN4JSParser())) {
                alt164=1;
            }
            else if ( (LA164_0==LeftSquareBracket) && (synpred98_InternalN4JSParser())) {
                alt164=1;
            }
            else if ( ((LA164_0>=Intersection && LA164_0<=Implements)||(LA164_0>=Promisify && LA164_0<=Abstract)||LA164_0==External||(LA164_0>=Private && LA164_0<=Project)||LA164_0==Public||LA164_0==Static||LA164_0==Target||(LA164_0>=Async && LA164_0<=Await)||LA164_0==Union||(LA164_0>=Yield && LA164_0<=This)||LA164_0==From||LA164_0==Type||(LA164_0>=Get && LA164_0<=Let)||(LA164_0>=Out && LA164_0<=Set)||LA164_0==As||LA164_0==Of||LA164_0==CommercialAt||LA164_0==RULE_IDENTIFIER) ) {
                alt164=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);
                throw nvae;
            }
            switch (alt164) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm1_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt165=2;
            int LA165_0 = input.LA(1);
            if ( (LA165_0==LeftCurlyBracket) && (synpred99_InternalN4JSParser())) {
                alt165=1;
            }
            else if ( (LA165_0==LeftSquareBracket) && (synpred99_InternalN4JSParser())) {
                alt165=1;
            }
            else if ( ((LA165_0>=Intersection && LA165_0<=Implements)||(LA165_0>=Promisify && LA165_0<=Abstract)||LA165_0==External||(LA165_0>=Private && LA165_0<=Project)||LA165_0==Public||LA165_0==Static||LA165_0==Target||(LA165_0>=Async && LA165_0<=Await)||LA165_0==Union||LA165_0==This||LA165_0==From||LA165_0==Type||(LA165_0>=Get && LA165_0<=Let)||(LA165_0>=Out && LA165_0<=Set)||LA165_0==As||LA165_0==Of||LA165_0==CommercialAt||LA165_0==RULE_IDENTIFIER) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);
                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm2_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==LeftCurlyBracket) && (synpred100_InternalN4JSParser())) {
                alt166=1;
            }
            else if ( (LA166_0==LeftSquareBracket) && (synpred100_InternalN4JSParser())) {
                alt166=1;
            }
            else if ( ((LA166_0>=Intersection && LA166_0<=Implements)||(LA166_0>=Promisify && LA166_0<=Abstract)||LA166_0==External||(LA166_0>=Private && LA166_0<=Project)||LA166_0==Public||LA166_0==Static||LA166_0==Target||(LA166_0>=Async && LA166_0<=Await)||LA166_0==Union||LA166_0==This||LA166_0==From||LA166_0==Type||(LA166_0>=Get && LA166_0<=Let)||(LA166_0>=Out && LA166_0<=Set)||LA166_0==As||LA166_0==Of||LA166_0==CommercialAt||LA166_0==RULE_IDENTIFIER) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);
                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm3_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==LeftCurlyBracket) && (synpred101_InternalN4JSParser())) {
                alt167=1;
            }
            else if ( (LA167_0==LeftSquareBracket) && (synpred101_InternalN4JSParser())) {
                alt167=1;
            }
            else if ( ((LA167_0>=Intersection && LA167_0<=Implements)||(LA167_0>=Promisify && LA167_0<=Abstract)||LA167_0==External||(LA167_0>=Private && LA167_0<=Project)||LA167_0==Public||LA167_0==Static||LA167_0==Target||(LA167_0>=Async && LA167_0<=Await)||LA167_0==Union||(LA167_0>=Yield && LA167_0<=This)||LA167_0==From||LA167_0==Type||(LA167_0>=Get && LA167_0<=Let)||(LA167_0>=Out && LA167_0<=Set)||LA167_0==As||LA167_0==Of||LA167_0==CommercialAt||LA167_0==RULE_IDENTIFIER) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);
                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm4_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationOrBinding() throws RecognitionException {
        EObject current = null;
        EObject this_VariableBinding_0 = null;
        EObject this_VariableDeclaration_1 = null;
        	enterRule();
        try {
            {
            int alt168=2;
            int LA168_0 = input.LA(1);
            if ( (LA168_0==LeftCurlyBracket) && (synpred102_InternalN4JSParser())) {
                alt168=1;
            }
            else if ( (LA168_0==LeftSquareBracket) && (synpred102_InternalN4JSParser())) {
                alt168=1;
            }
            else if ( ((LA168_0>=Intersection && LA168_0<=Implements)||(LA168_0>=Promisify && LA168_0<=Abstract)||LA168_0==External||(LA168_0>=Private && LA168_0<=Project)||LA168_0==Public||LA168_0==Static||LA168_0==Target||(LA168_0>=Async && LA168_0<=Await)||LA168_0==Union||LA168_0==This||LA168_0==From||LA168_0==Type||(LA168_0>=Get && LA168_0<=Let)||(LA168_0>=Out && LA168_0<=Set)||LA168_0==As||LA168_0==Of||LA168_0==CommercialAt||LA168_0==RULE_IDENTIFIER) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);
                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableBinding_0=norm6_VariableBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_VariableBinding_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_VariableDeclaration_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_VariableDeclaration_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleVariableBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleVariableBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableBinding=ruleVariableBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_19);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_19);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_19);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_19);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              						}
              						set(
              							current,
              							"expression",
              							lv_expression_2_0,
              							"org.eclipse.n4js.N4JS.AssignmentExpression");
              						afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==EqualsSign) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt170=2;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==EqualsSign) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt171=2;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==EqualsSign) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableBinding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_pattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_pattern_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableBindingRule());
              					}
              					set(
              						current,
              						"pattern",
              						lv_pattern_0_0,
              						"org.eclipse.n4js.N4JS.BindingPattern");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt172=2;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==EqualsSign) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getVariableBindingRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm1_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm3_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm4_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm5_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm6_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_VariableDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getVariableDeclarationAccess().getVariableDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getVariableDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_VariableDeclarationImpl_1=norm7_VariableDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_VariableDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleVariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop173:
            do {
                int alt173=2;
                alt173 = dfa173.predict(input);
                switch (alt173) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop173;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt174=2;
            int LA174_0 = input.LA(1);
            if ( (LA174_0==EqualsSign) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop175:
            do {
                int alt175=2;
                alt175 = dfa175.predict(input);
                switch (alt175) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop175;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt176=2;
            int LA176_0 = input.LA(1);
            if ( (LA176_0==EqualsSign) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop177:
            do {
                int alt177=2;
                alt177 = dfa177.predict(input);
                switch (alt177) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop177;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt178=2;
            int LA178_0 = input.LA(1);
            if ( (LA178_0==EqualsSign) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_2=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            loop179:
            do {
                int alt179=2;
                alt179 = dfa179.predict(input);
                switch (alt179) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop179;
                }
            } while (true);
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_1_0_0_0());
            }
            pushFollow(FOLLOW_63);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_1_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            int alt180=2;
            int LA180_0 = input.LA(1);
            if ( (LA180_0==EqualsSign) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_3_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm4_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop181:
            do {
                int alt181=2;
                alt181 = dfa181.predict(input);
                switch (alt181) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop181;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt182=2;
            int LA182_0 = input.LA(1);
            if ( (LA182_0==Colon) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt183=2;
            int LA183_0 = input.LA(1);
            if ( (LA183_0==EqualsSign) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm5_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop184:
            do {
                int alt184=2;
                alt184 = dfa184.predict(input);
                switch (alt184) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop184;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt185=2;
            int LA185_0 = input.LA(1);
            if ( (LA185_0==Colon) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==EqualsSign) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm6_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop187:
            do {
                int alt187=2;
                alt187 = dfa187.predict(input);
                switch (alt187) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop187;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt188=2;
            int LA188_0 = input.LA(1);
            if ( (LA188_0==Colon) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt189=2;
            int LA189_0 = input.LA(1);
            if ( (LA189_0==EqualsSign) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm7_VariableDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_3=null;
        EObject lv_annotations_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            loop190:
            do {
                int alt190=2;
                alt190 = dfa190.predict(input);
                switch (alt190) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAnnotationParserRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_68);
            	    lv_annotations_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_0_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop190;
                }
            } while (true);
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              								newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0_0());
            }
            pushFollow(FOLLOW_66);
            lv_name_1_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              								if (current==null) {
              									current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
              								}
              								set(
              									current,
              									"name",
              									lv_name_1_0,
              									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              								afterParserOrEnumRuleCall();
            }
            }
            }
            int alt191=2;
            int LA191_0 = input.LA(1);
            if ( (LA191_0==Colon) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1());
                    }
                    pushFollow(FOLLOW_63);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepDeclaredTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            int alt192=2;
            int LA192_0 = input.LA(1);
            if ( (LA192_0==EqualsSign) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_4_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getVariableDeclarationImplRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_4_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEmptyStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyStatement=ruleEmptyStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionStatement=ruleExpressionStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_24);
            lv_expression_0_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ExpressionStatement() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_24);
            lv_expression_0_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_0_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIfStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIfStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIfStatement=ruleIfStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIfStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIfStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;
        EObject lv_ifStmt_4_0 = null;
        EObject lv_elseStmt_6_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_71);
            lv_ifStmt_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt193=2;
            int LA193_0 = input.LA(1);
            if ( (LA193_0==Else) ) {
                int LA193_1 = input.LA(2);
                if ( (synpred119_InternalN4JSParser()) ) {
                    alt193=1;
                }
            }
            switch (alt193) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=ruleStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IfStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_expression_2_0 = null;
        EObject lv_ifStmt_4_0 = null;
        EObject lv_elseStmt_6_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,If,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIfStatementAccess().getIfStmtStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_71);
            lv_ifStmt_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIfStatementRule());
              					}
              					set(
              						current,
              						"ifStmt",
              						lv_ifStmt_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt194=2;
            int LA194_0 = input.LA(1);
            if ( (LA194_0==Else) ) {
                int LA194_1 = input.LA(2);
                if ( (synpred120_InternalN4JSParser()) ) {
                    alt194=1;
                }
            }
            switch (alt194) {
                case 1 :
                    {
                    {
                    otherlv_5=(Token)match(input,Else,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStmtStatementParserRuleCall_5_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_elseStmt_6_0=norm1_Statement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getIfStatementRule());
                      						}
                      						set(
                      							current,
                      							"elseStmt",
                      							lv_elseStmt_6_0,
                      							"org.eclipse.n4js.N4JS.Statement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIterationStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIterationStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIterationStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIterationStatement=ruleIterationStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIterationStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIterationStatement() throws RecognitionException {
        EObject current = null;
        EObject this_DoStatement_0 = null;
        EObject this_WhileStatement_1 = null;
        EObject this_ForStatement_2 = null;
        	enterRule();
        try {
            {
            int alt195=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt195=1;
                }
                break;
            case While:
                {
                alt195=2;
                }
                break;
            case For:
                {
                alt195=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);
                throw nvae;
            }
            switch (alt195) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=ruleDoStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=ruleWhileStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=ruleForStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IterationStatement() throws RecognitionException {
        EObject current = null;
        EObject this_DoStatement_0 = null;
        EObject this_WhileStatement_1 = null;
        EObject this_ForStatement_2 = null;
        	enterRule();
        try {
            {
            int alt196=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt196=1;
                }
                break;
            case While:
                {
                alt196=2;
                }
                break;
            case For:
                {
                alt196=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);
                throw nvae;
            }
            switch (alt196) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoStatement_0=norm1_DoStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoStatement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WhileStatement_1=norm1_WhileStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WhileStatement_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ForStatement_2=norm1_ForStatement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ForStatement_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDoStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoStatement=ruleDoStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_72);
            lv_statement_1_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,While,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_4_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_41); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt197=2;
            alt197 = dfa197.predict(input);
            switch (alt197) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DoStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_statement_1_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Do,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_72);
            lv_statement_1_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_1_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,While,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_4_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getDoStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_4_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_41); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==Semicolon) ) {
                int LA198_1 = input.LA(2);
                if ( (synpred122_InternalN4JSParser()) ) {
                    alt198=1;
                }
            }
            else if ( (LA198_0==EOF||LA198_0==RULE_ML_COMMENT||LA198_0==RULE_EOL) && (synpred122_InternalN4JSParser())) {
                alt198=1;
            }
            else if ( (LA198_0==RightCurlyBracket) ) {
                int LA198_3 = input.LA(2);
                if ( (synpred122_InternalN4JSParser()) ) {
                    alt198=1;
                }
            }
            switch (alt198) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    ruleSemi();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWhileStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWhileStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWhileStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWhileStatement=ruleWhileStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWhileStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWhileStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WhileStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,While,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWhileStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleForStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleForStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getForStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleForStatement=ruleForStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleForStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleForStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_await_2_0=null;
        Token otherlv_3=null;
        Token lv_forIn_5_0=null;
        Token otherlv_7=null;
        Token lv_forIn_10_0=null;
        Token lv_forOf_11_0=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token lv_forIn_20_0=null;
        Token lv_forOf_22_0=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token lv_forIn_29_0=null;
        Token lv_forOf_31_0=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        EObject lv_initExpr_4_0 = null;
        EObject lv_expression_6_0 = null;
        Enumerator lv_varStmtKeyword_8_0 = null;
        EObject lv_varDeclsOrBindings_9_0 = null;
        EObject lv_expression_12_0 = null;
        EObject lv_varDeclsOrBindings_13_0 = null;
        EObject lv_varDeclsOrBindings_15_0 = null;
        EObject lv_expression_17_0 = null;
        EObject lv_updateExpr_19_0 = null;
        EObject lv_expression_21_0 = null;
        EObject lv_expression_23_0 = null;
        EObject lv_initExpr_24_0 = null;
        EObject lv_expression_26_0 = null;
        EObject lv_updateExpr_28_0 = null;
        EObject lv_expression_30_0 = null;
        EObject lv_expression_32_0 = null;
        EObject lv_expression_34_0 = null;
        EObject lv_updateExpr_36_0 = null;
        EObject lv_statement_38_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,For,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            int alt199=2;
            int LA199_0 = input.LA(1);
            if ( (LA199_0==Await) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    {
                    {
                    lv_await_2_0=(Token)match(input,Await,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_await_2_0, grammarAccess.getForStatementAccess().getAwaitAwaitKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getForStatementRule());
                      					}
                      					setWithLastConsumed(current, "await", lv_await_2_0 != null, "await");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3());
            }
            int alt217=2;
            alt217 = dfa217.predict(input);
            switch (alt217) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_4_0_0_0_0());
                    }
                    pushFollow(FOLLOW_75);
                    lv_initExpr_4_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_4_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_forIn_5_0=(Token)match(input,In,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								newLeafNode(lv_forIn_5_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_0_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", lv_forIn_5_0 != null, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_0_0_2_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_expression_6_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_6_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt216=3;
                    alt216 = dfa216.predict(input);
                    switch (alt216) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_4_1_0_0_0_0());
                            }
                            pushFollow(FOLLOW_33);
                            lv_varStmtKeyword_8_0=ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_8_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt208=2;
                            alt208 = dfa208.predict(input);
                            switch (alt208) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0());
                                    }
                                    pushFollow(FOLLOW_76);
                                    lv_varDeclsOrBindings_9_0=ruleBindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_9_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt200=2;
                                    int LA200_0 = input.LA(1);
                                    if ( (LA200_0==In) ) {
                                        alt200=1;
                                    }
                                    else if ( (LA200_0==Of) ) {
                                        alt200=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 200, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt200) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_10_0=(Token)match(input,In,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_10_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_0_0_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", lv_forIn_10_0 != null, "in");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_11_0=(Token)match(input,Of,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_11_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_0_0_1_1_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", lv_forOf_11_0 != null, "of");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt201=2;
                                    alt201 = dfa201.predict(input);
                                    switch (alt201) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0());
                                            }
                                            pushFollow(FOLLOW_69);
                                            lv_expression_12_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_12_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0());
                                    }
                                    pushFollow(FOLLOW_78);
                                    lv_varDeclsOrBindings_13_0=norm4_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_13_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt207=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt207=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt207=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt207=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 207, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt207) {
                                        case 1 :
                                            {
                                            {
                                            loop202:
                                            do {
                                                int alt202=2;
                                                int LA202_0 = input.LA(1);
                                                if ( (LA202_0==Comma) ) {
                                                    alt202=1;
                                                }
                                                switch (alt202) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_14=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      												newLeafNode(otherlv_14, grammarAccess.getForStatementAccess().getCommaKeyword_4_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {
                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0());
                                            	    }
                                            	    pushFollow(FOLLOW_79);
                                            	    lv_varDeclsOrBindings_15_0=ruleVariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_15_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop202;
                                                }
                                            } while (true);
                                            otherlv_16=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_16, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_1());
                                            }
                                            int alt203=2;
                                            int LA203_0 = input.LA(1);
                                            if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||(LA203_0>=Import && LA203_0<=Public)||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||(LA203_0>=HyphenMinusHyphenMinus && LA203_0<=SolidusEqualsSign)||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_INT||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_BINARY_INT && LA203_0<=RULE_SCIENTIFIC_INT)||LA203_0==RULE_STRING) ) {
                                                alt203=1;
                                            }
                                            switch (alt203) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0());
                                                    }
                                                    pushFollow(FOLLOW_81);
                                                    lv_expression_17_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_17_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            otherlv_18=(Token)match(input,Semicolon,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_18, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_3());
                                            }
                                            int alt204=2;
                                            int LA204_0 = input.LA(1);
                                            if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||(LA204_0>=Import && LA204_0<=Public)||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||(LA204_0>=Get && LA204_0<=Set)||LA204_0==PlusSignPlusSign||(LA204_0>=HyphenMinusHyphenMinus && LA204_0<=SolidusEqualsSign)||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||LA204_0==PlusSign||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_INT||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_BINARY_INT && LA204_0<=RULE_SCIENTIFIC_INT)||LA204_0==RULE_STRING) ) {
                                                alt204=1;
                                            }
                                            switch (alt204) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0());
                                                    }
                                                    pushFollow(FOLLOW_69);
                                                    lv_updateExpr_19_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_19_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_20_0=(Token)match(input,In,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_20_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_1_1_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", lv_forIn_20_0 != null, "in");
                                            }
                                            }
                                            }
                                            int alt205=2;
                                            int LA205_0 = input.LA(1);
                                            if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||(LA205_0>=External && LA205_0<=Function)||(LA205_0>=Private && LA205_0<=Delete)||(LA205_0>=Import && LA205_0<=Public)||LA205_0==Static||(LA205_0>=Target && LA205_0<=Await)||LA205_0==Class||(LA205_0>=False && LA205_0<=Super)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||(LA205_0>=From && LA205_0<=Void)||(LA205_0>=Get && LA205_0<=Set)||LA205_0==PlusSignPlusSign||(LA205_0>=HyphenMinusHyphenMinus && LA205_0<=SolidusEqualsSign)||LA205_0==As||LA205_0==Of||LA205_0==ExclamationMark||LA205_0==LeftParenthesis||LA205_0==PlusSign||LA205_0==HyphenMinus||LA205_0==Solidus||LA205_0==LessThanSign||(LA205_0>=CommercialAt && LA205_0<=LeftSquareBracket)||LA205_0==LeftCurlyBracket||LA205_0==Tilde||(LA205_0>=RULE_TEMPLATE_HEAD && LA205_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA205_0==RULE_IDENTIFIER||LA205_0==RULE_INT||LA205_0==RULE_DOUBLE||(LA205_0>=RULE_BINARY_INT && LA205_0<=RULE_SCIENTIFIC_INT)||LA205_0==RULE_STRING) ) {
                                                alt205=1;
                                            }
                                            switch (alt205) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0());
                                                    }
                                                    pushFollow(FOLLOW_69);
                                                    lv_expression_21_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_21_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_22_0=(Token)match(input,Of,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_22_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_1_1_2_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", lv_forOf_22_0 != null, "of");
                                            }
                                            }
                                            }
                                            int alt206=2;
                                            int LA206_0 = input.LA(1);
                                            if ( ((LA206_0>=Intersection && LA206_0<=Implements)||(LA206_0>=Promisify && LA206_0<=Abstract)||(LA206_0>=External && LA206_0<=Function)||(LA206_0>=Private && LA206_0<=Delete)||(LA206_0>=Import && LA206_0<=Public)||LA206_0==Static||(LA206_0>=Target && LA206_0<=Await)||LA206_0==Class||(LA206_0>=False && LA206_0<=Super)||LA206_0==Union||(LA206_0>=Yield && LA206_0<=This)||(LA206_0>=From && LA206_0<=Void)||(LA206_0>=Get && LA206_0<=Set)||LA206_0==PlusSignPlusSign||(LA206_0>=HyphenMinusHyphenMinus && LA206_0<=SolidusEqualsSign)||LA206_0==As||LA206_0==Of||LA206_0==ExclamationMark||LA206_0==LeftParenthesis||LA206_0==PlusSign||LA206_0==HyphenMinus||LA206_0==Solidus||LA206_0==LessThanSign||(LA206_0>=CommercialAt && LA206_0<=LeftSquareBracket)||LA206_0==LeftCurlyBracket||LA206_0==Tilde||(LA206_0>=RULE_TEMPLATE_HEAD && LA206_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA206_0==RULE_IDENTIFIER||LA206_0==RULE_INT||LA206_0==RULE_DOUBLE||(LA206_0>=RULE_BINARY_INT && LA206_0<=RULE_SCIENTIFIC_INT)||LA206_0==RULE_STRING) ) {
                                                alt206=1;
                                            }
                                            switch (alt206) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0());
                                                    }
                                                    pushFollow(FOLLOW_69);
                                                    lv_expression_23_0=norm1_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_23_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_4_1_0_1_0_0());
                            }
                            pushFollow(FOLLOW_82);
                            lv_initExpr_24_0=ruleExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_24_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt213=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt213=1;
                                }
                                break;
                            case In:
                                {
                                alt213=2;
                                }
                                break;
                            case Of:
                                {
                                alt213=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 213, 0, input);
                                throw nvae;
                            }
                            switch (alt213) {
                                case 1 :
                                    {
                                    {
                                    otherlv_25=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_25, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_0());
                                    }
                                    int alt209=2;
                                    int LA209_0 = input.LA(1);
                                    if ( ((LA209_0>=Intersection && LA209_0<=Implements)||(LA209_0>=Promisify && LA209_0<=Abstract)||(LA209_0>=External && LA209_0<=Function)||(LA209_0>=Private && LA209_0<=Delete)||(LA209_0>=Import && LA209_0<=Public)||LA209_0==Static||(LA209_0>=Target && LA209_0<=Await)||LA209_0==Class||(LA209_0>=False && LA209_0<=Super)||LA209_0==Union||(LA209_0>=Yield && LA209_0<=This)||(LA209_0>=From && LA209_0<=Void)||(LA209_0>=Get && LA209_0<=Set)||LA209_0==PlusSignPlusSign||(LA209_0>=HyphenMinusHyphenMinus && LA209_0<=SolidusEqualsSign)||LA209_0==As||LA209_0==Of||LA209_0==ExclamationMark||LA209_0==LeftParenthesis||LA209_0==PlusSign||LA209_0==HyphenMinus||LA209_0==Solidus||LA209_0==LessThanSign||(LA209_0>=CommercialAt && LA209_0<=LeftSquareBracket)||LA209_0==LeftCurlyBracket||LA209_0==Tilde||(LA209_0>=RULE_TEMPLATE_HEAD && LA209_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA209_0==RULE_IDENTIFIER||LA209_0==RULE_INT||LA209_0==RULE_DOUBLE||(LA209_0>=RULE_BINARY_INT && LA209_0<=RULE_SCIENTIFIC_INT)||LA209_0==RULE_STRING) ) {
                                        alt209=1;
                                    }
                                    switch (alt209) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0());
                                            }
                                            pushFollow(FOLLOW_81);
                                            lv_expression_26_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_26_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    otherlv_27=(Token)match(input,Semicolon,FOLLOW_77); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_27, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_2());
                                    }
                                    int alt210=2;
                                    int LA210_0 = input.LA(1);
                                    if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||(LA210_0>=External && LA210_0<=Function)||(LA210_0>=Private && LA210_0<=Delete)||(LA210_0>=Import && LA210_0<=Public)||LA210_0==Static||(LA210_0>=Target && LA210_0<=Await)||LA210_0==Class||(LA210_0>=False && LA210_0<=Super)||LA210_0==Union||(LA210_0>=Yield && LA210_0<=This)||(LA210_0>=From && LA210_0<=Void)||(LA210_0>=Get && LA210_0<=Set)||LA210_0==PlusSignPlusSign||(LA210_0>=HyphenMinusHyphenMinus && LA210_0<=SolidusEqualsSign)||LA210_0==As||LA210_0==Of||LA210_0==ExclamationMark||LA210_0==LeftParenthesis||LA210_0==PlusSign||LA210_0==HyphenMinus||LA210_0==Solidus||LA210_0==LessThanSign||(LA210_0>=CommercialAt && LA210_0<=LeftSquareBracket)||LA210_0==LeftCurlyBracket||LA210_0==Tilde||(LA210_0>=RULE_TEMPLATE_HEAD && LA210_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA210_0==RULE_IDENTIFIER||LA210_0==RULE_INT||LA210_0==RULE_DOUBLE||(LA210_0>=RULE_BINARY_INT && LA210_0<=RULE_SCIENTIFIC_INT)||LA210_0==RULE_STRING) ) {
                                        alt210=1;
                                    }
                                    switch (alt210) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0());
                                            }
                                            pushFollow(FOLLOW_69);
                                            lv_updateExpr_28_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_28_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_29_0=(Token)match(input,In,FOLLOW_77); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forIn_29_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_1_1_1_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", lv_forIn_29_0 != null, "in");
                                    }
                                    }
                                    }
                                    int alt211=2;
                                    int LA211_0 = input.LA(1);
                                    if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||(LA211_0>=Import && LA211_0<=Public)||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||(LA211_0>=HyphenMinusHyphenMinus && LA211_0<=SolidusEqualsSign)||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_INT||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_BINARY_INT && LA211_0<=RULE_SCIENTIFIC_INT)||LA211_0==RULE_STRING) ) {
                                        alt211=1;
                                    }
                                    switch (alt211) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0());
                                            }
                                            pushFollow(FOLLOW_69);
                                            lv_expression_30_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_30_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_31_0=(Token)match(input,Of,FOLLOW_77); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forOf_31_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_1_1_2_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", lv_forOf_31_0 != null, "of");
                                    }
                                    }
                                    }
                                    int alt212=2;
                                    int LA212_0 = input.LA(1);
                                    if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Abstract)||(LA212_0>=External && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||(LA212_0>=Import && LA212_0<=Public)||LA212_0==Static||(LA212_0>=Target && LA212_0<=Await)||LA212_0==Class||(LA212_0>=False && LA212_0<=Super)||LA212_0==Union||(LA212_0>=Yield && LA212_0<=This)||(LA212_0>=From && LA212_0<=Void)||(LA212_0>=Get && LA212_0<=Set)||LA212_0==PlusSignPlusSign||(LA212_0>=HyphenMinusHyphenMinus && LA212_0<=SolidusEqualsSign)||LA212_0==As||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||LA212_0==PlusSign||LA212_0==HyphenMinus||LA212_0==Solidus||LA212_0==LessThanSign||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_INT||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_BINARY_INT && LA212_0<=RULE_SCIENTIFIC_INT)||LA212_0==RULE_STRING) ) {
                                        alt212=1;
                                    }
                                    switch (alt212) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0());
                                            }
                                            pushFollow(FOLLOW_69);
                                            lv_expression_32_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_32_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_33=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_33, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_0());
                            }
                            int alt214=2;
                            int LA214_0 = input.LA(1);
                            if ( ((LA214_0>=Intersection && LA214_0<=Implements)||(LA214_0>=Promisify && LA214_0<=Abstract)||(LA214_0>=External && LA214_0<=Function)||(LA214_0>=Private && LA214_0<=Delete)||(LA214_0>=Import && LA214_0<=Public)||LA214_0==Static||(LA214_0>=Target && LA214_0<=Await)||LA214_0==Class||(LA214_0>=False && LA214_0<=Super)||LA214_0==Union||(LA214_0>=Yield && LA214_0<=This)||(LA214_0>=From && LA214_0<=Void)||(LA214_0>=Get && LA214_0<=Set)||LA214_0==PlusSignPlusSign||(LA214_0>=HyphenMinusHyphenMinus && LA214_0<=SolidusEqualsSign)||LA214_0==As||LA214_0==Of||LA214_0==ExclamationMark||LA214_0==LeftParenthesis||LA214_0==PlusSign||LA214_0==HyphenMinus||LA214_0==Solidus||LA214_0==LessThanSign||(LA214_0>=CommercialAt && LA214_0<=LeftSquareBracket)||LA214_0==LeftCurlyBracket||LA214_0==Tilde||(LA214_0>=RULE_TEMPLATE_HEAD && LA214_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA214_0==RULE_IDENTIFIER||LA214_0==RULE_INT||LA214_0==RULE_DOUBLE||(LA214_0>=RULE_BINARY_INT && LA214_0<=RULE_SCIENTIFIC_INT)||LA214_0==RULE_STRING) ) {
                                alt214=1;
                            }
                            switch (alt214) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_2_1_0());
                                    }
                                    pushFollow(FOLLOW_81);
                                    lv_expression_34_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_34_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            otherlv_35=(Token)match(input,Semicolon,FOLLOW_77); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_35, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_2());
                            }
                            int alt215=2;
                            int LA215_0 = input.LA(1);
                            if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||(LA215_0>=External && LA215_0<=Function)||(LA215_0>=Private && LA215_0<=Delete)||(LA215_0>=Import && LA215_0<=Public)||LA215_0==Static||(LA215_0>=Target && LA215_0<=Await)||LA215_0==Class||(LA215_0>=False && LA215_0<=Super)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||(LA215_0>=From && LA215_0<=Void)||(LA215_0>=Get && LA215_0<=Set)||LA215_0==PlusSignPlusSign||(LA215_0>=HyphenMinusHyphenMinus && LA215_0<=SolidusEqualsSign)||LA215_0==As||LA215_0==Of||LA215_0==ExclamationMark||LA215_0==LeftParenthesis||LA215_0==PlusSign||LA215_0==HyphenMinus||LA215_0==Solidus||LA215_0==LessThanSign||(LA215_0>=CommercialAt && LA215_0<=LeftSquareBracket)||LA215_0==LeftCurlyBracket||LA215_0==Tilde||(LA215_0>=RULE_TEMPLATE_HEAD && LA215_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA215_0==RULE_IDENTIFIER||LA215_0==RULE_INT||LA215_0==RULE_DOUBLE||(LA215_0>=RULE_BINARY_INT && LA215_0<=RULE_SCIENTIFIC_INT)||LA215_0==RULE_STRING) ) {
                                alt215=1;
                            }
                            switch (alt215) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_2_3_0());
                                    }
                                    pushFollow(FOLLOW_69);
                                    lv_updateExpr_36_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_36_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_37, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_38_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_38_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ForStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_await_2_0=null;
        Token otherlv_3=null;
        Token lv_forIn_5_0=null;
        Token otherlv_7=null;
        Token lv_forIn_10_0=null;
        Token lv_forOf_11_0=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token lv_forIn_20_0=null;
        Token lv_forOf_22_0=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token lv_forIn_29_0=null;
        Token lv_forOf_31_0=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        EObject lv_initExpr_4_0 = null;
        EObject lv_expression_6_0 = null;
        Enumerator lv_varStmtKeyword_8_0 = null;
        EObject lv_varDeclsOrBindings_9_0 = null;
        EObject lv_expression_12_0 = null;
        EObject lv_varDeclsOrBindings_13_0 = null;
        EObject lv_varDeclsOrBindings_15_0 = null;
        EObject lv_expression_17_0 = null;
        EObject lv_updateExpr_19_0 = null;
        EObject lv_expression_21_0 = null;
        EObject lv_expression_23_0 = null;
        EObject lv_initExpr_24_0 = null;
        EObject lv_expression_26_0 = null;
        EObject lv_updateExpr_28_0 = null;
        EObject lv_expression_30_0 = null;
        EObject lv_expression_32_0 = null;
        EObject lv_expression_34_0 = null;
        EObject lv_updateExpr_36_0 = null;
        EObject lv_statement_38_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getForStatementAccess().getForStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,For,FOLLOW_73); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==Await) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    {
                    lv_await_2_0=(Token)match(input,Await,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_await_2_0, grammarAccess.getForStatementAccess().getAwaitAwaitKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getForStatementRule());
                      					}
                      					setWithLastConsumed(current, "await", lv_await_2_0 != null, "await");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3());
            }
            int alt236=2;
            alt236 = dfa236.predict(input);
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getInitExprLetIdentifierRefParserRuleCall_4_0_0_0_0());
                    }
                    pushFollow(FOLLOW_75);
                    lv_initExpr_4_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"initExpr",
                      									lv_initExpr_4_0,
                      									"org.eclipse.n4js.N4JS.LetIdentifierRef");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_forIn_5_0=(Token)match(input,In,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								newLeafNode(lv_forIn_5_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_0_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getForStatementRule());
                      								}
                      								setWithLastConsumed(current, "forIn", lv_forIn_5_0 != null, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_0_0_2_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_expression_6_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getForStatementRule());
                      								}
                      								set(
                      									current,
                      									"expression",
                      									lv_expression_6_0,
                      									"org.eclipse.n4js.N4JS.Expression");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt235=3;
                    alt235 = dfa235.predict(input);
                    switch (alt235) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getVarStmtKeywordVariableStatementKeywordEnumRuleCall_4_1_0_0_0_0());
                            }
                            pushFollow(FOLLOW_33);
                            lv_varStmtKeyword_8_0=ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"varStmtKeyword",
                              										lv_varStmtKeyword_8_0,
                              										"org.eclipse.n4js.N4JS.VariableStatementKeyword");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt227=2;
                            alt227 = dfa227.predict(input);
                            switch (alt227) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      												newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0());
                                    }
                                    pushFollow(FOLLOW_76);
                                    lv_varDeclsOrBindings_9_0=norm2_BindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      												if (current==null) {
                                      													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      												}
                                      												add(
                                      													current,
                                      													"varDeclsOrBindings",
                                      													lv_varDeclsOrBindings_9_0,
                                      													"org.eclipse.n4js.N4JS.BindingIdentifierAsVariableDeclaration");
                                      												afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt219=2;
                                    int LA219_0 = input.LA(1);
                                    if ( (LA219_0==In) ) {
                                        alt219=1;
                                    }
                                    else if ( (LA219_0==Of) ) {
                                        alt219=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 219, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt219) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            lv_forIn_10_0=(Token)match(input,In,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_10_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_0_0_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", lv_forIn_10_0 != null, "in");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            lv_forOf_11_0=(Token)match(input,Of,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_11_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_0_0_1_1_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", lv_forOf_11_0 != null, "of");
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt220=2;
                                    alt220 = dfa220.predict(input);
                                    switch (alt220) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              												newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0());
                                            }
                                            pushFollow(FOLLOW_69);
                                            lv_expression_12_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              												if (current==null) {
                                              													current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              												}
                                              												set(
                                              													current,
                                              													"expression",
                                              													lv_expression_12_0,
                                              													"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              												afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      											newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0());
                                    }
                                    pushFollow(FOLLOW_78);
                                    lv_varDeclsOrBindings_13_0=norm6_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      											}
                                      											add(
                                      												current,
                                      												"varDeclsOrBindings",
                                      												lv_varDeclsOrBindings_13_0,
                                      												"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                      											afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    int alt226=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt226=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt226=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt226=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return current;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 226, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt226) {
                                        case 1 :
                                            {
                                            {
                                            loop221:
                                            do {
                                                int alt221=2;
                                                int LA221_0 = input.LA(1);
                                                if ( (LA221_0==Comma) ) {
                                                    alt221=1;
                                                }
                                                switch (alt221) {
                                            	case 1 :
                                            	    {
                                            	    otherlv_14=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      												newLeafNode(otherlv_14, grammarAccess.getForStatementAccess().getCommaKeyword_4_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    if ( state.backtracking==0 ) {
                                            	      														newCompositeNode(grammarAccess.getForStatementAccess().getVarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0());
                                            	    }
                                            	    pushFollow(FOLLOW_79);
                                            	    lv_varDeclsOrBindings_15_0=norm2_VariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return current;
                                            	    if ( state.backtracking==0 ) {
                                            	      														if (current==null) {
                                            	      															current = createModelElementForParent(grammarAccess.getForStatementRule());
                                            	      														}
                                            	      														add(
                                            	      															current,
                                            	      															"varDeclsOrBindings",
                                            	      															lv_varDeclsOrBindings_15_0,
                                            	      															"org.eclipse.n4js.N4JS.VariableDeclarationOrBinding");
                                            	      														afterParserOrEnumRuleCall();
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop221;
                                                }
                                            } while (true);
                                            otherlv_16=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_16, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_1());
                                            }
                                            int alt222=2;
                                            int LA222_0 = input.LA(1);
                                            if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Abstract)||(LA222_0>=External && LA222_0<=Function)||(LA222_0>=Private && LA222_0<=Delete)||(LA222_0>=Import && LA222_0<=Public)||LA222_0==Static||(LA222_0>=Target && LA222_0<=Await)||LA222_0==Class||(LA222_0>=False && LA222_0<=Super)||LA222_0==Union||(LA222_0>=Yield && LA222_0<=This)||(LA222_0>=From && LA222_0<=Void)||(LA222_0>=Get && LA222_0<=Set)||LA222_0==PlusSignPlusSign||(LA222_0>=HyphenMinusHyphenMinus && LA222_0<=SolidusEqualsSign)||LA222_0==As||LA222_0==Of||LA222_0==ExclamationMark||LA222_0==LeftParenthesis||LA222_0==PlusSign||LA222_0==HyphenMinus||LA222_0==Solidus||LA222_0==LessThanSign||(LA222_0>=CommercialAt && LA222_0<=LeftSquareBracket)||LA222_0==LeftCurlyBracket||LA222_0==Tilde||(LA222_0>=RULE_TEMPLATE_HEAD && LA222_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA222_0==RULE_IDENTIFIER||LA222_0==RULE_INT||LA222_0==RULE_DOUBLE||(LA222_0>=RULE_BINARY_INT && LA222_0<=RULE_SCIENTIFIC_INT)||LA222_0==RULE_STRING) ) {
                                                alt222=1;
                                            }
                                            switch (alt222) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0());
                                                    }
                                                    pushFollow(FOLLOW_81);
                                                    lv_expression_17_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_17_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            otherlv_18=(Token)match(input,Semicolon,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											newLeafNode(otherlv_18, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_3());
                                            }
                                            int alt223=2;
                                            int LA223_0 = input.LA(1);
                                            if ( ((LA223_0>=Intersection && LA223_0<=Implements)||(LA223_0>=Promisify && LA223_0<=Abstract)||(LA223_0>=External && LA223_0<=Function)||(LA223_0>=Private && LA223_0<=Delete)||(LA223_0>=Import && LA223_0<=Public)||LA223_0==Static||(LA223_0>=Target && LA223_0<=Await)||LA223_0==Class||(LA223_0>=False && LA223_0<=Super)||LA223_0==Union||(LA223_0>=Yield && LA223_0<=This)||(LA223_0>=From && LA223_0<=Void)||(LA223_0>=Get && LA223_0<=Set)||LA223_0==PlusSignPlusSign||(LA223_0>=HyphenMinusHyphenMinus && LA223_0<=SolidusEqualsSign)||LA223_0==As||LA223_0==Of||LA223_0==ExclamationMark||LA223_0==LeftParenthesis||LA223_0==PlusSign||LA223_0==HyphenMinus||LA223_0==Solidus||LA223_0==LessThanSign||(LA223_0>=CommercialAt && LA223_0<=LeftSquareBracket)||LA223_0==LeftCurlyBracket||LA223_0==Tilde||(LA223_0>=RULE_TEMPLATE_HEAD && LA223_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA223_0==RULE_IDENTIFIER||LA223_0==RULE_INT||LA223_0==RULE_DOUBLE||(LA223_0>=RULE_BINARY_INT && LA223_0<=RULE_SCIENTIFIC_INT)||LA223_0==RULE_STRING) ) {
                                                alt223=1;
                                            }
                                            switch (alt223) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0());
                                                    }
                                                    pushFollow(FOLLOW_69);
                                                    lv_updateExpr_19_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"updateExpr",
                                                      														lv_updateExpr_19_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forIn_20_0=(Token)match(input,In,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forIn_20_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_1_1_1_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forIn", lv_forIn_20_0 != null, "in");
                                            }
                                            }
                                            }
                                            int alt224=2;
                                            int LA224_0 = input.LA(1);
                                            if ( ((LA224_0>=Intersection && LA224_0<=Implements)||(LA224_0>=Promisify && LA224_0<=Abstract)||(LA224_0>=External && LA224_0<=Function)||(LA224_0>=Private && LA224_0<=Delete)||(LA224_0>=Import && LA224_0<=Public)||LA224_0==Static||(LA224_0>=Target && LA224_0<=Await)||LA224_0==Class||(LA224_0>=False && LA224_0<=Super)||LA224_0==Union||(LA224_0>=Yield && LA224_0<=This)||(LA224_0>=From && LA224_0<=Void)||(LA224_0>=Get && LA224_0<=Set)||LA224_0==PlusSignPlusSign||(LA224_0>=HyphenMinusHyphenMinus && LA224_0<=SolidusEqualsSign)||LA224_0==As||LA224_0==Of||LA224_0==ExclamationMark||LA224_0==LeftParenthesis||LA224_0==PlusSign||LA224_0==HyphenMinus||LA224_0==Solidus||LA224_0==LessThanSign||(LA224_0>=CommercialAt && LA224_0<=LeftSquareBracket)||LA224_0==LeftCurlyBracket||LA224_0==Tilde||(LA224_0>=RULE_TEMPLATE_HEAD && LA224_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA224_0==RULE_IDENTIFIER||LA224_0==RULE_INT||LA224_0==RULE_DOUBLE||(LA224_0>=RULE_BINARY_INT && LA224_0<=RULE_SCIENTIFIC_INT)||LA224_0==RULE_STRING) ) {
                                                alt224=1;
                                            }
                                            switch (alt224) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0());
                                                    }
                                                    pushFollow(FOLLOW_69);
                                                    lv_expression_21_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_21_0,
                                                      														"org.eclipse.n4js.N4JS.Expression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            lv_forOf_22_0=(Token)match(input,Of,FOLLOW_77); if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              													newLeafNode(lv_forOf_22_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_1_1_2_0_0());
                                            }
                                            if ( state.backtracking==0 ) {
                                              													if (current==null) {
                                              														current = createModelElement(grammarAccess.getForStatementRule());
                                              													}
                                              													setWithLastConsumed(current, "forOf", lv_forOf_22_0 != null, "of");
                                            }
                                            }
                                            }
                                            int alt225=2;
                                            int LA225_0 = input.LA(1);
                                            if ( ((LA225_0>=Intersection && LA225_0<=Implements)||(LA225_0>=Promisify && LA225_0<=Abstract)||(LA225_0>=External && LA225_0<=Function)||(LA225_0>=Private && LA225_0<=Delete)||(LA225_0>=Import && LA225_0<=Public)||LA225_0==Static||(LA225_0>=Target && LA225_0<=Await)||LA225_0==Class||(LA225_0>=False && LA225_0<=Super)||LA225_0==Union||(LA225_0>=Yield && LA225_0<=This)||(LA225_0>=From && LA225_0<=Void)||(LA225_0>=Get && LA225_0<=Set)||LA225_0==PlusSignPlusSign||(LA225_0>=HyphenMinusHyphenMinus && LA225_0<=SolidusEqualsSign)||LA225_0==As||LA225_0==Of||LA225_0==ExclamationMark||LA225_0==LeftParenthesis||LA225_0==PlusSign||LA225_0==HyphenMinus||LA225_0==Solidus||LA225_0==LessThanSign||(LA225_0>=CommercialAt && LA225_0<=LeftSquareBracket)||LA225_0==LeftCurlyBracket||LA225_0==Tilde||(LA225_0>=RULE_TEMPLATE_HEAD && LA225_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA225_0==RULE_IDENTIFIER||LA225_0==RULE_INT||LA225_0==RULE_DOUBLE||(LA225_0>=RULE_BINARY_INT && LA225_0<=RULE_SCIENTIFIC_INT)||LA225_0==RULE_STRING) ) {
                                                alt225=1;
                                            }
                                            switch (alt225) {
                                                case 1 :
                                                    {
                                                    {
                                                    if ( state.backtracking==0 ) {
                                                      													newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0());
                                                    }
                                                    pushFollow(FOLLOW_69);
                                                    lv_expression_23_0=norm3_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return current;
                                                    if ( state.backtracking==0 ) {
                                                      													if (current==null) {
                                                      														current = createModelElementForParent(grammarAccess.getForStatementRule());
                                                      													}
                                                      													set(
                                                      														current,
                                                      														"expression",
                                                      														lv_expression_23_0,
                                                      														"org.eclipse.n4js.N4JS.AssignmentExpression");
                                                      													afterParserOrEnumRuleCall();
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getForStatementAccess().getInitExprExpressionParserRuleCall_4_1_0_1_0_0());
                            }
                            pushFollow(FOLLOW_82);
                            lv_initExpr_24_0=norm2_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getForStatementRule());
                              									}
                              									set(
                              										current,
                              										"initExpr",
                              										lv_initExpr_24_0,
                              										"org.eclipse.n4js.N4JS.Expression");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            int alt232=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt232=1;
                                }
                                break;
                            case In:
                                {
                                alt232=2;
                                }
                                break;
                            case Of:
                                {
                                alt232=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 232, 0, input);
                                throw nvae;
                            }
                            switch (alt232) {
                                case 1 :
                                    {
                                    {
                                    otherlv_25=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_25, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_0());
                                    }
                                    int alt228=2;
                                    int LA228_0 = input.LA(1);
                                    if ( ((LA228_0>=Intersection && LA228_0<=Implements)||(LA228_0>=Promisify && LA228_0<=Abstract)||(LA228_0>=External && LA228_0<=Function)||(LA228_0>=Private && LA228_0<=Delete)||(LA228_0>=Import && LA228_0<=Public)||LA228_0==Static||(LA228_0>=Target && LA228_0<=Await)||LA228_0==Class||(LA228_0>=False && LA228_0<=Super)||LA228_0==Union||(LA228_0>=Yield && LA228_0<=This)||(LA228_0>=From && LA228_0<=Void)||(LA228_0>=Get && LA228_0<=Set)||LA228_0==PlusSignPlusSign||(LA228_0>=HyphenMinusHyphenMinus && LA228_0<=SolidusEqualsSign)||LA228_0==As||LA228_0==Of||LA228_0==ExclamationMark||LA228_0==LeftParenthesis||LA228_0==PlusSign||LA228_0==HyphenMinus||LA228_0==Solidus||LA228_0==LessThanSign||(LA228_0>=CommercialAt && LA228_0<=LeftSquareBracket)||LA228_0==LeftCurlyBracket||LA228_0==Tilde||(LA228_0>=RULE_TEMPLATE_HEAD && LA228_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA228_0==RULE_IDENTIFIER||LA228_0==RULE_INT||LA228_0==RULE_DOUBLE||(LA228_0>=RULE_BINARY_INT && LA228_0<=RULE_SCIENTIFIC_INT)||LA228_0==RULE_STRING) ) {
                                        alt228=1;
                                    }
                                    switch (alt228) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0());
                                            }
                                            pushFollow(FOLLOW_81);
                                            lv_expression_26_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_26_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    otherlv_27=(Token)match(input,Semicolon,FOLLOW_77); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									newLeafNode(otherlv_27, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_2());
                                    }
                                    int alt229=2;
                                    int LA229_0 = input.LA(1);
                                    if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Abstract)||(LA229_0>=External && LA229_0<=Function)||(LA229_0>=Private && LA229_0<=Delete)||(LA229_0>=Import && LA229_0<=Public)||LA229_0==Static||(LA229_0>=Target && LA229_0<=Await)||LA229_0==Class||(LA229_0>=False && LA229_0<=Super)||LA229_0==Union||(LA229_0>=Yield && LA229_0<=This)||(LA229_0>=From && LA229_0<=Void)||(LA229_0>=Get && LA229_0<=Set)||LA229_0==PlusSignPlusSign||(LA229_0>=HyphenMinusHyphenMinus && LA229_0<=SolidusEqualsSign)||LA229_0==As||LA229_0==Of||LA229_0==ExclamationMark||LA229_0==LeftParenthesis||LA229_0==PlusSign||LA229_0==HyphenMinus||LA229_0==Solidus||LA229_0==LessThanSign||(LA229_0>=CommercialAt && LA229_0<=LeftSquareBracket)||LA229_0==LeftCurlyBracket||LA229_0==Tilde||(LA229_0>=RULE_TEMPLATE_HEAD && LA229_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA229_0==RULE_IDENTIFIER||LA229_0==RULE_INT||LA229_0==RULE_DOUBLE||(LA229_0>=RULE_BINARY_INT && LA229_0<=RULE_SCIENTIFIC_INT)||LA229_0==RULE_STRING) ) {
                                        alt229=1;
                                    }
                                    switch (alt229) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0());
                                            }
                                            pushFollow(FOLLOW_69);
                                            lv_updateExpr_28_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"updateExpr",
                                              												lv_updateExpr_28_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forIn_29_0=(Token)match(input,In,FOLLOW_77); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forIn_29_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_1_1_1_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forIn", lv_forIn_29_0 != null, "in");
                                    }
                                    }
                                    }
                                    int alt230=2;
                                    int LA230_0 = input.LA(1);
                                    if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Abstract)||(LA230_0>=External && LA230_0<=Function)||(LA230_0>=Private && LA230_0<=Delete)||(LA230_0>=Import && LA230_0<=Public)||LA230_0==Static||(LA230_0>=Target && LA230_0<=Await)||LA230_0==Class||(LA230_0>=False && LA230_0<=Super)||LA230_0==Union||(LA230_0>=Yield && LA230_0<=This)||(LA230_0>=From && LA230_0<=Void)||(LA230_0>=Get && LA230_0<=Set)||LA230_0==PlusSignPlusSign||(LA230_0>=HyphenMinusHyphenMinus && LA230_0<=SolidusEqualsSign)||LA230_0==As||LA230_0==Of||LA230_0==ExclamationMark||LA230_0==LeftParenthesis||LA230_0==PlusSign||LA230_0==HyphenMinus||LA230_0==Solidus||LA230_0==LessThanSign||(LA230_0>=CommercialAt && LA230_0<=LeftSquareBracket)||LA230_0==LeftCurlyBracket||LA230_0==Tilde||(LA230_0>=RULE_TEMPLATE_HEAD && LA230_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA230_0==RULE_IDENTIFIER||LA230_0==RULE_INT||LA230_0==RULE_DOUBLE||(LA230_0>=RULE_BINARY_INT && LA230_0<=RULE_SCIENTIFIC_INT)||LA230_0==RULE_STRING) ) {
                                        alt230=1;
                                    }
                                    switch (alt230) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0());
                                            }
                                            pushFollow(FOLLOW_69);
                                            lv_expression_30_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_30_0,
                                              												"org.eclipse.n4js.N4JS.Expression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    lv_forOf_31_0=(Token)match(input,Of,FOLLOW_77); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      											newLeafNode(lv_forOf_31_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_1_1_2_0_0());
                                    }
                                    if ( state.backtracking==0 ) {
                                      											if (current==null) {
                                      												current = createModelElement(grammarAccess.getForStatementRule());
                                      											}
                                      											setWithLastConsumed(current, "forOf", lv_forOf_31_0 != null, "of");
                                    }
                                    }
                                    }
                                    int alt231=2;
                                    int LA231_0 = input.LA(1);
                                    if ( ((LA231_0>=Intersection && LA231_0<=Implements)||(LA231_0>=Promisify && LA231_0<=Abstract)||(LA231_0>=External && LA231_0<=Function)||(LA231_0>=Private && LA231_0<=Delete)||(LA231_0>=Import && LA231_0<=Public)||LA231_0==Static||(LA231_0>=Target && LA231_0<=Await)||LA231_0==Class||(LA231_0>=False && LA231_0<=Super)||LA231_0==Union||(LA231_0>=Yield && LA231_0<=This)||(LA231_0>=From && LA231_0<=Void)||(LA231_0>=Get && LA231_0<=Set)||LA231_0==PlusSignPlusSign||(LA231_0>=HyphenMinusHyphenMinus && LA231_0<=SolidusEqualsSign)||LA231_0==As||LA231_0==Of||LA231_0==ExclamationMark||LA231_0==LeftParenthesis||LA231_0==PlusSign||LA231_0==HyphenMinus||LA231_0==Solidus||LA231_0==LessThanSign||(LA231_0>=CommercialAt && LA231_0<=LeftSquareBracket)||LA231_0==LeftCurlyBracket||LA231_0==Tilde||(LA231_0>=RULE_TEMPLATE_HEAD && LA231_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA231_0==RULE_IDENTIFIER||LA231_0==RULE_INT||LA231_0==RULE_DOUBLE||(LA231_0>=RULE_BINARY_INT && LA231_0<=RULE_SCIENTIFIC_INT)||LA231_0==RULE_STRING) ) {
                                        alt231=1;
                                    }
                                    switch (alt231) {
                                        case 1 :
                                            {
                                            {
                                            if ( state.backtracking==0 ) {
                                              											newCompositeNode(grammarAccess.getForStatementAccess().getExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0());
                                            }
                                            pushFollow(FOLLOW_69);
                                            lv_expression_32_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return current;
                                            if ( state.backtracking==0 ) {
                                              											if (current==null) {
                                              												current = createModelElementForParent(grammarAccess.getForStatementRule());
                                              											}
                                              											set(
                                              												current,
                                              												"expression",
                                              												lv_expression_32_0,
                                              												"org.eclipse.n4js.N4JS.AssignmentExpression");
                                              											afterParserOrEnumRuleCall();
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            otherlv_33=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_33, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_0());
                            }
                            int alt233=2;
                            int LA233_0 = input.LA(1);
                            if ( ((LA233_0>=Intersection && LA233_0<=Implements)||(LA233_0>=Promisify && LA233_0<=Abstract)||(LA233_0>=External && LA233_0<=Function)||(LA233_0>=Private && LA233_0<=Delete)||(LA233_0>=Import && LA233_0<=Public)||LA233_0==Static||(LA233_0>=Target && LA233_0<=Await)||LA233_0==Class||(LA233_0>=False && LA233_0<=Super)||LA233_0==Union||(LA233_0>=Yield && LA233_0<=This)||(LA233_0>=From && LA233_0<=Void)||(LA233_0>=Get && LA233_0<=Set)||LA233_0==PlusSignPlusSign||(LA233_0>=HyphenMinusHyphenMinus && LA233_0<=SolidusEqualsSign)||LA233_0==As||LA233_0==Of||LA233_0==ExclamationMark||LA233_0==LeftParenthesis||LA233_0==PlusSign||LA233_0==HyphenMinus||LA233_0==Solidus||LA233_0==LessThanSign||(LA233_0>=CommercialAt && LA233_0<=LeftSquareBracket)||LA233_0==LeftCurlyBracket||LA233_0==Tilde||(LA233_0>=RULE_TEMPLATE_HEAD && LA233_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA233_0==RULE_IDENTIFIER||LA233_0==RULE_INT||LA233_0==RULE_DOUBLE||(LA233_0>=RULE_BINARY_INT && LA233_0<=RULE_SCIENTIFIC_INT)||LA233_0==RULE_STRING) ) {
                                alt233=1;
                            }
                            switch (alt233) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_1_0_2_1_0());
                                    }
                                    pushFollow(FOLLOW_81);
                                    lv_expression_34_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"expression",
                                      										lv_expression_34_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            otherlv_35=(Token)match(input,Semicolon,FOLLOW_77); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(otherlv_35, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_2());
                            }
                            int alt234=2;
                            int LA234_0 = input.LA(1);
                            if ( ((LA234_0>=Intersection && LA234_0<=Implements)||(LA234_0>=Promisify && LA234_0<=Abstract)||(LA234_0>=External && LA234_0<=Function)||(LA234_0>=Private && LA234_0<=Delete)||(LA234_0>=Import && LA234_0<=Public)||LA234_0==Static||(LA234_0>=Target && LA234_0<=Await)||LA234_0==Class||(LA234_0>=False && LA234_0<=Super)||LA234_0==Union||(LA234_0>=Yield && LA234_0<=This)||(LA234_0>=From && LA234_0<=Void)||(LA234_0>=Get && LA234_0<=Set)||LA234_0==PlusSignPlusSign||(LA234_0>=HyphenMinusHyphenMinus && LA234_0<=SolidusEqualsSign)||LA234_0==As||LA234_0==Of||LA234_0==ExclamationMark||LA234_0==LeftParenthesis||LA234_0==PlusSign||LA234_0==HyphenMinus||LA234_0==Solidus||LA234_0==LessThanSign||(LA234_0>=CommercialAt && LA234_0<=LeftSquareBracket)||LA234_0==LeftCurlyBracket||LA234_0==Tilde||(LA234_0>=RULE_TEMPLATE_HEAD && LA234_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA234_0==RULE_IDENTIFIER||LA234_0==RULE_INT||LA234_0==RULE_DOUBLE||(LA234_0>=RULE_BINARY_INT && LA234_0<=RULE_SCIENTIFIC_INT)||LA234_0==RULE_STRING) ) {
                                alt234=1;
                            }
                            switch (alt234) {
                                case 1 :
                                    {
                                    {
                                    if ( state.backtracking==0 ) {
                                      									newCompositeNode(grammarAccess.getForStatementAccess().getUpdateExprExpressionParserRuleCall_4_1_0_2_3_0());
                                    }
                                    pushFollow(FOLLOW_69);
                                    lv_updateExpr_36_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getForStatementRule());
                                      									}
                                      									set(
                                      										current,
                                      										"updateExpr",
                                      										lv_updateExpr_36_0,
                                      										"org.eclipse.n4js.N4JS.Expression");
                                      									afterParserOrEnumRuleCall();
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    otherlv_37=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_37, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_38_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getForStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_38_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLetIdentifierRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLetIdentifierRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetIdentifierRef=ruleLetIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLetIdentifierRef() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getLetIdentifierRefRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getLetIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLetAsIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLetAsIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLetAsIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLetAsIdentifier=ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLetAsIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLetAsIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingIdentifierAsVariableDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifierAsVariableDeclaration=ruleBindingIdentifierAsVariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifierAsVariableDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameBindingIdentifierParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getBindingIdentifierAsVariableDeclarationRule());
              				}
              				set(
              					current,
              					"name",
              					lv_name_0_0,
              					"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleContinueStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleContinueStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContinueStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContinueStatement=ruleContinueStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContinueStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleContinueStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Continue,FOLLOW_83); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt237=2;
            int LA237_0 = input.LA(1);
            if ( ((LA237_0>=Intersection && LA237_0<=Implements)||(LA237_0>=Promisify && LA237_0<=Abstract)||LA237_0==External||(LA237_0>=Private && LA237_0<=Project)||LA237_0==Public||LA237_0==Static||LA237_0==Target||(LA237_0>=Async && LA237_0<=Await)||LA237_0==Union||(LA237_0>=Yield && LA237_0<=This)||LA237_0==From||LA237_0==Type||(LA237_0>=Get && LA237_0<=Let)||(LA237_0>=Out && LA237_0<=Set)||LA237_0==As||LA237_0==Of||LA237_0==RULE_IDENTIFIER) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ContinueStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Continue,FOLLOW_83); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( ((LA238_0>=Intersection && LA238_0<=Implements)||(LA238_0>=Promisify && LA238_0<=Abstract)||LA238_0==External||(LA238_0>=Private && LA238_0<=Project)||LA238_0==Public||LA238_0==Static||LA238_0==Target||(LA238_0>=Async && LA238_0<=Await)||LA238_0==Union||LA238_0==This||LA238_0==From||LA238_0==Type||(LA238_0>=Get && LA238_0<=Let)||(LA238_0>=Out && LA238_0<=Set)||LA238_0==As||LA238_0==Of||LA238_0==RULE_IDENTIFIER) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getContinueStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getContinueStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBreakStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBreakStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBreakStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBreakStatement=ruleBreakStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBreakStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBreakStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Break,FOLLOW_83); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt239=2;
            int LA239_0 = input.LA(1);
            if ( ((LA239_0>=Intersection && LA239_0<=Implements)||(LA239_0>=Promisify && LA239_0<=Abstract)||LA239_0==External||(LA239_0>=Private && LA239_0<=Project)||LA239_0==Public||LA239_0==Static||LA239_0==Target||(LA239_0>=Async && LA239_0<=Await)||LA239_0==Union||(LA239_0>=Yield && LA239_0<=This)||LA239_0==From||LA239_0==Type||(LA239_0>=Get && LA239_0<=Let)||(LA239_0>=Out && LA239_0<=Set)||LA239_0==As||LA239_0==Of||LA239_0==RULE_IDENTIFIER) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BreakStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Break,FOLLOW_83); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( ((LA240_0>=Intersection && LA240_0<=Implements)||(LA240_0>=Promisify && LA240_0<=Abstract)||LA240_0==External||(LA240_0>=Private && LA240_0<=Project)||LA240_0==Public||LA240_0==Static||LA240_0==Target||(LA240_0>=Async && LA240_0<=Await)||LA240_0==Union||LA240_0==This||LA240_0==From||LA240_0==Type||(LA240_0>=Get && LA240_0<=Let)||(LA240_0>=Out && LA240_0<=Set)||LA240_0==As||LA240_0==Of||LA240_0==RULE_IDENTIFIER) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBreakStatementRule());
                      					}
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelledStatementCrossReference_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleReturnStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleReturnStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReturnStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReturnStatement=ruleReturnStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReturnStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleReturnStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Return,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( ((LA241_0>=Intersection && LA241_0<=Implements)||(LA241_0>=Promisify && LA241_0<=Abstract)||(LA241_0>=External && LA241_0<=Function)||(LA241_0>=Private && LA241_0<=Delete)||(LA241_0>=Import && LA241_0<=Public)||LA241_0==Static||(LA241_0>=Target && LA241_0<=Await)||LA241_0==Class||(LA241_0>=False && LA241_0<=Super)||LA241_0==Union||(LA241_0>=Yield && LA241_0<=This)||(LA241_0>=From && LA241_0<=Void)||(LA241_0>=Get && LA241_0<=Set)||LA241_0==PlusSignPlusSign||(LA241_0>=HyphenMinusHyphenMinus && LA241_0<=SolidusEqualsSign)||LA241_0==As||LA241_0==Of||LA241_0==ExclamationMark||LA241_0==LeftParenthesis||LA241_0==PlusSign||LA241_0==HyphenMinus||LA241_0==Solidus||LA241_0==LessThanSign||(LA241_0>=CommercialAt && LA241_0<=LeftSquareBracket)||LA241_0==LeftCurlyBracket||LA241_0==Tilde||(LA241_0>=RULE_TEMPLATE_HEAD && LA241_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA241_0==RULE_IDENTIFIER||LA241_0==RULE_INT||LA241_0==RULE_DOUBLE||(LA241_0>=RULE_BINARY_INT && LA241_0<=RULE_SCIENTIFIC_INT)||LA241_0==RULE_STRING) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    lv_expression_2_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ReturnStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Return,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( ((LA242_0>=Intersection && LA242_0<=Implements)||(LA242_0>=Promisify && LA242_0<=Abstract)||(LA242_0>=External && LA242_0<=Function)||(LA242_0>=Private && LA242_0<=Delete)||(LA242_0>=Import && LA242_0<=Public)||LA242_0==Static||(LA242_0>=Target && LA242_0<=Await)||LA242_0==Class||(LA242_0>=False && LA242_0<=Super)||LA242_0==Union||(LA242_0>=Yield && LA242_0<=This)||(LA242_0>=From && LA242_0<=Void)||(LA242_0>=Get && LA242_0<=Set)||LA242_0==PlusSignPlusSign||(LA242_0>=HyphenMinusHyphenMinus && LA242_0<=SolidusEqualsSign)||LA242_0==As||LA242_0==Of||LA242_0==ExclamationMark||LA242_0==LeftParenthesis||LA242_0==PlusSign||LA242_0==HyphenMinus||LA242_0==Solidus||LA242_0==LessThanSign||(LA242_0>=CommercialAt && LA242_0<=LeftSquareBracket)||LA242_0==LeftCurlyBracket||LA242_0==Tilde||(LA242_0>=RULE_TEMPLATE_HEAD && LA242_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA242_0==RULE_IDENTIFIER||LA242_0==RULE_INT||LA242_0==RULE_DOUBLE||(LA242_0>=RULE_BINARY_INT && LA242_0<=RULE_SCIENTIFIC_INT)||LA242_0==RULE_STRING) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_24);
                    lv_expression_2_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getReturnStatementRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_2_0,
                      						"org.eclipse.n4js.N4JS.Expression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWithStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWithStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWithStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWithStatement=ruleWithStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWithStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWithStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_WithStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        EObject lv_statement_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,With,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getWithStatementAccess().getStatementStatementParserRuleCall_4_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getWithStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_4_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSwitchStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSwitchStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSwitchStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSwitchStatement=ruleSwitchStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSwitchStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSwitchStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;
        EObject lv_cases_5_0 = null;
        EObject lv_cases_6_0 = null;
        EObject lv_cases_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_85); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);
                if ( (LA243_0==Case) ) {
                    alt243=1;
                }
                switch (alt243) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	    }
            	    pushFollow(FOLLOW_85);
            	    lv_cases_5_0=ruleCaseClause();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop243;
                }
            } while (true);
            int alt245=2;
            int LA245_0 = input.LA(1);
            if ( (LA245_0==Default) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                    }
                    pushFollow(FOLLOW_86);
                    lv_cases_6_0=ruleDefaultClause();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop244:
                    do {
                        int alt244=2;
                        int LA244_0 = input.LA(1);
                        if ( (LA244_0==Case) ) {
                            alt244=1;
                        }
                        switch (alt244) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_86);
                    	    lv_cases_7_0=ruleCaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop244;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SwitchStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_8=null;
        EObject lv_expression_2_0 = null;
        EObject lv_cases_5_0 = null;
        EObject lv_cases_6_0 = null;
        EObject lv_cases_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Switch,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_85); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop246:
            do {
                int alt246=2;
                int LA246_0 = input.LA(1);
                if ( (LA246_0==Case) ) {
                    alt246=1;
                }
                switch (alt246) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_5_0());
            	    }
            	    pushFollow(FOLLOW_85);
            	    lv_cases_5_0=norm1_CaseClause();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"cases",
            	      						lv_cases_5_0,
            	      						"org.eclipse.n4js.N4JS.CaseClause");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop246;
                }
            } while (true);
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( (LA248_0==Default) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesDefaultClauseParserRuleCall_6_0_0());
                    }
                    pushFollow(FOLLOW_86);
                    lv_cases_6_0=norm1_DefaultClause();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                      						}
                      						add(
                      							current,
                      							"cases",
                      							lv_cases_6_0,
                      							"org.eclipse.n4js.N4JS.DefaultClause");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop247:
                    do {
                        int alt247=2;
                        int LA247_0 = input.LA(1);
                        if ( (LA247_0==Case) ) {
                            alt247=1;
                        }
                        switch (alt247) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getSwitchStatementAccess().getCasesCaseClauseParserRuleCall_6_1_0());
                    	    }
                    	    pushFollow(FOLLOW_86);
                    	    lv_cases_7_0=norm1_CaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"cases",
                    	      							lv_cases_7_0,
                    	      							"org.eclipse.n4js.N4JS.CaseClause");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop247;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCaseClause() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCaseClause = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCaseClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCaseClause=ruleCaseClause();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCaseClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCaseClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_87);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);
                if ( ((LA249_0>=Intersection && LA249_0<=Implements)||(LA249_0>=Promisify && LA249_0<=Function)||(LA249_0>=Private && LA249_0<=Delete)||(LA249_0>=Import && LA249_0<=Break)||(LA249_0>=Class && LA249_0<=This)||(LA249_0>=From && LA249_0<=With)||(LA249_0>=For && LA249_0<=Var)||LA249_0==PlusSignPlusSign||(LA249_0>=HyphenMinusHyphenMinus && LA249_0<=SolidusEqualsSign)||(LA249_0>=As && LA249_0<=If)||LA249_0==Of||LA249_0==ExclamationMark||LA249_0==LeftParenthesis||LA249_0==PlusSign||LA249_0==HyphenMinus||LA249_0==Solidus||(LA249_0>=Semicolon && LA249_0<=LessThanSign)||(LA249_0>=CommercialAt && LA249_0<=LeftSquareBracket)||LA249_0==LeftCurlyBracket||LA249_0==Tilde||(LA249_0>=RULE_TEMPLATE_HEAD && LA249_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA249_0==RULE_IDENTIFIER||LA249_0==RULE_INT||LA249_0==RULE_DOUBLE||(LA249_0>=RULE_BINARY_INT && LA249_0<=RULE_SCIENTIFIC_INT)||LA249_0==RULE_STRING) ) {
                    alt249=1;
                }
                switch (alt249) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop249;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CaseClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Case,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCaseClauseAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_87);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);
                if ( ((LA250_0>=Intersection && LA250_0<=Implements)||(LA250_0>=Promisify && LA250_0<=Function)||(LA250_0>=Private && LA250_0<=Delete)||(LA250_0>=Import && LA250_0<=Break)||(LA250_0>=Class && LA250_0<=This)||(LA250_0>=From && LA250_0<=With)||(LA250_0>=For && LA250_0<=Var)||LA250_0==PlusSignPlusSign||(LA250_0>=HyphenMinusHyphenMinus && LA250_0<=SolidusEqualsSign)||(LA250_0>=As && LA250_0<=If)||LA250_0==Of||LA250_0==ExclamationMark||LA250_0==LeftParenthesis||LA250_0==PlusSign||LA250_0==HyphenMinus||LA250_0==Solidus||(LA250_0>=Semicolon && LA250_0<=LessThanSign)||(LA250_0>=CommercialAt && LA250_0<=LeftSquareBracket)||LA250_0==LeftCurlyBracket||LA250_0==Tilde||(LA250_0>=RULE_TEMPLATE_HEAD && LA250_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA250_0==RULE_IDENTIFIER||LA250_0==RULE_INT||LA250_0==RULE_DOUBLE||(LA250_0>=RULE_BINARY_INT && LA250_0<=RULE_SCIENTIFIC_INT)||LA250_0==RULE_STRING) ) {
                    alt250=1;
                }
                switch (alt250) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getCaseClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getCaseClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop250;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDefaultClause() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDefaultClause = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultClauseRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaultClause=ruleDefaultClause();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaultClause; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Default,FOLLOW_87); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);
                if ( ((LA251_0>=Intersection && LA251_0<=Implements)||(LA251_0>=Promisify && LA251_0<=Function)||(LA251_0>=Private && LA251_0<=Delete)||(LA251_0>=Import && LA251_0<=Break)||(LA251_0>=Class && LA251_0<=This)||(LA251_0>=From && LA251_0<=With)||(LA251_0>=For && LA251_0<=Var)||LA251_0==PlusSignPlusSign||(LA251_0>=HyphenMinusHyphenMinus && LA251_0<=SolidusEqualsSign)||(LA251_0>=As && LA251_0<=If)||LA251_0==Of||LA251_0==ExclamationMark||LA251_0==LeftParenthesis||LA251_0==PlusSign||LA251_0==HyphenMinus||LA251_0==Solidus||(LA251_0>=Semicolon && LA251_0<=LessThanSign)||(LA251_0>=CommercialAt && LA251_0<=LeftSquareBracket)||LA251_0==LeftCurlyBracket||LA251_0==Tilde||(LA251_0>=RULE_TEMPLATE_HEAD && LA251_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA251_0==RULE_IDENTIFIER||LA251_0==RULE_INT||LA251_0==RULE_DOUBLE||(LA251_0>=RULE_BINARY_INT && LA251_0<=RULE_SCIENTIFIC_INT)||LA251_0==RULE_STRING) ) {
                    alt251=1;
                }
                switch (alt251) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop251;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_DefaultClause() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_statements_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDefaultClauseAccess().getDefaultClauseAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Default,FOLLOW_87); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);
                if ( ((LA252_0>=Intersection && LA252_0<=Implements)||(LA252_0>=Promisify && LA252_0<=Function)||(LA252_0>=Private && LA252_0<=Delete)||(LA252_0>=Import && LA252_0<=Break)||(LA252_0>=Class && LA252_0<=This)||(LA252_0>=From && LA252_0<=With)||(LA252_0>=For && LA252_0<=Var)||LA252_0==PlusSignPlusSign||(LA252_0>=HyphenMinusHyphenMinus && LA252_0<=SolidusEqualsSign)||(LA252_0>=As && LA252_0<=If)||LA252_0==Of||LA252_0==ExclamationMark||LA252_0==LeftParenthesis||LA252_0==PlusSign||LA252_0==HyphenMinus||LA252_0==Solidus||(LA252_0>=Semicolon && LA252_0<=LessThanSign)||(LA252_0>=CommercialAt && LA252_0<=LeftSquareBracket)||LA252_0==LeftCurlyBracket||LA252_0==Tilde||(LA252_0>=RULE_TEMPLATE_HEAD && LA252_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA252_0==RULE_IDENTIFIER||LA252_0==RULE_INT||LA252_0==RULE_DOUBLE||(LA252_0>=RULE_BINARY_INT && LA252_0<=RULE_SCIENTIFIC_INT)||LA252_0==RULE_STRING) ) {
                    alt252=1;
                }
                switch (alt252) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getDefaultClauseAccess().getStatementsStatementParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_3);
            	    lv_statements_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
            	      					}
            	      					add(
            	      						current,
            	      						"statements",
            	      						lv_statements_3_0,
            	      						"org.eclipse.n4js.N4JS.Statement");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop252;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLabelledStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLabelledStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLabelledStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLabelledStatement=ruleLabelledStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLabelledStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLabelledStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_statement_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
            }
            pushFollow(FOLLOW_87);
            lv_name_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=ruleStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LabelledStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_statement_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getLabelledStatementAccess().getNameBindingIdentifierParserRuleCall_0_0_0_0());
            }
            pushFollow(FOLLOW_87);
            lv_name_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_0_0,
              								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getLabelledStatementAccess().getStatementStatementParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_statement_2_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getLabelledStatementRule());
              					}
              					set(
              						current,
              						"statement",
              						lv_statement_2_0,
              						"org.eclipse.n4js.N4JS.Statement");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThrowStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThrowStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThrowStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThrowStatement=ruleThrowStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThrowStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThrowStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_24);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ThrowStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Throw,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThrowStatementAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_24);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThrowStatementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTryStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTryStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTryStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTryStatement=ruleTryStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTryStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTryStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_block_1_0 = null;
        EObject lv_catch_2_0 = null;
        EObject lv_finally_3_0 = null;
        EObject lv_finally_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_88);
            lv_block_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt254=2;
            int LA254_0 = input.LA(1);
            if ( (LA254_0==Catch) ) {
                alt254=1;
            }
            else if ( (LA254_0==Finally) ) {
                alt254=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);
                throw nvae;
            }
            switch (alt254) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                    }
                    pushFollow(FOLLOW_89);
                    lv_catch_2_0=ruleCatchBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt253=2;
                    int LA253_0 = input.LA(1);
                    if ( (LA253_0==Finally) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=ruleFinallyBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=ruleFinallyBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TryStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_block_1_0 = null;
        EObject lv_catch_2_0 = null;
        EObject lv_finally_3_0 = null;
        EObject lv_finally_4_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Try,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTryStatementAccess().getBlockBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_88);
            lv_block_1_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTryStatementRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_1_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt256=2;
            int LA256_0 = input.LA(1);
            if ( (LA256_0==Catch) ) {
                alt256=1;
            }
            else if ( (LA256_0==Finally) ) {
                alt256=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);
                throw nvae;
            }
            switch (alt256) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTryStatementAccess().getCatchCatchBlockParserRuleCall_2_0_0_0());
                    }
                    pushFollow(FOLLOW_89);
                    lv_catch_2_0=norm1_CatchBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      							}
                      							set(
                      								current,
                      								"catch",
                      								lv_catch_2_0,
                      								"org.eclipse.n4js.N4JS.CatchBlock");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt255=2;
                    int LA255_0 = input.LA(1);
                    if ( (LA255_0==Finally) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_0_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_finally_3_0=norm1_FinallyBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTryStatementRule());
                              							}
                              							set(
                              								current,
                              								"finally",
                              								lv_finally_3_0,
                              								"org.eclipse.n4js.N4JS.FinallyBlock");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTryStatementAccess().getFinallyFinallyBlockParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_finally_4_0=norm1_FinallyBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTryStatementRule());
                      						}
                      						set(
                      							current,
                      							"finally",
                      							lv_finally_4_0,
                      							"org.eclipse.n4js.N4JS.FinallyBlock");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCatchBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchBlock=ruleCatchBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;
        EObject lv_block_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Catch,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_69);
            lv_catchVariable_3_0=ruleCatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_catchVariable_3_0 = null;
        EObject lv_block_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getCatchBlockAccess().getCatchBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Catch,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getCatchVariableCatchVariableParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_69);
            lv_catchVariable_3_0=norm1_CatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"catchVariable",
              						lv_catchVariable_3_0,
              						"org.eclipse.n4js.N4JS.CatchVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getCatchBlockAccess().getBlockBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_5_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getCatchBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_5_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCatchVariable() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCatchVariable = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCatchVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCatchVariable=ruleCatchVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCatchVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCatchVariable() throws RecognitionException {
        EObject current = null;
        EObject lv_bindingPattern_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        	enterRule();
        try {
            {
            int alt257=3;
            alt257 = dfa257.predict(input);
            switch (alt257) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_3_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CatchVariable() throws RecognitionException {
        EObject current = null;
        EObject lv_bindingPattern_0_0 = null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_2 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        	enterRule();
        try {
            {
            int alt258=3;
            alt258 = dfa258.predict(input);
            switch (alt258) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getBindingPatternBindingPatternParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_bindingPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"bindingPattern",
                      						lv_bindingPattern_0_0,
                      						"org.eclipse.n4js.N4JS.BindingPattern");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_name_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_1_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getCatchVariableRule());
                      						}
                      						newCompositeNode(grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_2=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_ColonSepDeclaredTypeRef_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getCatchVariableAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getCatchVariableRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_3_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFinallyBlock() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFinallyBlock = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFinallyBlockRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFinallyBlock=ruleFinallyBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFinallyBlock; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFinallyBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_block_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Finally,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FinallyBlock() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_block_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFinallyBlockAccess().getFinallyBlockAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Finally,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFinallyBlockAccess().getBlockBlockParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_block_2_0=norm1_Block();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFinallyBlockRule());
              					}
              					set(
              						current,
              						"block",
              						lv_block_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDebuggerStatement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDebuggerStatement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDebuggerStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDebuggerStatement=ruleDebuggerStatement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDebuggerStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDebuggerStatement() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getDebuggerStatementAccess().getDebuggerStatementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Debugger,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePrimaryExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryExpression=rulePrimaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ThisLiteral_0 = null;
        EObject this_SuperLiteral_1 = null;
        EObject this_IdentifierRef_2 = null;
        EObject this_JSXFragment_3 = null;
        EObject this_JSXElement_4 = null;
        EObject this_ImportCallExpression_5 = null;
        EObject this_ParameterizedCallExpression_6 = null;
        EObject this_Literal_7 = null;
        EObject this_ArrayLiteral_8 = null;
        EObject this_ObjectLiteral_9 = null;
        EObject this_ParenExpression_10 = null;
        EObject this_AnnotatedExpression_11 = null;
        EObject this_FunctionExpression_12 = null;
        EObject this_AsyncFunctionExpression_13 = null;
        EObject this_N4ClassExpression_14 = null;
        EObject this_TemplateLiteral_15 = null;
        enterRule();
        try { 
        	{
            int alt259=16;
            // REPLACEMENT rulePrimaryExpression.java.replacement START
            try {
                alt259 = dfa259.predict(input);
            } catch (NoViableAltException re) {
            	int as = input.LA(1);
            	if (as==Async) { alt259=3; }
            	else throw re;
            }
            // REPLACEMENT rulePrimaryExpression.java.replacement END
            switch (alt259) {
                case 1 : 
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=ruleIdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportCallExpression_5=ruleImportCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportCallExpression_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_6=ruleParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedCallExpression_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Literal_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_8=ruleArrayLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayLiteral_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_9=ruleObjectLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectLiteral_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_10=ruleParenExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParenExpression_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_11=ruleAnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedExpression_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionExpression_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AsyncFunctionExpression_13;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_14=ruleN4ClassExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4ClassExpression_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_15=ruleTemplateLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TemplateLiteral_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PrimaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ThisLiteral_0 = null;
        EObject this_SuperLiteral_1 = null;
        EObject this_IdentifierRef_2 = null;
        EObject this_JSXFragment_3 = null;
        EObject this_JSXElement_4 = null;
        EObject this_ImportCallExpression_5 = null;
        EObject this_ParameterizedCallExpression_6 = null;
        EObject this_Literal_7 = null;
        EObject this_ArrayLiteral_8 = null;
        EObject this_ObjectLiteral_9 = null;
        EObject this_ParenExpression_10 = null;
        EObject this_AnnotatedExpression_11 = null;
        EObject this_FunctionExpression_12 = null;
        EObject this_AsyncFunctionExpression_13 = null;
        EObject this_N4ClassExpression_14 = null;
        EObject this_TemplateLiteral_15 = null;
        	enterRule();
        try {
            {
            int alt260=16;
            alt260 = dfa260.predict(input);
            switch (alt260) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisLiteral_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_SuperLiteral_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_SuperLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_IdentifierRef_2=norm1_IdentifierRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IdentifierRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ImportCallExpression_5=norm1_ImportCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ImportCallExpression_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedCallExpression_6=norm1_ParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedCallExpression_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 8 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7());
                    }
                    pushFollow(FOLLOW_2);
                    this_Literal_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Literal_7;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 9 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayLiteral_8=norm1_ArrayLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayLiteral_8;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 10 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectLiteral_9=norm1_ObjectLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectLiteral_9;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 11 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParenExpression_10=norm1_ParenExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParenExpression_10;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 12 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedExpression_11=norm1_AnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedExpression_11;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 13 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionExpression_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionExpression_12;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13());
                    }
                    pushFollow(FOLLOW_2);
                    this_AsyncFunctionExpression_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AsyncFunctionExpression_13;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4ClassExpression_14=norm1_N4ClassExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4ClassExpression_14;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 16 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15());
                    }
                    pushFollow(FOLLOW_2);
                    this_TemplateLiteral_15=norm1_TemplateLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TemplateLiteral_15;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParenExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParenExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParenExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParenExpression=ruleParenExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParenExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParenExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParenExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_69);
            lv_expression_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParenExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIdentifierRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIdentifierRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierRef=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIdentifierRef() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getIdentifierRefRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IdentifierRef() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getIdentifierRefRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getIdentifierRefAccess().getIdIdentifiableElementCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSuperLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSuperLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSuperLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSuperLiteral=ruleSuperLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSuperLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSuperLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getSuperLiteralAccess().getSuperLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisLiteral=ruleThisLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getThisLiteralAccess().getThisLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayLiteral=ruleArrayLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);
                if ( (LA261_0==Comma) ) {
                    alt261=1;
                }
                switch (alt261) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_91);
            	    lv_elements_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop261;
                }
            } while (true);
            int alt266=2;
            int LA266_0 = input.LA(1);
            if ( ((LA266_0>=Intersection && LA266_0<=Implements)||(LA266_0>=Promisify && LA266_0<=Abstract)||(LA266_0>=External && LA266_0<=Function)||(LA266_0>=Private && LA266_0<=Delete)||(LA266_0>=Import && LA266_0<=Public)||LA266_0==Static||(LA266_0>=Target && LA266_0<=Await)||LA266_0==Class||(LA266_0>=False && LA266_0<=Super)||LA266_0==Union||(LA266_0>=Yield && LA266_0<=This)||(LA266_0>=From && LA266_0<=Void)||LA266_0==FullStopFullStopFullStop||(LA266_0>=Get && LA266_0<=Set)||LA266_0==PlusSignPlusSign||(LA266_0>=HyphenMinusHyphenMinus && LA266_0<=SolidusEqualsSign)||LA266_0==As||LA266_0==Of||LA266_0==ExclamationMark||LA266_0==LeftParenthesis||LA266_0==PlusSign||LA266_0==HyphenMinus||LA266_0==Solidus||LA266_0==LessThanSign||(LA266_0>=CommercialAt && LA266_0<=LeftSquareBracket)||LA266_0==LeftCurlyBracket||LA266_0==Tilde||(LA266_0>=RULE_TEMPLATE_HEAD && LA266_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA266_0==RULE_IDENTIFIER||LA266_0==RULE_INT||LA266_0==RULE_DOUBLE||(LA266_0>=RULE_BINARY_INT && LA266_0<=RULE_SCIENTIFIC_INT)||LA266_0==RULE_STRING) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_92);
                    lv_elements_3_0=ruleArrayElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop263:
                    do {
                        int alt263=2;
                        alt263 = dfa263.predict(input);
                        switch (alt263) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_93); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop262:
                    	    do {
                    	        int alt262=2;
                    	        int LA262_0 = input.LA(1);
                    	        if ( (LA262_0==Comma) ) {
                    	            alt262=1;
                    	        }
                    	        switch (alt262) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_93);
                    	    	    lv_elements_5_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop262;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_92);
                    	    lv_elements_6_0=ruleArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop263;
                        }
                    } while (true);
                    int alt265=2;
                    int LA265_0 = input.LA(1);
                    if ( (LA265_0==Comma) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_92); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", lv_trailingComma_7_0 != null, ",");
                            }
                            }
                            }
                            loop264:
                            do {
                                int alt264=2;
                                int LA264_0 = input.LA(1);
                                if ( (LA264_0==Comma) ) {
                                    alt264=1;
                                }
                                switch (alt264) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_92);
                            	    lv_elements_8_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop264;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token lv_trailingComma_7_0=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_91); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);
                if ( (LA267_0==Comma) ) {
                    alt267=1;
                }
                switch (alt267) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_91);
            	    lv_elements_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.ArrayPadding");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop267;
                }
            } while (true);
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( ((LA272_0>=Intersection && LA272_0<=Implements)||(LA272_0>=Promisify && LA272_0<=Abstract)||(LA272_0>=External && LA272_0<=Function)||(LA272_0>=Private && LA272_0<=Delete)||(LA272_0>=Import && LA272_0<=Public)||LA272_0==Static||(LA272_0>=Target && LA272_0<=Await)||LA272_0==Class||(LA272_0>=False && LA272_0<=Super)||LA272_0==Union||(LA272_0>=Yield && LA272_0<=This)||(LA272_0>=From && LA272_0<=Void)||LA272_0==FullStopFullStopFullStop||(LA272_0>=Get && LA272_0<=Set)||LA272_0==PlusSignPlusSign||(LA272_0>=HyphenMinusHyphenMinus && LA272_0<=SolidusEqualsSign)||LA272_0==As||LA272_0==Of||LA272_0==ExclamationMark||LA272_0==LeftParenthesis||LA272_0==PlusSign||LA272_0==HyphenMinus||LA272_0==Solidus||LA272_0==LessThanSign||(LA272_0>=CommercialAt && LA272_0<=LeftSquareBracket)||LA272_0==LeftCurlyBracket||LA272_0==Tilde||(LA272_0>=RULE_TEMPLATE_HEAD && LA272_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA272_0==RULE_IDENTIFIER||LA272_0==RULE_INT||LA272_0==RULE_DOUBLE||(LA272_0>=RULE_BINARY_INT && LA272_0<=RULE_SCIENTIFIC_INT)||LA272_0==RULE_STRING) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_92);
                    lv_elements_3_0=norm1_ArrayElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop269:
                    do {
                        int alt269=2;
                        alt269 = dfa269.predict(input);
                        switch (alt269) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_93); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop268:
                    	    do {
                    	        int alt268=2;
                    	        int LA268_0 = input.LA(1);
                    	        if ( (LA268_0==Comma) ) {
                    	            alt268=1;
                    	        }
                    	        switch (alt268) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_93);
                    	    	    lv_elements_5_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop268;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_92);
                    	    lv_elements_6_0=norm1_ArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.ArrayElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop269;
                        }
                    } while (true);
                    int alt271=2;
                    int LA271_0 = input.LA(1);
                    if ( (LA271_0==Comma) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            {
                            {
                            lv_trailingComma_7_0=(Token)match(input,Comma,FOLLOW_92); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_trailingComma_7_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getArrayLiteralRule());
                              							}
                              							setWithLastConsumed(current, "trailingComma", lv_trailingComma_7_0 != null, ",");
                            }
                            }
                            }
                            loop270:
                            do {
                                int alt270=2;
                                int LA270_0 = input.LA(1);
                                if ( (LA270_0==Comma) ) {
                                    alt270=1;
                                }
                                switch (alt270) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayLiteralAccess().getElementsArrayPaddingParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_92);
                            	    lv_elements_8_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.ArrayPadding");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop270;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayPadding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayPadding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayPaddingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayPadding=ruleArrayPadding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayPadding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayPadding() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayPaddingAccess().getArrayPaddingAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayElement=ruleArrayElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayElement() throws RecognitionException {
        EObject current = null;
        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
            }
            }
            int alt273=2;
            int LA273_0 = input.LA(1);
            if ( (LA273_0==FullStopFullStopFullStop) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", lv_spread_1_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayElement() throws RecognitionException {
        EObject current = null;
        Token lv_spread_1_0=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayElementAccess().getArrayElementAction_0(),
              					current);
            }
            }
            int alt274=2;
            int LA274_0 = input.LA(1);
            if ( (LA274_0==FullStopFullStopFullStop) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    {
                    {
                    lv_spread_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArrayElementRule());
                      					}
                      					setWithLastConsumed(current, "spread", lv_spread_1_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrayElementAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrayElementRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleObjectLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectLiteral=ruleObjectLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;
        EObject lv_propertyAssignments_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt277=2;
            int LA277_0 = input.LA(1);
            if ( ((LA277_0>=Intersection && LA277_0<=With)||LA277_0==FullStopFullStopFullStop||(LA277_0>=For && LA277_0<=Var)||(LA277_0>=As && LA277_0<=Of)||LA277_0==LeftParenthesis||(LA277_0>=Asterisk && LA277_0<=PlusSign)||LA277_0==HyphenMinus||LA277_0==LessThanSign||(LA277_0>=QuestionMark && LA277_0<=LeftSquareBracket)||LA277_0==LeftCurlyBracket||LA277_0==Tilde||LA277_0==RULE_IDENTIFIER||LA277_0==RULE_INT||LA277_0==RULE_DOUBLE||(LA277_0>=RULE_BINARY_INT && LA277_0<=RULE_SCIENTIFIC_INT)||LA277_0==RULE_STRING) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_propertyAssignments_2_0=rulePropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop275:
                    do {
                        int alt275=2;
                        int LA275_0 = input.LA(1);
                        if ( (LA275_0==Comma) ) {
                            int LA275_1 = input.LA(2);
                            if ( ((LA275_1>=Intersection && LA275_1<=With)||LA275_1==FullStopFullStopFullStop||(LA275_1>=For && LA275_1<=Var)||(LA275_1>=As && LA275_1<=Of)||LA275_1==LeftParenthesis||(LA275_1>=Asterisk && LA275_1<=PlusSign)||LA275_1==HyphenMinus||LA275_1==LessThanSign||(LA275_1>=QuestionMark && LA275_1<=LeftSquareBracket)||LA275_1==LeftCurlyBracket||LA275_1==Tilde||LA275_1==RULE_IDENTIFIER||LA275_1==RULE_INT||LA275_1==RULE_DOUBLE||(LA275_1>=RULE_BINARY_INT && LA275_1<=RULE_SCIENTIFIC_INT)||LA275_1==RULE_STRING) ) {
                                alt275=1;
                            }
                        }
                        switch (alt275) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_95); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_propertyAssignments_4_0=rulePropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop275;
                        }
                    } while (true);
                    int alt276=2;
                    int LA276_0 = input.LA(1);
                    if ( (LA276_0==Comma) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_propertyAssignments_2_0 = null;
        EObject lv_propertyAssignments_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectLiteralAccess().getObjectLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt280=2;
            int LA280_0 = input.LA(1);
            if ( ((LA280_0>=Intersection && LA280_0<=With)||LA280_0==FullStopFullStopFullStop||(LA280_0>=For && LA280_0<=Var)||(LA280_0>=As && LA280_0<=Of)||LA280_0==LeftParenthesis||(LA280_0>=Asterisk && LA280_0<=PlusSign)||LA280_0==HyphenMinus||LA280_0==LessThanSign||(LA280_0>=QuestionMark && LA280_0<=LeftSquareBracket)||LA280_0==LeftCurlyBracket||LA280_0==Tilde||LA280_0==RULE_IDENTIFIER||LA280_0==RULE_INT||LA280_0==RULE_DOUBLE||(LA280_0>=RULE_BINARY_INT && LA280_0<=RULE_SCIENTIFIC_INT)||LA280_0==RULE_STRING) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_propertyAssignments_2_0=norm1_PropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                      						}
                      						add(
                      							current,
                      							"propertyAssignments",
                      							lv_propertyAssignments_2_0,
                      							"org.eclipse.n4js.N4JS.PropertyAssignment");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop278:
                    do {
                        int alt278=2;
                        int LA278_0 = input.LA(1);
                        if ( (LA278_0==Comma) ) {
                            int LA278_1 = input.LA(2);
                            if ( ((LA278_1>=Intersection && LA278_1<=With)||LA278_1==FullStopFullStopFullStop||(LA278_1>=For && LA278_1<=Var)||(LA278_1>=As && LA278_1<=Of)||LA278_1==LeftParenthesis||(LA278_1>=Asterisk && LA278_1<=PlusSign)||LA278_1==HyphenMinus||LA278_1==LessThanSign||(LA278_1>=QuestionMark && LA278_1<=LeftSquareBracket)||LA278_1==LeftCurlyBracket||LA278_1==Tilde||LA278_1==RULE_IDENTIFIER||LA278_1==RULE_INT||LA278_1==RULE_DOUBLE||(LA278_1>=RULE_BINARY_INT && LA278_1<=RULE_SCIENTIFIC_INT)||LA278_1==RULE_STRING) ) {
                                alt278=1;
                            }
                        }
                        switch (alt278) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_95); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_propertyAssignments_4_0=norm1_PropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectLiteralRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"propertyAssignments",
                    	      								lv_propertyAssignments_4_0,
                    	      								"org.eclipse.n4js.N4JS.PropertyAssignment");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop278;
                        }
                    } while (true);
                    int alt279=2;
                    int LA279_0 = input.LA(1);
                    if ( (LA279_0==Comma) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_5, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyAssignment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignment=rulePropertyAssignment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedPropertyAssignment_0 = null;
        EObject this_PropertyNameValuePair_1 = null;
        EObject this_PropertyGetterDeclaration_2 = null;
        EObject this_PropertySetterDeclaration_3 = null;
        EObject this_PropertyMethodDeclaration_4 = null;
        EObject this_PropertyNameValuePairSingleName_5 = null;
        EObject this_PropertySpread_6 = null;
        	enterRule();
        try {
            {
            int alt281=7;
            alt281 = dfa281.predict(input);
            switch (alt281) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=ruleAnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=rulePropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=rulePropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=rulePropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=rulePropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=rulePropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySpread_6=rulePropertySpread();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertySpread_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedPropertyAssignment_0 = null;
        EObject this_PropertyNameValuePair_1 = null;
        EObject this_PropertyGetterDeclaration_2 = null;
        EObject this_PropertySetterDeclaration_3 = null;
        EObject this_PropertyMethodDeclaration_4 = null;
        EObject this_PropertyNameValuePairSingleName_5 = null;
        EObject this_PropertySpread_6 = null;
        	enterRule();
        try {
            {
            int alt282=7;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedPropertyAssignment_0=norm1_AnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedPropertyAssignment_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePair_1=norm1_PropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyNameValuePair_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyGetterDeclaration_2=norm1_PropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyGetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySetterDeclaration_3=norm1_PropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertySetterDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyMethodDeclaration_4=norm1_PropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PropertyMethodDeclaration_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertyNameValuePairSingleName_5=norm1_PropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertyNameValuePairSingleName_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_PropertySpread_6=norm1_PropertySpread();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_PropertySpread_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedPropertyAssignment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedPropertyAssignment=ruleAnnotatedPropertyAssignment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedPropertyAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_30=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;
        EObject lv_declaredTypeRefNode_2_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_expression_5_0 = null;
        EObject this_GetterHeader_7 = null;
        EObject lv_body_8_0 = null;
        EObject lv_declaredName_11_0 = null;
        EObject lv_fpar_14_0 = null;
        EObject lv_body_16_0 = null;
        EObject this_TypeParameters_18 = null;
        EObject lv_declaredReturnTypeRefNode_19_0 = null;
        EObject lv_declaredName_21_0 = null;
        EObject this_MethodParamsAndBody_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsAndBody_24 = null;
        EObject lv_declaredTypeRefNode_27_0 = null;
        EObject lv_expression_28_0 = null;
        EObject lv_expression_31_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_96);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt290=6;
            alt290 = dfa290.predict(input);
            switch (alt290) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    int alt283=2;
                    alt283 = dfa283.predict(input);
                    switch (alt283) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_0_0_0_1_0());
                            }
                            pushFollow(FOLLOW_97);
                            lv_declaredTypeRefNode_2_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRefNode",
                              										lv_declaredTypeRefNode_2_0,
                              										"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_GetterHeader_7=ruleGetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    otherlv_10=(Token)match(input,Set,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                    }
                    pushFollow(FOLLOW_98);
                    lv_declaredName_11_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt284=2;
                    int LA284_0 = input.LA(1);
                    if ( (LA284_0==QuestionMark) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_12_0 != null, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_fpar_14_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                    }
                    }
                    int alt285=2;
                    int LA285_0 = input.LA(1);
                    if ( (LA285_0==LessThanSign) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeParametersParserRuleCall_1_3_0_0_1());
                            }
                            pushFollow(FOLLOW_99);
                            this_TypeParameters_18=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt286=2;
                    alt286 = dfa286.predict(input);
                    switch (alt286) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredReturnTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_3_0_0_2_0());
                            }
                            pushFollow(FOLLOW_99);
                            lv_declaredReturnTypeRefNode_19_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredReturnTypeRefNode",
                              										lv_declaredReturnTypeRefNode_19_0,
                              										"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt287=2;
                    int LA287_0 = input.LA(1);
                    if ( (LA287_0==Asterisk) ) {
                        alt287=1;
                    }
                    else if ( ((LA287_0>=Intersection && LA287_0<=With)||(LA287_0>=For && LA287_0<=Var)||(LA287_0>=As && LA287_0<=Of)||LA287_0==LeftSquareBracket||LA287_0==RULE_IDENTIFIER||LA287_0==RULE_INT||LA287_0==RULE_DOUBLE||(LA287_0>=RULE_BINARY_INT && LA287_0<=RULE_OCTAL_INT)||(LA287_0>=RULE_HEX_INT && LA287_0<=RULE_SCIENTIFIC_INT)||LA287_0==RULE_STRING) ) {
                        alt287=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 287, 0, input);
                        throw nvae;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_97); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", lv_generator_20_0 != null, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_44);
                            lv_declaredName_21_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_100);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                            }
                            pushFollow(FOLLOW_46);
                            lv_declaredName_23_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                            }
                            pushFollow(FOLLOW_100);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt288=2;
                    int LA288_0 = input.LA(1);
                    if ( (LA288_0==Semicolon) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    int alt289=2;
                    alt289 = dfa289.predict(input);
                    switch (alt289) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_4_1_0());
                            }
                            pushFollow(FOLLOW_101);
                            lv_declaredTypeRefNode_27_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRefNode",
                              								lv_declaredTypeRefNode_27_0,
                              								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_28_0=rulePropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_28_0,
                      								"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySpreadAnnotationListAction_1_5_0(),
                      							current);
                    }
                    }
                    otherlv_30=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_30, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_5_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_31_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_31_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Token otherlv_10=null;
        Token lv_declaredOptional_12_0=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_20_0=null;
        Token otherlv_25=null;
        Token otherlv_30=null;
        EObject this_PropertyAssignmentAnnotationList_0 = null;
        EObject lv_declaredTypeRefNode_2_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_expression_5_0 = null;
        EObject this_GetterHeader_7 = null;
        EObject lv_body_8_0 = null;
        EObject lv_declaredName_11_0 = null;
        EObject lv_fpar_14_0 = null;
        EObject lv_body_16_0 = null;
        EObject this_TypeParameters_18 = null;
        EObject lv_declaredReturnTypeRefNode_19_0 = null;
        EObject lv_declaredName_21_0 = null;
        EObject this_MethodParamsAndBody_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsAndBody_24 = null;
        EObject lv_declaredTypeRefNode_27_0 = null;
        EObject lv_expression_28_0 = null;
        EObject lv_expression_31_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_96);
            this_PropertyAssignmentAnnotationList_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PropertyAssignmentAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt298=6;
            alt298 = dfa298.predict(input);
            switch (alt298) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    int alt291=2;
                    alt291 = dfa291.predict(input);
                    switch (alt291) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_0_0_0_1_0());
                            }
                            pushFollow(FOLLOW_97);
                            lv_declaredTypeRefNode_2_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredTypeRefNode",
                              										lv_declaredTypeRefNode_2_0,
                              										"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_3_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_5_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_5_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyGetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1());
                    }
                    pushFollow(FOLLOW_6);
                    this_GetterHeader_7=norm1_GetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_7;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_8_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySetterDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    otherlv_10=(Token)match(input,Set,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_10, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0());
                    }
                    pushFollow(FOLLOW_98);
                    lv_declaredName_11_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_11_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt292=2;
                    int LA292_0 = input.LA(1);
                    if ( (LA292_0==QuestionMark) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_12_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_12_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_12_0 != null, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparFormalParameterParserRuleCall_1_2_3_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_fpar_14_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_14_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_15, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyBlockParserRuleCall_1_2_5_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_16_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"body",
                      								lv_body_16_0,
                      								"org.eclipse.n4js.N4JS.Block");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyMethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                    }
                    }
                    int alt293=2;
                    int LA293_0 = input.LA(1);
                    if ( (LA293_0==LessThanSign) ) {
                        alt293=1;
                    }
                    switch (alt293) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeParametersParserRuleCall_1_3_0_0_1());
                            }
                            pushFollow(FOLLOW_99);
                            this_TypeParameters_18=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt294=2;
                    alt294 = dfa294.predict(input);
                    switch (alt294) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredReturnTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_3_0_0_2_0());
                            }
                            pushFollow(FOLLOW_99);
                            lv_declaredReturnTypeRefNode_19_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              									}
                              									set(
                              										current,
                              										"declaredReturnTypeRefNode",
                              										lv_declaredReturnTypeRefNode_19_0,
                              										"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt295=2;
                    int LA295_0 = input.LA(1);
                    if ( (LA295_0==Asterisk) ) {
                        alt295=1;
                    }
                    else if ( ((LA295_0>=Intersection && LA295_0<=With)||(LA295_0>=For && LA295_0<=Var)||(LA295_0>=As && LA295_0<=Of)||LA295_0==LeftSquareBracket||LA295_0==RULE_IDENTIFIER||LA295_0==RULE_INT||LA295_0==RULE_DOUBLE||(LA295_0>=RULE_BINARY_INT && LA295_0<=RULE_OCTAL_INT)||(LA295_0>=RULE_HEX_INT && LA295_0<=RULE_SCIENTIFIC_INT)||LA295_0==RULE_STRING) ) {
                        alt295=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 295, 0, input);
                        throw nvae;
                    }
                    switch (alt295) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_20_0=(Token)match(input,Asterisk,FOLLOW_97); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_20_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											setWithLastConsumed(current, "generator", lv_generator_20_0 != null, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_44);
                            lv_declaredName_21_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_21_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_100);
                            this_MethodParamsAndBody_22=norm1_MethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_22;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0());
                            }
                            pushFollow(FOLLOW_46);
                            lv_declaredName_23_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1());
                            }
                            pushFollow(FOLLOW_100);
                            this_MethodParamsAndBody_24=ruleMethodParamsAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt296=2;
                    int LA296_0 = input.LA(1);
                    if ( (LA296_0==Semicolon) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyNameValuePairSingleNameAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    int alt297=2;
                    alt297 = dfa297.predict(input);
                    switch (alt297) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_1_4_1_0());
                            }
                            pushFollow(FOLLOW_101);
                            lv_declaredTypeRefNode_27_0=ruleTypeReferenceWithModifiersNode();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                              							}
                              							set(
                              								current,
                              								"declaredTypeRefNode",
                              								lv_declaredTypeRefNode_27_0,
                              								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_28_0=norm1_PropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_28_0,
                      								"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertySpreadAnnotationListAction_1_5_0(),
                      							current);
                    }
                    }
                    otherlv_30=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_30, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignmentExpressionParserRuleCall_1_5_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_31_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedPropertyAssignmentRule());
                      							}
                      							set(
                      								current,
                      								"expression",
                      								lv_expression_31_0,
                      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyMethodDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyMethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyMethodDeclaration=rulePropertyMethodDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyMethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        EObject this_TypeParameters_1 = null;
        EObject lv_declaredReturnTypeRefNode_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            int alt299=2;
            int LA299_0 = input.LA(1);
            if ( (LA299_0==LessThanSign) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeParametersParserRuleCall_0_0_1());
                    }
                    pushFollow(FOLLOW_99);
                    this_TypeParameters_1=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeParameters_1;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt300=2;
            alt300 = dfa300.predict(input);
            switch (alt300) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredReturnTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_99);
                    lv_declaredReturnTypeRefNode_2_0=ruleTypeReferenceWithModifiersNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"declaredReturnTypeRefNode",
                      								lv_declaredReturnTypeRefNode_2_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_99);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt301=2;
            int LA301_0 = input.LA(1);
            if ( (LA301_0==Asterisk) ) {
                alt301=1;
            }
            else if ( ((LA301_0>=Intersection && LA301_0<=With)||(LA301_0>=For && LA301_0<=Var)||(LA301_0>=As && LA301_0<=Of)||LA301_0==LeftSquareBracket||LA301_0==RULE_IDENTIFIER||LA301_0==RULE_INT||LA301_0==RULE_DOUBLE||(LA301_0>=RULE_BINARY_INT && LA301_0<=RULE_OCTAL_INT)||(LA301_0>=RULE_HEX_INT && LA301_0<=RULE_SCIENTIFIC_INT)||LA301_0==RULE_STRING) ) {
                alt301=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);
                throw nvae;
            }
            switch (alt301) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", lv_generator_4_0 != null, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_44);
                    lv_declaredName_5_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsAndBody_6=norm1_MethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_46);
                    lv_declaredName_7_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsAndBody_8=ruleMethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt302=2;
            int LA302_0 = input.LA(1);
            if ( (LA302_0==Semicolon) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyMethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        EObject this_TypeParameters_1 = null;
        EObject lv_declaredReturnTypeRefNode_2_0 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyMethodDeclarationAccess().getPropertyMethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            int alt303=2;
            int LA303_0 = input.LA(1);
            if ( (LA303_0==LessThanSign) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getTypeParametersParserRuleCall_0_0_1());
                    }
                    pushFollow(FOLLOW_99);
                    this_TypeParameters_1=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeParameters_1;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt304=2;
            alt304 = dfa304.predict(input);
            switch (alt304) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredReturnTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_99);
                    lv_declaredReturnTypeRefNode_2_0=ruleTypeReferenceWithModifiersNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"declaredReturnTypeRefNode",
                      								lv_declaredReturnTypeRefNode_2_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_99);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt305=2;
            int LA305_0 = input.LA(1);
            if ( (LA305_0==Asterisk) ) {
                alt305=1;
            }
            else if ( ((LA305_0>=Intersection && LA305_0<=With)||(LA305_0>=For && LA305_0<=Var)||(LA305_0>=As && LA305_0<=Of)||LA305_0==LeftSquareBracket||LA305_0==RULE_IDENTIFIER||LA305_0==RULE_INT||LA305_0==RULE_DOUBLE||(LA305_0>=RULE_BINARY_INT && LA305_0<=RULE_OCTAL_INT)||(LA305_0>=RULE_HEX_INT && LA305_0<=RULE_SCIENTIFIC_INT)||LA305_0==RULE_STRING) ) {
                alt305=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);
                throw nvae;
            }
            switch (alt305) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", lv_generator_4_0 != null, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_44);
                    lv_declaredName_5_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsAndBody_6=norm1_MethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_46);
                    lv_declaredName_7_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getPropertyMethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getPropertyMethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsAndBody_8=ruleMethodParamsAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==Semicolon) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePair = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePair=rulePropertyNameValuePair();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePair; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRefNode_1_0 = null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
            }
            }
            int alt307=2;
            alt307 = dfa307.predict(input);
            switch (alt307) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_0_0_1_0());
                    }
                    pushFollow(FOLLOW_97);
                    lv_declaredTypeRefNode_1_0=ruleTypeReferenceWithModifiersNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_1_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_102);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            int alt308=2;
            int LA308_0 = input.LA(1);
            if ( (LA308_0==QuestionMark) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_87); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePair() throws RecognitionException {
        EObject current = null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeRefNode_1_0 = null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyNameValuePairAccess().getPropertyNameValuePairAction_0_0_0(),
              							current);
            }
            }
            int alt309=2;
            alt309 = dfa309.predict(input);
            switch (alt309) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefNodeTypeReferenceWithModifiersNodeParserRuleCall_0_0_1_0());
                    }
                    pushFollow(FOLLOW_97);
                    lv_declaredTypeRefNode_1_0=ruleTypeReferenceWithModifiersNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							set(
                      								current,
                      								"declaredTypeRefNode",
                      								lv_declaredTypeRefNode_1_0,
                      								"org.eclipse.n4js.N4JS.TypeReferenceWithModifiersNode");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_102);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            int alt310=2;
            int LA310_0 = input.LA(1);
            if ( (LA310_0==QuestionMark) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_87); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getPropertyNameValuePairRule());
                      							}
                      							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_5_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_5_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePairSingleName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePairSingleName=rulePropertyNameValuePairSingleName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePairSingleName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject lv_declaredTypeRefNode_0_0 = null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt311=2;
            alt311 = dfa311.predict(input);
            switch (alt311) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_declaredTypeRefNode_0_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRefNode",
                      						lv_declaredTypeRefNode_0_0,
                      						"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        EObject current = null;
        EObject lv_declaredTypeRefNode_0_0 = null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt312=2;
            alt312 = dfa312.predict(input);
            switch (alt312) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_101);
                    lv_declaredTypeRefNode_0_0=ruleTypeReferenceNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
                      					}
                      					set(
                      						current,
                      						"declaredTypeRefNode",
                      						lv_declaredTypeRefNode_0_0,
                      						"org.eclipse.n4js.N4JS.TypeReferenceNode");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_PropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNameRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.PropertyNameValuePairSingleNamePart");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyNameValuePairSingleNamePart = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyNameValuePairSingleNamePart=rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyNameValuePairSingleNamePart; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_63);
            this_IdentifierRef_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            int alt313=2;
            int LA313_0 = input.LA(1);
            if ( (LA313_0==EqualsSign) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getAssignmentExpressionLhsAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_52);
                    lv_op_2_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentOperatorOnlyAssign");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyNameValuePairSingleNamePart() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_63);
            this_IdentifierRef_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            int alt314=2;
            int LA314_0 = input.LA(1);
            if ( (LA314_0==EqualsSign) ) {
                alt314=1;
            }
            switch (alt314) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getAssignmentExpressionLhsAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_52);
                    lv_op_2_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentOperatorOnlyAssign");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_rhs_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getPropertyNameValuePairSingleNamePartRule());
                      						}
                      						set(
                      							current,
                      							"rhs",
                      							lv_rhs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyGetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyGetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyGetterDeclaration=rulePropertyGetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyGetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_GetterHeader_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_6);
            this_GetterHeader_1=ruleGetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertyGetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_GetterHeader_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertyGetterDeclarationAccess().getPropertyGetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1());
            }
            pushFollow(FOLLOW_6);
            this_GetterHeader_1=norm1_GetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_1;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertyGetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertyGetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_2_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertySetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySetterDeclaration=rulePropertySetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_fpar_5_0 = null;
        EObject lv_body_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_98);
            lv_declaredName_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt315=2;
            int LA315_0 = input.LA(1);
            if ( (LA315_0==QuestionMark) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_69);
            lv_fpar_5_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_declaredOptional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_declaredName_2_0 = null;
        EObject lv_fpar_5_0 = null;
        EObject lv_body_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPropertySetterDeclarationAccess().getPropertySetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_98);
            lv_declaredName_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_2_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt316=2;
            int LA316_0 = input.LA(1);
            if ( (LA316_0==QuestionMark) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_3_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_3_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getPropertySetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_69);
            lv_fpar_5_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
            }
            pushFollow(FOLLOW_2);
            lv_body_7_0=ruleBlock();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySetterDeclarationRule());
              					}
              					set(
              						current,
              						"body",
              						lv_body_7_0,
              						"org.eclipse.n4js.N4JS.Block");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertySpread() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertySpread = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertySpreadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertySpread=rulePropertySpread();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertySpread; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertySpread() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySpreadAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySpreadRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PropertySpread() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPropertySpreadAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPropertySpreadRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedCallExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedCallExpression=ruleParameterizedCallExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        EObject this_ConcreteTypeArguments_0 = null;
        EObject lv_target_1_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
            }
            pushFollow(FOLLOW_5);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_103);
            lv_target_1_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt317=2;
            int LA317_0 = input.LA(1);
            if ( (LA317_0==QuestionMarkFullStop) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_2_0 != null, "?.");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_3=ruleArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedCallExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        EObject this_ConcreteTypeArguments_0 = null;
        EObject lv_target_1_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0());
            }
            pushFollow(FOLLOW_5);
            this_ConcreteTypeArguments_0=ruleConcreteTypeArguments(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ConcreteTypeArguments_0;
              			afterParserOrEnumRuleCall();
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getTargetIdentifierRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_103);
            lv_target_1_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedCallExpressionRule());
              					}
              					set(
              						current,
              						"target",
              						lv_target_1_0,
              						"org.eclipse.n4js.N4JS.IdentifierRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt318=2;
            int LA318_0 = input.LA(1);
            if ( (LA318_0==QuestionMarkFullStop) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_103); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_2_0 != null, "?.");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_3=norm1_ArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_3;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConcreteTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeArgs_1_0 = null;
        EObject lv_typeArgs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getConcreteTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeReferenceNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_104);
            lv_typeArgs_1_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
              					}
              					add(
              						current,
              						"typeArgs",
              						lv_typeArgs_1_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop319:
            do {
                int alt319=2;
                int LA319_0 = input.LA(1);
                if ( (LA319_0==Comma) ) {
                    alt319=1;
                }
                switch (alt319) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_20); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getConcreteTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsTypeReferenceNodeParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_104);
            	    lv_typeArgs_3_0=ruleTypeReferenceNode();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getConcreteTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeArgs",
            	      							lv_typeArgs_3_0,
            	      							"org.eclipse.n4js.N4JS.TypeReferenceNode");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop319;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getConcreteTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepDeclaredTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_declaredTypeRefNode_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepDeclaredTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepDeclaredTypeRefAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_declaredTypeRefNode_1_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepDeclaredTypeRefRule());
              					}
              					set(
              						current,
              						"declaredTypeRefNode",
              						lv_declaredTypeRefNode_1_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepDeclaredReturnTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_declaredReturnTypeRefNode_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepDeclaredReturnTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepDeclaredReturnTypeRefAccess().getDeclaredReturnTypeRefNodeTypeReferenceNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_declaredReturnTypeRefNode_1_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepDeclaredReturnTypeRefRule());
              					}
              					set(
              						current,
              						"declaredReturnTypeRefNode",
              						lv_declaredReturnTypeRefNode_1_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeReferenceNode() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeReferenceNode = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNodeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceNode=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceNode; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeReferenceNode() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefInAST_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getTypeReferenceNodeAccess().getTypeRefInASTTypeRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefInAST_0_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeReferenceNodeRule());
              				}
              				set(
              					current,
              					"typeRefInAST",
              					lv_typeRefInAST_0_0,
              					"org.eclipse.n4js.TypeExpressions.TypeRef");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeReferenceWithModifiersNode() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeReferenceWithModifiersNode = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceWithModifiersNodeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceWithModifiersNode=ruleTypeReferenceWithModifiersNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceWithModifiersNode; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeReferenceWithModifiersNode() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefInAST_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getTypeReferenceWithModifiersNodeAccess().getTypeRefInASTTypeRefWithModifiersParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefInAST_0_0=ruleTypeRefWithModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeReferenceWithModifiersNodeRule());
              				}
              				set(
              					current,
              					"typeRefInAST",
              					lv_typeRefInAST_0_0,
              					"org.eclipse.n4js.TypeExpressions.TypeRefWithModifiers");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefNominalNode() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRefNominalNode = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalNodeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominalNode=ruleParameterizedTypeRefNominalNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominalNode; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefNominalNode() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefInAST_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalNodeAccess().getTypeRefInASTParameterizedTypeRefNominalParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefInAST_0_0=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getParameterizedTypeRefNominalNodeRule());
              				}
              				set(
              					current,
              					"typeRefInAST",
              					lv_typeRefInAST_0_0,
              					"org.eclipse.n4js.TypeExpressions.ParameterizedTypeRefNominal");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayTypeExpressionNode() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayTypeExpressionNode = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeExpressionNodeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeExpressionNode=ruleArrayTypeExpressionNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeExpressionNode; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayTypeExpressionNode() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefInAST_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getArrayTypeExpressionNodeAccess().getTypeRefInASTArrayTypeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefInAST_0_0=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getArrayTypeExpressionNodeRule());
              				}
              				set(
              					current,
              					"typeRefInAST",
              					lv_typeRefInAST_0_0,
              					"org.eclipse.n4js.TypeExpressions.ArrayTypeExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleImportCallExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleImportCallExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getImportCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleImportCallExpression=ruleImportCallExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleImportCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleImportCallExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_ArgumentsWithParentheses_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_103); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_1=ruleArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ImportCallExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_ArgumentsWithParentheses_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Import,FOLLOW_103); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getImportCallExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_ArgumentsWithParentheses_1=norm1_ArgumentsWithParentheses(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArgumentsWithParentheses_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLeftHandSideExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLeftHandSideExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLeftHandSideExpression=ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLeftHandSideExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        Token lv_optionalChaining_5_0=null;
        Token lv_optionalChaining_12_0=null;
        EObject this_MemberExpression_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        EObject this_ArgumentsWithParentheses_6 = null;
        EObject this_IndexedAccessExpressionTail_8 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_10 = null;
        EObject lv_template_13_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_105);
            this_MemberExpression_0=ruleMemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt324=2;
            int LA324_0 = input.LA(1);
            if ( (LA324_0==QuestionMarkFullStop||LA324_0==LeftParenthesis) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                    }
                    }
                    int alt320=2;
                    int LA320_0 = input.LA(1);
                    if ( (LA320_0==QuestionMarkFullStop) ) {
                        alt320=1;
                    }
                    switch (alt320) {
                        case 1 :
                            {
                            {
                            lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_103); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_optionalChaining_2_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                              						}
                              						setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_2_0 != null, "?.");
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2());
                    }
                    pushFollow(FOLLOW_106);
                    this_ArgumentsWithParentheses_3=ruleArgumentsWithParentheses(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArgumentsWithParentheses_3;
                      				afterParserOrEnumRuleCall();
                    }
                    loop323:
                    do {
                        int alt323=5;
                        int LA323_0 = input.LA(1);
                        if ( (LA323_0==QuestionMarkFullStop) ) {
                            int LA323_2 = input.LA(2);
                            if ( ((LA323_2>=Intersection && LA323_2<=With)||(LA323_2>=For && LA323_2<=Var)||(LA323_2>=As && LA323_2<=Of)||LA323_2==LessThanSign||LA323_2==RULE_IDENTIFIER) ) {
                                alt323=3;
                            }
                            else if ( (LA323_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred191_InternalN4JSParser())) {
                                alt323=4;
                            }
                            else if ( (LA323_2==RULE_TEMPLATE_HEAD) && (synpred191_InternalN4JSParser())) {
                                alt323=4;
                            }
                            else if ( (LA323_2==LeftParenthesis) ) {
                                alt323=1;
                            }
                            else if ( (LA323_2==LeftSquareBracket) ) {
                                alt323=2;
                            }
                        }
                        else if ( (LA323_0==LeftParenthesis) ) {
                            alt323=1;
                        }
                        else if ( (LA323_0==LeftSquareBracket) ) {
                            alt323=2;
                        }
                        else if ( (LA323_0==FullStop) ) {
                            alt323=3;
                        }
                        else if ( (LA323_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred191_InternalN4JSParser())) {
                            alt323=4;
                        }
                        else if ( (LA323_0==RULE_TEMPLATE_HEAD) && (synpred191_InternalN4JSParser())) {
                            alt323=4;
                        }
                        switch (alt323) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_3_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt321=2;
                    	    int LA321_0 = input.LA(1);
                    	    if ( (LA321_0==QuestionMarkFullStop) ) {
                    	        alt321=1;
                    	    }
                    	    switch (alt321) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_5_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_103); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_5_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_5_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_ArgumentsWithParentheses_6=ruleArgumentsWithParentheses(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ArgumentsWithParentheses_6;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_IndexedAccessExpressionTail_8=ruleIndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_ParameterizedPropertyAccessExpressionTail_10=ruleParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_10;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_0_0(),
                    	      									current);
                    	    }
                    	    }
                    	    int alt322=2;
                    	    int LA322_0 = input.LA(1);
                    	    if ( (LA322_0==QuestionMarkFullStop) ) {
                    	        alt322=1;
                    	    }
                    	    switch (alt322) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_12_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_107); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              									newLeafNode(lv_optionalChaining_12_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              									if (current==null) {
                    	              										current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              									}
                    	              									setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_12_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    lv_template_13_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_13_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop323;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LeftHandSideExpression() throws RecognitionException {
        EObject current = null;
        Token lv_optionalChaining_2_0=null;
        Token lv_optionalChaining_5_0=null;
        Token lv_optionalChaining_12_0=null;
        EObject this_MemberExpression_0 = null;
        EObject this_ArgumentsWithParentheses_3 = null;
        EObject this_ArgumentsWithParentheses_6 = null;
        EObject this_IndexedAccessExpressionTail_8 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_10 = null;
        EObject lv_template_13_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_105);
            this_MemberExpression_0=norm1_MemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MemberExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt329=2;
            int LA329_0 = input.LA(1);
            if ( (LA329_0==QuestionMarkFullStop||LA329_0==LeftParenthesis) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndSet(
                      						grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_0(),
                      						current);
                    }
                    }
                    int alt325=2;
                    int LA325_0 = input.LA(1);
                    if ( (LA325_0==QuestionMarkFullStop) ) {
                        alt325=1;
                    }
                    switch (alt325) {
                        case 1 :
                            {
                            {
                            lv_optionalChaining_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_103); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_optionalChaining_2_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                              						}
                              						setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_2_0 != null, "?.");
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2());
                    }
                    pushFollow(FOLLOW_106);
                    this_ArgumentsWithParentheses_3=norm1_ArgumentsWithParentheses(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArgumentsWithParentheses_3;
                      				afterParserOrEnumRuleCall();
                    }
                    loop328:
                    do {
                        int alt328=5;
                        int LA328_0 = input.LA(1);
                        if ( (LA328_0==QuestionMarkFullStop) ) {
                            int LA328_2 = input.LA(2);
                            if ( (LA328_2==LeftSquareBracket) ) {
                                alt328=2;
                            }
                            else if ( ((LA328_2>=Intersection && LA328_2<=With)||(LA328_2>=For && LA328_2<=Var)||(LA328_2>=As && LA328_2<=Of)||LA328_2==LessThanSign||LA328_2==RULE_IDENTIFIER) ) {
                                alt328=3;
                            }
                            else if ( (LA328_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred192_InternalN4JSParser())) {
                                alt328=4;
                            }
                            else if ( (LA328_2==RULE_TEMPLATE_HEAD) && (synpred192_InternalN4JSParser())) {
                                alt328=4;
                            }
                            else if ( (LA328_2==LeftParenthesis) ) {
                                alt328=1;
                            }
                        }
                        else if ( (LA328_0==LeftParenthesis) ) {
                            alt328=1;
                        }
                        else if ( (LA328_0==LeftSquareBracket) ) {
                            alt328=2;
                        }
                        else if ( (LA328_0==FullStop) ) {
                            alt328=3;
                        }
                        else if ( (LA328_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred192_InternalN4JSParser())) {
                            alt328=4;
                        }
                        else if ( (LA328_0==RULE_TEMPLATE_HEAD) && (synpred192_InternalN4JSParser())) {
                            alt328=4;
                        }
                        switch (alt328) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedCallExpressionTargetAction_1_3_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt326=2;
                    	    int LA326_0 = input.LA(1);
                    	    if ( (LA326_0==QuestionMarkFullStop) ) {
                    	        alt326=1;
                    	    }
                    	    switch (alt326) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_5_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_103); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_5_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_5_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_ArgumentsWithParentheses_6=norm1_ArgumentsWithParentheses(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ArgumentsWithParentheses_6;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_IndexedAccessExpressionTail_8=norm1_IndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_8;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_ParameterizedPropertyAccessExpressionTail_10=norm1_ParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_10;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								current = forceCreateModelElementAndSet(
                    	      									grammarAccess.getLeftHandSideExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_0_0(),
                    	      									current);
                    	    }
                    	    }
                    	    int alt327=2;
                    	    int LA327_0 = input.LA(1);
                    	    if ( (LA327_0==QuestionMarkFullStop) ) {
                    	        alt327=1;
                    	    }
                    	    switch (alt327) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_12_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_107); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              									newLeafNode(lv_optionalChaining_12_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              									if (current==null) {
                    	              										current = createModelElement(grammarAccess.getLeftHandSideExpressionRule());
                    	              									}
                    	              									setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_12_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getLeftHandSideExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    lv_template_13_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getLeftHandSideExpressionRule());
                    	      									}
                    	      									set(
                    	      										current,
                    	      										"template",
                    	      										lv_template_13_0,
                    	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop328;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt330=2;
            int LA330_0 = input.LA(1);
            if ( ((LA330_0>=Intersection && LA330_0<=Implements)||(LA330_0>=Promisify && LA330_0<=Abstract)||(LA330_0>=External && LA330_0<=Function)||(LA330_0>=Private && LA330_0<=Delete)||(LA330_0>=Import && LA330_0<=Public)||LA330_0==Static||(LA330_0>=Target && LA330_0<=Await)||LA330_0==Class||(LA330_0>=False && LA330_0<=Super)||LA330_0==Union||(LA330_0>=Yield && LA330_0<=This)||(LA330_0>=From && LA330_0<=Void)||LA330_0==FullStopFullStopFullStop||(LA330_0>=Get && LA330_0<=Set)||LA330_0==PlusSignPlusSign||(LA330_0>=HyphenMinusHyphenMinus && LA330_0<=SolidusEqualsSign)||LA330_0==As||LA330_0==Of||LA330_0==ExclamationMark||LA330_0==LeftParenthesis||LA330_0==PlusSign||LA330_0==HyphenMinus||LA330_0==Solidus||LA330_0==LessThanSign||(LA330_0>=CommercialAt && LA330_0<=LeftSquareBracket)||LA330_0==LeftCurlyBracket||LA330_0==Tilde||(LA330_0>=RULE_TEMPLATE_HEAD && LA330_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA330_0==RULE_IDENTIFIER||LA330_0==RULE_INT||LA330_0==RULE_DOUBLE||(LA330_0>=RULE_BINARY_INT && LA330_0<=RULE_SCIENTIFIC_INT)||LA330_0==RULE_STRING) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_69);
                    this_Arguments_1=ruleArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArgumentsWithParentheses(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_Arguments_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_108); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt331=2;
            int LA331_0 = input.LA(1);
            if ( ((LA331_0>=Intersection && LA331_0<=Implements)||(LA331_0>=Promisify && LA331_0<=Abstract)||(LA331_0>=External && LA331_0<=Function)||(LA331_0>=Private && LA331_0<=Delete)||(LA331_0>=Import && LA331_0<=Public)||LA331_0==Static||(LA331_0>=Target && LA331_0<=Await)||LA331_0==Class||(LA331_0>=False && LA331_0<=Super)||LA331_0==Union||(LA331_0>=Yield && LA331_0<=This)||(LA331_0>=From && LA331_0<=Void)||LA331_0==FullStopFullStopFullStop||(LA331_0>=Get && LA331_0<=Set)||LA331_0==PlusSignPlusSign||(LA331_0>=HyphenMinusHyphenMinus && LA331_0<=SolidusEqualsSign)||LA331_0==As||LA331_0==Of||LA331_0==ExclamationMark||LA331_0==LeftParenthesis||LA331_0==PlusSign||LA331_0==HyphenMinus||LA331_0==Solidus||LA331_0==LessThanSign||(LA331_0>=CommercialAt && LA331_0<=LeftSquareBracket)||LA331_0==LeftCurlyBracket||LA331_0==Tilde||(LA331_0>=RULE_TEMPLATE_HEAD && LA331_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA331_0==RULE_IDENTIFIER||LA331_0==RULE_INT||LA331_0==RULE_DOUBLE||(LA331_0>=RULE_BINARY_INT && LA331_0<=RULE_SCIENTIFIC_INT)||LA331_0==RULE_STRING) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getArgumentsWithParenthesesRule());
                      				}
                      				newCompositeNode(grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_69);
                    this_Arguments_1=norm1_Arguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_Arguments_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;
        EObject lv_arguments_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_36);
            lv_arguments_0_0=ruleArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);
                if ( (LA332_0==Comma) ) {
                    alt332=1;
                }
                switch (alt332) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_109); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_arguments_2_0=ruleArgument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop332;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Arguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_arguments_0_0 = null;
        EObject lv_arguments_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_36);
            lv_arguments_0_0=norm1_Argument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentsRule());
              					}
              					add(
              						current,
              						"arguments",
              						lv_arguments_0_0,
              						"org.eclipse.n4js.N4JS.Argument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop333:
            do {
                int alt333=2;
                int LA333_0 = input.LA(1);
                if ( (LA333_0==Comma) ) {
                    alt333=1;
                }
                switch (alt333) {
            	case 1 :
            	    {
            	    otherlv_1=(Token)match(input,Comma,FOLLOW_109); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsArgumentParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_arguments_2_0=norm1_Argument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"arguments",
            	      							lv_arguments_2_0,
            	      							"org.eclipse.n4js.N4JS.Argument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop333;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArgument=ruleArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArgument() throws RecognitionException {
        EObject current = null;
        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt334=2;
            int LA334_0 = input.LA(1);
            if ( (LA334_0==FullStopFullStopFullStop) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", lv_spread_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Argument() throws RecognitionException {
        EObject current = null;
        Token lv_spread_0_0=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            int alt335=2;
            int LA335_0 = input.LA(1);
            if ( (LA335_0==FullStopFullStopFullStop) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    {
                    {
                    lv_spread_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_spread_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getArgumentRule());
                      					}
                      					setWithLastConsumed(current, "spread", lv_spread_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArgumentAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArgumentRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMemberExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleMemberExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMemberExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMemberExpression=ruleMemberExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMemberExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMemberExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        Token lv_optionalChaining_16_0=null;
        Token lv_optionalChaining_24_0=null;
        EObject lv_callee_6_0 = null;
        EObject this_ConcreteTypeArguments_7 = null;
        EObject this_Arguments_9 = null;
        EObject this_IndexedAccessExpressionTail_12 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;
        EObject lv_template_17_0 = null;
        EObject this_PrimaryExpression_18 = null;
        EObject this_IndexedAccessExpressionTail_20 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_22 = null;
        EObject lv_template_25_0 = null;
        	enterRule();
        try {
            {
            int alt343=3;
            alt343 = dfa343.predict(input);
            switch (alt343) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_1=(Token)match(input,New,FOLLOW_110); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_111); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_5=(Token)match(input,New,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_112);
                    lv_callee_6_0=ruleMemberExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt336=2;
                    int LA336_0 = input.LA(1);
                    if ( (LA336_0==LessThanSign) ) {
                        int LA336_1 = input.LA(2);
                        if ( (synpred195_InternalN4JSParser()) ) {
                            alt336=1;
                        }
                    }
                    switch (alt336) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                            }
                            pushFollow(FOLLOW_113);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt340=2;
                    int LA340_0 = input.LA(1);
                    if ( (LA340_0==LeftParenthesis) ) {
                        int LA340_1 = input.LA(2);
                        if ( (synpred196_InternalN4JSParser()) ) {
                            alt340=1;
                        }
                    }
                    switch (alt340) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_108); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", lv_withArgs_8_0 != null, "(");
                            }
                            }
                            }
                            int alt337=2;
                            int LA337_0 = input.LA(1);
                            if ( ((LA337_0>=Intersection && LA337_0<=Implements)||(LA337_0>=Promisify && LA337_0<=Abstract)||(LA337_0>=External && LA337_0<=Function)||(LA337_0>=Private && LA337_0<=Delete)||(LA337_0>=Import && LA337_0<=Public)||LA337_0==Static||(LA337_0>=Target && LA337_0<=Await)||LA337_0==Class||(LA337_0>=False && LA337_0<=Super)||LA337_0==Union||(LA337_0>=Yield && LA337_0<=This)||(LA337_0>=From && LA337_0<=Void)||LA337_0==FullStopFullStopFullStop||(LA337_0>=Get && LA337_0<=Set)||LA337_0==PlusSignPlusSign||(LA337_0>=HyphenMinusHyphenMinus && LA337_0<=SolidusEqualsSign)||LA337_0==As||LA337_0==Of||LA337_0==ExclamationMark||LA337_0==LeftParenthesis||LA337_0==PlusSign||LA337_0==HyphenMinus||LA337_0==Solidus||LA337_0==LessThanSign||(LA337_0>=CommercialAt && LA337_0<=LeftSquareBracket)||LA337_0==LeftCurlyBracket||LA337_0==Tilde||(LA337_0>=RULE_TEMPLATE_HEAD && LA337_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA337_0==RULE_IDENTIFIER||LA337_0==RULE_INT||LA337_0==RULE_DOUBLE||(LA337_0>=RULE_BINARY_INT && LA337_0<=RULE_SCIENTIFIC_INT)||LA337_0==RULE_STRING) ) {
                                alt337=1;
                            }
                            switch (alt337) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                    }
                                    pushFollow(FOLLOW_69);
                                    this_Arguments_9=ruleArguments(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_106); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop339:
                            do {
                                int alt339=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case LeftSquareBracket:
                                        {
                                        alt339=1;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Namespace:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt339=2;
                                        }
                                        break;
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt339=3;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt339=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt339=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt339=3;
                                    }
                                    break;
                                }
                                switch (alt339) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	    }
                            	    pushFollow(FOLLOW_106);
                            	    this_IndexedAccessExpressionTail_12=ruleIndexedAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	    }
                            	    pushFollow(FOLLOW_106);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=ruleParameterizedPropertyAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	    }
                            	    }
                            	    int alt338=2;
                            	    int LA338_0 = input.LA(1);
                            	    if ( (LA338_0==QuestionMarkFullStop) ) {
                            	        alt338=1;
                            	    }
                            	    switch (alt338) {
                            	        case 1 :
                            	            {
                            	            {
                            	            lv_optionalChaining_16_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_107); if (state.failed) return current;
                            	            if ( state.backtracking==0 ) {
                            	              									newLeafNode(lv_optionalChaining_16_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            if ( state.backtracking==0 ) {
                            	              									if (current==null) {
                            	              										current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	              									}
                            	              									setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_16_0 != null, "?.");
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0());
                            	    }
                            	    pushFollow(FOLLOW_106);
                            	    lv_template_17_0=ruleTemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_17_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop339;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_106);
                    this_PrimaryExpression_18=rulePrimaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryExpression_18;
                      				afterParserOrEnumRuleCall();
                    }
                    loop342:
                    do {
                        int alt342=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case LeftSquareBracket:
                                {
                                alt342=1;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Namespace:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt342=2;
                                }
                                break;
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt342=3;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt342=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt342=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt342=3;
                            }
                            break;
                        }
                        switch (alt342) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_IndexedAccessExpressionTail_20=ruleIndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_20;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_ParameterizedPropertyAccessExpressionTail_22=ruleParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_22;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt341=2;
                    	    int LA341_0 = input.LA(1);
                    	    if ( (LA341_0==QuestionMarkFullStop) ) {
                    	        alt341=1;
                    	    }
                    	    switch (alt341) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_24_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_107); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_24_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_24_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_2_0());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    lv_template_25_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_25_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop342;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MemberExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token lv_withArgs_8_0=null;
        Token otherlv_10=null;
        Token lv_optionalChaining_16_0=null;
        Token lv_optionalChaining_24_0=null;
        EObject lv_callee_6_0 = null;
        EObject this_ConcreteTypeArguments_7 = null;
        EObject this_Arguments_9 = null;
        EObject this_IndexedAccessExpressionTail_12 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_14 = null;
        EObject lv_template_17_0 = null;
        EObject this_PrimaryExpression_18 = null;
        EObject this_IndexedAccessExpressionTail_20 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_22 = null;
        EObject lv_template_25_0 = null;
        	enterRule();
        try {
            {
            int alt351=3;
            alt351 = dfa351.predict(input);
            switch (alt351) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewTargetAction_0_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_1=(Token)match(input,New,FOLLOW_110); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    otherlv_2=(Token)match(input,FullStop,FOLLOW_111); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElement(
                      								grammarAccess.getMemberExpressionAccess().getNewExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_5=(Token)match(input,New,FOLLOW_107); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_5, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getCalleeMemberExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_112);
                    lv_callee_6_0=norm1_MemberExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                      						}
                      						set(
                      							current,
                      							"callee",
                      							lv_callee_6_0,
                      							"org.eclipse.n4js.N4JS.MemberExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt344=2;
                    int LA344_0 = input.LA(1);
                    if ( (LA344_0==LessThanSign) ) {
                        int LA344_1 = input.LA(2);
                        if ( (synpred199_InternalN4JSParser()) ) {
                            alt344=1;
                        }
                    }
                    switch (alt344) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getMemberExpressionRule());
                              					}
                              					newCompositeNode(grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2());
                            }
                            pushFollow(FOLLOW_113);
                            this_ConcreteTypeArguments_7=ruleConcreteTypeArguments(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ConcreteTypeArguments_7;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt348=2;
                    int LA348_0 = input.LA(1);
                    if ( (LA348_0==LeftParenthesis) ) {
                        int LA348_1 = input.LA(2);
                        if ( (synpred200_InternalN4JSParser()) ) {
                            alt348=1;
                        }
                    }
                    switch (alt348) {
                        case 1 :
                            {
                            {
                            {
                            lv_withArgs_8_0=(Token)match(input,LeftParenthesis,FOLLOW_108); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_withArgs_8_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getMemberExpressionRule());
                              							}
                              							setWithLastConsumed(current, "withArgs", lv_withArgs_8_0 != null, "(");
                            }
                            }
                            }
                            int alt345=2;
                            int LA345_0 = input.LA(1);
                            if ( ((LA345_0>=Intersection && LA345_0<=Implements)||(LA345_0>=Promisify && LA345_0<=Abstract)||(LA345_0>=External && LA345_0<=Function)||(LA345_0>=Private && LA345_0<=Delete)||(LA345_0>=Import && LA345_0<=Public)||LA345_0==Static||(LA345_0>=Target && LA345_0<=Await)||LA345_0==Class||(LA345_0>=False && LA345_0<=Super)||LA345_0==Union||(LA345_0>=Yield && LA345_0<=This)||(LA345_0>=From && LA345_0<=Void)||LA345_0==FullStopFullStopFullStop||(LA345_0>=Get && LA345_0<=Set)||LA345_0==PlusSignPlusSign||(LA345_0>=HyphenMinusHyphenMinus && LA345_0<=SolidusEqualsSign)||LA345_0==As||LA345_0==Of||LA345_0==ExclamationMark||LA345_0==LeftParenthesis||LA345_0==PlusSign||LA345_0==HyphenMinus||LA345_0==Solidus||LA345_0==LessThanSign||(LA345_0>=CommercialAt && LA345_0<=LeftSquareBracket)||LA345_0==LeftCurlyBracket||LA345_0==Tilde||(LA345_0>=RULE_TEMPLATE_HEAD && LA345_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA345_0==RULE_IDENTIFIER||LA345_0==RULE_INT||LA345_0==RULE_DOUBLE||(LA345_0>=RULE_BINARY_INT && LA345_0<=RULE_SCIENTIFIC_INT)||LA345_0==RULE_STRING) ) {
                                alt345=1;
                            }
                            switch (alt345) {
                                case 1 :
                                    {
                                    if ( state.backtracking==0 ) {
                                      						if (current==null) {
                                      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                                      						}
                                      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1());
                                    }
                                    pushFollow(FOLLOW_69);
                                    this_Arguments_9=norm1_Arguments(current);
                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {
                                      						current = this_Arguments_9;
                                      						afterParserOrEnumRuleCall();
                                    }
                                    }
                                    break;
                            }
                            otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_106); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_10, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop347:
                            do {
                                int alt347=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt347=3;
                                        }
                                        break;
                                    case LeftSquareBracket:
                                        {
                                        alt347=1;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Namespace:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt347=2;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt347=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt347=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt347=3;
                                    }
                                    break;
                                }
                                switch (alt347) {
                            	case 1 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1());
                            	    }
                            	    pushFollow(FOLLOW_106);
                            	    this_IndexedAccessExpressionTail_12=norm1_IndexedAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_IndexedAccessExpressionTail_12;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_3_3_1_0(),
                            	      									current);
                            	    }
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	      							}
                            	      							newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1());
                            	    }
                            	    pushFollow(FOLLOW_106);
                            	    this_ParameterizedPropertyAccessExpressionTail_14=norm1_ParameterizedPropertyAccessExpressionTail(current);
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							current = this_ParameterizedPropertyAccessExpressionTail_14;
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								current = forceCreateModelElementAndSet(
                            	      									grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_1_3_3_2_0(),
                            	      									current);
                            	    }
                            	    }
                            	    int alt346=2;
                            	    int LA346_0 = input.LA(1);
                            	    if ( (LA346_0==QuestionMarkFullStop) ) {
                            	        alt346=1;
                            	    }
                            	    switch (alt346) {
                            	        case 1 :
                            	            {
                            	            {
                            	            lv_optionalChaining_16_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_107); if (state.failed) return current;
                            	            if ( state.backtracking==0 ) {
                            	              									newLeafNode(lv_optionalChaining_16_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            if ( state.backtracking==0 ) {
                            	              									if (current==null) {
                            	              										current = createModelElement(grammarAccess.getMemberExpressionRule());
                            	              									}
                            	              									setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_16_0 != null, "?.");
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      									newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0());
                            	    }
                            	    pushFollow(FOLLOW_106);
                            	    lv_template_17_0=norm1_TemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      									if (current==null) {
                            	      										current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                            	      									}
                            	      									set(
                            	      										current,
                            	      										"template",
                            	      										lv_template_17_0,
                            	      										"org.eclipse.n4js.N4JS.TemplateLiteral");
                            	      									afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop347;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_106);
                    this_PrimaryExpression_18=norm1_PrimaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryExpression_18;
                      				afterParserOrEnumRuleCall();
                    }
                    loop350:
                    do {
                        int alt350=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt350=3;
                                }
                                break;
                            case LeftSquareBracket:
                                {
                                alt350=1;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Namespace:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt350=2;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt350=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt350=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt350=3;
                            }
                            break;
                        }
                        switch (alt350) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_IndexedAccessExpressionTail_20=norm1_IndexedAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_IndexedAccessExpressionTail_20;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_2_1_1_0(),
                    	      								current);
                    	    }
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	      						}
                    	      						newCompositeNode(grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    this_ParameterizedPropertyAccessExpressionTail_22=norm1_ParameterizedPropertyAccessExpressionTail(current);
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						current = this_ParameterizedPropertyAccessExpressionTail_22;
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndSet(
                    	      								grammarAccess.getMemberExpressionAccess().getTaggedTemplateStringTargetAction_2_1_2_0(),
                    	      								current);
                    	    }
                    	    }
                    	    int alt349=2;
                    	    int LA349_0 = input.LA(1);
                    	    if ( (LA349_0==QuestionMarkFullStop) ) {
                    	        alt349=1;
                    	    }
                    	    switch (alt349) {
                    	        case 1 :
                    	            {
                    	            {
                    	            lv_optionalChaining_24_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_107); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								newLeafNode(lv_optionalChaining_24_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElement(grammarAccess.getMemberExpressionRule());
                    	              								}
                    	              								setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_24_0 != null, "?.");
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getMemberExpressionAccess().getTemplateTemplateLiteralParserRuleCall_2_1_2_2_0());
                    	    }
                    	    pushFollow(FOLLOW_106);
                    	    lv_template_25_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMemberExpressionRule());
                    	      								}
                    	      								set(
                    	      									current,
                    	      									"template",
                    	      									lv_template_25_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateLiteral");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop350;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_optionalChaining_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_index_2_0 = null;
        	enterRule();
        try {
            {
            {
            int alt352=2;
            int LA352_0 = input.LA(1);
            if ( (LA352_0==QuestionMarkFullStop) ) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIndexedAccessExpressionTailRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_0_0 != null, "?.");
                    }
                    }
                    }
                    break;
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_115);
            lv_index_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_IndexedAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_optionalChaining_0_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_index_2_0 = null;
        	enterRule();
        try {
            {
            {
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==QuestionMarkFullStop) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    {
                    {
                    lv_optionalChaining_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optionalChaining_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getIndexedAccessExpressionTailRule());
                      					}
                      					setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_0_0 != null, "?.");
                    }
                    }
                    }
                    break;
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_115);
            lv_index_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIndexedAccessExpressionTailRule());
              					}
              					set(
              						current,
              						"index",
              						lv_index_2_0,
              						"org.eclipse.n4js.N4JS.Expression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_optionalChaining_1_0=null;
        EObject this_ConcreteTypeArguments_2 = null;
        	enterRule();
        try {
            {
            {
            int alt354=2;
            int LA354_0 = input.LA(1);
            if ( (LA354_0==FullStop) ) {
                alt354=1;
            }
            else if ( (LA354_0==QuestionMarkFullStop) ) {
                alt354=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);
                throw nvae;
            }
            switch (alt354) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,FullStop,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_optionalChaining_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_optionalChaining_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      						}
                      						setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_1_0 != null, "?.");
                    }
                    }
                    }
                    }
                    break;
            }
            int alt355=2;
            int LA355_0 = input.LA(1);
            if ( (LA355_0==LessThanSign) ) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_15);
                    this_ConcreteTypeArguments_2=ruleConcreteTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConcreteTypeArguments_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ParameterizedPropertyAccessExpressionTail(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_optionalChaining_1_0=null;
        EObject this_ConcreteTypeArguments_2 = null;
        	enterRule();
        try {
            {
            {
            int alt356=2;
            int LA356_0 = input.LA(1);
            if ( (LA356_0==FullStop) ) {
                alt356=1;
            }
            else if ( (LA356_0==QuestionMarkFullStop) ) {
                alt356=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 356, 0, input);
                throw nvae;
            }
            switch (alt356) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,FullStop,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_optionalChaining_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_116); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_optionalChaining_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      						}
                      						setWithLastConsumed(current, "optionalChaining", lv_optionalChaining_1_0 != null, "?.");
                    }
                    }
                    }
                    }
                    break;
            }
            int alt357=2;
            int LA357_0 = input.LA(1);
            if ( (LA357_0==LessThanSign) ) {
                alt357=1;
            }
            switch (alt357) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_15);
                    this_ConcreteTypeArguments_2=ruleConcreteTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConcreteTypeArguments_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getParameterizedPropertyAccessExpressionTailRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyIdentifiableElementCrossReference_2_0());
            }
            pushFollow(FOLLOW_2);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePostfixExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPostfixExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePostfixExpression=rulePostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePostfixExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LeftHandSideExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_117);
            this_LeftHandSideExpression_0=ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt358=2;
            int LA358_0 = input.LA(1);
            if ( (LA358_0==PlusSignPlusSign) && (synpred201_InternalN4JSParser())) {
                alt358=1;
            }
            else if ( (LA358_0==HyphenMinusHyphenMinus) && (synpred201_InternalN4JSParser())) {
                alt358=1;
            }
            switch (alt358) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PostfixExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LeftHandSideExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_117);
            this_LeftHandSideExpression_0=norm1_LeftHandSideExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LeftHandSideExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt359=2;
            int LA359_0 = input.LA(1);
            if ( (LA359_0==PlusSignPlusSign) && (synpred202_InternalN4JSParser())) {
                alt359=1;
            }
            else if ( (LA359_0==HyphenMinusHyphenMinus) && (synpred202_InternalN4JSParser())) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getPostfixExpressionAccess().getPostfixExpressionExpressionAction_1_0_0(),
                      							current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpPostfixOperatorEnumRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_op_2_0=rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
                      							}
                      							set(
                      								current,
                      								"op",
                      								lv_op_2_0,
                      								"org.eclipse.n4js.N4JS.PostfixOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCastExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCastExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCastExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCastExpression=ruleCastExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCastExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCastExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;
        EObject lv_targetTypeRefNode_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_30);
            this_PostfixExpression_0=rulePostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt360=2;
            int LA360_0 = input.LA(1);
            if ( (LA360_0==As) && (synpred203_InternalN4JSParser())) {
                alt360=1;
            }
            switch (alt360) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,As,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefNodeArrayTypeExpressionNodeParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRefNode_3_0=ruleArrayTypeExpressionNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRefNode",
                      							lv_targetTypeRefNode_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayTypeExpressionNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CastExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_PostfixExpression_0 = null;
        EObject lv_targetTypeRefNode_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_30);
            this_PostfixExpression_0=norm1_PostfixExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_PostfixExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt361=2;
            int LA361_0 = input.LA(1);
            if ( (LA361_0==As) && (synpred204_InternalN4JSParser())) {
                alt361=1;
            }
            switch (alt361) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,As,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getCastExpressionAccess().getTargetTypeRefNodeArrayTypeExpressionNodeParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_targetTypeRefNode_3_0=ruleArrayTypeExpressionNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getCastExpressionRule());
                      						}
                      						set(
                      							current,
                      							"targetTypeRefNode",
                      							lv_targetTypeRefNode_3_0,
                      							"org.eclipse.n4js.N4JS.ArrayTypeExpressionNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleUnaryExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryExpression=ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_CastExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            int alt362=2;
            int LA362_0 = input.LA(1);
            if ( ((LA362_0>=Intersection && LA362_0<=Implements)||(LA362_0>=Promisify && LA362_0<=Abstract)||(LA362_0>=External && LA362_0<=Function)||(LA362_0>=Private && LA362_0<=Project)||(LA362_0>=Import && LA362_0<=Public)||LA362_0==Static||LA362_0==Target||(LA362_0>=Async && LA362_0<=Await)||LA362_0==Class||(LA362_0>=False && LA362_0<=Super)||LA362_0==Union||(LA362_0>=Yield && LA362_0<=This)||(LA362_0>=From && LA362_0<=Type)||(LA362_0>=Get && LA362_0<=Set)||LA362_0==SolidusEqualsSign||LA362_0==As||LA362_0==Of||LA362_0==LeftParenthesis||LA362_0==Solidus||LA362_0==LessThanSign||(LA362_0>=CommercialAt && LA362_0<=LeftSquareBracket)||LA362_0==LeftCurlyBracket||(LA362_0>=RULE_TEMPLATE_HEAD && LA362_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA362_0==RULE_IDENTIFIER||LA362_0==RULE_INT||LA362_0==RULE_DOUBLE||(LA362_0>=RULE_BINARY_INT && LA362_0<=RULE_SCIENTIFIC_INT)||LA362_0==RULE_STRING) ) {
                alt362=1;
            }
            else if ( (LA362_0==Delete||LA362_0==Typeof||LA362_0==Void||LA362_0==PlusSignPlusSign||LA362_0==HyphenMinusHyphenMinus||LA362_0==ExclamationMark||LA362_0==PlusSign||LA362_0==HyphenMinus||LA362_0==Tilde) ) {
                alt362=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 362, 0, input);
                throw nvae;
            }
            switch (alt362) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=ruleCastExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_52);
                    lv_op_2_0=ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=ruleUnaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_UnaryExpression() throws RecognitionException {
        EObject current = null;
        EObject this_CastExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            int alt363=2;
            int LA363_0 = input.LA(1);
            if ( ((LA363_0>=Intersection && LA363_0<=Implements)||(LA363_0>=Promisify && LA363_0<=Abstract)||(LA363_0>=External && LA363_0<=Function)||(LA363_0>=Private && LA363_0<=Project)||(LA363_0>=Import && LA363_0<=Public)||LA363_0==Static||LA363_0==Target||(LA363_0>=Async && LA363_0<=Await)||LA363_0==Class||(LA363_0>=False && LA363_0<=Super)||LA363_0==Union||LA363_0==This||(LA363_0>=From && LA363_0<=Type)||(LA363_0>=Get && LA363_0<=Set)||LA363_0==SolidusEqualsSign||LA363_0==As||LA363_0==Of||LA363_0==LeftParenthesis||LA363_0==Solidus||LA363_0==LessThanSign||(LA363_0>=CommercialAt && LA363_0<=LeftSquareBracket)||LA363_0==LeftCurlyBracket||(LA363_0>=RULE_TEMPLATE_HEAD && LA363_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA363_0==RULE_IDENTIFIER||LA363_0==RULE_INT||LA363_0==RULE_DOUBLE||(LA363_0>=RULE_BINARY_INT && LA363_0<=RULE_SCIENTIFIC_INT)||LA363_0==RULE_STRING) ) {
                alt363=1;
            }
            else if ( (LA363_0==Delete||LA363_0==Typeof||LA363_0==Void||LA363_0==PlusSignPlusSign||LA363_0==HyphenMinusHyphenMinus||LA363_0==ExclamationMark||LA363_0==PlusSign||LA363_0==HyphenMinus||LA363_0==Tilde) ) {
                alt363=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);
                throw nvae;
            }
            switch (alt363) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_CastExpression_0=norm1_CastExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_CastExpression_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_1_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_52);
                    lv_op_2_0=ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"op",
                      							lv_op_2_0,
                      							"org.eclipse.n4js.N4JS.UnaryOperator");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm1_UnaryExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_3_0,
                      							"org.eclipse.n4js.N4JS.UnaryExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleMultiplicativeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMultiplicativeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_UnaryExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_118);
            this_UnaryExpression_0=ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);
                if ( (LA364_0==Asterisk) && (synpred205_InternalN4JSParser())) {
                    alt364=1;
                }
                else if ( (LA364_0==Solidus) && (synpred205_InternalN4JSParser())) {
                    alt364=1;
                }
                else if ( (LA364_0==PercentSign) && (synpred205_InternalN4JSParser())) {
                    alt364=1;
                }
                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_118);
            	    lv_rhs_3_0=ruleUnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop364;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MultiplicativeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_UnaryExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_118);
            this_UnaryExpression_0=norm1_UnaryExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_UnaryExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);
                if ( (LA365_0==Asterisk) && (synpred206_InternalN4JSParser())) {
                    alt365=1;
                }
                else if ( (LA365_0==Solidus) && (synpred206_InternalN4JSParser())) {
                    alt365=1;
                }
                else if ( (LA365_0==PercentSign) && (synpred206_InternalN4JSParser())) {
                    alt365=1;
                }
                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.MultiplicativeOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_118);
            	    lv_rhs_3_0=norm1_UnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.UnaryExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop365;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAdditiveExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAdditiveExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAdditiveExpression=ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAdditiveExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject this_MultiplicativeExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_119);
            this_MultiplicativeExpression_0=ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop366:
            do {
                int alt366=2;
                alt366 = dfa366.predict(input);
                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_119);
            	    lv_rhs_3_0=ruleMultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop366;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AdditiveExpression() throws RecognitionException {
        EObject current = null;
        EObject this_MultiplicativeExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_119);
            this_MultiplicativeExpression_0=norm1_MultiplicativeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MultiplicativeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop367:
            do {
                int alt367=2;
                alt367 = dfa367.predict(input);
                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.AdditiveOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_119);
            	    lv_rhs_3_0=norm1_MultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.MultiplicativeExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop367;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleShiftExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftExpression=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AdditiveExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_120);
            this_AdditiveExpression_0=ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop368:
            do {
                int alt368=2;
                alt368 = dfa368.predict(input);
                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_rhs_3_0=ruleAdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop368;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ShiftExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AdditiveExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_120);
            this_AdditiveExpression_0=norm1_AdditiveExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AdditiveExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop369:
            do {
                int alt369=2;
                alt369 = dfa369.predict(input);
                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getShiftExpressionAccess().getShiftExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getOpShiftOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.ShiftOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getShiftExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_120);
            	    lv_rhs_3_0=norm1_AdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.AdditiveExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop369;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleShiftOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleShiftOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getShiftOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleShiftOperator=ruleShiftOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleShiftOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleShiftOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt371=2;
            int LA371_0 = input.LA(1);
            if ( (LA371_0==GreaterThanSign) ) {
                alt371=1;
            }
            else if ( (LA371_0==LessThanSignLessThanSign) ) {
                alt371=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 371, 0, input);
                throw nvae;
            }
            switch (alt371) {
                case 1 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_121); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_122); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                    }
                    int alt370=2;
                    int LA370_0 = input.LA(1);
                    if ( (LA370_0==GreaterThanSign) ) {
                        alt370=1;
                    }
                    switch (alt370) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRelationalExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalExpression=ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_123);
            this_ShiftExpression_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop372:
            do {
                int alt372=2;
                alt372 = dfa372.predict(input);
                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_123);
            	    lv_rhs_3_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop372;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_124);
            this_ShiftExpression_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop373:
            do {
                int alt373=2;
                alt373 = dfa373.predict(input);
                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_124);
            	    lv_rhs_3_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop373;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_123);
            this_ShiftExpression_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop374:
            do {
                int alt374=2;
                alt374 = dfa374.predict(input);
                switch (alt374) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_123);
            	    lv_rhs_3_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop374;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_RelationalExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ShiftExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_124);
            this_ShiftExpression_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ShiftExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop375:
            do {
                int alt375=2;
                alt375 = dfa375.predict(input);
                switch (alt375) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						current = forceCreateModelElementAndSet(
            	      							grammarAccess.getRelationalExpressionAccess().getRelationalExpressionLhsAction_1_0_0(),
            	      							current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"op",
            	      								lv_op_2_0,
            	      								"org.eclipse.n4js.N4JS.RelationalOperator");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRhsShiftExpressionParserRuleCall_1_0_2_0());
            	    }
            	    pushFollow(FOLLOW_124);
            	    lv_rhs_3_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
            	      							}
            	      							set(
            	      								current,
            	      								"rhs",
            	      								lv_rhs_3_0,
            	      								"org.eclipse.n4js.N4JS.ShiftExpression");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop375;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleRelationalOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleRelationalOperator = null;
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRelationalOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRelationalOperator=ruleRelationalOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRelationalOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleRelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            int alt377=4;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt377=1;
                }
                break;
            case GreaterThanSign:
                {
                alt377=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt377=3;
                }
                break;
            case Instanceof:
                {
                alt377=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 377, 0, input);
                throw nvae;
            }
            switch (alt377) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt376=2;
                    int LA376_0 = input.LA(1);
                    if ( (LA376_0==EqualsSign) ) {
                        alt376=1;
                    }
                    switch (alt376) {
                        case 1 :
                            {
                            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_RelationalOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            int alt379=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt379=1;
                }
                break;
            case GreaterThanSign:
                {
                alt379=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt379=3;
                }
                break;
            case Instanceof:
                {
                alt379=4;
                }
                break;
            case In:
                {
                alt379=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 379, 0, input);
                throw nvae;
            }
            switch (alt379) {
                case 1 :
                    {
                    kw=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_63); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt378=2;
                    int LA378_0 = input.LA(1);
                    if ( (LA378_0==EqualsSign) ) {
                        alt378=1;
                    }
                    switch (alt378) {
                        case 1 :
                            {
                            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getInKeyword_4_0());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final EObject entryRuleEqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEqualityExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEqualityExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEqualityExpression=ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEqualityExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_125);
            this_RelationalExpression_0=ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop380:
            do {
                int alt380=2;
                int LA380_0 = input.LA(1);
                if ( (LA380_0==EqualsSignEqualsSignEqualsSign) && (synpred221_InternalN4JSParser())) {
                    alt380=1;
                }
                else if ( (LA380_0==ExclamationMarkEqualsSignEqualsSign) && (synpred221_InternalN4JSParser())) {
                    alt380=1;
                }
                else if ( (LA380_0==EqualsSignEqualsSign) && (synpred221_InternalN4JSParser())) {
                    alt380=1;
                }
                else if ( (LA380_0==ExclamationMarkEqualsSign) && (synpred221_InternalN4JSParser())) {
                    alt380=1;
                }
                switch (alt380) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_125);
            	    lv_rhs_3_0=ruleRelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop380;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_125);
            this_RelationalExpression_0=norm1_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop381:
            do {
                int alt381=2;
                int LA381_0 = input.LA(1);
                if ( (LA381_0==EqualsSignEqualsSignEqualsSign) && (synpred222_InternalN4JSParser())) {
                    alt381=1;
                }
                else if ( (LA381_0==ExclamationMarkEqualsSignEqualsSign) && (synpred222_InternalN4JSParser())) {
                    alt381=1;
                }
                else if ( (LA381_0==EqualsSignEqualsSign) && (synpred222_InternalN4JSParser())) {
                    alt381=1;
                }
                else if ( (LA381_0==ExclamationMarkEqualsSign) && (synpred222_InternalN4JSParser())) {
                    alt381=1;
                }
                switch (alt381) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_125);
            	    lv_rhs_3_0=norm1_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop381;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_125);
            this_RelationalExpression_0=norm2_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop382:
            do {
                int alt382=2;
                int LA382_0 = input.LA(1);
                if ( (LA382_0==EqualsSignEqualsSignEqualsSign) && (synpred223_InternalN4JSParser())) {
                    alt382=1;
                }
                else if ( (LA382_0==ExclamationMarkEqualsSignEqualsSign) && (synpred223_InternalN4JSParser())) {
                    alt382=1;
                }
                else if ( (LA382_0==EqualsSignEqualsSign) && (synpred223_InternalN4JSParser())) {
                    alt382=1;
                }
                else if ( (LA382_0==ExclamationMarkEqualsSign) && (synpred223_InternalN4JSParser())) {
                    alt382=1;
                }
                switch (alt382) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_125);
            	    lv_rhs_3_0=norm2_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop382;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_EqualityExpression() throws RecognitionException {
        EObject current = null;
        EObject this_RelationalExpression_0 = null;
        Enumerator lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_125);
            this_RelationalExpression_0=norm3_RelationalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_RelationalExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop383:
            do {
                int alt383=2;
                int LA383_0 = input.LA(1);
                if ( (LA383_0==EqualsSignEqualsSignEqualsSign) && (synpred224_InternalN4JSParser())) {
                    alt383=1;
                }
                else if ( (LA383_0==ExclamationMarkEqualsSignEqualsSign) && (synpred224_InternalN4JSParser())) {
                    alt383=1;
                }
                else if ( (LA383_0==EqualsSignEqualsSign) && (synpred224_InternalN4JSParser())) {
                    alt383=1;
                }
                else if ( (LA383_0==ExclamationMarkEqualsSign) && (synpred224_InternalN4JSParser())) {
                    alt383=1;
                }
                switch (alt383) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpEqualityOperatorEnumRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.EqualityOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_125);
            	    lv_rhs_3_0=norm3_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.RelationalExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop383;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseANDExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDExpression=ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_EqualityExpression_0=ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop384:
            do {
                int alt384=2;
                int LA384_0 = input.LA(1);
                if ( (LA384_0==Ampersand) && (synpred225_InternalN4JSParser())) {
                    alt384=1;
                }
                switch (alt384) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_rhs_3_0=ruleEqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop384;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_EqualityExpression_0=norm1_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop385:
            do {
                int alt385=2;
                int LA385_0 = input.LA(1);
                if ( (LA385_0==Ampersand) && (synpred226_InternalN4JSParser())) {
                    alt385=1;
                }
                switch (alt385) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_rhs_3_0=norm1_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop385;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_EqualityExpression_0=norm2_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop386:
            do {
                int alt386=2;
                int LA386_0 = input.LA(1);
                if ( (LA386_0==Ampersand) && (synpred227_InternalN4JSParser())) {
                    alt386=1;
                }
                switch (alt386) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_rhs_3_0=norm2_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop386;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_EqualityExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_EqualityExpression_0=norm3_EqualityExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_EqualityExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop387:
            do {
                int alt387=2;
                int LA387_0 = input.LA(1);
                if ( (LA387_0==Ampersand) && (synpred228_InternalN4JSParser())) {
                    alt387=1;
                }
                switch (alt387) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseANDExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getOpBitwiseANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseANDExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_126);
            	    lv_rhs_3_0=norm3_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.EqualityExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop387;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseANDOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseANDOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseANDOperator=ruleBitwiseANDOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseXORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXORExpression=ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_BitwiseANDExpression_0=ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop388:
            do {
                int alt388=2;
                int LA388_0 = input.LA(1);
                if ( (LA388_0==CircumflexAccent) && (synpred229_InternalN4JSParser())) {
                    alt388=1;
                }
                switch (alt388) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_127);
            	    lv_rhs_3_0=ruleBitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop388;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_BitwiseANDExpression_0=norm1_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop389:
            do {
                int alt389=2;
                int LA389_0 = input.LA(1);
                if ( (LA389_0==CircumflexAccent) && (synpred230_InternalN4JSParser())) {
                    alt389=1;
                }
                switch (alt389) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_127);
            	    lv_rhs_3_0=norm1_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop389;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_BitwiseANDExpression_0=norm2_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop390:
            do {
                int alt390=2;
                int LA390_0 = input.LA(1);
                if ( (LA390_0==CircumflexAccent) && (synpred231_InternalN4JSParser())) {
                    alt390=1;
                }
                switch (alt390) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_127);
            	    lv_rhs_3_0=norm2_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop390;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseXORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_127);
            this_BitwiseANDExpression_0=norm3_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop391:
            do {
                int alt391=2;
                int LA391_0 = input.LA(1);
                if ( (LA391_0==CircumflexAccent) && (synpred232_InternalN4JSParser())) {
                    alt391=1;
                }
                switch (alt391) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseXORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getOpBitwiseXOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseXOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseXORExpressionAccess().getRhsBitwiseANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_127);
            	    lv_rhs_3_0=norm3_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseXORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop391;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseXOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseXOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseXOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseXOROperator=ruleBitwiseXOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseXOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseXOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBitwiseORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseORExpression=ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_BitwiseXORExpression_0=ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop392:
            do {
                int alt392=2;
                int LA392_0 = input.LA(1);
                if ( (LA392_0==VerticalLine) && (synpred233_InternalN4JSParser())) {
                    alt392=1;
                }
                switch (alt392) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_128);
            	    lv_rhs_3_0=ruleBitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop392;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_BitwiseXORExpression_0=norm1_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop393:
            do {
                int alt393=2;
                int LA393_0 = input.LA(1);
                if ( (LA393_0==VerticalLine) && (synpred234_InternalN4JSParser())) {
                    alt393=1;
                }
                switch (alt393) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_128);
            	    lv_rhs_3_0=norm1_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop393;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_BitwiseXORExpression_0=norm2_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop394:
            do {
                int alt394=2;
                int LA394_0 = input.LA(1);
                if ( (LA394_0==VerticalLine) && (synpred235_InternalN4JSParser())) {
                    alt394=1;
                }
                switch (alt394) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_128);
            	    lv_rhs_3_0=norm2_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop394;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_BitwiseORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseXORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_BitwiseXORExpression_0=norm3_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseXORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop395:
            do {
                int alt395=2;
                int LA395_0 = input.LA(1);
                if ( (LA395_0==VerticalLine) && (synpred236_InternalN4JSParser())) {
                    alt395=1;
                }
                switch (alt395) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getBitwiseORExpressionAccess().getBinaryBitwiseExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getOpBitwiseOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.BitwiseOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getBitwiseORExpressionAccess().getRhsBitwiseXORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_128);
            	    lv_rhs_3_0=norm3_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getBitwiseORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseXORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop395;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBitwiseOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBitwiseOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBitwiseOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBitwiseOROperator=ruleBitwiseOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBitwiseOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBitwiseOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLogicalANDExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDExpression=ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_BitwiseORExpression_0=ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop396:
            do {
                int alt396=2;
                int LA396_0 = input.LA(1);
                if ( (LA396_0==AmpersandAmpersand) && (synpred237_InternalN4JSParser())) {
                    alt396=1;
                }
                switch (alt396) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=ruleBitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop396;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_BitwiseORExpression_0=norm1_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop397:
            do {
                int alt397=2;
                int LA397_0 = input.LA(1);
                if ( (LA397_0==AmpersandAmpersand) && (synpred238_InternalN4JSParser())) {
                    alt397=1;
                }
                switch (alt397) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=norm1_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop397;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_BitwiseORExpression_0=norm2_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop398:
            do {
                int alt398=2;
                int LA398_0 = input.LA(1);
                if ( (LA398_0==AmpersandAmpersand) && (synpred239_InternalN4JSParser())) {
                    alt398=1;
                }
                switch (alt398) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=norm2_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop398;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalANDExpression() throws RecognitionException {
        EObject current = null;
        EObject this_BitwiseORExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_129);
            this_BitwiseORExpression_0=norm3_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BitwiseORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop399:
            do {
                int alt399=2;
                int LA399_0 = input.LA(1);
                if ( (LA399_0==AmpersandAmpersand) && (synpred240_InternalN4JSParser())) {
                    alt399=1;
                }
                switch (alt399) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalANDExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getOpLogicalANDOperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalANDOperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalANDExpressionAccess().getRhsBitwiseORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_129);
            	    lv_rhs_3_0=norm3_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalANDExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.BitwiseORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop399;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalANDOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLogicalANDOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalANDOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalANDOperator=ruleLogicalANDOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalANDOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalANDOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLogicalORExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalORExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalORExpression=ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalORExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_LogicalANDExpression_0=ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop400:
            do {
                int alt400=2;
                int LA400_0 = input.LA(1);
                if ( (LA400_0==VerticalLineVerticalLine) && (synpred241_InternalN4JSParser())) {
                    alt400=1;
                }
                switch (alt400) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=ruleLogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop400;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_LogicalANDExpression_0=norm1_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop401:
            do {
                int alt401=2;
                int LA401_0 = input.LA(1);
                if ( (LA401_0==VerticalLineVerticalLine) && (synpred242_InternalN4JSParser())) {
                    alt401=1;
                }
                switch (alt401) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=norm1_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop401;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_LogicalANDExpression_0=norm2_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop402:
            do {
                int alt402=2;
                int LA402_0 = input.LA(1);
                if ( (LA402_0==VerticalLineVerticalLine) && (synpred243_InternalN4JSParser())) {
                    alt402=1;
                }
                switch (alt402) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=norm2_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop402;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_LogicalORExpression() throws RecognitionException {
        EObject current = null;
        EObject this_LogicalANDExpression_0 = null;
        AntlrDatatypeRuleToken lv_op_2_0 = null;
        EObject lv_rhs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_130);
            this_LogicalANDExpression_0=norm3_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalANDExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop403:
            do {
                int alt403=2;
                int LA403_0 = input.LA(1);
                if ( (LA403_0==VerticalLineVerticalLine) && (synpred244_InternalN4JSParser())) {
                    alt403=1;
                }
                switch (alt403) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getLogicalORExpressionAccess().getBinaryLogicalExpressionLhsAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      								newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getOpLogicalOROperatorParserRuleCall_1_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_52);
            	    lv_op_2_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      								if (current==null) {
            	      									current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      								}
            	      								set(
            	      									current,
            	      									"op",
            	      									lv_op_2_0,
            	      									"org.eclipse.n4js.N4JS.LogicalOROperator");
            	      								afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getLogicalORExpressionAccess().getRhsLogicalANDExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_130);
            	    lv_rhs_3_0=norm3_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getLogicalORExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalANDExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop403;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleLogicalOROperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleLogicalOROperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLogicalOROperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLogicalOROperator=ruleLogicalOROperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLogicalOROperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleLogicalOROperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleCoalesceExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleCoalesceExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCoalesceExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCoalesceExpression=ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCoalesceExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleCoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_LogicalORExpression_0=ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop404:
            do {
                int alt404=2;
                int LA404_0 = input.LA(1);
                if ( (LA404_0==QuestionMarkQuestionMark) && (synpred245_InternalN4JSParser())) {
                    alt404=1;
                }
                switch (alt404) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_52); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_defaultExpression_3_0=ruleLogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop404;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_LogicalORExpression_0=norm1_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop405:
            do {
                int alt405=2;
                int LA405_0 = input.LA(1);
                if ( (LA405_0==QuestionMarkQuestionMark) && (synpred246_InternalN4JSParser())) {
                    alt405=1;
                }
                switch (alt405) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_52); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_defaultExpression_3_0=norm1_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop405;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_LogicalORExpression_0=norm2_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop406:
            do {
                int alt406=2;
                int LA406_0 = input.LA(1);
                if ( (LA406_0==QuestionMarkQuestionMark) && (synpred247_InternalN4JSParser())) {
                    alt406=1;
                }
                switch (alt406) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_52); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_defaultExpression_3_0=norm2_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop406;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_CoalesceExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_LogicalORExpression_0 = null;
        EObject lv_defaultExpression_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_131);
            this_LogicalORExpression_0=norm3_LogicalORExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_LogicalORExpression_0;
              			afterParserOrEnumRuleCall();
            }
            loop407:
            do {
                int alt407=2;
                int LA407_0 = input.LA(1);
                if ( (LA407_0==QuestionMarkQuestionMark) && (synpred248_InternalN4JSParser())) {
                    alt407=1;
                }
                switch (alt407) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getCoalesceExpressionAccess().getCoalesceExpressionExpressionAction_1_0_0_0(),
            	      								current);
            	    }
            	    }
            	    otherlv_2=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_52); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						newLeafNode(otherlv_2, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionLogicalORExpressionParserRuleCall_1_1_0());
            	    }
            	    pushFollow(FOLLOW_131);
            	    lv_defaultExpression_3_0=norm3_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getCoalesceExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							"defaultExpression",
            	      							lv_defaultExpression_3_0,
            	      							"org.eclipse.n4js.N4JS.LogicalORExpression");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop407;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleConditionalExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleConditionalExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConditionalExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConditionalExpression=ruleConditionalExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConditionalExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_CoalesceExpression_0=ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt408=2;
            int LA408_0 = input.LA(1);
            if ( (LA408_0==QuestionMark) && (synpred249_InternalN4JSParser())) {
                alt408=1;
            }
            switch (alt408) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_CoalesceExpression_0=norm1_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt409=2;
            int LA409_0 = input.LA(1);
            if ( (LA409_0==QuestionMark) && (synpred250_InternalN4JSParser())) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_trueExpression_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_CoalesceExpression_0=norm2_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt410=2;
            int LA410_0 = input.LA(1);
            if ( (LA410_0==QuestionMark) && (synpred251_InternalN4JSParser())) {
                alt410=1;
            }
            switch (alt410) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_ConditionalExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_CoalesceExpression_0 = null;
        EObject lv_trueExpression_3_0 = null;
        EObject lv_falseExpression_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_CoalesceExpression_0=norm3_CoalesceExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_CoalesceExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt411=2;
            int LA411_0 = input.LA(1);
            if ( (LA411_0==QuestionMark) && (synpred252_InternalN4JSParser())) {
                alt411=1;
            }
            switch (alt411) {
                case 1 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							current = forceCreateModelElementAndSet(
                      								grammarAccess.getConditionalExpressionAccess().getConditionalExpressionExpressionAction_1_0_0_0(),
                      								current);
                    }
                    }
                    otherlv_2=(Token)match(input,QuestionMark,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_trueExpression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"trueExpression",
                      							lv_trueExpression_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_4=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignmentExpressionParserRuleCall_1_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_falseExpression_5_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
                      						}
                      						set(
                      							current,
                      							"falseExpression",
                      							lv_falseExpression_5_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAssignmentExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentExpression=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_ConditionalExpression_3 = null;
        AntlrDatatypeRuleToken lv_op_5_0 = null;
        EObject lv_rhs_6_0 = null;
        	enterRule();
        try {
            {
            int alt413=4;
            alt413 = dfa413.predict(input);
            switch (alt413) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=ruleAwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=rulePromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=ruleArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_133);
                    this_ConditionalExpression_3=ruleConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt412=2;
                    alt412 = dfa412.predict(input);
                    switch (alt412) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_52);
                            lv_op_5_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_ConditionalExpression_3 = null;
        AntlrDatatypeRuleToken lv_op_5_0 = null;
        EObject lv_rhs_6_0 = null;
        	enterRule();
        try {
            {
            int alt415=4;
            alt415 = dfa415.predict(input);
            switch (alt415) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm1_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm1_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm1_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_133);
                    this_ConditionalExpression_3=norm1_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_3;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt414=2;
                    alt414 = dfa414.predict(input);
                    switch (alt414) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_52);
                            lv_op_5_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_5_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_6_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_6_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_YieldExpression_3 = null;
        EObject this_ConditionalExpression_4 = null;
        AntlrDatatypeRuleToken lv_op_6_0 = null;
        EObject lv_rhs_7_0 = null;
        	enterRule();
        try {
            {
            int alt417=5;
            alt417 = dfa417.predict(input);
            switch (alt417) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm2_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm2_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm2_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=ruleYieldExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_133);
                    this_ConditionalExpression_4=norm2_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt416=2;
                    alt416 = dfa416.predict(input);
                    switch (alt416) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_52);
                            lv_op_6_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm2_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AssignmentExpression() throws RecognitionException {
        EObject current = null;
        EObject this_AwaitExpression_0 = null;
        EObject this_PromisifyExpression_1 = null;
        EObject this_ArrowExpression_2 = null;
        EObject this_YieldExpression_3 = null;
        EObject this_ConditionalExpression_4 = null;
        AntlrDatatypeRuleToken lv_op_6_0 = null;
        EObject lv_rhs_7_0 = null;
        	enterRule();
        try {
            {
            int alt419=5;
            alt419 = dfa419.predict(input);
            switch (alt419) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AwaitExpression_0=norm3_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_AwaitExpression_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_PromisifyExpression_1=norm3_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PromisifyExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowExpression_2=norm3_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowExpression_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_YieldExpression_3=norm1_YieldExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_YieldExpression_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0());
                    }
                    pushFollow(FOLLOW_133);
                    this_ConditionalExpression_4=norm3_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ConditionalExpression_4;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt418=2;
                    alt418 = dfa418.predict(input);
                    switch (alt418) {
                        case 1 :
                            {
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								current = forceCreateModelElementAndSet(
                              									grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionLhsAction_4_1_0_0_0(),
                              									current);
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOpAssignmentOperatorParserRuleCall_4_1_0_0_1_0());
                            }
                            pushFollow(FOLLOW_52);
                            lv_op_6_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              									}
                              									set(
                              										current,
                              										"op",
                              										lv_op_6_0,
                              										"org.eclipse.n4js.N4JS.AssignmentOperator");
                              									afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getRhsAssignmentExpressionParserRuleCall_4_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_rhs_7_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
                              							}
                              							set(
                              								current,
                              								"rhs",
                              								lv_rhs_7_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleYieldExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleYieldExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getYieldExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleYieldExpression=ruleYieldExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleYieldExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleYieldExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Yield,FOLLOW_134); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt420=2;
            int LA420_0 = input.LA(1);
            if ( (LA420_0==Asterisk) && (synpred277_InternalN4JSParser())) {
                alt420=1;
            }
            switch (alt420) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", lv_many_2_0 != null, "*");
                    }
                    }
                    }
                    break;
            }
            int alt421=2;
            alt421 = dfa421.predict(input);
            switch (alt421) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_YieldExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_many_2_0=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getYieldExpressionAccess().getYieldExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Yield,FOLLOW_134); if (state.failed) return current;
            if ( state.backtracking==0 ) {
               promoteEOL(); 
            }
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt422=2;
            int LA422_0 = input.LA(1);
            if ( (LA422_0==Asterisk) && (synpred279_InternalN4JSParser())) {
                alt422=1;
            }
            switch (alt422) {
                case 1 :
                    {
                    {
                    lv_many_2_0=(Token)match(input,Asterisk,FOLLOW_67); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_many_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getYieldExpressionRule());
                      					}
                      					setWithLastConsumed(current, "many", lv_many_2_0 != null, "*");
                    }
                    }
                    }
                    break;
            }
            int alt423=2;
            alt423 = dfa423.predict(input);
            switch (alt423) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getYieldExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_3_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_expression_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getYieldExpressionRule());
                      					}
                      					set(
                      						current,
                      						"expression",
                      						lv_expression_3_0,
                      						"org.eclipse.n4js.N4JS.AssignmentExpression");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAssignmentOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAssignmentOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentOperator=ruleAssignmentOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAssignmentOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt425=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt425=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt425=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt425=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt425=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt425=5;
                }
                break;
            case HyphenMinus:
                {
                alt425=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt425=7;
                }
                break;
            case GreaterThanSign:
                {
                alt425=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt425=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt425=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt425=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);
                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    {
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    kw=(Token)match(input,HyphenMinus,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusKeyword_5_0());
                    }
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_5_1());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_121); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                    }
                    kw=(Token)match(input,GreaterThanSign,FOLLOW_135); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                    }
                    int alt424=2;
                    int LA424_0 = input.LA(1);
                    if ( (LA424_0==GreaterThanSign) ) {
                        alt424=1;
                    }
                    switch (alt424) {
                        case 1 :
                            {
                            kw=(Token)match(input,GreaterThanSign,FOLLOW_19); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current.merge(kw);
                              					newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_2());
                            }
                            }
                            break;
                    }
                    kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_7_3());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAssignmentOperatorOnlyAssign() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAssignmentOperatorOnlyAssign = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAssignmentOperatorOnlyAssignRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAssignmentOperatorOnlyAssign=ruleAssignmentOperatorOnlyAssign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAssignmentOperatorOnlyAssign.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAssignmentOperatorOnlyAssign() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getAssignmentOperatorOnlyAssignAccess().getEqualsSignKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAwaitExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAwaitExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAwaitExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAwaitExpression=ruleAwaitExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAwaitExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_AwaitExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAwaitExpressionAccess().getAwaitExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Await,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAwaitExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAwaitExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePromisifyExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePromisifyExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPromisifyExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePromisifyExpression=rulePromisifyExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePromisifyExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_136); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_136); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_136); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_PromisifyExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_expression_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getPromisifyExpressionAccess().getPromisifyExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_136); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            otherlv_2=(Token)match(input,Promisify,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getPromisifyExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_3_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPromisifyExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_3_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_36);
            this_AssignmentExpression_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt427=2;
            int LA427_0 = input.LA(1);
            if ( (LA427_0==Comma) ) {
                alt427=1;
            }
            switch (alt427) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_exprs_3_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop426:
                    do {
                        int alt426=2;
                        int LA426_0 = input.LA(1);
                        if ( (LA426_0==Comma) ) {
                            alt426=1;
                        }
                        switch (alt426) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_52); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_exprs_5_0=ruleAssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop426;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_36);
            this_AssignmentExpression_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt429=2;
            int LA429_0 = input.LA(1);
            if ( (LA429_0==Comma) ) {
                alt429=1;
            }
            switch (alt429) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_exprs_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop428:
                    do {
                        int alt428=2;
                        int LA428_0 = input.LA(1);
                        if ( (LA428_0==Comma) ) {
                            alt428=1;
                        }
                        switch (alt428) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_52); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_exprs_5_0=norm1_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop428;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_36);
            this_AssignmentExpression_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt431=2;
            int LA431_0 = input.LA(1);
            if ( (LA431_0==Comma) ) {
                alt431=1;
            }
            switch (alt431) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_exprs_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop430:
                    do {
                        int alt430=2;
                        int LA430_0 = input.LA(1);
                        if ( (LA430_0==Comma) ) {
                            alt430=1;
                        }
                        switch (alt430) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_52); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_exprs_5_0=norm2_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop430;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_Expression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject this_AssignmentExpression_0 = null;
        EObject lv_exprs_3_0 = null;
        EObject lv_exprs_5_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_36);
            this_AssignmentExpression_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AssignmentExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt433=2;
            int LA433_0 = input.LA(1);
            if ( (LA433_0==Comma) ) {
                alt433=1;
            }
            switch (alt433) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getExpressionAccess().getCommaExpressionExprsAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_2=(Token)match(input,Comma,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_exprs_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getExpressionRule());
                      						}
                      						add(
                      							current,
                      							"exprs",
                      							lv_exprs_3_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop432:
                    do {
                        int alt432=2;
                        int LA432_0 = input.LA(1);
                        if ( (LA432_0==Comma) ) {
                            alt432=1;
                        }
                        switch (alt432) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_52); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getExpressionAccess().getExprsAssignmentExpressionParserRuleCall_1_3_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_exprs_5_0=norm3_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"exprs",
                    	      								lv_exprs_5_0,
                    	      								"org.eclipse.n4js.N4JS.AssignmentExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop432;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateLiteral=ruleTemplateLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject lv_segments_1_0 = null;
        EObject lv_segments_2_0 = null;
        EObject lv_segments_3_0 = null;
        EObject lv_segments_5_0 = null;
        EObject lv_segments_6_0 = null;
        EObject lv_segments_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
            }
            }
            int alt437=2;
            int LA437_0 = input.LA(1);
            if ( (LA437_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt437=1;
            }
            else if ( (LA437_0==RULE_TEMPLATE_HEAD) ) {
                alt437=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 437, 0, input);
                throw nvae;
            }
            switch (alt437) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_137);
                    lv_segments_2_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt434=2;
                    int LA434_0 = input.LA(1);
                    if ( ((LA434_0>=Intersection && LA434_0<=Implements)||(LA434_0>=Promisify && LA434_0<=Abstract)||(LA434_0>=External && LA434_0<=Function)||(LA434_0>=Private && LA434_0<=Delete)||(LA434_0>=Import && LA434_0<=Public)||LA434_0==Static||(LA434_0>=Target && LA434_0<=Await)||LA434_0==Class||(LA434_0>=False && LA434_0<=Super)||LA434_0==Union||(LA434_0>=Yield && LA434_0<=This)||(LA434_0>=From && LA434_0<=Void)||(LA434_0>=Get && LA434_0<=Set)||LA434_0==PlusSignPlusSign||(LA434_0>=HyphenMinusHyphenMinus && LA434_0<=SolidusEqualsSign)||LA434_0==As||LA434_0==Of||LA434_0==ExclamationMark||LA434_0==LeftParenthesis||LA434_0==PlusSign||LA434_0==HyphenMinus||LA434_0==Solidus||LA434_0==LessThanSign||(LA434_0>=CommercialAt && LA434_0<=LeftSquareBracket)||LA434_0==LeftCurlyBracket||LA434_0==Tilde||(LA434_0>=RULE_TEMPLATE_HEAD && LA434_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA434_0==RULE_IDENTIFIER||LA434_0==RULE_INT||LA434_0==RULE_DOUBLE||(LA434_0>=RULE_BINARY_INT && LA434_0<=RULE_SCIENTIFIC_INT)||LA434_0==RULE_STRING) ) {
                        alt434=1;
                    }
                    switch (alt434) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_137);
                            lv_segments_3_0=norm1_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_138);
                    ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    loop436:
                    do {
                        int alt436=2;
                        int LA436_0 = input.LA(1);
                        if ( (LA436_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt436=1;
                        }
                        switch (alt436) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	    }
                    	    pushFollow(FOLLOW_137);
                    	    lv_segments_5_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    int alt435=2;
                    	    int LA435_0 = input.LA(1);
                    	    if ( ((LA435_0>=Intersection && LA435_0<=Implements)||(LA435_0>=Promisify && LA435_0<=Abstract)||(LA435_0>=External && LA435_0<=Function)||(LA435_0>=Private && LA435_0<=Delete)||(LA435_0>=Import && LA435_0<=Public)||LA435_0==Static||(LA435_0>=Target && LA435_0<=Await)||LA435_0==Class||(LA435_0>=False && LA435_0<=Super)||LA435_0==Union||(LA435_0>=Yield && LA435_0<=This)||(LA435_0>=From && LA435_0<=Void)||(LA435_0>=Get && LA435_0<=Set)||LA435_0==PlusSignPlusSign||(LA435_0>=HyphenMinusHyphenMinus && LA435_0<=SolidusEqualsSign)||LA435_0==As||LA435_0==Of||LA435_0==ExclamationMark||LA435_0==LeftParenthesis||LA435_0==PlusSign||LA435_0==HyphenMinus||LA435_0==Solidus||LA435_0==LessThanSign||(LA435_0>=CommercialAt && LA435_0<=LeftSquareBracket)||LA435_0==LeftCurlyBracket||LA435_0==Tilde||(LA435_0>=RULE_TEMPLATE_HEAD && LA435_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA435_0==RULE_IDENTIFIER||LA435_0==RULE_INT||LA435_0==RULE_DOUBLE||(LA435_0>=RULE_BINARY_INT && LA435_0<=RULE_SCIENTIFIC_INT)||LA435_0==RULE_STRING) ) {
                    	        alt435=1;
                    	    }
                    	    switch (alt435) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {
                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	            }
                    	            pushFollow(FOLLOW_137);
                    	            lv_segments_6_0=norm1_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	    }
                    	    pushFollow(FOLLOW_138);
                    	    ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop436;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_TemplateLiteral() throws RecognitionException {
        EObject current = null;
        EObject lv_segments_1_0 = null;
        EObject lv_segments_2_0 = null;
        EObject lv_segments_3_0 = null;
        EObject lv_segments_5_0 = null;
        EObject lv_segments_6_0 = null;
        EObject lv_segments_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateLiteralAccess().getTemplateLiteralAction_0(),
              					current);
            }
            }
            int alt441=2;
            int LA441_0 = input.LA(1);
            if ( (LA441_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt441=1;
            }
            else if ( (LA441_0==RULE_TEMPLATE_HEAD) ) {
                alt441=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 441, 0, input);
                throw nvae;
            }
            switch (alt441) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsNoSubstitutionTemplateParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_1_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      						}
                      						add(
                      							current,
                      							"segments",
                      							lv_segments_1_0,
                      							"org.eclipse.n4js.N4JS.NoSubstitutionTemplate");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateHeadParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_137);
                    lv_segments_2_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_2_0,
                      								"org.eclipse.n4js.N4JS.TemplateHead");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt438=2;
                    int LA438_0 = input.LA(1);
                    if ( ((LA438_0>=Intersection && LA438_0<=Implements)||(LA438_0>=Promisify && LA438_0<=Abstract)||(LA438_0>=External && LA438_0<=Function)||(LA438_0>=Private && LA438_0<=Delete)||(LA438_0>=Import && LA438_0<=Public)||LA438_0==Static||(LA438_0>=Target && LA438_0<=Await)||LA438_0==Class||(LA438_0>=False && LA438_0<=Super)||LA438_0==Union||(LA438_0>=Yield && LA438_0<=This)||(LA438_0>=From && LA438_0<=Void)||(LA438_0>=Get && LA438_0<=Set)||LA438_0==PlusSignPlusSign||(LA438_0>=HyphenMinusHyphenMinus && LA438_0<=SolidusEqualsSign)||LA438_0==As||LA438_0==Of||LA438_0==ExclamationMark||LA438_0==LeftParenthesis||LA438_0==PlusSign||LA438_0==HyphenMinus||LA438_0==Solidus||LA438_0==LessThanSign||(LA438_0>=CommercialAt && LA438_0<=LeftSquareBracket)||LA438_0==LeftCurlyBracket||LA438_0==Tilde||(LA438_0>=RULE_TEMPLATE_HEAD && LA438_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA438_0==RULE_IDENTIFIER||LA438_0==RULE_INT||LA438_0==RULE_DOUBLE||(LA438_0>=RULE_BINARY_INT && LA438_0<=RULE_SCIENTIFIC_INT)||LA438_0==RULE_STRING) ) {
                        alt438=1;
                    }
                    switch (alt438) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_137);
                            lv_segments_3_0=norm3_Expression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                              							}
                              							add(
                              								current,
                              								"segments",
                              								lv_segments_3_0,
                              								"org.eclipse.n4js.N4JS.Expression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2());
                    }
                    pushFollow(FOLLOW_138);
                    ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					afterParserOrEnumRuleCall();
                    }
                    loop440:
                    do {
                        int alt440=2;
                        int LA440_0 = input.LA(1);
                        if ( (LA440_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt440=1;
                        }
                        switch (alt440) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateMiddleParserRuleCall_1_1_3_0_0());
                    	    }
                    	    pushFollow(FOLLOW_137);
                    	    lv_segments_5_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"segments",
                    	      									lv_segments_5_0,
                    	      									"org.eclipse.n4js.N4JS.TemplateMiddle");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    int alt439=2;
                    	    int LA439_0 = input.LA(1);
                    	    if ( ((LA439_0>=Intersection && LA439_0<=Implements)||(LA439_0>=Promisify && LA439_0<=Abstract)||(LA439_0>=External && LA439_0<=Function)||(LA439_0>=Private && LA439_0<=Delete)||(LA439_0>=Import && LA439_0<=Public)||LA439_0==Static||(LA439_0>=Target && LA439_0<=Await)||LA439_0==Class||(LA439_0>=False && LA439_0<=Super)||LA439_0==Union||(LA439_0>=Yield && LA439_0<=This)||(LA439_0>=From && LA439_0<=Void)||(LA439_0>=Get && LA439_0<=Set)||LA439_0==PlusSignPlusSign||(LA439_0>=HyphenMinusHyphenMinus && LA439_0<=SolidusEqualsSign)||LA439_0==As||LA439_0==Of||LA439_0==ExclamationMark||LA439_0==LeftParenthesis||LA439_0==PlusSign||LA439_0==HyphenMinus||LA439_0==Solidus||LA439_0==LessThanSign||(LA439_0>=CommercialAt && LA439_0<=LeftSquareBracket)||LA439_0==LeftCurlyBracket||LA439_0==Tilde||(LA439_0>=RULE_TEMPLATE_HEAD && LA439_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA439_0==RULE_IDENTIFIER||LA439_0==RULE_INT||LA439_0==RULE_DOUBLE||(LA439_0>=RULE_BINARY_INT && LA439_0<=RULE_SCIENTIFIC_INT)||LA439_0==RULE_STRING) ) {
                    	        alt439=1;
                    	    }
                    	    switch (alt439) {
                    	        case 1 :
                    	            {
                    	            {
                    	            if ( state.backtracking==0 ) {
                    	              								newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsExpressionParserRuleCall_1_1_3_1_0());
                    	            }
                    	            pushFollow(FOLLOW_137);
                    	            lv_segments_6_0=norm3_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {
                    	              								if (current==null) {
                    	              									current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                    	              								}
                    	              								add(
                    	              									current,
                    	              									"segments",
                    	              									lv_segments_6_0,
                    	              									"org.eclipse.n4js.N4JS.Expression");
                    	              								afterParserOrEnumRuleCall();
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2());
                    	    }
                    	    pushFollow(FOLLOW_138);
                    	    ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop440;
                        }
                    } while (true);
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTemplateLiteralAccess().getSegmentsTemplateTailParserRuleCall_1_1_4_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_segments_8_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTemplateLiteralRule());
                      							}
                      							add(
                      								current,
                      								"segments",
                      								lv_segments_8_0,
                      								"org.eclipse.n4js.N4JS.TemplateTail");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateExpressionEnd() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateExpressionEnd = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateExpressionEndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateExpressionEnd=ruleTemplateExpressionEnd();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateExpressionEnd.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateExpressionEnd() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	setInTemplateSegment();
        try {
            {
            kw=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNoSubstitutionTemplate = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNoSubstitutionTemplateRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNoSubstitutionTemplate=ruleNoSubstitutionTemplate();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNoSubstitutionTemplate; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNoSubstitutionTemplate() throws RecognitionException {
        EObject current = null;
        Token lv_value_1_0=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNoSubstitutionTemplateAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            lv_value_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_value_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getNoSubstitutionTemplateRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.NO_SUBSTITUTION_TEMPLATE_LITERAL");
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateHead() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateHead = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateHead=ruleTemplateHead();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateHead; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateHead() throws RecognitionException {
        EObject current = null;
        Token lv_value_1_0=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateHeadAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            lv_value_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_value_1_0, grammarAccess.getTemplateHeadAccess().getValueTEMPLATE_HEADTerminalRuleCall_1_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getTemplateHeadRule());
              					}
              					setWithLastConsumed(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TEMPLATE_HEAD");
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateTail() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateTail = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTail=ruleTemplateTail();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateTail() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateTailAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTemplateTailAccess().getValueTemplateTailLiteralParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateTailRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TemplateTailLiteral");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTemplateMiddle() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTemplateMiddle = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddle=ruleTemplateMiddle();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddle; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTemplateMiddle() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTemplateMiddleAccess().getTemplateSegmentAction_0(),
              					current);
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTemplateMiddleAccess().getValueTemplateMiddleLiteralParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_1_0=ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTemplateMiddleRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_1_0,
              						"org.eclipse.n4js.N4JS.TemplateMiddleLiteral");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteral=ruleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteral() throws RecognitionException {
        EObject current = null;
        EObject this_NumericLiteral_0 = null;
        EObject this_BooleanLiteral_1 = null;
        EObject this_StringLiteral_2 = null;
        EObject this_NullLiteral_3 = null;
        EObject this_RegularExpressionLiteral_4 = null;
        	enterRule();
        try {
            {
            int alt442=5;
            switch ( input.LA(1) ) {
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt442=1;
                }
                break;
            case False:
            case True:
                {
                alt442=2;
                }
                break;
            case RULE_STRING:
                {
                alt442=3;
                }
                break;
            case Null:
                {
                alt442=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt442=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 442, 0, input);
                throw nvae;
            }
            switch (alt442) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_NumericLiteral_0=ruleNumericLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NumericLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteral_1=ruleBooleanLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BooleanLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteral_2=ruleStringLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_StringLiteral_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_NullLiteral_3=ruleNullLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NullLiteral_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_RegularExpressionLiteral_4=ruleRegularExpressionLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_RegularExpressionLiteral_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNullLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNullLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNullLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNullLiteral=ruleNullLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNullLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNullLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBooleanLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBooleanLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteral=ruleBooleanLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBooleanLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_true_1_0=null;
        Token otherlv_2=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
              					current);
            }
            }
            int alt443=2;
            int LA443_0 = input.LA(1);
            if ( (LA443_0==True) ) {
                alt443=1;
            }
            else if ( (LA443_0==False) ) {
                alt443=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 443, 0, input);
                throw nvae;
            }
            switch (alt443) {
                case 1 :
                    {
                    {
                    {
                    lv_true_1_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_true_1_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralRule());
                      						}
                      						setWithLastConsumed(current, "true", lv_true_1_0 != null, "true");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    otherlv_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStringLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleStringLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteral=ruleStringLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStringLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.STRING");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNumericLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNumericLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteral=ruleNumericLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNumericLiteral() throws RecognitionException {
        EObject current = null;
        EObject this_DoubleLiteral_0 = null;
        EObject this_IntLiteral_1 = null;
        EObject this_BinaryIntLiteral_2 = null;
        EObject this_OctalIntLiteral_3 = null;
        EObject this_LegacyOctalIntLiteral_4 = null;
        EObject this_HexIntLiteral_5 = null;
        EObject this_ScientificIntLiteral_6 = null;
        	enterRule();
        try {
            {
            int alt444=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt444=1;
                }
                break;
            case RULE_INT:
                {
                alt444=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt444=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt444=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt444=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt444=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt444=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 444, 0, input);
                throw nvae;
            }
            switch (alt444) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_DoubleLiteral_0=ruleDoubleLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_DoubleLiteral_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntLiteral_1=ruleIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntLiteral_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_BinaryIntLiteral_2=ruleBinaryIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BinaryIntLiteral_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_OctalIntLiteral_3=ruleOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_OctalIntLiteral_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_LegacyOctalIntLiteral_4=ruleLegacyOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_LegacyOctalIntLiteral_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_HexIntLiteral_5=ruleHexIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_HexIntLiteral_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 7 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6());
                    }
                    pushFollow(FOLLOW_2);
                    this_ScientificIntLiteral_6=ruleScientificIntLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ScientificIntLiteral_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleDoubleLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleDoubleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDoubleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDoubleLiteral=ruleDoubleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDoubleLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDoubleLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getDoubleLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.DOUBLE");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntLiteral=ruleIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleOctalIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOctalIntLiteral=ruleOctalIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getOctalIntLiteralAccess().getValueOCTAL_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.OCTAL_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLegacyOctalIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLegacyOctalIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLegacyOctalIntLiteral=ruleLegacyOctalIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLegacyOctalIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLegacyOctalIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueLEGACY_OCTAL_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getLegacyOctalIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.LEGACY_OCTAL_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleHexIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleHexIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHexIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHexIntLiteral=ruleHexIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHexIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleHexIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getHexIntLiteralAccess().getValueHEX_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getHexIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.HEX_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBinaryIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBinaryIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBinaryIntLiteral=ruleBinaryIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBinaryIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBinaryIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getBinaryIntLiteralAccess().getValueBINARY_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getBinaryIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.BINARY_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScientificIntLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScientificIntLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScientificIntLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScientificIntLiteral=ruleScientificIntLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScientificIntLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScientificIntLiteral() throws RecognitionException {
        EObject current = null;
        Token lv_value_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_value_0_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_value_0_0, grammarAccess.getScientificIntLiteralAccess().getValueSCIENTIFIC_INTTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getScientificIntLiteralRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.TypeExpressions.SCIENTIFIC_INT");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleRegularExpressionLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getRegularExpressionLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleRegularExpressionLiteral=ruleRegularExpressionLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleRegularExpressionLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleRegularExpressionLiteral() throws RecognitionException {
        EObject current = null;
        AntlrDatatypeRuleToken lv_value_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getRegularExpressionLiteralAccess().getValueREGEX_LITERALParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_value_0_0=ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getRegularExpressionLiteralRule());
              				}
              				set(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.n4js.N4JS.REGEX_LITERAL");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleNumericLiteralAsString() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleNumericLiteralAsString = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralAsStringRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteralAsString=ruleNumericLiteralAsString();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteralAsString.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleNumericLiteralAsString() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_DOUBLE_0=null;
        Token this_INT_1=null;
        Token this_BINARY_INT_2=null;
        Token this_OCTAL_INT_3=null;
        Token this_HEX_INT_4=null;
        Token this_SCIENTIFIC_INT_5=null;
        	enterRule();
        try {
            {
            int alt445=6;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt445=1;
                }
                break;
            case RULE_INT:
                {
                alt445=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt445=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt445=4;
                }
                break;
            case RULE_HEX_INT:
                {
                alt445=5;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt445=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 445, 0, input);
                throw nvae;
            }
            switch (alt445) {
                case 1 :
                    {
                    this_DOUBLE_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_DOUBLE_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_DOUBLE_0, grammarAccess.getNumericLiteralAsStringAccess().getDOUBLETerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    this_INT_1=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_INT_1);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_INT_1, grammarAccess.getNumericLiteralAsStringAccess().getINTTerminalRuleCall_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    this_BINARY_INT_2=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_BINARY_INT_2);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_BINARY_INT_2, grammarAccess.getNumericLiteralAsStringAccess().getBINARY_INTTerminalRuleCall_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    this_OCTAL_INT_3=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_OCTAL_INT_3);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_OCTAL_INT_3, grammarAccess.getNumericLiteralAsStringAccess().getOCTAL_INTTerminalRuleCall_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    this_HEX_INT_4=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_HEX_INT_4);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_HEX_INT_4, grammarAccess.getNumericLiteralAsStringAccess().getHEX_INTTerminalRuleCall_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    this_SCIENTIFIC_INT_5=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_SCIENTIFIC_INT_5);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_SCIENTIFIC_INT_5, grammarAccess.getNumericLiteralAsStringAccess().getSCIENTIFIC_INTTerminalRuleCall_5());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierOrThis() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleIdentifierOrThis = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierOrThisRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierOrThis=ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierOrThis.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierOrThis() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        	enterRule();
        try {
            {
            int alt446=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt446=1;
                }
                break;
            case This:
                {
                alt446=2;
                }
                break;
            case Promisify:
                {
                alt446=3;
                }
                break;
            case Target:
                {
                alt446=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 446, 0, input);
                throw nvae;
            }
            switch (alt446) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierOrThisAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleAnnotationName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleAnnotationName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationName=ruleAnnotationName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleAnnotationName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        	enterRule();
        try {
            {
            int alt447=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt447=1;
                }
                break;
            case This:
                {
                alt447=2;
                }
                break;
            case Target:
                {
                alt447=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 447, 0, input);
                throw nvae;
            }
            switch (alt447) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getAnnotationNameAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleREGEX_LITERAL() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleREGEX_LITERAL = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getREGEX_LITERALRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleREGEX_LITERAL=ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleREGEX_LITERAL.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleREGEX_LITERAL() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_REGEX_TAIL_2=null;
        	enterRule();
        	setInRegularExpression();
        try {
            {
            {
            int alt448=2;
            int LA448_0 = input.LA(1);
            if ( (LA448_0==Solidus) ) {
                alt448=1;
            }
            else if ( (LA448_0==SolidusEqualsSign) ) {
                alt448=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 448, 0, input);
                throw nvae;
            }
            switch (alt448) {
                case 1 :
                    {
                    kw=(Token)match(input,Solidus,FOLLOW_139); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,SolidusEqualsSign,FOLLOW_139); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                    }
                    }
                    break;
            }
            int alt449=2;
            int LA449_0 = input.LA(1);
            if ( (LA449_0==RULE_REGEX_TAIL) ) {
                alt449=1;
            }
            switch (alt449) {
                case 1 :
                    {
                    this_REGEX_TAIL_2=(Token)match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(this_REGEX_TAIL_2);
                    }
                    if ( state.backtracking==0 ) {
                      				newLeafNode(this_REGEX_TAIL_2, grammarAccess.getREGEX_LITERALAccess().getREGEX_TAILTerminalRuleCall_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateTailLiteral() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateTailLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateTailLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateTailLiteral=ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateTailLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateTailLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_TEMPLATE_END_0=null;
        	enterRule();
        try {
            {
            int alt450=2;
            int LA450_0 = input.LA(1);
            if ( (LA450_0==RULE_TEMPLATE_END) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    {
                    this_TEMPLATE_END_0=(Token)match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_TEMPLATE_END_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_TEMPLATE_END_0, grammarAccess.getTemplateTailLiteralAccess().getTEMPLATE_ENDTerminalRuleCall());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTemplateMiddleLiteral() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTemplateMiddleLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTemplateMiddleLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTemplateMiddleLiteral=ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTemplateMiddleLiteral.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTemplateMiddleLiteral() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_TEMPLATE_MIDDLE_0=null;
        	enterRule();
        try {
            {
            this_TEMPLATE_MIDDLE_0=(Token)match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(this_TEMPLATE_MIDDLE_0);
            }
            if ( state.backtracking==0 ) {
              		newLeafNode(this_TEMPLATE_MIDDLE_0, grammarAccess.getTemplateMiddleLiteralAccess().getTEMPLATE_MIDDLETerminalRuleCall());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleSemi() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleSemi = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSemiRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSemi=ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSemi.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleSemi() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
         enterRule();
        		int position = input.index();
        		promoteEOL();    
        try {
            int alt451=3;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt451=1;
                }
                break;
            case EOF:
            case RULE_ML_COMMENT:
            case RULE_EOL:
                {
                alt451=2;
                }
                break;
            case RightCurlyBracket:
                {
                alt451=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 451, 0, input);
                throw nvae;
            }
            switch (alt451) {
                case 1 :
                    {
                    kw=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)input.LT(1);
                    if ( input.LA(1)==EOF||input.LA(1)==RULE_ML_COMMENT||input.LA(1)==RULE_EOL ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }
                    if ( state.backtracking==0 ) {
                              addASIMessage();
                              current.merge(kw);
                              newLeafNode(kw, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                    if ( !(( forcedRewind(position) )) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(position) ");
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              		leaveRule(); 
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement START
 public final EObject ruleNoLineTerminator(EObject in_current) throws RecognitionException {
    	EObject current = in_current;
    	if (state.backtracking==0) {
    		promoteEOL();
    	}
    	if (hasDisallowedEOL()) { 
        	if (state.backtracking==0) {
        		NoViableAltException nvae = new NoViableAltException("", 0, 0, input);
                reportError(nvae);
                throw nvae;
        	}
        	state.failed=true; 
        	return current;
        }
        return current;
    }
// REPLACEMENT ruleNoLineTerminator.java.replacement END
// REPLACEMENT ruleNoWhiteSpace.java.replacement START
 public final EObject ruleNoWhiteSpace(EObject in_current) throws RecognitionException {
    	EObject current = in_current;
    	if (state.backtracking==0) {
    		promoteEOL();
    	}
    	if (hasDisallowedWhiteSpace()) { 
        	if (state.backtracking==0) {
        		NoViableAltException nvae = new NoViableAltException("", 0, 0, input);
                reportError(nvae);
                throw nvae;
        	}
        	state.failed=true; 
        	return current;
        }
        return current;
    }
// REPLACEMENT ruleNoWhiteSpace.java.replacement END
    public final EObject entryRuleAnnotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotation=ruleAnnotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAt,FOLLOW_140); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleScriptAnnotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleScriptAnnotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptAnnotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptAnnotation=ruleScriptAnnotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptAnnotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleScriptAnnotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        EObject this_AnnotationNoAtSign_1 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_140); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_AnnotationNoAtSign_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_AnnotationNoAtSign_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationNoAtSign = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationNoAtSignRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationNoAtSign=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationNoAtSign; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationNoAtSign() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject this_NoWhiteSpace_1 = null;
        EObject lv_args_3_0 = null;
        EObject lv_args_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getNameAnnotationNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_141);
            lv_name_0_0=ruleAnnotationName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.N4JS.AnnotationName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt456=2;
            alt456 = dfa456.predict(input);
            switch (alt456) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotationNoAtSignRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getNoWhiteSpaceParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_46);
                    this_NoWhiteSpace_1=ruleNoWhiteSpace(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_NoWhiteSpace_1;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_142); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_1());
                    }
                    int alt455=2;
                    int LA455_0 = input.LA(1);
                    if ( ((LA455_0>=Intersection && LA455_0<=Constructor)||LA455_0==Promisify||LA455_0==Default||LA455_0==Target||LA455_0==Await||LA455_0==False||LA455_0==Union||LA455_0==This||(LA455_0>=Null && LA455_0<=Void)||LA455_0==SolidusEqualsSign||LA455_0==LeftParenthesis||LA455_0==PlusSign||LA455_0==HyphenMinus||LA455_0==Solidus||LA455_0==QuestionMark||LA455_0==LeftSquareBracket||LA455_0==LeftCurlyBracket||LA455_0==Tilde||LA455_0==RULE_IDENTIFIER||LA455_0==RULE_INT||LA455_0==RULE_DOUBLE||(LA455_0>=RULE_BINARY_INT && LA455_0<=RULE_SCIENTIFIC_INT)||LA455_0==RULE_STRING) ) {
                        alt455=1;
                    }
                    switch (alt455) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_2_0_0());
                            }
                            pushFollow(FOLLOW_56);
                            lv_args_3_0=ruleAnnotationArgument();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                              							}
                              							add(
                              								current,
                              								"args",
                              								lv_args_3_0,
                              								"org.eclipse.n4js.N4JS.AnnotationArgument");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            loop454:
                            do {
                                int alt454=2;
                                int LA454_0 = input.LA(1);
                                if ( (LA454_0==Comma) ) {
                                    alt454=1;
                                }
                                switch (alt454) {
                            	case 1 :
                            	    {
                            	    otherlv_4=(Token)match(input,Comma,FOLLOW_143); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      						newLeafNode(otherlv_4, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_2_1_0());
                            	    }
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      								newCompositeNode(grammarAccess.getAnnotationNoAtSignAccess().getArgsAnnotationArgumentParserRuleCall_1_2_1_1_0());
                            	    }
                            	    pushFollow(FOLLOW_56);
                            	    lv_args_5_0=ruleAnnotationArgument();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAnnotationNoAtSignRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"args",
                            	      									lv_args_5_0,
                            	      									"org.eclipse.n4js.N4JS.AnnotationArgument");
                            	      								afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop454;
                                }
                            } while (true);
                            }
                            break;
                    }
                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_3());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationArgument=ruleAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject this_LiteralAnnotationArgument_0 = null;
        EObject this_TypeRefAnnotationArgument_1 = null;
        	enterRule();
        try {
            {
            int alt457=2;
            alt457 = dfa457.predict(input);
            switch (alt457) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_LiteralAnnotationArgument_0=ruleLiteralAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_LiteralAnnotationArgument_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefAnnotationArgument_1=ruleTypeRefAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRefAnnotationArgument_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteralAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralAnnotationArgument=ruleLiteralAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject lv_literal_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralLiteralParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_literal_0_0=ruleLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getLiteralAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"literal",
              					lv_literal_0_0,
              					"org.eclipse.n4js.N4JS.Literal");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefAnnotationArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefAnnotationArgument=ruleTypeRefAnnotationArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefAnnotationArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefAnnotationArgument() throws RecognitionException {
        EObject current = null;
        EObject lv_typeRefNode_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefNodeTypeReferenceNodeParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRefNode_0_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getTypeRefAnnotationArgumentRule());
              				}
              				set(
              					current,
              					"typeRefNode",
              					lv_typeRefNode_0_0,
              					"org.eclipse.n4js.N4JS.TypeReferenceNode");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotationList=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotationList() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_annotations_2_0 = null;
        EObject lv_annotations_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getAnnotationListAccess().getAnnotationListAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,CommercialAt,FOLLOW_140); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_144);
            lv_annotations_2_0=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getAnnotationListRule());
              							}
              							add(
              								current,
              								"annotations",
              								lv_annotations_2_0,
              								"org.eclipse.n4js.N4JS.AnnotationNoAtSign");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            loop458:
            do {
                int alt458=2;
                int LA458_0 = input.LA(1);
                if ( (LA458_0==CommercialAt) ) {
                    alt458=1;
                }
                switch (alt458) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_annotations_3_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_3_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop458;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleExpressionAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpressionAnnotationList=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpressionAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleExpressionAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getExpressionAnnotationListAccess().getExpressionAnnotationListAction_0(),
              					current);
            }
            }
            int cnt459=0;
            loop459:
            do {
                int alt459=2;
                int LA459_0 = input.LA(1);
                if ( (LA459_0==CommercialAt) ) {
                    alt459=1;
                }
                switch (alt459) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getExpressionAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt459 >= 1 ) break loop459;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(459, input);
                        throw eee;
                }
                cnt459++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePropertyAssignmentAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePropertyAssignmentAnnotationList=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePropertyAssignmentAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePropertyAssignmentAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getPropertyAssignmentAnnotationListAccess().getPropertyAssignmentAnnotationListAction_0(),
              					current);
            }
            }
            int cnt460=0;
            loop460:
            do {
                int alt460=2;
                int LA460_0 = input.LA(1);
                if ( (LA460_0==CommercialAt) ) {
                    alt460=1;
                }
                switch (alt460) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getPropertyAssignmentAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt460 >= 1 ) break loop460;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(460, input);
                        throw eee;
                }
                cnt460++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MemberAnnotationList = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberAnnotationListRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberAnnotationList=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberAnnotationList; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberAnnotationList() throws RecognitionException {
        EObject current = null;
        EObject lv_annotations_1_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4MemberAnnotationListAccess().getN4MemberAnnotationListAction_0(),
              					current);
            }
            }
            int cnt461=0;
            loop461:
            do {
                int alt461=2;
                int LA461_0 = input.LA(1);
                if ( (LA461_0==CommercialAt) ) {
                    alt461=1;
                }
                switch (alt461) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAnnotationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_144);
            	    lv_annotations_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getN4MemberAnnotationListRule());
            	      					}
            	      					add(
            	      						current,
            	      						"annotations",
            	      						lv_annotations_1_0,
            	      						"org.eclipse.n4js.N4JS.Annotation");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt461 >= 1 ) break loop461;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(461, input);
                        throw eee;
                }
                cnt461++;
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4ClassDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassDeclaration=ruleN4ClassDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject this_ClassExtendsImplements_5 = null;
        EObject this_Members_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop462:
            do {
                int alt462=2;
                int LA462_0 = input.LA(1);
                if ( ((LA462_0>=Protected && LA462_0<=Abstract)||LA462_0==External||(LA462_0>=Private && LA462_0<=Project)||LA462_0==Public||LA462_0==Static||LA462_0==Const) ) {
                    alt462=1;
                }
                switch (alt462) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_10);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop462;
                }
            } while (true);
            otherlv_1=(Token)match(input,Class,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_1());
            }
            int alt463=2;
            int LA463_0 = input.LA(1);
            if ( (LA463_0==Tilde) ) {
                alt463=1;
            }
            switch (alt463) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_59);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt464=2;
            int LA464_0 = input.LA(1);
            if ( ((LA464_0>=Intersection && LA464_0<=Constructor)||(LA464_0>=Promisify && LA464_0<=Abstract)||LA464_0==External||(LA464_0>=Private && LA464_0<=Project)||LA464_0==Public||LA464_0==Static||LA464_0==Target||(LA464_0>=Async && LA464_0<=Await)||LA464_0==Union||(LA464_0>=Yield && LA464_0<=This)||LA464_0==From||LA464_0==Type||(LA464_0>=Get && LA464_0<=Let)||(LA464_0>=Out && LA464_0<=Set)||LA464_0==As||LA464_0==Of||LA464_0==RULE_IDENTIFIER) ) {
                alt464=1;
            }
            else if ( (LA464_0==Implements) ) {
                int LA464_2 = input.LA(2);
                if ( (LA464_2==Implements||LA464_2==Extends||LA464_2==LessThanSign||LA464_2==LeftCurlyBracket) ) {
                    alt464=1;
                }
            }
            switch (alt464) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_12);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt465=2;
            int LA465_0 = input.LA(1);
            if ( (LA465_0==LessThanSign) ) {
                alt465=1;
            }
            switch (alt465) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_12);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt466=2;
            int LA466_0 = input.LA(1);
            if ( (LA466_0==Implements||LA466_0==Extends) ) {
                alt466=1;
            }
            switch (alt466) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getClassExtendsImplementsParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_12);
                    this_ClassExtendsImplements_5=ruleClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_6=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_6;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4ClassDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject this_ClassExtendsImplements_5 = null;
        EObject this_Members_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop467:
            do {
                int alt467=2;
                int LA467_0 = input.LA(1);
                if ( ((LA467_0>=Protected && LA467_0<=Abstract)||LA467_0==External||(LA467_0>=Private && LA467_0<=Project)||LA467_0==Public||LA467_0==Static||LA467_0==Const) ) {
                    alt467=1;
                }
                switch (alt467) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_10);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop467;
                }
            } while (true);
            otherlv_1=(Token)match(input,Class,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_1());
            }
            int alt468=2;
            int LA468_0 = input.LA(1);
            if ( (LA468_0==Tilde) ) {
                alt468=1;
            }
            switch (alt468) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_59);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt469=2;
            int LA469_0 = input.LA(1);
            if ( ((LA469_0>=Intersection && LA469_0<=Constructor)||(LA469_0>=Promisify && LA469_0<=Abstract)||LA469_0==External||(LA469_0>=Private && LA469_0<=Project)||LA469_0==Public||LA469_0==Static||LA469_0==Target||(LA469_0>=Async && LA469_0<=Await)||LA469_0==Union||LA469_0==This||LA469_0==From||LA469_0==Type||(LA469_0>=Get && LA469_0<=Let)||(LA469_0>=Out && LA469_0<=Set)||LA469_0==As||LA469_0==Of||LA469_0==RULE_IDENTIFIER) ) {
                alt469=1;
            }
            else if ( (LA469_0==Implements) ) {
                int LA469_2 = input.LA(2);
                if ( (LA469_2==Implements||LA469_2==Extends||LA469_2==LessThanSign||LA469_2==LeftCurlyBracket) ) {
                    alt469=1;
                }
            }
            switch (alt469) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_59);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4ClassDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt470=2;
            int LA470_0 = input.LA(1);
            if ( (LA470_0==LessThanSign) ) {
                alt470=1;
            }
            switch (alt470) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_60);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt471=2;
            int LA471_0 = input.LA(1);
            if ( (LA471_0==Implements||LA471_0==Extends) ) {
                alt471=1;
            }
            switch (alt471) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getClassExtendsImplementsParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_60);
                    this_ClassExtendsImplements_5=norm1_ClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_6=norm1_Members(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_6;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeParameters(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_typeVars_1_0 = null;
        EObject lv_typeVars_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_146); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTypeParametersAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeParametersAccess().getTypeVarsN4TypeVariableParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_104);
            lv_typeVars_1_0=ruleN4TypeVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeParametersRule());
              					}
              					add(
              						current,
              						"typeVars",
              						lv_typeVars_1_0,
              						"org.eclipse.n4js.N4JS.N4TypeVariable");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop472:
            do {
                int alt472=2;
                int LA472_0 = input.LA(1);
                if ( (LA472_0==Comma) ) {
                    alt472=1;
                }
                switch (alt472) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_146); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTypeParametersAccess().getTypeVarsN4TypeVariableParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_104);
            	    lv_typeVars_3_0=ruleN4TypeVariable();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeParametersRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeVars",
            	      							lv_typeVars_3_0,
            	      							"org.eclipse.n4js.N4JS.N4TypeVariable");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop472;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTypeParametersAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMembers(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop473:
            do {
                int alt473=2;
                int LA473_0 = input.LA(1);
                if ( ((LA473_0>=Intersection && LA473_0<=With)||(LA473_0>=For && LA473_0<=Var)||(LA473_0>=As && LA473_0<=Of)||LA473_0==LeftParenthesis||LA473_0==Asterisk||LA473_0==LessThanSign||(LA473_0>=CommercialAt && LA473_0<=LeftSquareBracket)||LA473_0==RULE_IDENTIFIER||LA473_0==RULE_INT||LA473_0==RULE_DOUBLE||(LA473_0>=RULE_BINARY_INT && LA473_0<=RULE_OCTAL_INT)||(LA473_0>=RULE_HEX_INT && LA473_0<=RULE_SCIENTIFIC_INT)||LA473_0==RULE_STRING) ) {
                    alt473=1;
                }
                switch (alt473) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_147);
            	    lv_ownedMembersRaw_1_0=ruleN4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop473;
                }
            } while (true);
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_Members(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_ownedMembersRaw_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_147); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop474:
            do {
                int alt474=2;
                int LA474_0 = input.LA(1);
                if ( ((LA474_0>=Intersection && LA474_0<=With)||(LA474_0>=For && LA474_0<=Var)||(LA474_0>=As && LA474_0<=Of)||LA474_0==LeftParenthesis||LA474_0==Asterisk||LA474_0==LessThanSign||(LA474_0>=CommercialAt && LA474_0<=LeftSquareBracket)||LA474_0==RULE_IDENTIFIER||LA474_0==RULE_INT||LA474_0==RULE_DOUBLE||(LA474_0>=RULE_BINARY_INT && LA474_0<=RULE_OCTAL_INT)||(LA474_0>=RULE_HEX_INT && LA474_0<=RULE_SCIENTIFIC_INT)||LA474_0==RULE_STRING) ) {
                    alt474=1;
                }
                switch (alt474) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getMembersAccess().getOwnedMembersRawN4MemberDeclarationParserRuleCall_1_0());
            	    }
            	    pushFollow(FOLLOW_147);
            	    lv_ownedMembersRaw_1_0=norm1_N4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getMembersRule());
            	      					}
            	      					add(
            	      						current,
            	      						"ownedMembersRaw",
            	      						lv_ownedMembersRaw_1_0,
            	      						"org.eclipse.n4js.N4JS.N4MemberDeclaration");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop474;
                }
            } while (true);
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsImplements(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_ClassExtendsClause_0 = null;
        EObject this_ClassImplementsList_1 = null;
        EObject this_ClassImplementsList_2 = null;
        EObject this_ClassExtendsClause_3 = null;
        	enterRule();
        try {
            {
            int alt477=2;
            int LA477_0 = input.LA(1);
            if ( (LA477_0==Extends) ) {
                alt477=1;
            }
            else if ( (LA477_0==Implements) ) {
                alt477=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 477, 0, input);
                throw nvae;
            }
            switch (alt477) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_148);
                    this_ClassExtendsClause_0=ruleClassExtendsClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsClause_0;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt475=2;
                    int LA475_0 = input.LA(1);
                    if ( (LA475_0==Implements) ) {
                        alt475=1;
                    }
                    switch (alt475) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassImplementsList_1=ruleClassImplementsList(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassImplementsList_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_149);
                    this_ClassImplementsList_2=ruleClassImplementsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassImplementsList_2;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt476=2;
                    int LA476_0 = input.LA(1);
                    if ( (LA476_0==Extends) ) {
                        alt476=1;
                    }
                    switch (alt476) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassExtendsClause_3=ruleClassExtendsClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassExtendsClause_3;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsImplements(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_ClassExtendsClause_0 = null;
        EObject this_ClassImplementsList_1 = null;
        EObject this_ClassImplementsList_2 = null;
        EObject this_ClassExtendsClause_3 = null;
        	enterRule();
        try {
            {
            int alt480=2;
            int LA480_0 = input.LA(1);
            if ( (LA480_0==Extends) ) {
                alt480=1;
            }
            else if ( (LA480_0==Implements) ) {
                alt480=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 480, 0, input);
                throw nvae;
            }
            switch (alt480) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_148);
                    this_ClassExtendsClause_0=norm1_ClassExtendsClause(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsClause_0;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt478=2;
                    int LA478_0 = input.LA(1);
                    if ( (LA478_0==Implements) ) {
                        alt478=1;
                    }
                    switch (alt478) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassImplementsList_1=ruleClassImplementsList(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassImplementsList_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                      				}
                      				newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_149);
                    this_ClassImplementsList_2=ruleClassImplementsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassImplementsList_2;
                      				afterParserOrEnumRuleCall();
                    }
                    int alt479=2;
                    int LA479_0 = input.LA(1);
                    if ( (LA479_0==Extends) ) {
                        alt479=1;
                    }
                    switch (alt479) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElement(grammarAccess.getClassExtendsImplementsRule());
                              					}
                              					newCompositeNode(grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1());
                            }
                            pushFollow(FOLLOW_2);
                            this_ClassExtendsClause_3=norm1_ClassExtendsClause(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ClassExtendsClause_3;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_superClassRef_1_0 = null;
        EObject lv_superClassExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Extends,FOLLOW_150); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt481=2;
            int LA481_0 = input.LA(1);
            if ( (LA481_0==Void) && (synpred295_InternalN4JSParser())) {
                alt481=1;
            }
            else if ( (LA481_0==This) ) {
                int LA481_2 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt481=1;
                }
                else if ( (true) ) {
                    alt481=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 481, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA481_0==Await) ) {
                int LA481_3 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt481=1;
                }
                else if ( (true) ) {
                    alt481=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 481, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA481_0==Promisify) ) {
                int LA481_4 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt481=1;
                }
                else if ( (true) ) {
                    alt481=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 481, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA481_0==Target) ) {
                int LA481_5 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt481=1;
                }
                else if ( (true) ) {
                    alt481=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 481, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA481_0==Default) && (synpred295_InternalN4JSParser())) {
                alt481=1;
            }
            else if ( (LA481_0==RULE_IDENTIFIER) ) {
                int LA481_7 = input.LA(2);
                if ( (synpred295_InternalN4JSParser()) ) {
                    alt481=1;
                }
                else if ( (true) ) {
                    alt481=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 481, 7, input);
                    throw nvae;
                }
            }
            else if ( ((LA481_0>=Intersection && LA481_0<=Implements)||(LA481_0>=Interface && LA481_0<=Abstract)||(LA481_0>=External && LA481_0<=Function)||(LA481_0>=Private && LA481_0<=Project)||(LA481_0>=Import && LA481_0<=Public)||LA481_0==Static||LA481_0==Async||LA481_0==Class||(LA481_0>=False && LA481_0<=Super)||LA481_0==Union||LA481_0==Yield||(LA481_0>=From && LA481_0<=Type)||(LA481_0>=Get && LA481_0<=Set)||LA481_0==SolidusEqualsSign||LA481_0==As||LA481_0==Of||LA481_0==LeftParenthesis||LA481_0==Solidus||LA481_0==LessThanSign||(LA481_0>=CommercialAt && LA481_0<=LeftSquareBracket)||LA481_0==LeftCurlyBracket||(LA481_0>=RULE_TEMPLATE_HEAD && LA481_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA481_0==RULE_INT||LA481_0==RULE_DOUBLE||(LA481_0>=RULE_BINARY_INT && LA481_0<=RULE_SCIENTIFIC_INT)||LA481_0==RULE_STRING) ) {
                alt481=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 481, 0, input);
                throw nvae;
            }
            switch (alt481) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalNodeParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassRef_1_0=ruleParameterizedTypeRefNominalNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_1_0,
                      							"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassExpression_2_0=ruleLeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassExpression",
                      							lv_superClassExpression_2_0,
                      							"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ClassExtendsClause(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_superClassRef_1_0 = null;
        EObject lv_superClassExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Extends,FOLLOW_150); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt482=2;
            int LA482_0 = input.LA(1);
            if ( (LA482_0==Void) && (synpred296_InternalN4JSParser())) {
                alt482=1;
            }
            else if ( (LA482_0==This) ) {
                int LA482_2 = input.LA(2);
                if ( (synpred296_InternalN4JSParser()) ) {
                    alt482=1;
                }
                else if ( (true) ) {
                    alt482=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 482, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA482_0==Await) ) {
                int LA482_3 = input.LA(2);
                if ( (synpred296_InternalN4JSParser()) ) {
                    alt482=1;
                }
                else if ( (true) ) {
                    alt482=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 482, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA482_0==Promisify) ) {
                int LA482_4 = input.LA(2);
                if ( (synpred296_InternalN4JSParser()) ) {
                    alt482=1;
                }
                else if ( (true) ) {
                    alt482=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 482, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA482_0==Target) ) {
                int LA482_5 = input.LA(2);
                if ( (synpred296_InternalN4JSParser()) ) {
                    alt482=1;
                }
                else if ( (true) ) {
                    alt482=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 482, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA482_0==Default) && (synpred296_InternalN4JSParser())) {
                alt482=1;
            }
            else if ( (LA482_0==RULE_IDENTIFIER) ) {
                int LA482_7 = input.LA(2);
                if ( (synpred296_InternalN4JSParser()) ) {
                    alt482=1;
                }
                else if ( (true) ) {
                    alt482=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 482, 7, input);
                    throw nvae;
                }
            }
            else if ( ((LA482_0>=Intersection && LA482_0<=Implements)||(LA482_0>=Interface && LA482_0<=Abstract)||(LA482_0>=External && LA482_0<=Function)||(LA482_0>=Private && LA482_0<=Project)||(LA482_0>=Import && LA482_0<=Public)||LA482_0==Static||LA482_0==Async||LA482_0==Class||(LA482_0>=False && LA482_0<=Super)||LA482_0==Union||(LA482_0>=From && LA482_0<=Type)||(LA482_0>=Get && LA482_0<=Set)||LA482_0==SolidusEqualsSign||LA482_0==As||LA482_0==Of||LA482_0==LeftParenthesis||LA482_0==Solidus||LA482_0==LessThanSign||(LA482_0>=CommercialAt && LA482_0<=LeftSquareBracket)||LA482_0==LeftCurlyBracket||(LA482_0>=RULE_TEMPLATE_HEAD && LA482_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA482_0==RULE_INT||LA482_0==RULE_DOUBLE||(LA482_0>=RULE_BINARY_INT && LA482_0<=RULE_SCIENTIFIC_INT)||LA482_0==RULE_STRING) ) {
                alt482=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 482, 0, input);
                throw nvae;
            }
            switch (alt482) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassRefParameterizedTypeRefNominalNodeParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassRef_1_0=ruleParameterizedTypeRefNominalNode();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassRef",
                      							lv_superClassRef_1_0,
                      							"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_superClassExpression_2_0=norm1_LeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getClassExtendsClauseRule());
                      						}
                      						set(
                      							current,
                      							"superClassExpression",
                      							lv_superClassExpression_2_0,
                      							"org.eclipse.n4js.N4JS.LeftHandSideExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleClassImplementsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_implementedInterfaceRefs_1_0 = null;
        EObject lv_implementedInterfaceRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Implements,FOLLOW_151); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_36);
            lv_implementedInterfaceRefs_1_0=ruleParameterizedTypeRefNominalNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
              					}
              					add(
              						current,
              						"implementedInterfaceRefs",
              						lv_implementedInterfaceRefs_1_0,
              						"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop483:
            do {
                int alt483=2;
                int LA483_0 = input.LA(1);
                if ( (LA483_0==Comma) ) {
                    alt483=1;
                }
                switch (alt483) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_151); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getClassImplementsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsParameterizedTypeRefNominalNodeParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_implementedInterfaceRefs_3_0=ruleParameterizedTypeRefNominalNode();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getClassImplementsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"implementedInterfaceRefs",
            	      							lv_implementedInterfaceRefs_3_0,
            	      							"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop483;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4ClassExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4ClassExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4ClassExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4ClassExpression=ruleN4ClassExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4ClassExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4ClassExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ClassExtendsImplements_3 = null;
        EObject this_Members_4 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Class,FOLLOW_59); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt484=2;
            int LA484_0 = input.LA(1);
            if ( ((LA484_0>=Intersection && LA484_0<=Constructor)||(LA484_0>=Promisify && LA484_0<=Abstract)||LA484_0==External||(LA484_0>=Private && LA484_0<=Project)||LA484_0==Public||LA484_0==Static||LA484_0==Target||(LA484_0>=Async && LA484_0<=Await)||LA484_0==Union||(LA484_0>=Yield && LA484_0<=This)||LA484_0==From||LA484_0==Type||(LA484_0>=Get && LA484_0<=Let)||(LA484_0>=Out && LA484_0<=Set)||LA484_0==As||LA484_0==Of||LA484_0==RULE_IDENTIFIER) ) {
                alt484=1;
            }
            else if ( (LA484_0==Implements) ) {
                int LA484_2 = input.LA(2);
                if ( (LA484_2==Implements||LA484_2==Extends||LA484_2==LeftCurlyBracket) ) {
                    alt484=1;
                }
            }
            switch (alt484) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_12);
                    lv_name_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt485=2;
            int LA485_0 = input.LA(1);
            if ( (LA485_0==Implements||LA485_0==Extends) ) {
                alt485=1;
            }
            switch (alt485) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_12);
                    this_ClassExtendsImplements_3=ruleClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            this_Members_4=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4ClassExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ClassExtendsImplements_3 = null;
        EObject this_Members_4 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4ClassExpressionAccess().getN4ClassExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Class,FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt486=2;
            int LA486_0 = input.LA(1);
            if ( ((LA486_0>=Intersection && LA486_0<=Constructor)||(LA486_0>=Promisify && LA486_0<=Abstract)||LA486_0==External||(LA486_0>=Private && LA486_0<=Project)||LA486_0==Public||LA486_0==Static||LA486_0==Target||(LA486_0>=Async && LA486_0<=Await)||LA486_0==Union||LA486_0==This||LA486_0==From||LA486_0==Type||(LA486_0>=Get && LA486_0<=Let)||(LA486_0>=Out && LA486_0<=Set)||LA486_0==As||LA486_0==Of||LA486_0==RULE_IDENTIFIER) ) {
                alt486=1;
            }
            else if ( (LA486_0==Implements) ) {
                int LA486_2 = input.LA(2);
                if ( (LA486_2==Implements||LA486_2==Extends||LA486_2==LeftCurlyBracket) ) {
                    alt486=1;
                }
            }
            switch (alt486) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getNameBindingIdentifierParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_60);
                    lv_name_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4ClassExpressionRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_2_0,
                      						"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt487=2;
            int LA487_0 = input.LA(1);
            if ( (LA487_0==Implements||LA487_0==Extends) ) {
                alt487=1;
            }
            switch (alt487) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4ClassExpressionRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_60);
                    this_ClassExtendsImplements_3=norm1_ClassExtendsImplements(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ClassExtendsImplements_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4ClassExpressionRule());
              			}
              			newCompositeNode(grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            this_Members_4=norm1_Members(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4InterfaceDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4InterfaceDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4InterfaceDeclaration=ruleN4InterfaceDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4InterfaceDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject this_InterfaceExtendsList_5 = null;
        EObject this_Members_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop488:
            do {
                int alt488=2;
                int LA488_0 = input.LA(1);
                if ( ((LA488_0>=Protected && LA488_0<=Abstract)||LA488_0==External||(LA488_0>=Private && LA488_0<=Project)||LA488_0==Public||LA488_0==Static||LA488_0==Const) ) {
                    alt488=1;
                }
                switch (alt488) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_13);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop488;
                }
            } while (true);
            otherlv_1=(Token)match(input,Interface,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_1());
            }
            int alt489=2;
            int LA489_0 = input.LA(1);
            if ( (LA489_0==Tilde) ) {
                alt489=1;
            }
            switch (alt489) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_59);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt490=2;
            int LA490_0 = input.LA(1);
            if ( ((LA490_0>=Intersection && LA490_0<=Constructor)||(LA490_0>=Promisify && LA490_0<=Abstract)||LA490_0==External||(LA490_0>=Private && LA490_0<=Project)||LA490_0==Public||LA490_0==Static||LA490_0==Target||(LA490_0>=Async && LA490_0<=Await)||LA490_0==Union||(LA490_0>=Yield && LA490_0<=This)||LA490_0==From||LA490_0==Type||(LA490_0>=Get && LA490_0<=Let)||(LA490_0>=Out && LA490_0<=Set)||LA490_0==As||LA490_0==Of||LA490_0==RULE_IDENTIFIER) ) {
                alt490=1;
            }
            else if ( (LA490_0==Implements) ) {
                int LA490_2 = input.LA(2);
                if ( (LA490_2==Implements||LA490_2==Extends||LA490_2==LessThanSign||LA490_2==LeftCurlyBracket) ) {
                    alt490=1;
                }
            }
            switch (alt490) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_12);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt491=2;
            int LA491_0 = input.LA(1);
            if ( (LA491_0==LessThanSign) ) {
                alt491=1;
            }
            switch (alt491) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_12);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt492=2;
            int LA492_0 = input.LA(1);
            if ( (LA492_0==Implements||LA492_0==Extends) ) {
                alt492=1;
            }
            switch (alt492) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceExtendsListParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_12);
                    this_InterfaceExtendsList_5=ruleInterfaceExtendsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_InterfaceExtendsList_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_6=ruleMembers(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_6;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4InterfaceDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        AntlrDatatypeRuleToken lv_typingStrategy_2_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject this_InterfaceExtendsList_5 = null;
        EObject this_Members_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            loop493:
            do {
                int alt493=2;
                int LA493_0 = input.LA(1);
                if ( ((LA493_0>=Protected && LA493_0<=Abstract)||LA493_0==External||(LA493_0>=Private && LA493_0<=Project)||LA493_0==Public||LA493_0==Static||LA493_0==Const) ) {
                    alt493=1;
                }
                switch (alt493) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_0_0());
            	    }
            	    pushFollow(FOLLOW_13);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_0_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop493;
                }
            } while (true);
            otherlv_1=(Token)match(input,Interface,FOLLOW_145); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_1());
            }
            int alt494=2;
            int LA494_0 = input.LA(1);
            if ( (LA494_0==Tilde) ) {
                alt494=1;
            }
            switch (alt494) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_59);
                    lv_typingStrategy_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"typingStrategy",
                      								lv_typingStrategy_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypingStrategyDefSiteOperator");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt495=2;
            int LA495_0 = input.LA(1);
            if ( ((LA495_0>=Intersection && LA495_0<=Constructor)||(LA495_0>=Promisify && LA495_0<=Abstract)||LA495_0==External||(LA495_0>=Private && LA495_0<=Project)||LA495_0==Public||LA495_0==Static||LA495_0==Target||(LA495_0>=Async && LA495_0<=Await)||LA495_0==Union||LA495_0==This||LA495_0==From||LA495_0==Type||(LA495_0>=Get && LA495_0<=Let)||(LA495_0>=Out && LA495_0<=Set)||LA495_0==As||LA495_0==Of||LA495_0==RULE_IDENTIFIER) ) {
                alt495=1;
            }
            else if ( (LA495_0==Implements) ) {
                int LA495_2 = input.LA(2);
                if ( (LA495_2==Implements||LA495_2==Extends||LA495_2==LessThanSign||LA495_2==LeftCurlyBracket) ) {
                    alt495=1;
                }
            }
            switch (alt495) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_59);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4InterfaceDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt496=2;
            int LA496_0 = input.LA(1);
            if ( (LA496_0==LessThanSign) ) {
                alt496=1;
            }
            switch (alt496) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_60);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt497=2;
            int LA497_0 = input.LA(1);
            if ( (LA497_0==Implements||LA497_0==Extends) ) {
                alt497=1;
            }
            switch (alt497) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceExtendsListParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_60);
                    this_InterfaceExtendsList_5=ruleInterfaceExtendsList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_InterfaceExtendsList_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4InterfaceDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3());
            }
            pushFollow(FOLLOW_2);
            this_Members_6=norm1_Members(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_Members_6;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleInterfaceExtendsList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_superInterfaceRefs_2_0 = null;
        EObject lv_superInterfaceRefs_4_0 = null;
        	enterRule();
        try {
            {
            {
            int alt498=2;
            int LA498_0 = input.LA(1);
            if ( (LA498_0==Extends) ) {
                alt498=1;
            }
            else if ( (LA498_0==Implements) ) {
                alt498=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 498, 0, input);
                throw nvae;
            }
            switch (alt498) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,Extends,FOLLOW_151); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getInterfaceExtendsListAccess().getExtendsKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    otherlv_1=(Token)match(input,Implements,FOLLOW_151); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getInterfaceExtendsListAccess().getImplementsKeyword_0_1());
                    }
                    }
                    break;
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalNodeParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_36);
            lv_superInterfaceRefs_2_0=ruleParameterizedTypeRefNominalNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getInterfaceExtendsListRule());
              					}
              					add(
              						current,
              						"superInterfaceRefs",
              						lv_superInterfaceRefs_2_0,
              						"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop499:
            do {
                int alt499=2;
                int LA499_0 = input.LA(1);
                if ( (LA499_0==Comma) ) {
                    alt499=1;
                }
                switch (alt499) {
            	case 1 :
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_151); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_3, grammarAccess.getInterfaceExtendsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsParameterizedTypeRefNominalNodeParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_superInterfaceRefs_4_0=ruleParameterizedTypeRefNominalNode();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getInterfaceExtendsListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"superInterfaceRefs",
            	      							lv_superInterfaceRefs_4_0,
            	      							"org.eclipse.n4js.N4JS.ParameterizedTypeRefNominalNode");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop499;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4EnumDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumDeclaration=ruleN4EnumDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject lv_literals_5_0 = null;
        EObject lv_literals_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4EnumDeclarationAccess().getN4EnumDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop500:
            do {
                int alt500=2;
                int LA500_0 = input.LA(1);
                if ( ((LA500_0>=Protected && LA500_0<=Abstract)||LA500_0==External||(LA500_0>=Private && LA500_0<=Project)||LA500_0==Public||LA500_0==Static||LA500_0==Const) ) {
                    alt500=1;
                }
                switch (alt500) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_14);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop500;
                }
            } while (true);
            otherlv_2=(Token)match(input,Enum,FOLLOW_152); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
            }
            int alt501=2;
            int LA501_0 = input.LA(1);
            if ( ((LA501_0>=Intersection && LA501_0<=Implements)||(LA501_0>=Promisify && LA501_0<=Abstract)||LA501_0==External||(LA501_0>=Private && LA501_0<=Project)||LA501_0==Public||LA501_0==Static||LA501_0==Target||(LA501_0>=Async && LA501_0<=Await)||LA501_0==Union||(LA501_0>=Yield && LA501_0<=This)||LA501_0==From||LA501_0==Type||(LA501_0>=Get && LA501_0<=Let)||(LA501_0>=Out && LA501_0<=Set)||LA501_0==As||LA501_0==Of||LA501_0==RULE_IDENTIFIER) ) {
                alt501=1;
            }
            switch (alt501) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt503=2;
            int LA503_0 = input.LA(1);
            if ( ((LA503_0>=Intersection && LA503_0<=With)||(LA503_0>=For && LA503_0<=Var)||(LA503_0>=As && LA503_0<=Of)||LA503_0==RULE_IDENTIFIER) ) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_literals_5_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						add(
                      							current,
                      							"literals",
                      							lv_literals_5_0,
                      							"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop502:
                    do {
                        int alt502=2;
                        int LA502_0 = input.LA(1);
                        if ( (LA502_0==Comma) ) {
                            alt502=1;
                        }
                        switch (alt502) {
                    	case 1 :
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_6, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_literals_7_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"literals",
                    	      								lv_literals_7_0,
                    	      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop502;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4EnumDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject lv_literals_5_0 = null;
        EObject lv_literals_7_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4EnumDeclarationAccess().getN4EnumDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop504:
            do {
                int alt504=2;
                int LA504_0 = input.LA(1);
                if ( ((LA504_0>=Protected && LA504_0<=Abstract)||LA504_0==External||(LA504_0>=Private && LA504_0<=Project)||LA504_0==Public||LA504_0==Static||LA504_0==Const) ) {
                    alt504=1;
                }
                switch (alt504) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_14);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop504;
                }
            } while (true);
            otherlv_2=(Token)match(input,Enum,FOLLOW_152); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
            }
            int alt505=2;
            int LA505_0 = input.LA(1);
            if ( ((LA505_0>=Intersection && LA505_0<=Implements)||(LA505_0>=Promisify && LA505_0<=Abstract)||LA505_0==External||(LA505_0>=Private && LA505_0<=Project)||LA505_0==Public||LA505_0==Static||LA505_0==Target||(LA505_0>=Async && LA505_0<=Await)||LA505_0==Union||LA505_0==This||LA505_0==From||LA505_0==Type||(LA505_0>=Get && LA505_0<=Let)||(LA505_0>=Out && LA505_0<=Set)||LA505_0==As||LA505_0==Of||LA505_0==RULE_IDENTIFIER) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_6);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            otherlv_4=(Token)match(input,LeftCurlyBracket,FOLLOW_38); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt507=2;
            int LA507_0 = input.LA(1);
            if ( ((LA507_0>=Intersection && LA507_0<=With)||(LA507_0>=For && LA507_0<=Var)||(LA507_0>=As && LA507_0<=Of)||LA507_0==RULE_IDENTIFIER) ) {
                alt507=1;
            }
            switch (alt507) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_literals_5_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                      						}
                      						add(
                      							current,
                      							"literals",
                      							lv_literals_5_0,
                      							"org.eclipse.n4js.N4JS.N4EnumLiteral");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop506:
                    do {
                        int alt506=2;
                        int LA506_0 = input.LA(1);
                        if ( (LA506_0==Comma) ) {
                            alt506=1;
                        }
                        switch (alt506) {
                    	case 1 :
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_6, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getN4EnumDeclarationAccess().getLiteralsN4EnumLiteralParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_literals_7_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getN4EnumDeclarationRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"literals",
                    	      								lv_literals_7_0,
                    	      								"org.eclipse.n4js.N4JS.N4EnumLiteral");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop506;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_8, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4EnumLiteral() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4EnumLiteral = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4EnumLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4EnumLiteral=ruleN4EnumLiteral();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4EnumLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4EnumLiteral() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject lv_valueExpression_2_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4EnumLiteralAccess().getNameIdentifierNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_47);
            lv_name_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4EnumLiteralRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt508=2;
            int LA508_0 = input.LA(1);
            if ( (LA508_0==Colon) ) {
                alt508=1;
            }
            switch (alt508) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getN4EnumLiteralAccess().getValueExpressionAssignmentExpressionParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_valueExpression_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getN4EnumLiteralRule());
                      						}
                      						set(
                      							current,
                      							"valueExpression",
                      							lv_valueExpression_2_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4TypeAliasDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4TypeAliasDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4TypeAliasDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4TypeAliasDeclaration=ruleN4TypeAliasDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4TypeAliasDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4TypeAliasDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject lv_declaredTypeRefNode_6_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4TypeAliasDeclarationAccess().getN4TypeAliasDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop509:
            do {
                int alt509=2;
                int LA509_0 = input.LA(1);
                if ( ((LA509_0>=Protected && LA509_0<=Abstract)||LA509_0==External||(LA509_0>=Private && LA509_0<=Project)||LA509_0==Public||LA509_0==Static) ) {
                    alt509=1;
                }
                switch (alt509) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_17);
            	    lv_declaredModifiers_1_0=ruleN4ModifierWithoutConst();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop509;
                }
            } while (true);
            otherlv_2=(Token)match(input,Type,FOLLOW_153); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4TypeAliasDeclarationAccess().getTypeKeyword_0_0_2());
            }
            int alt510=2;
            int LA510_0 = input.LA(1);
            if ( ((LA510_0>=Intersection && LA510_0<=Implements)||(LA510_0>=Promisify && LA510_0<=Abstract)||LA510_0==External||(LA510_0>=Private && LA510_0<=Project)||LA510_0==Public||LA510_0==Static||LA510_0==Target||(LA510_0>=Async && LA510_0<=Await)||LA510_0==Union||(LA510_0>=Yield && LA510_0<=This)||LA510_0==From||LA510_0==Type||(LA510_0>=Get && LA510_0<=Let)||(LA510_0>=Out && LA510_0<=Set)||LA510_0==As||LA510_0==Of||LA510_0==RULE_IDENTIFIER) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_name_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt511=2;
            int LA511_0 = input.LA(1);
            if ( (LA511_0==LessThanSign) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4TypeAliasDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_19);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,EqualsSign,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4TypeAliasDeclarationAccess().getEqualsSignKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_24);
            lv_declaredTypeRefNode_6_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
              					}
              					set(
              						current,
              						"declaredTypeRefNode",
              						lv_declaredTypeRefNode_6_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getSemiParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4TypeAliasDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token otherlv_5=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        AntlrDatatypeRuleToken lv_name_3_0 = null;
        EObject this_TypeParameters_4 = null;
        EObject lv_declaredTypeRefNode_6_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4TypeAliasDeclarationAccess().getN4TypeAliasDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop512:
            do {
                int alt512=2;
                int LA512_0 = input.LA(1);
                if ( ((LA512_0>=Protected && LA512_0<=Abstract)||LA512_0==External||(LA512_0>=Private && LA512_0<=Project)||LA512_0==Public||LA512_0==Static) ) {
                    alt512=1;
                }
                switch (alt512) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredModifiersN4ModifierWithoutConstEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_17);
            	    lv_declaredModifiers_1_0=ruleN4ModifierWithoutConst();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4ModifierWithoutConst");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop512;
                }
            } while (true);
            otherlv_2=(Token)match(input,Type,FOLLOW_153); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4TypeAliasDeclarationAccess().getTypeKeyword_0_0_2());
            }
            int alt513=2;
            int LA513_0 = input.LA(1);
            if ( ((LA513_0>=Intersection && LA513_0<=Implements)||(LA513_0>=Promisify && LA513_0<=Abstract)||LA513_0==External||(LA513_0>=Private && LA513_0<=Project)||LA513_0==Public||LA513_0==Static||LA513_0==Target||(LA513_0>=Async && LA513_0<=Await)||LA513_0==Union||LA513_0==This||LA513_0==From||LA513_0==Type||(LA513_0>=Get && LA513_0<=Let)||(LA513_0>=Out && LA513_0<=Set)||LA513_0==As||LA513_0==Of||LA513_0==RULE_IDENTIFIER) ) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getNameBindingIdentifierParserRuleCall_0_0_3_0());
                    }
                    pushFollow(FOLLOW_18);
                    lv_name_3_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_3_0,
                      								"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt514=2;
            int LA514_0 = input.LA(1);
            if ( (LA514_0==LessThanSign) ) {
                alt514=1;
            }
            switch (alt514) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4TypeAliasDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getTypeParametersParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_19);
                    this_TypeParameters_4=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,EqualsSign,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4TypeAliasDeclarationAccess().getEqualsSignKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredTypeRefNodeTypeReferenceNodeParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_24);
            lv_declaredTypeRefNode_6_0=ruleTypeReferenceNode();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4TypeAliasDeclarationRule());
              					}
              					set(
              						current,
              						"declaredTypeRefNode",
              						lv_declaredTypeRefNode_6_0,
              						"org.eclipse.n4js.N4JS.TypeReferenceNode");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getN4TypeAliasDeclarationAccess().getSemiParserRuleCall_4());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MemberDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MemberDeclaration=ruleN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedN4MemberDeclaration_0 = null;
        EObject this_N4GetterDeclaration_1 = null;
        EObject this_N4SetterDeclaration_2 = null;
        EObject this_N4MethodDeclaration_3 = null;
        EObject this_N4CallSignatureDeclaration_4 = null;
        EObject this_N4FieldDeclaration_5 = null;
        	enterRule();
        try {
            {
            int alt515=6;
            alt515 = dfa515.predict(input);
            switch (alt515) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=ruleAnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=ruleN4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=ruleN4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=ruleN4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallSignatureDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallSignatureDeclaration_4=ruleN4CallSignatureDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4CallSignatureDeclaration_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_5=ruleN4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4FieldDeclaration_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_AnnotatedN4MemberDeclaration_0 = null;
        EObject this_N4GetterDeclaration_1 = null;
        EObject this_N4SetterDeclaration_2 = null;
        EObject this_N4MethodDeclaration_3 = null;
        EObject this_N4CallSignatureDeclaration_4 = null;
        EObject this_N4FieldDeclaration_5 = null;
        	enterRule();
        try {
            {
            int alt516=6;
            alt516 = dfa516.predict(input);
            switch (alt516) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_AnnotatedN4MemberDeclaration_0=norm1_AnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_AnnotatedN4MemberDeclaration_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4GetterDeclaration_1=norm1_N4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4GetterDeclaration_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4SetterDeclaration_2=norm1_N4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4SetterDeclaration_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4MethodDeclaration_3=norm1_N4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_N4MethodDeclaration_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4CallSignatureDeclarationParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4CallSignatureDeclaration_4=norm1_N4CallSignatureDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4CallSignatureDeclaration_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 6 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4FieldDeclaration_5=norm1_N4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_N4FieldDeclaration_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleAnnotatedN4MemberDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnnotatedN4MemberDeclaration=ruleAnnotatedN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnnotatedN4MemberDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_19_0=null;
        Token otherlv_25=null;
        Token otherlv_29=null;
        EObject this_N4MemberAnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_GetterHeader_3 = null;
        EObject lv_body_4_0 = null;
        Enumerator lv_declaredModifiers_7_0 = null;
        EObject lv_declaredName_9_0 = null;
        EObject lv_fpar_12_0 = null;
        EObject lv_body_14_0 = null;
        Enumerator lv_declaredModifiers_17_0 = null;
        EObject this_TypeParameters_18 = null;
        EObject lv_declaredName_20_0 = null;
        EObject this_MethodParamsReturnAndBody_21 = null;
        EObject this_AsyncNoTrailingLineBreak_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsReturnAndBody_24 = null;
        EObject this_TypeParameters_27 = null;
        EObject this_MethodParamsReturnAndBody_28 = null;
        EObject this_FieldDeclarationImpl_31 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_154);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt530=5;
            alt530 = dfa530.predict(input);
            switch (alt530) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    loop517:
                    do {
                        int alt517=2;
                        int LA517_0 = input.LA(1);
                        if ( ((LA517_0>=Protected && LA517_0<=Abstract)||LA517_0==External||(LA517_0>=Private && LA517_0<=Project)||LA517_0==Public||LA517_0==Static||LA517_0==Const) ) {
                            alt517=1;
                        }
                        switch (alt517) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_155);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop517;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                    }
                    pushFollow(FOLLOW_156);
                    this_GetterHeader_3=ruleGetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt518=2;
                    int LA518_0 = input.LA(1);
                    if ( (LA518_0==LeftCurlyBracket) && (synpred310_InternalN4JSParser())) {
                        alt518=1;
                    }
                    switch (alt518) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                            }
                            pushFollow(FOLLOW_100);
                            lv_body_4_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt519=2;
                    int LA519_0 = input.LA(1);
                    if ( (LA519_0==Semicolon) ) {
                        alt519=1;
                    }
                    switch (alt519) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    loop520:
                    do {
                        int alt520=2;
                        int LA520_0 = input.LA(1);
                        if ( ((LA520_0>=Protected && LA520_0<=Abstract)||LA520_0==External||(LA520_0>=Private && LA520_0<=Project)||LA520_0==Public||LA520_0==Static||LA520_0==Const) ) {
                            alt520=1;
                        }
                        switch (alt520) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_157);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop520;
                        }
                    } while (true);
                    otherlv_8=(Token)match(input,Set,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                    }
                    pushFollow(FOLLOW_98);
                    lv_declaredName_9_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt521=2;
                    int LA521_0 = input.LA(1);
                    if ( (LA521_0==QuestionMark) ) {
                        alt521=1;
                    }
                    switch (alt521) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_10_0 != null, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_fpar_12_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_156); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt522=2;
                    int LA522_0 = input.LA(1);
                    if ( (LA522_0==LeftCurlyBracket) && (synpred313_InternalN4JSParser())) {
                        alt522=1;
                    }
                    switch (alt522) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                            }
                            pushFollow(FOLLOW_100);
                            lv_body_14_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt523=2;
                    int LA523_0 = input.LA(1);
                    if ( (LA523_0==Semicolon) ) {
                        alt523=1;
                    }
                    switch (alt523) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    loop524:
                    do {
                        int alt524=2;
                        alt524 = dfa524.predict(input);
                        switch (alt524) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_158);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop524;
                        }
                    } while (true);
                    int alt525=2;
                    int LA525_0 = input.LA(1);
                    if ( (LA525_0==LessThanSign) ) {
                        alt525=1;
                    }
                    switch (alt525) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeParametersParserRuleCall_1_2_0_0_2());
                            }
                            pushFollow(FOLLOW_99);
                            this_TypeParameters_18=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt526=2;
                    int LA526_0 = input.LA(1);
                    if ( (LA526_0==Asterisk) ) {
                        alt526=1;
                    }
                    else if ( ((LA526_0>=Intersection && LA526_0<=With)||(LA526_0>=For && LA526_0<=Var)||(LA526_0>=As && LA526_0<=Of)||LA526_0==LeftSquareBracket||LA526_0==RULE_IDENTIFIER||LA526_0==RULE_INT||LA526_0==RULE_DOUBLE||(LA526_0>=RULE_BINARY_INT && LA526_0<=RULE_OCTAL_INT)||(LA526_0>=RULE_HEX_INT && LA526_0<=RULE_SCIENTIFIC_INT)||LA526_0==RULE_STRING) ) {
                        alt526=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 526, 0, input);
                        throw nvae;
                    }
                    switch (alt526) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_19_0=(Token)match(input,Asterisk,FOLLOW_97); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_19_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", lv_generator_19_0 != null, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_44);
                            lv_declaredName_20_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_20_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_100);
                            this_MethodParamsReturnAndBody_21=norm1_MethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_21;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0());
                            }
                            pushFollow(FOLLOW_97);
                            this_AsyncNoTrailingLineBreak_22=ruleAsyncNoTrailingLineBreak(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									current = this_AsyncNoTrailingLineBreak_22;
                              									afterParserOrEnumRuleCall();
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0());
                            }
                            pushFollow(FOLLOW_159);
                            lv_declaredName_23_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2());
                            }
                            pushFollow(FOLLOW_100);
                            this_MethodParamsReturnAndBody_24=ruleMethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt527=2;
                    int LA527_0 = input.LA(1);
                    if ( (LA527_0==Semicolon) ) {
                        alt527=1;
                    }
                    switch (alt527) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                    }
                    }
                    int alt528=2;
                    int LA528_0 = input.LA(1);
                    if ( (LA528_0==LessThanSign) ) {
                        alt528=1;
                    }
                    switch (alt528) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeParametersParserRuleCall_1_3_0_0_1());
                            }
                            pushFollow(FOLLOW_159);
                            this_TypeParameters_27=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_27;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_3_0_0_2());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsReturnAndBody_28=ruleMethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_28;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt529=2;
                    int LA529_0 = input.LA(1);
                    if ( (LA529_0==Semicolon) ) {
                        alt529=1;
                    }
                    switch (alt529) {
                        case 1 :
                            {
                            otherlv_29=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_29, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_4_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_31=ruleFieldDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FieldDeclarationImpl_31;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_5=null;
        Token otherlv_8=null;
        Token lv_declaredOptional_10_0=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token lv_generator_19_0=null;
        Token otherlv_25=null;
        Token otherlv_29=null;
        EObject this_N4MemberAnnotationList_0 = null;
        Enumerator lv_declaredModifiers_2_0 = null;
        EObject this_GetterHeader_3 = null;
        EObject lv_body_4_0 = null;
        Enumerator lv_declaredModifiers_7_0 = null;
        EObject lv_declaredName_9_0 = null;
        EObject lv_fpar_12_0 = null;
        EObject lv_body_14_0 = null;
        Enumerator lv_declaredModifiers_17_0 = null;
        EObject this_TypeParameters_18 = null;
        EObject lv_declaredName_20_0 = null;
        EObject this_MethodParamsReturnAndBody_21 = null;
        EObject this_AsyncNoTrailingLineBreak_22 = null;
        EObject lv_declaredName_23_0 = null;
        EObject this_MethodParamsReturnAndBody_24 = null;
        EObject this_TypeParameters_27 = null;
        EObject this_MethodParamsReturnAndBody_28 = null;
        EObject this_FieldDeclarationImpl_31 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0());
            }
            pushFollow(FOLLOW_154);
            this_N4MemberAnnotationList_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_N4MemberAnnotationList_0;
              			afterParserOrEnumRuleCall();
            }
            int alt544=5;
            alt544 = dfa544.predict(input);
            switch (alt544) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4GetterDeclarationAnnotationListAction_1_0_0_0_0(),
                      									current);
                    }
                    }
                    loop531:
                    do {
                        int alt531=2;
                        int LA531_0 = input.LA(1);
                        if ( ((LA531_0>=Protected && LA531_0<=Abstract)||LA531_0==External||(LA531_0>=Private && LA531_0<=Project)||LA531_0==Public||LA531_0==Static||LA531_0==Const) ) {
                            alt531=1;
                        }
                        switch (alt531) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_0_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_155);
                    	    lv_declaredModifiers_2_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_2_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop531;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2());
                    }
                    pushFollow(FOLLOW_156);
                    this_GetterHeader_3=norm1_GetterHeader(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_GetterHeader_3;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    int alt532=2;
                    int LA532_0 = input.LA(1);
                    if ( (LA532_0==LeftCurlyBracket) && (synpred320_InternalN4JSParser())) {
                        alt532=1;
                    }
                    switch (alt532) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_0_1_0());
                            }
                            pushFollow(FOLLOW_100);
                            lv_body_4_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_4_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt533=2;
                    int LA533_0 = input.LA(1);
                    if ( (LA533_0==Semicolon) ) {
                        alt533=1;
                    }
                    switch (alt533) {
                        case 1 :
                            {
                            otherlv_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4SetterDeclarationAnnotationListAction_1_1_0_0_0(),
                      									current);
                    }
                    }
                    loop534:
                    do {
                        int alt534=2;
                        int LA534_0 = input.LA(1);
                        if ( ((LA534_0>=Protected && LA534_0<=Abstract)||LA534_0==External||(LA534_0>=Private && LA534_0<=Project)||LA534_0==Public||LA534_0==Static||LA534_0==Const) ) {
                            alt534=1;
                        }
                        switch (alt534) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_1_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_157);
                    	    lv_declaredModifiers_7_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_7_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop534;
                        }
                    } while (true);
                    otherlv_8=(Token)match(input,Set,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							newLeafNode(otherlv_8, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0());
                    }
                    pushFollow(FOLLOW_98);
                    lv_declaredName_9_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_9_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    int alt535=2;
                    int LA535_0 = input.LA(1);
                    if ( (LA535_0==QuestionMark) ) {
                        alt535=1;
                    }
                    switch (alt535) {
                        case 1 :
                            {
                            {
                            lv_declaredOptional_10_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							newLeafNode(lv_declaredOptional_10_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_10_0 != null, "?");
                            }
                            }
                            }
                            break;
                    }
                    otherlv_11=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_11, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparFormalParameterParserRuleCall_1_1_3_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_fpar_12_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      							}
                      							set(
                      								current,
                      								"fpar",
                      								lv_fpar_12_0,
                      								"org.eclipse.n4js.N4JS.FormalParameter");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_13=(Token)match(input,RightParenthesis,FOLLOW_156); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_13, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt536=2;
                    int LA536_0 = input.LA(1);
                    if ( (LA536_0==LeftCurlyBracket) && (synpred323_InternalN4JSParser())) {
                        alt536=1;
                    }
                    switch (alt536) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyBlockParserRuleCall_1_1_5_0());
                            }
                            pushFollow(FOLLOW_100);
                            lv_body_14_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              							}
                              							set(
                              								current,
                              								"body",
                              								lv_body_14_0,
                              								"org.eclipse.n4js.N4JS.Block");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    int alt537=2;
                    int LA537_0 = input.LA(1);
                    if ( (LA537_0==Semicolon) ) {
                        alt537=1;
                    }
                    switch (alt537) {
                        case 1 :
                            {
                            otherlv_15=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_15, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_2_0_0_0(),
                      									current);
                    }
                    }
                    loop538:
                    do {
                        int alt538=2;
                        alt538 = dfa538.predict(input);
                        switch (alt538) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_1_2_0_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_158);
                    	    lv_declaredModifiers_17_0=ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"declaredModifiers",
                    	      										lv_declaredModifiers_17_0,
                    	      										"org.eclipse.n4js.N4JS.N4Modifier");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop538;
                        }
                    } while (true);
                    int alt539=2;
                    int LA539_0 = input.LA(1);
                    if ( (LA539_0==LessThanSign) ) {
                        alt539=1;
                    }
                    switch (alt539) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeParametersParserRuleCall_1_2_0_0_2());
                            }
                            pushFollow(FOLLOW_99);
                            this_TypeParameters_18=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_18;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt540=2;
                    int LA540_0 = input.LA(1);
                    if ( (LA540_0==Asterisk) ) {
                        alt540=1;
                    }
                    else if ( ((LA540_0>=Intersection && LA540_0<=With)||(LA540_0>=For && LA540_0<=Var)||(LA540_0>=As && LA540_0<=Of)||LA540_0==LeftSquareBracket||LA540_0==RULE_IDENTIFIER||LA540_0==RULE_INT||LA540_0==RULE_DOUBLE||(LA540_0>=RULE_BINARY_INT && LA540_0<=RULE_OCTAL_INT)||(LA540_0>=RULE_HEX_INT && LA540_0<=RULE_SCIENTIFIC_INT)||LA540_0==RULE_STRING) ) {
                        alt540=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 540, 0, input);
                        throw nvae;
                    }
                    switch (alt540) {
                        case 1 :
                            {
                            {
                            {
                            {
                            lv_generator_19_0=(Token)match(input,Asterisk,FOLLOW_97); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											newLeafNode(lv_generator_19_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0());
                            }
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											setWithLastConsumed(current, "generator", lv_generator_19_0 != null, "*");
                            }
                            }
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0());
                            }
                            pushFollow(FOLLOW_44);
                            lv_declaredName_20_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_20_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2());
                            }
                            pushFollow(FOLLOW_100);
                            this_MethodParamsReturnAndBody_21=norm1_MethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_21;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              									if (current==null) {
                              										current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              									}
                              									newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0());
                            }
                            pushFollow(FOLLOW_97);
                            this_AsyncNoTrailingLineBreak_22=ruleAsyncNoTrailingLineBreak(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              									current = this_AsyncNoTrailingLineBreak_22;
                              									afterParserOrEnumRuleCall();
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              											newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0());
                            }
                            pushFollow(FOLLOW_159);
                            lv_declaredName_23_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              											if (current==null) {
                              												current = createModelElementForParent(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              											}
                              											set(
                              												current,
                              												"declaredName",
                              												lv_declaredName_23_0,
                              												"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                              											afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            {
                            if ( state.backtracking==0 ) {
                              										if (current==null) {
                              											current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              										}
                              										newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2());
                            }
                            pushFollow(FOLLOW_100);
                            this_MethodParamsReturnAndBody_24=ruleMethodParamsReturnAndBody(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              										current = this_MethodParamsReturnAndBody_24;
                              										afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt541=2;
                    int LA541_0 = input.LA(1);
                    if ( (LA541_0==Semicolon) ) {
                        alt541=1;
                    }
                    switch (alt541) {
                        case 1 :
                            {
                            otherlv_25=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_25, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								current = forceCreateModelElementAndSet(
                      									grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MethodDeclarationAnnotationListAction_1_3_0_0_0(),
                      									current);
                    }
                    }
                    int alt542=2;
                    int LA542_0 = input.LA(1);
                    if ( (LA542_0==LessThanSign) ) {
                        alt542=1;
                    }
                    switch (alt542) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                              								}
                              								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeParametersParserRuleCall_1_3_0_0_1());
                            }
                            pushFollow(FOLLOW_159);
                            this_TypeParameters_27=ruleTypeParameters(current);
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								current = this_TypeParameters_27;
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_3_0_0_2());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsReturnAndBody_28=ruleMethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_28;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt543=2;
                    int LA543_0 = input.LA(1);
                    if ( (LA543_0==Semicolon) ) {
                        alt543=1;
                    }
                    switch (alt543) {
                        case 1 :
                            {
                            otherlv_29=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_29, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						current = forceCreateModelElementAndSet(
                      							grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4FieldDeclarationAnnotationListAction_1_4_0(),
                      							current);
                    }
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getAnnotatedN4MemberDeclarationRule());
                      					}
                      					newCompositeNode(grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_4_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_FieldDeclarationImpl_31=norm1_FieldDeclarationImpl(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					current = this_FieldDeclarationImpl_31;
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredOptional_2_0=null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        EObject lv_declaredName_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_3 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            loop545:
            do {
                int alt545=2;
                alt545 = dfa545.predict(input);
                switch (alt545) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_97);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop545;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_160);
            lv_declaredName_1_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_1_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt546=2;
            int LA546_0 = input.LA(1);
            if ( (LA546_0==QuestionMark) ) {
                alt546=1;
            }
            switch (alt546) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_2_0=(Token)match(input,QuestionMark,FOLLOW_161); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_2_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_2_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            int alt547=2;
            int LA547_0 = input.LA(1);
            if ( (LA547_0==Colon) ) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_162);
                    this_ColonSepDeclaredTypeRef_3=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt548=2;
            int LA548_0 = input.LA(1);
            if ( (LA548_0==EqualsSign) ) {
                alt548=1;
            }
            switch (alt548) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_4_1_0());
                    }
                    pushFollow(FOLLOW_24);
                    lv_expression_5_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_5_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_FieldDeclarationImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_declaredOptional_2_0=null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_0_0 = null;
        EObject lv_declaredName_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_3 = null;
        EObject lv_expression_5_0 = null;
        	enterRule();
        try {
            {
            {
            loop549:
            do {
                int alt549=2;
                alt549 = dfa549.predict(input);
                switch (alt549) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0());
            	    }
            	    pushFollow(FOLLOW_97);
            	    lv_declaredModifiers_0_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
            	      					}
            	      					add(
            	      						current,
            	      						"declaredModifiers",
            	      						lv_declaredModifiers_0_0,
            	      						"org.eclipse.n4js.N4JS.N4Modifier");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop549;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_160);
            lv_declaredName_1_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_1_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt550=2;
            int LA550_0 = input.LA(1);
            if ( (LA550_0==QuestionMark) ) {
                alt550=1;
            }
            switch (alt550) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_2_0=(Token)match(input,QuestionMark,FOLLOW_161); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_2_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_2_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            int alt551=2;
            int LA551_0 = input.LA(1);
            if ( (LA551_0==Colon) ) {
                alt551=1;
            }
            switch (alt551) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFieldDeclarationImplRule());
                      				}
                      				newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_162);
                    this_ColonSepDeclaredTypeRef_3=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt552=2;
            int LA552_0 = input.LA(1);
            if ( (LA552_0==EqualsSign) ) {
                alt552=1;
            }
            switch (alt552) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getExpressionExpressionParserRuleCall_4_1_0());
                    }
                    pushFollow(FOLLOW_24);
                    lv_expression_5_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFieldDeclarationImplRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_5_0,
                      							"org.eclipse.n4js.N4JS.Expression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5());
            }
            pushFollow(FOLLOW_2);
            ruleSemi();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4FieldDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4FieldDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4FieldDeclaration=ruleN4FieldDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4FieldDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_FieldDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=ruleFieldDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4FieldDeclaration() throws RecognitionException {
        EObject current = null;
        EObject this_FieldDeclarationImpl_1 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getN4FieldDeclarationAccess().getN4FieldDeclarationAction_0(),
              					current);
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4FieldDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_FieldDeclarationImpl_1=norm1_FieldDeclarationImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_FieldDeclarationImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4MethodDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4MethodDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4MethodDeclaration=ruleN4MethodDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4MethodDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_TypeParameters_2 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsReturnAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsReturnAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop553:
            do {
                int alt553=2;
                alt553 = dfa553.predict(input);
                switch (alt553) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_158);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop553;
                }
            } while (true);
            int alt554=2;
            int LA554_0 = input.LA(1);
            if ( (LA554_0==LessThanSign) ) {
                alt554=1;
            }
            switch (alt554) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeParametersParserRuleCall_0_0_2());
                    }
                    pushFollow(FOLLOW_99);
                    this_TypeParameters_2=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeParameters_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_99);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt555=2;
            int LA555_0 = input.LA(1);
            if ( (LA555_0==Asterisk) ) {
                alt555=1;
            }
            else if ( ((LA555_0>=Intersection && LA555_0<=With)||(LA555_0>=For && LA555_0<=Var)||(LA555_0>=As && LA555_0<=Of)||LA555_0==LeftSquareBracket||LA555_0==RULE_IDENTIFIER||LA555_0==RULE_INT||LA555_0==RULE_DOUBLE||(LA555_0>=RULE_BINARY_INT && LA555_0<=RULE_OCTAL_INT)||(LA555_0>=RULE_HEX_INT && LA555_0<=RULE_SCIENTIFIC_INT)||LA555_0==RULE_STRING) ) {
                alt555=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 555, 0, input);
                throw nvae;
            }
            switch (alt555) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", lv_generator_4_0 != null, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_44);
                    lv_declaredName_5_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_159);
                    lv_declaredName_7_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsReturnAndBody_8=ruleMethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt556=2;
            int LA556_0 = input.LA(1);
            if ( (LA556_0==Semicolon) ) {
                alt556=1;
            }
            switch (alt556) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4MethodDeclaration() throws RecognitionException {
        EObject current = null;
        Token lv_generator_4_0=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_TypeParameters_2 = null;
        EObject this_AsyncNoTrailingLineBreak_3 = null;
        EObject lv_declaredName_5_0 = null;
        EObject this_MethodParamsReturnAndBody_6 = null;
        EObject lv_declaredName_7_0 = null;
        EObject this_MethodParamsReturnAndBody_8 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4MethodDeclarationAccess().getN4MethodDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop557:
            do {
                int alt557=2;
                alt557 = dfa557.predict(input);
                switch (alt557) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_158);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop557;
                }
            } while (true);
            int alt558=2;
            int LA558_0 = input.LA(1);
            if ( (LA558_0==LessThanSign) ) {
                alt558=1;
            }
            switch (alt558) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      						}
                      						newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getTypeParametersParserRuleCall_0_0_2());
                    }
                    pushFollow(FOLLOW_99);
                    this_TypeParameters_2=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						current = this_TypeParameters_2;
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3());
            }
            pushFollow(FOLLOW_99);
            this_AsyncNoTrailingLineBreak_3=ruleAsyncNoTrailingLineBreak(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_AsyncNoTrailingLineBreak_3;
              					afterParserOrEnumRuleCall();
            }
            int alt559=2;
            int LA559_0 = input.LA(1);
            if ( (LA559_0==Asterisk) ) {
                alt559=1;
            }
            else if ( ((LA559_0>=Intersection && LA559_0<=With)||(LA559_0>=For && LA559_0<=Var)||(LA559_0>=As && LA559_0<=Of)||LA559_0==LeftSquareBracket||LA559_0==RULE_IDENTIFIER||LA559_0==RULE_INT||LA559_0==RULE_DOUBLE||(LA559_0>=RULE_BINARY_INT && LA559_0<=RULE_OCTAL_INT)||(LA559_0>=RULE_HEX_INT && LA559_0<=RULE_SCIENTIFIC_INT)||LA559_0==RULE_STRING) ) {
                alt559=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 559, 0, input);
                throw nvae;
            }
            switch (alt559) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_generator_4_0=(Token)match(input,Asterisk,FOLLOW_97); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									newLeafNode(lv_generator_4_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									setWithLastConsumed(current, "generator", lv_generator_4_0 != null, "*");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0());
                    }
                    pushFollow(FOLLOW_44);
                    lv_declaredName_5_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_5_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsReturnAndBody_6=norm1_MethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_6;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      									newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0());
                    }
                    pushFollow(FOLLOW_159);
                    lv_declaredName_7_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      									if (current==null) {
                      										current = createModelElementForParent(grammarAccess.getN4MethodDeclarationRule());
                      									}
                      									set(
                      										current,
                      										"declaredName",
                      										lv_declaredName_7_0,
                      										"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      									afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElement(grammarAccess.getN4MethodDeclarationRule());
                      								}
                      								newCompositeNode(grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1());
                    }
                    pushFollow(FOLLOW_100);
                    this_MethodParamsReturnAndBody_8=ruleMethodParamsReturnAndBody(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								current = this_MethodParamsReturnAndBody_8;
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt560=2;
            int LA560_0 = input.LA(1);
            if ( (LA560_0==Semicolon) ) {
                alt560=1;
            }
            switch (alt560) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4CallSignatureDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4CallSignatureDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4CallSignatureDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4CallSignatureDeclaration=ruleN4CallSignatureDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4CallSignatureDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4CallSignatureDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_TypeParameters_0 = null;
        EObject this_MethodParamsReturnAndBody_1 = null;
        	enterRule();
        try {
            {
            {
            int alt561=2;
            int LA561_0 = input.LA(1);
            if ( (LA561_0==LessThanSign) ) {
                alt561=1;
            }
            switch (alt561) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4CallSignatureDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4CallSignatureDeclarationAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_159);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallSignatureDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallSignatureDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1());
            }
            pushFollow(FOLLOW_100);
            this_MethodParamsReturnAndBody_1=ruleMethodParamsReturnAndBody(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MethodParamsReturnAndBody_1;
              			afterParserOrEnumRuleCall();
            }
            int alt562=2;
            int LA562_0 = input.LA(1);
            if ( (LA562_0==Semicolon) ) {
                alt562=1;
            }
            switch (alt562) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getN4CallSignatureDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4CallSignatureDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_TypeParameters_0 = null;
        EObject this_MethodParamsReturnAndBody_1 = null;
        	enterRule();
        try {
            {
            {
            int alt563=2;
            int LA563_0 = input.LA(1);
            if ( (LA563_0==LessThanSign) ) {
                alt563=1;
            }
            switch (alt563) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getN4CallSignatureDeclarationRule());
                      				}
                      				newCompositeNode(grammarAccess.getN4CallSignatureDeclarationAccess().getTypeParametersParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_159);
                    this_TypeParameters_0=ruleTypeParameters(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeParameters_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getN4CallSignatureDeclarationRule());
              			}
              			newCompositeNode(grammarAccess.getN4CallSignatureDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1());
            }
            pushFollow(FOLLOW_100);
            this_MethodParamsReturnAndBody_1=ruleMethodParamsReturnAndBody(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_MethodParamsReturnAndBody_1;
              			afterParserOrEnumRuleCall();
            }
            int alt564=2;
            int LA564_0 = input.LA(1);
            if ( (LA564_0==Semicolon) ) {
                alt564=1;
            }
            switch (alt564) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getN4CallSignatureDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject lv_body_1_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_163);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt565=2;
            int LA565_0 = input.LA(1);
            if ( (LA565_0==LeftCurlyBracket) && (synpred335_InternalN4JSParser())) {
                alt565=1;
            }
            switch (alt565) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject lv_body_1_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_163);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt566=2;
            int LA566_0 = input.LA(1);
            if ( (LA566_0==LeftCurlyBracket) && (synpred336_InternalN4JSParser())) {
                alt566=1;
            }
            switch (alt566) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsAndBodyAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_1_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_1_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleMethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_164);
            this_StrictFormalParameters_0=ruleStrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt567=2;
            int LA567_0 = input.LA(1);
            if ( (LA567_0==Colon) ) {
                alt567=1;
            }
            switch (alt567) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_163);
                    this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt568=2;
            int LA568_0 = input.LA(1);
            if ( (LA568_0==LeftCurlyBracket) && (synpred337_InternalN4JSParser())) {
                alt568=1;
            }
            switch (alt568) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_MethodParamsReturnAndBody(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        EObject this_StrictFormalParameters_0 = null;
        EObject this_ColonSepDeclaredReturnTypeRef_1 = null;
        EObject lv_body_2_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
              			}
              			newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0());
            }
            pushFollow(FOLLOW_164);
            this_StrictFormalParameters_0=norm1_StrictFormalParameters(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_StrictFormalParameters_0;
              			afterParserOrEnumRuleCall();
            }
            int alt569=2;
            int LA569_0 = input.LA(1);
            if ( (LA569_0==Colon) ) {
                alt569=1;
            }
            switch (alt569) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getMethodParamsReturnAndBodyRule());
                      				}
                      				newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_163);
                    this_ColonSepDeclaredReturnTypeRef_1=ruleColonSepDeclaredReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredReturnTypeRef_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt570=2;
            int LA570_0 = input.LA(1);
            if ( (LA570_0==LeftCurlyBracket) && (synpred338_InternalN4JSParser())) {
                alt570=1;
            }
            switch (alt570) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyBlockParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_body_2_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getMethodParamsReturnAndBodyRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_2_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4GetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4GetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4GetterDeclaration=ruleN4GetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4GetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_GetterHeader_2 = null;
        EObject lv_body_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop571:
            do {
                int alt571=2;
                int LA571_0 = input.LA(1);
                if ( ((LA571_0>=Protected && LA571_0<=Abstract)||LA571_0==External||(LA571_0>=Private && LA571_0<=Project)||LA571_0==Public||LA571_0==Static||LA571_0==Const) ) {
                    alt571=1;
                }
                switch (alt571) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_155);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop571;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_156);
            this_GetterHeader_2=ruleGetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt572=2;
            int LA572_0 = input.LA(1);
            if ( (LA572_0==LeftCurlyBracket) && (synpred340_InternalN4JSParser())) {
                alt572=1;
            }
            switch (alt572) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_100);
                    lv_body_3_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt573=2;
            int LA573_0 = input.LA(1);
            if ( (LA573_0==Semicolon) ) {
                alt573=1;
            }
            switch (alt573) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4GetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject this_GetterHeader_2 = null;
        EObject lv_body_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4GetterDeclarationAccess().getN4GetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop574:
            do {
                int alt574=2;
                int LA574_0 = input.LA(1);
                if ( ((LA574_0>=Protected && LA574_0<=Abstract)||LA574_0==External||(LA574_0>=Private && LA574_0<=Project)||LA574_0==Public||LA574_0==Static||LA574_0==Const) ) {
                    alt574=1;
                }
                switch (alt574) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_155);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop574;
                }
            } while (true);
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getN4GetterDeclarationRule());
              					}
              					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_156);
            this_GetterHeader_2=norm1_GetterHeader(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_GetterHeader_2;
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt575=2;
            int LA575_0 = input.LA(1);
            if ( (LA575_0==LeftCurlyBracket) && (synpred342_InternalN4JSParser())) {
                alt575=1;
            }
            switch (alt575) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4GetterDeclarationAccess().getBodyBlockParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_100);
                    lv_body_3_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4GetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_3_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt576=2;
            int LA576_0 = input.LA(1);
            if ( (LA576_0==Semicolon) ) {
                alt576=1;
            }
            switch (alt576) {
                case 1 :
                    {
                    otherlv_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleGetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_declaredOptional_2_0=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_declaredName_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_5 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Get,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_98);
            lv_declaredName_1_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_1_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt577=2;
            int LA577_0 = input.LA(1);
            if ( (LA577_0==QuestionMark) ) {
                alt577=1;
            }
            switch (alt577) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_2_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_2_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_2_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
            }
            int alt578=2;
            int LA578_0 = input.LA(1);
            if ( (LA578_0==Colon) ) {
                alt578=1;
            }
            switch (alt578) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_GetterHeader(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token lv_declaredOptional_2_0=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_declaredName_1_0 = null;
        EObject this_ColonSepDeclaredTypeRef_5 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Get,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getGetterHeaderAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_98);
            lv_declaredName_1_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getGetterHeaderRule());
              					}
              					set(
              						current,
              						"declaredName",
              						lv_declaredName_1_0,
              						"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt579=2;
            int LA579_0 = input.LA(1);
            if ( (LA579_0==QuestionMark) ) {
                alt579=1;
            }
            switch (alt579) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_2_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_2_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getGetterHeaderRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_2_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
            }
            otherlv_4=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
            }
            int alt580=2;
            int LA580_0 = input.LA(1);
            if ( (LA580_0==Colon) ) {
                alt580=1;
            }
            switch (alt580) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getGetterHeaderRule());
                      				}
                      				newCompositeNode(grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_5());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepDeclaredTypeRef_5=ruleColonSepDeclaredTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepDeclaredTypeRef_5;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleN4SetterDeclaration = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4SetterDeclarationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4SetterDeclaration=ruleN4SetterDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4SetterDeclaration; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleN4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_fpar_6_0 = null;
        EObject lv_body_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop581:
            do {
                int alt581=2;
                int LA581_0 = input.LA(1);
                if ( ((LA581_0>=Protected && LA581_0<=Abstract)||LA581_0==External||(LA581_0>=Private && LA581_0<=Project)||LA581_0==Public||LA581_0==Static||LA581_0==Const) ) {
                    alt581=1;
                }
                switch (alt581) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_157);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop581;
                }
            } while (true);
            otherlv_2=(Token)match(input,Set,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
            }
            pushFollow(FOLLOW_98);
            lv_declaredName_3_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt582=2;
            int LA582_0 = input.LA(1);
            if ( (LA582_0==QuestionMark) ) {
                alt582=1;
            }
            switch (alt582) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_4_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_69);
            lv_fpar_6_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_156); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt583=2;
            int LA583_0 = input.LA(1);
            if ( (LA583_0==LeftCurlyBracket) && (synpred347_InternalN4JSParser())) {
                alt583=1;
            }
            switch (alt583) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                    }
                    pushFollow(FOLLOW_100);
                    lv_body_8_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt584=2;
            int LA584_0 = input.LA(1);
            if ( (LA584_0==Semicolon) ) {
                alt584=1;
            }
            switch (alt584) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_N4SetterDeclaration() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        Token lv_declaredOptional_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Enumerator lv_declaredModifiers_1_0 = null;
        EObject lv_declaredName_3_0 = null;
        EObject lv_fpar_6_0 = null;
        EObject lv_body_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getN4SetterDeclarationAccess().getN4SetterDeclarationAction_0_0_0(),
              							current);
            }
            }
            loop585:
            do {
                int alt585=2;
                int LA585_0 = input.LA(1);
                if ( ((LA585_0>=Protected && LA585_0<=Abstract)||LA585_0==External||(LA585_0>=Private && LA585_0<=Project)||LA585_0==Public||LA585_0==Static||LA585_0==Const) ) {
                    alt585=1;
                }
                switch (alt585) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredModifiersN4ModifierEnumRuleCall_0_0_1_0());
            	    }
            	    pushFollow(FOLLOW_157);
            	    lv_declaredModifiers_1_0=ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
            	      							}
            	      							add(
            	      								current,
            	      								"declaredModifiers",
            	      								lv_declaredModifiers_1_0,
            	      								"org.eclipse.n4js.N4JS.N4Modifier");
            	      							afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop585;
                }
            } while (true);
            otherlv_2=(Token)match(input,Set,FOLLOW_97); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0());
            }
            pushFollow(FOLLOW_98);
            lv_declaredName_3_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              							}
              							set(
              								current,
              								"declaredName",
              								lv_declaredName_3_0,
              								"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt586=2;
            int LA586_0 = input.LA(1);
            if ( (LA586_0==QuestionMark) ) {
                alt586=1;
            }
            switch (alt586) {
                case 1 :
                    {
                    {
                    lv_declaredOptional_4_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_declaredOptional_4_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					setWithLastConsumed(current, "declaredOptional", lv_declaredOptional_4_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_5=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getFparFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_69);
            lv_fpar_6_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_6_0,
              						"org.eclipse.n4js.N4JS.FormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_7=(Token)match(input,RightParenthesis,FOLLOW_156); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt587=2;
            int LA587_0 = input.LA(1);
            if ( (LA587_0==LeftCurlyBracket) && (synpred350_InternalN4JSParser())) {
                alt587=1;
            }
            switch (alt587) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getN4SetterDeclarationAccess().getBodyBlockParserRuleCall_5_0());
                    }
                    pushFollow(FOLLOW_100);
                    lv_body_8_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getN4SetterDeclarationRule());
                      					}
                      					set(
                      						current,
                      						"body",
                      						lv_body_8_0,
                      						"org.eclipse.n4js.N4JS.Block");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            int alt588=2;
            int LA588_0 = input.LA(1);
            if ( (LA588_0==Semicolon) ) {
                alt588=1;
            }
            switch (alt588) {
                case 1 :
                    {
                    otherlv_9=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_9, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingPattern=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject this_ObjectBindingPattern_0 = null;
        EObject this_ArrayBindingPattern_1 = null;
        	enterRule();
        try {
            {
            int alt589=2;
            int LA589_0 = input.LA(1);
            if ( (LA589_0==LeftCurlyBracket) ) {
                alt589=1;
            }
            else if ( (LA589_0==LeftSquareBracket) ) {
                alt589=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 589, 0, input);
                throw nvae;
            }
            switch (alt589) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=ruleObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=ruleArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingPattern() throws RecognitionException {
        EObject current = null;
        EObject this_ObjectBindingPattern_0 = null;
        EObject this_ArrayBindingPattern_1 = null;
        	enterRule();
        try {
            {
            int alt590=2;
            int LA590_0 = input.LA(1);
            if ( (LA590_0==LeftCurlyBracket) ) {
                alt590=1;
            }
            else if ( (LA590_0==LeftSquareBracket) ) {
                alt590=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 590, 0, input);
                throw nvae;
            }
            switch (alt590) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ObjectBindingPattern_0=norm1_ObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ObjectBindingPattern_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayBindingPattern_1=norm1_ArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayBindingPattern_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleObjectBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getObjectBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleObjectBindingPattern=ruleObjectBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleObjectBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;
        EObject lv_properties_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getObjectBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_165); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt592=2;
            int LA592_0 = input.LA(1);
            if ( ((LA592_0>=Intersection && LA592_0<=With)||(LA592_0>=For && LA592_0<=Var)||(LA592_0>=As && LA592_0<=Of)||(LA592_0>=CommercialAt && LA592_0<=LeftSquareBracket)||LA592_0==RULE_IDENTIFIER||LA592_0==RULE_INT||LA592_0==RULE_DOUBLE||(LA592_0>=RULE_BINARY_INT && LA592_0<=RULE_OCTAL_INT)||(LA592_0>=RULE_HEX_INT && LA592_0<=RULE_SCIENTIFIC_INT)||LA592_0==RULE_STRING) ) {
                alt592=1;
            }
            switch (alt592) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_properties_2_0=ruleBindingProperty();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop591:
                    do {
                        int alt591=2;
                        int LA591_0 = input.LA(1);
                        if ( (LA591_0==Comma) ) {
                            alt591=1;
                        }
                        switch (alt591) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_166); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_properties_4_0=ruleBindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop591;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ObjectBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_properties_2_0 = null;
        EObject lv_properties_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getObjectBindingPatternAccess().getObjectBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_165); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt594=2;
            int LA594_0 = input.LA(1);
            if ( ((LA594_0>=Intersection && LA594_0<=With)||(LA594_0>=For && LA594_0<=Var)||(LA594_0>=As && LA594_0<=Of)||(LA594_0>=CommercialAt && LA594_0<=LeftSquareBracket)||LA594_0==RULE_IDENTIFIER||LA594_0==RULE_INT||LA594_0==RULE_DOUBLE||(LA594_0>=RULE_BINARY_INT && LA594_0<=RULE_OCTAL_INT)||(LA594_0>=RULE_HEX_INT && LA594_0<=RULE_SCIENTIFIC_INT)||LA594_0==RULE_STRING) ) {
                alt594=1;
            }
            switch (alt594) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_0_0());
                    }
                    pushFollow(FOLLOW_16);
                    lv_properties_2_0=norm1_BindingProperty();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"properties",
                      							lv_properties_2_0,
                      							"org.eclipse.n4js.N4JS.BindingProperty");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop593:
                    do {
                        int alt593=2;
                        int LA593_0 = input.LA(1);
                        if ( (LA593_0==Comma) ) {
                            alt593=1;
                        }
                        switch (alt593) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_166); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_3, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getObjectBindingPatternAccess().getPropertiesBindingPropertyParserRuleCall_2_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_16);
                    	    lv_properties_4_0=norm1_BindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getObjectBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"properties",
                    	      								lv_properties_4_0,
                    	      								"org.eclipse.n4js.N4JS.BindingProperty");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop593;
                        }
                    } while (true);
                    }
                    break;
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayBindingPattern = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayBindingPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayBindingPattern=ruleArrayBindingPattern();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayBindingPattern; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getArrayBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_167); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop595:
            do {
                int alt595=2;
                int LA595_0 = input.LA(1);
                if ( (LA595_0==Comma) ) {
                    alt595=1;
                }
                switch (alt595) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_167);
            	    lv_elements_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop595;
                }
            } while (true);
            int alt600=2;
            int LA600_0 = input.LA(1);
            if ( ((LA600_0>=Intersection && LA600_0<=Implements)||(LA600_0>=Promisify && LA600_0<=Abstract)||LA600_0==External||(LA600_0>=Private && LA600_0<=Project)||LA600_0==Public||LA600_0==Static||LA600_0==Target||(LA600_0>=Async && LA600_0<=Await)||LA600_0==Union||(LA600_0>=Yield && LA600_0<=This)||LA600_0==From||LA600_0==Type||LA600_0==FullStopFullStopFullStop||(LA600_0>=Get && LA600_0<=Let)||(LA600_0>=Out && LA600_0<=Set)||LA600_0==As||LA600_0==Of||(LA600_0>=CommercialAt && LA600_0<=LeftSquareBracket)||LA600_0==LeftCurlyBracket||LA600_0==RULE_IDENTIFIER) ) {
                alt600=1;
            }
            switch (alt600) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_92);
                    lv_elements_3_0=ruleBindingRestElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop597:
                    do {
                        int alt597=2;
                        alt597 = dfa597.predict(input);
                        switch (alt597) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_168); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop596:
                    	    do {
                    	        int alt596=2;
                    	        int LA596_0 = input.LA(1);
                    	        if ( (LA596_0==Comma) ) {
                    	            alt596=1;
                    	        }
                    	        switch (alt596) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_168);
                    	    	    lv_elements_5_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop596;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_92);
                    	    lv_elements_6_0=ruleBindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop597;
                        }
                    } while (true);
                    int alt599=2;
                    int LA599_0 = input.LA(1);
                    if ( (LA599_0==Comma) ) {
                        alt599=1;
                    }
                    switch (alt599) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_92); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop598:
                            do {
                                int alt598=2;
                                int LA598_0 = input.LA(1);
                                if ( (LA598_0==Comma) ) {
                                    alt598=1;
                                }
                                switch (alt598) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_92);
                            	    lv_elements_8_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop598;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_ArrayBindingPattern() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_4=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_elements_2_0 = null;
        EObject lv_elements_3_0 = null;
        EObject lv_elements_5_0 = null;
        EObject lv_elements_6_0 = null;
        EObject lv_elements_8_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getArrayBindingPatternAccess().getArrayBindingPatternAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_167); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop601:
            do {
                int alt601=2;
                int LA601_0 = input.LA(1);
                if ( (LA601_0==Comma) ) {
                    alt601=1;
                }
                switch (alt601) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_167);
            	    lv_elements_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
            	      					}
            	      					add(
            	      						current,
            	      						"elements",
            	      						lv_elements_2_0,
            	      						"org.eclipse.n4js.N4JS.Elision");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop601;
                }
            } while (true);
            int alt606=2;
            int LA606_0 = input.LA(1);
            if ( ((LA606_0>=Intersection && LA606_0<=Implements)||(LA606_0>=Promisify && LA606_0<=Abstract)||LA606_0==External||(LA606_0>=Private && LA606_0<=Project)||LA606_0==Public||LA606_0==Static||LA606_0==Target||(LA606_0>=Async && LA606_0<=Await)||LA606_0==Union||LA606_0==This||LA606_0==From||LA606_0==Type||LA606_0==FullStopFullStopFullStop||(LA606_0>=Get && LA606_0<=Let)||(LA606_0>=Out && LA606_0<=Set)||LA606_0==As||LA606_0==Of||(LA606_0>=CommercialAt && LA606_0<=LeftSquareBracket)||LA606_0==LeftCurlyBracket||LA606_0==RULE_IDENTIFIER) ) {
                alt606=1;
            }
            switch (alt606) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_0_0());
                    }
                    pushFollow(FOLLOW_92);
                    lv_elements_3_0=norm1_BindingRestElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                      						}
                      						add(
                      							current,
                      							"elements",
                      							lv_elements_3_0,
                      							"org.eclipse.n4js.N4JS.BindingRestElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop603:
                    do {
                        int alt603=2;
                        alt603 = dfa603.predict(input);
                        switch (alt603) {
                    	case 1 :
                    	    {
                    	    otherlv_4=(Token)match(input,Comma,FOLLOW_168); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_4, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop602:
                    	    do {
                    	        int alt602=2;
                    	        int LA602_0 = input.LA(1);
                    	        if ( (LA602_0==Comma) ) {
                    	            alt602=1;
                    	        }
                    	        switch (alt602) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_1_1_0());
                    	    	    }
                    	    	    pushFollow(FOLLOW_168);
                    	    	    lv_elements_5_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      							if (current==null) {
                    	    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	    	      							}
                    	    	      							add(
                    	    	      								current,
                    	    	      								"elements",
                    	    	      								lv_elements_5_0,
                    	    	      								"org.eclipse.n4js.N4JS.Elision");
                    	    	      							afterParserOrEnumRuleCall();
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop602;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsBindingRestElementParserRuleCall_3_1_2_0());
                    	    }
                    	    pushFollow(FOLLOW_92);
                    	    lv_elements_6_0=norm1_BindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"elements",
                    	      								lv_elements_6_0,
                    	      								"org.eclipse.n4js.N4JS.BindingRestElement");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop603;
                        }
                    } while (true);
                    int alt605=2;
                    int LA605_0 = input.LA(1);
                    if ( (LA605_0==Comma) ) {
                        alt605=1;
                    }
                    switch (alt605) {
                        case 1 :
                            {
                            otherlv_7=(Token)match(input,Comma,FOLLOW_92); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_7, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop604:
                            do {
                                int alt604=2;
                                int LA604_0 = input.LA(1);
                                if ( (LA604_0==Comma) ) {
                                    alt604=1;
                                }
                                switch (alt604) {
                            	case 1 :
                            	    {
                            	    {
                            	    if ( state.backtracking==0 ) {
                            	      							newCompositeNode(grammarAccess.getArrayBindingPatternAccess().getElementsElisionParserRuleCall_3_2_1_0());
                            	    }
                            	    pushFollow(FOLLOW_92);
                            	    lv_elements_8_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {
                            	      							if (current==null) {
                            	      								current = createModelElementForParent(grammarAccess.getArrayBindingPatternRule());
                            	      							}
                            	      							add(
                            	      								current,
                            	      								"elements",
                            	      								lv_elements_8_0,
                            	      								"org.eclipse.n4js.N4JS.Elision");
                            	      							afterParserOrEnumRuleCall();
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop604;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            otherlv_9=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingProperty() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingProperty = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingPropertyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingProperty=ruleBindingProperty();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingProperty; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingProperty() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;
        EObject lv_value_2_0 = null;
        EObject lv_value_3_0 = null;
        	enterRule();
        try {
            {
            int alt607=2;
            alt607 = dfa607.predict(input);
            switch (alt607) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_declaredName_0_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_1=(Token)match(input,Colon,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=ruleBindingElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=ruleSingleNameBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingProperty() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        EObject lv_declaredName_0_0 = null;
        EObject lv_value_2_0 = null;
        EObject lv_value_3_0 = null;
        	enterRule();
        try {
            {
            int alt608=2;
            alt608 = dfa608.predict(input);
            switch (alt608) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getBindingPropertyAccess().getDeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_declaredName_0_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      								}
                      								set(
                      									current,
                      									"declaredName",
                      									lv_declaredName_0_0,
                      									"org.eclipse.n4js.N4JS.LiteralOrComputedPropertyName");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_1=(Token)match(input,Colon,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueBindingElementParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_2_0=norm1_BindingElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      						}
                      						set(
                      							current,
                      							"value",
                      							lv_value_2_0,
                      							"org.eclipse.n4js.N4JS.BindingElement");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingPropertyAccess().getValueSingleNameBindingParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_value_3_0=norm1_SingleNameBinding();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingPropertyRule());
                      					}
                      					set(
                      						current,
                      						"value",
                      						lv_value_3_0,
                      						"org.eclipse.n4js.N4JS.SingleNameBinding");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleSingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleSingleNameBinding = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSingleNameBindingRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSingleNameBinding=ruleSingleNameBinding();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSingleNameBinding; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleSingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm1_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm3_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm2_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm5_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm3_SingleNameBinding() throws RecognitionException {
        EObject current = null;
        EObject lv_varDecl_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getSingleNameBindingAccess().getVarDeclVariableDeclarationParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_varDecl_0_0=norm7_VariableDeclaration();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSingleNameBindingRule());
              				}
              				set(
              					current,
              					"varDecl",
              					lv_varDecl_0_0,
              					"org.eclipse.n4js.N4JS.VariableDeclaration");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingElement=ruleBindingElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElement() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementImpl_0 = null;
        	enterRule();
        try {
            {
            if ( state.backtracking==0 ) {
              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=ruleBindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElement() throws RecognitionException {
        EObject current = null;
        EObject this_BindingElementImpl_0 = null;
        	enterRule();
        try {
            {
            if ( state.backtracking==0 ) {
              		if (current==null) {
              			current = createModelElement(grammarAccess.getBindingElementRule());
              		}
              		newCompositeNode(grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_0=norm1_BindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current = this_BindingElementImpl_0;
              		afterParserOrEnumRuleCall();
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBindingRestElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBindingRestElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingRestElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingRestElement=ruleBindingRestElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingRestElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingRestElement() throws RecognitionException {
        EObject current = null;
        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;
        	enterRule();
        try {
            {
            {
            int alt609=2;
            int LA609_0 = input.LA(1);
            if ( (LA609_0==FullStopFullStopFullStop) ) {
                alt609=1;
            }
            switch (alt609) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", lv_rest_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=ruleBindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingRestElement() throws RecognitionException {
        EObject current = null;
        Token lv_rest_0_0=null;
        EObject this_BindingElementImpl_1 = null;
        	enterRule();
        try {
            {
            {
            int alt610=2;
            int LA610_0 = input.LA(1);
            if ( (LA610_0==FullStopFullStopFullStop) ) {
                alt610=1;
            }
            switch (alt610) {
                case 1 :
                    {
                    {
                    lv_rest_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_57); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_rest_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getBindingRestElementRule());
                      					}
                      					setWithLastConsumed(current, "rest", lv_rest_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getBindingRestElementRule());
              			}
              			newCompositeNode(grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1());
            }
            pushFollow(FOLLOW_2);
            this_BindingElementImpl_1=norm1_BindingElementImpl(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_BindingElementImpl_1;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        EObject lv_varDecl_3_0 = null;
        	enterRule();
        try {
            {
            int alt612=2;
            int LA612_0 = input.LA(1);
            if ( (LA612_0==LeftCurlyBracket) && (synpred353_InternalN4JSParser())) {
                alt612=1;
            }
            else if ( (LA612_0==LeftSquareBracket) && (synpred353_InternalN4JSParser())) {
                alt612=1;
            }
            else if ( ((LA612_0>=Intersection && LA612_0<=Implements)||(LA612_0>=Promisify && LA612_0<=Abstract)||LA612_0==External||(LA612_0>=Private && LA612_0<=Project)||LA612_0==Public||LA612_0==Static||LA612_0==Target||(LA612_0>=Async && LA612_0<=Await)||LA612_0==Union||(LA612_0>=Yield && LA612_0<=This)||LA612_0==From||LA612_0==Type||(LA612_0>=Get && LA612_0<=Let)||(LA612_0>=Out && LA612_0<=Set)||LA612_0==As||LA612_0==Of||LA612_0==CommercialAt||LA612_0==RULE_IDENTIFIER) ) {
                alt612=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 612, 0, input);
                throw nvae;
            }
            switch (alt612) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_nestedPattern_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt611=2;
                    int LA611_0 = input.LA(1);
                    if ( (LA611_0==EqualsSign) ) {
                        alt611=1;
                    }
                    switch (alt611) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_BindingElementImpl(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_nestedPattern_0_0 = null;
        EObject lv_expression_2_0 = null;
        EObject lv_varDecl_3_0 = null;
        	enterRule();
        try {
            {
            int alt614=2;
            int LA614_0 = input.LA(1);
            if ( (LA614_0==LeftCurlyBracket) && (synpred354_InternalN4JSParser())) {
                alt614=1;
            }
            else if ( (LA614_0==LeftSquareBracket) && (synpred354_InternalN4JSParser())) {
                alt614=1;
            }
            else if ( ((LA614_0>=Intersection && LA614_0<=Implements)||(LA614_0>=Promisify && LA614_0<=Abstract)||LA614_0==External||(LA614_0>=Private && LA614_0<=Project)||LA614_0==Public||LA614_0==Static||LA614_0==Target||(LA614_0>=Async && LA614_0<=Await)||LA614_0==Union||LA614_0==This||LA614_0==From||LA614_0==Type||(LA614_0>=Get && LA614_0<=Let)||(LA614_0>=Out && LA614_0<=Set)||LA614_0==As||LA614_0==Of||LA614_0==CommercialAt||LA614_0==RULE_IDENTIFIER) ) {
                alt614=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 614, 0, input);
                throw nvae;
            }
            switch (alt614) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getBindingElementImplAccess().getNestedPatternBindingPatternParserRuleCall_0_0_0_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_nestedPattern_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      							}
                      							set(
                      								current,
                      								"nestedPattern",
                      								lv_nestedPattern_0_0,
                      								"org.eclipse.n4js.N4JS.BindingPattern");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    int alt613=2;
                    int LA613_0 = input.LA(1);
                    if ( (LA613_0==EqualsSign) ) {
                        alt613=1;
                    }
                    switch (alt613) {
                        case 1 :
                            {
                            otherlv_1=(Token)match(input,EqualsSign,FOLLOW_52); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					newLeafNode(otherlv_1, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getBindingElementImplAccess().getExpressionAssignmentExpressionParserRuleCall_0_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_expression_2_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                              							}
                              							set(
                              								current,
                              								"expression",
                              								lv_expression_2_0,
                              								"org.eclipse.n4js.N4JS.AssignmentExpression");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getBindingElementImplAccess().getVarDeclVariableDeclarationParserRuleCall_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_varDecl_3_0=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getBindingElementImplRule());
                      					}
                      					set(
                      						current,
                      						"varDecl",
                      						lv_varDecl_3_0,
                      						"org.eclipse.n4js.N4JS.VariableDeclaration");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleElision() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleElision = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getElisionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleElision=ruleElision();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleElision; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleElision() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getElisionAccess().getBindingElementAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteralOrComputedPropertyName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralOrComputedPropertyName=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralOrComputedPropertyName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;
        AntlrDatatypeRuleToken lv_literalName_2_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            int alt615=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt615=1;
                }
                break;
            case RULE_STRING:
                {
                alt615=2;
                }
                break;
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt615=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt615=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 615, 0, input);
                throw nvae;
            }
            switch (alt615) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.TypeExpressions.STRING");
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                    }
                    pushFollow(FOLLOW_115);
                    lv_expression_4_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        EObject current = null;
        Token lv_literalName_1_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_literalName_0_0 = null;
        AntlrDatatypeRuleToken lv_literalName_2_0 = null;
        EObject lv_expression_4_0 = null;
        	enterRule();
        try {
            {
            int alt616=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt616=1;
                }
                break;
            case RULE_STRING:
                {
                alt616=2;
                }
                break;
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt616=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt616=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 616, 0, input);
                throw nvae;
            }
            switch (alt616) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameIdentifierNameParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_0_0,
                      						"org.eclipse.n4js.TypeExpressions.IdentifierName");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_literalName_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_literalName_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameSTRINGTerminalRuleCall_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					setWithLastConsumed(
                      						current,
                      						"literalName",
                      						lv_literalName_1_0,
                      						"org.eclipse.n4js.TypeExpressions.STRING");
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameNumericLiteralAsStringParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_literalName_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      					}
                      					set(
                      						current,
                      						"literalName",
                      						lv_literalName_2_0,
                      						"org.eclipse.n4js.N4JS.NumericLiteralAsString");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    otherlv_3=(Token)match(input,LeftSquareBracket,FOLLOW_52); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignmentExpressionParserRuleCall_3_1_0());
                    }
                    pushFollow(FOLLOW_115);
                    lv_expression_4_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getLiteralOrComputedPropertyNameRule());
                      						}
                      						set(
                      							current,
                      							"expression",
                      							lv_expression_4_0,
                      							"org.eclipse.n4js.N4JS.AssignmentExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElement() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElement = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElement=ruleJSXElement();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElement() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        EObject lv_jsxElementName_1_0 = null;
        EObject lv_jsxAttributes_2_0 = null;
        EObject lv_jsxChildren_4_0 = null;
        EObject lv_jsxClosingName_7_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXElementAccess().getJsxElementNameJSXElementNameParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_169);
            lv_jsxElementName_1_0=ruleJSXElementName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXElementRule());
              					}
              					set(
              						current,
              						"jsxElementName",
              						lv_jsxElementName_1_0,
              						"org.eclipse.n4js.N4JS.JSXElementName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop617:
            do {
                int alt617=2;
                int LA617_0 = input.LA(1);
                if ( ((LA617_0>=Intersection && LA617_0<=With)||(LA617_0>=For && LA617_0<=Var)||(LA617_0>=As && LA617_0<=Of)||LA617_0==LeftCurlyBracket||LA617_0==RULE_IDENTIFIER) ) {
                    alt617=1;
                }
                switch (alt617) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getJSXElementAccess().getJsxAttributesJSXAttributeParserRuleCall_2_0());
            	    }
            	    pushFollow(FOLLOW_169);
            	    lv_jsxAttributes_2_0=ruleJSXAttribute();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getJSXElementRule());
            	      					}
            	      					add(
            	      						current,
            	      						"jsxAttributes",
            	      						lv_jsxAttributes_2_0,
            	      						"org.eclipse.n4js.N4JS.JSXAttribute");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop617;
                }
            } while (true);
            int alt619=2;
            int LA619_0 = input.LA(1);
            if ( (LA619_0==GreaterThanSign) ) {
                alt619=1;
            }
            else if ( (LA619_0==Solidus) ) {
                alt619=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 619, 0, input);
                throw nvae;
            }
            switch (alt619) {
                case 1 :
                    {
                    {
                    otherlv_3=(Token)match(input,GreaterThanSign,FOLLOW_170); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_3, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0());
                    }
                    loop618:
                    do {
                        int alt618=2;
                        int LA618_0 = input.LA(1);
                        if ( (LA618_0==LessThanSign) ) {
                            int LA618_1 = input.LA(2);
                            if ( ((LA618_1>=Intersection && LA618_1<=Implements)||(LA618_1>=Promisify && LA618_1<=Abstract)||LA618_1==External||(LA618_1>=Private && LA618_1<=Project)||LA618_1==Public||LA618_1==Static||LA618_1==Target||(LA618_1>=Async && LA618_1<=Await)||LA618_1==Union||(LA618_1>=Yield && LA618_1<=This)||LA618_1==From||LA618_1==Type||(LA618_1>=Get && LA618_1<=Let)||(LA618_1>=Out && LA618_1<=Set)||LA618_1==As||LA618_1==Of||LA618_1==GreaterThanSign||LA618_1==RULE_IDENTIFIER) ) {
                                alt618=1;
                            }
                        }
                        else if ( (LA618_0==LeftCurlyBracket) ) {
                            alt618=1;
                        }
                        switch (alt618) {
                    	case 1 :
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getJSXElementAccess().getJsxChildrenJSXChildParserRuleCall_3_0_1_0());
                    	    }
                    	    pushFollow(FOLLOW_170);
                    	    lv_jsxChildren_4_0=ruleJSXChild();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getJSXElementRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"jsxChildren",
                    	      								lv_jsxChildren_4_0,
                    	      								"org.eclipse.n4js.N4JS.JSXChild");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop618;
                        }
                    } while (true);
                    otherlv_5=(Token)match(input,LessThanSign,FOLLOW_171); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_3_0_2());
                    }
                    otherlv_6=(Token)match(input,Solidus,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_6, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_0_3());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getJSXElementAccess().getJsxClosingNameJSXElementNameParserRuleCall_3_0_4_0());
                    }
                    pushFollow(FOLLOW_121);
                    lv_jsxClosingName_7_0=ruleJSXElementName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getJSXElementRule());
                      							}
                      							set(
                      								current,
                      								"jsxClosingName",
                      								lv_jsxClosingName_7_0,
                      								"org.eclipse.n4js.N4JS.JSXElementName");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_8=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_8, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_5());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_9=(Token)match(input,Solidus,FOLLOW_121); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_9, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0());
                    }
                    otherlv_10=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_10, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXFragment() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXFragment = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXFragmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXFragment=ruleJSXFragment();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXFragment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXFragment() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_jsxChildren_3_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getJSXFragmentAccess().getJSXFragmentAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LessThanSign,FOLLOW_121); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_1());
            }
            otherlv_2=(Token)match(input,GreaterThanSign,FOLLOW_170); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_2());
            }
            loop620:
            do {
                int alt620=2;
                int LA620_0 = input.LA(1);
                if ( (LA620_0==LessThanSign) ) {
                    int LA620_1 = input.LA(2);
                    if ( ((LA620_1>=Intersection && LA620_1<=Implements)||(LA620_1>=Promisify && LA620_1<=Abstract)||LA620_1==External||(LA620_1>=Private && LA620_1<=Project)||LA620_1==Public||LA620_1==Static||LA620_1==Target||(LA620_1>=Async && LA620_1<=Await)||LA620_1==Union||(LA620_1>=Yield && LA620_1<=This)||LA620_1==From||LA620_1==Type||(LA620_1>=Get && LA620_1<=Let)||(LA620_1>=Out && LA620_1<=Set)||LA620_1==As||LA620_1==Of||LA620_1==GreaterThanSign||LA620_1==RULE_IDENTIFIER) ) {
                        alt620=1;
                    }
                }
                else if ( (LA620_0==LeftCurlyBracket) ) {
                    alt620=1;
                }
                switch (alt620) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					newCompositeNode(grammarAccess.getJSXFragmentAccess().getJsxChildrenJSXChildParserRuleCall_3_0());
            	    }
            	    pushFollow(FOLLOW_170);
            	    lv_jsxChildren_3_0=ruleJSXChild();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      					if (current==null) {
            	      						current = createModelElementForParent(grammarAccess.getJSXFragmentRule());
            	      					}
            	      					add(
            	      						current,
            	      						"jsxChildren",
            	      						lv_jsxChildren_3_0,
            	      						"org.eclipse.n4js.N4JS.JSXChild");
            	      					afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop620;
                }
            } while (true);
            otherlv_4=(Token)match(input,LessThanSign,FOLLOW_171); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_4());
            }
            otherlv_5=(Token)match(input,Solidus,FOLLOW_121); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getJSXFragmentAccess().getSolidusKeyword_5());
            }
            otherlv_6=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_6());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXChild() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXChild = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXChildRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXChild=ruleJSXChild();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXChild; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXChild() throws RecognitionException {
        EObject current = null;
        EObject this_JSXElement_0 = null;
        EObject this_JSXFragment_1 = null;
        EObject this_JSXExpression_2 = null;
        	enterRule();
        try {
            {
            int alt621=3;
            int LA621_0 = input.LA(1);
            if ( (LA621_0==LessThanSign) ) {
                int LA621_1 = input.LA(2);
                if ( (LA621_1==GreaterThanSign) ) {
                    alt621=2;
                }
                else if ( ((LA621_1>=Intersection && LA621_1<=Implements)||(LA621_1>=Promisify && LA621_1<=Abstract)||LA621_1==External||(LA621_1>=Private && LA621_1<=Project)||LA621_1==Public||LA621_1==Static||LA621_1==Target||(LA621_1>=Async && LA621_1<=Await)||LA621_1==Union||(LA621_1>=Yield && LA621_1<=This)||LA621_1==From||LA621_1==Type||(LA621_1>=Get && LA621_1<=Let)||(LA621_1>=Out && LA621_1<=Set)||LA621_1==As||LA621_1==Of||LA621_1==RULE_IDENTIFIER) ) {
                    alt621=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 621, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA621_0==LeftCurlyBracket) ) {
                alt621=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 621, 0, input);
                throw nvae;
            }
            switch (alt621) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXElement_0=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXElement_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXFragmentParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXFragment_1=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXFragment_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXExpression_2=ruleJSXExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXExpression_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXExpression=ruleJSXExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject lv_expression_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXExpressionAccess().getExpressionAssignmentExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_29);
            lv_expression_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXExpressionRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_1_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElementName() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElementName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElementName=ruleJSXElementName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElementName; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElementName() throws RecognitionException {
        EObject current = null;
        EObject lv_expression_0_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getJSXElementNameAccess().getExpressionJSXElementNameExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_2);
            lv_expression_0_0=ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getJSXElementNameRule());
              				}
              				set(
              					current,
              					"expression",
              					lv_expression_0_0,
              					"org.eclipse.n4js.N4JS.JSXElementNameExpression");
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXElementNameExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXElementNameExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXElementNameExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXElementNameExpression=ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXElementNameExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXElementNameExpression() throws RecognitionException {
        EObject current = null;
        EObject this_IdentifierRef_0 = null;
        EObject this_ParameterizedPropertyAccessExpressionTail_2 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0());
            }
            pushFollow(FOLLOW_172);
            this_IdentifierRef_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IdentifierRef_0;
              			afterParserOrEnumRuleCall();
            }
            loop622:
            do {
                int alt622=2;
                int LA622_0 = input.LA(1);
                if ( (LA622_0==QuestionMarkFullStop||LA622_0==FullStop) ) {
                    alt622=1;
                }
                switch (alt622) {
            	case 1 :
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTargetAction_1_0(),
            	      						current);
            	    }
            	    }
            	    if ( state.backtracking==0 ) {
            	      				if (current==null) {
            	      					current = createModelElement(grammarAccess.getJSXElementNameExpressionRule());
            	      				}
            	      				newCompositeNode(grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1());
            	    }
            	    pushFollow(FOLLOW_172);
            	    this_ParameterizedPropertyAccessExpressionTail_2=ruleParameterizedPropertyAccessExpressionTail(current);
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				current = this_ParameterizedPropertyAccessExpressionTail_2;
            	      				afterParserOrEnumRuleCall();
            	    }
            	    }
            	    break;
            	default :
            	    break loop622;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXAttribute=ruleJSXAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXAttribute() throws RecognitionException {
        EObject current = null;
        EObject this_JSXSpreadAttribute_0 = null;
        EObject this_JSXPropertyAttribute_1 = null;
        	enterRule();
        try {
            {
            int alt623=2;
            int LA623_0 = input.LA(1);
            if ( (LA623_0==LeftCurlyBracket) ) {
                alt623=1;
            }
            else if ( ((LA623_0>=Intersection && LA623_0<=With)||(LA623_0>=For && LA623_0<=Var)||(LA623_0>=As && LA623_0<=Of)||LA623_0==RULE_IDENTIFIER) ) {
                alt623=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 623, 0, input);
                throw nvae;
            }
            switch (alt623) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXSpreadAttribute_0=ruleJSXSpreadAttribute();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXSpreadAttribute_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_JSXPropertyAttribute_1=ruleJSXPropertyAttribute();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_JSXPropertyAttribute_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXSpreadAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXSpreadAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXSpreadAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXSpreadAttribute=ruleJSXSpreadAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXSpreadAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXSpreadAttribute() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_expression_2_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_173); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0());
            }
            otherlv_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignmentExpressionParserRuleCall_2_0());
            }
            pushFollow(FOLLOW_29);
            lv_expression_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJSXSpreadAttributeRule());
              					}
              					set(
              						current,
              						"expression",
              						lv_expression_2_0,
              						"org.eclipse.n4js.N4JS.AssignmentExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleJSXIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleJSXIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXIdentifier=ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleJSXIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_INT_3=null;
        Token this_HEX_INT_4=null;
        Token this_BINARY_INT_5=null;
        Token this_OCTAL_INT_6=null;
        Token this_SCIENTIFIC_INT_7=null;
        Token this_LEGACY_OCTAL_INT_8=null;
        AntlrDatatypeRuleToken this_IdentifierName_0 = null;
        AntlrDatatypeRuleToken this_IdentifierName_9 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getJSXIdentifierAccess().getIdentifierNameParserRuleCall_0());
            }
            pushFollow(FOLLOW_174);
            this_IdentifierName_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(this_IdentifierName_0);
            }
            if ( state.backtracking==0 ) {
              			afterParserOrEnumRuleCall();
            }
            loop627:
            do {
                int alt627=2;
                int LA627_0 = input.LA(1);
                if ( (LA627_0==HyphenMinusHyphenMinus||LA627_0==HyphenMinus) ) {
                    alt627=1;
                }
                switch (alt627) {
            	case 1 :
            	    {
            	    int alt624=2;
            	    int LA624_0 = input.LA(1);
            	    if ( (LA624_0==HyphenMinus) ) {
            	        alt624=1;
            	    }
            	    else if ( (LA624_0==HyphenMinusHyphenMinus) ) {
            	        alt624=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 624, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt624) {
            	        case 1 :
            	            {
            	            kw=(Token)match(input,HyphenMinus,FOLLOW_175); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getJSXIdentifierAccess().getHyphenMinusKeyword_1_0_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            kw=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_175); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					current.merge(kw);
            	              					newLeafNode(kw, grammarAccess.getJSXIdentifierAccess().getHyphenMinusHyphenMinusKeyword_1_0_1());
            	            }
            	            }
            	            break;
            	    }
            	    int alt626=2;
            	    alt626 = dfa626.predict(input);
            	    switch (alt626) {
            	        case 1 :
            	            {
            	            int alt625=7;
            	            switch ( input.LA(1) ) {
            	            case RULE_INT:
            	                {
            	                alt625=1;
            	                }
            	                break;
            	            case RULE_HEX_INT:
            	                {
            	                alt625=2;
            	                }
            	                break;
            	            case RULE_BINARY_INT:
            	                {
            	                alt625=3;
            	                }
            	                break;
            	            case RULE_OCTAL_INT:
            	                {
            	                alt625=4;
            	                }
            	                break;
            	            case RULE_SCIENTIFIC_INT:
            	                {
            	                alt625=5;
            	                }
            	                break;
            	            case RULE_LEGACY_OCTAL_INT:
            	                {
            	                alt625=6;
            	                }
            	                break;
            	            case Intersection:
            	            case Constructor:
            	            case Implements:
            	            case Instanceof:
            	            case Promisify:
            	            case Interface:
            	            case Namespace:
            	            case Protected:
            	            case Abstract:
            	            case Continue:
            	            case Debugger:
            	            case External:
            	            case Function:
            	            case Default:
            	            case Extends:
            	            case Finally:
            	            case Private:
            	            case Project:
            	            case Delete:
            	            case Export:
            	            case Import:
            	            case Public:
            	            case Return:
            	            case Static:
            	            case Switch:
            	            case Target:
            	            case Typeof:
            	            case Async:
            	            case Await:
            	            case Break:
            	            case Catch:
            	            case Class:
            	            case Const:
            	            case False:
            	            case Super:
            	            case Throw:
            	            case Union:
            	            case While:
            	            case Yield:
            	            case This:
            	            case Case:
            	            case Else:
            	            case Enum:
            	            case From:
            	            case Null:
            	            case This_1:
            	            case True:
            	            case Type:
            	            case Void:
            	            case With:
            	            case For:
            	            case Get:
            	            case Let:
            	            case New:
            	            case Out:
            	            case Set:
            	            case Try:
            	            case Var:
            	            case As:
            	            case Do:
            	            case If:
            	            case In:
            	            case Of:
            	            case RULE_IDENTIFIER:
            	                {
            	                alt625=7;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 625, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt625) {
            	                case 1 :
            	                    {
            	                    this_INT_3=(Token)match(input,RULE_INT,FOLLOW_174); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_INT_3);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_INT_3, grammarAccess.getJSXIdentifierAccess().getINTTerminalRuleCall_1_1_0_0());
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    this_HEX_INT_4=(Token)match(input,RULE_HEX_INT,FOLLOW_174); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_HEX_INT_4);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_HEX_INT_4, grammarAccess.getJSXIdentifierAccess().getHEX_INTTerminalRuleCall_1_1_0_1());
            	                    }
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    this_BINARY_INT_5=(Token)match(input,RULE_BINARY_INT,FOLLOW_174); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_BINARY_INT_5);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_BINARY_INT_5, grammarAccess.getJSXIdentifierAccess().getBINARY_INTTerminalRuleCall_1_1_0_2());
            	                    }
            	                    }
            	                    break;
            	                case 4 :
            	                    {
            	                    this_OCTAL_INT_6=(Token)match(input,RULE_OCTAL_INT,FOLLOW_174); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_OCTAL_INT_6);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_OCTAL_INT_6, grammarAccess.getJSXIdentifierAccess().getOCTAL_INTTerminalRuleCall_1_1_0_3());
            	                    }
            	                    }
            	                    break;
            	                case 5 :
            	                    {
            	                    this_SCIENTIFIC_INT_7=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_174); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_SCIENTIFIC_INT_7);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_SCIENTIFIC_INT_7, grammarAccess.getJSXIdentifierAccess().getSCIENTIFIC_INTTerminalRuleCall_1_1_0_4());
            	                    }
            	                    }
            	                    break;
            	                case 6 :
            	                    {
            	                    this_LEGACY_OCTAL_INT_8=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_174); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_LEGACY_OCTAL_INT_8);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						newLeafNode(this_LEGACY_OCTAL_INT_8, grammarAccess.getJSXIdentifierAccess().getLEGACY_OCTAL_INTTerminalRuleCall_1_1_0_5());
            	                    }
            	                    }
            	                    break;
            	                case 7 :
            	                    {
            	                    if ( state.backtracking==0 ) {
            	                      						newCompositeNode(grammarAccess.getJSXIdentifierAccess().getIdentifierNameParserRuleCall_1_1_0_6());
            	                    }
            	                    pushFollow(FOLLOW_174);
            	                    this_IdentifierName_9=ruleIdentifierName();
            	                    state._fsp--;
            	                    if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {
            	                      						current.merge(this_IdentifierName_9);
            	                    }
            	                    if ( state.backtracking==0 ) {
            	                      						afterParserOrEnumRuleCall();
            	                    }
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop627;
                }
            } while (true);
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleJSXPropertyAttribute() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleJSXPropertyAttribute = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJSXPropertyAttributeRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJSXPropertyAttribute=ruleJSXPropertyAttribute();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJSXPropertyAttribute; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleJSXPropertyAttribute() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        EObject lv_jsxAttributeValue_2_0 = null;
        EObject lv_jsxAttributeValue_3_0 = null;
        EObject lv_jsxAttributeValue_4_0 = null;
        EObject lv_jsxAttributeValue_6_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getJSXPropertyAttributeRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getPropertyIdentifiableElementCrossReference_0_0());
            }
            pushFollow(FOLLOW_63);
            ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt629=2;
            int LA629_0 = input.LA(1);
            if ( (LA629_0==EqualsSign) ) {
                alt629=1;
            }
            switch (alt629) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,EqualsSign,FOLLOW_176); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1_0());
                    }
                    int alt628=4;
                    switch ( input.LA(1) ) {
                    case RULE_STRING:
                        {
                        alt628=1;
                        }
                        break;
                    case LessThanSign:
                        {
                        int LA628_2 = input.LA(2);
                        if ( ((LA628_2>=Intersection && LA628_2<=Implements)||(LA628_2>=Promisify && LA628_2<=Abstract)||LA628_2==External||(LA628_2>=Private && LA628_2<=Project)||LA628_2==Public||LA628_2==Static||LA628_2==Target||(LA628_2>=Async && LA628_2<=Await)||LA628_2==Union||(LA628_2>=Yield && LA628_2<=This)||LA628_2==From||LA628_2==Type||(LA628_2>=Get && LA628_2<=Let)||(LA628_2>=Out && LA628_2<=Set)||LA628_2==As||LA628_2==Of||LA628_2==RULE_IDENTIFIER) ) {
                            alt628=2;
                        }
                        else if ( (LA628_2==GreaterThanSign) ) {
                            alt628=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 628, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LeftCurlyBracket:
                        {
                        alt628=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 628, 0, input);
                        throw nvae;
                    }
                    switch (alt628) {
                        case 1 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueStringLiteralParserRuleCall_1_1_0_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_2_0=ruleStringLiteral();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_2_0,
                              								"org.eclipse.n4js.N4JS.StringLiteral");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueJSXElementParserRuleCall_1_1_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_3_0=ruleJSXElement();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_3_0,
                              								"org.eclipse.n4js.N4JS.JSXElement");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            {
                            if ( state.backtracking==0 ) {
                              							newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_jsxAttributeValue_4_0=ruleJSXFragment();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              							}
                              							set(
                              								current,
                              								"jsxAttributeValue",
                              								lv_jsxAttributeValue_4_0,
                              								"org.eclipse.n4js.N4JS.JSXFragment");
                              							afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            }
                            break;
                        case 4 :
                            {
                            {
                            otherlv_5=(Token)match(input,LeftCurlyBracket,FOLLOW_52); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_5, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_1_1_3_0());
                            }
                            {
                            {
                            if ( state.backtracking==0 ) {
                              								newCompositeNode(grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0());
                            }
                            pushFollow(FOLLOW_29);
                            lv_jsxAttributeValue_6_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              								if (current==null) {
                              									current = createModelElementForParent(grammarAccess.getJSXPropertyAttributeRule());
                              								}
                              								set(
                              									current,
                              									"jsxAttributeValue",
                              									lv_jsxAttributeValue_6_0,
                              									"org.eclipse.n4js.N4JS.AssignmentExpression");
                              								afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            otherlv_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(otherlv_7, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_1_1_3_2());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRef=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRef() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_IntersectionTypeExpression_0 = null;
        EObject lv_typeRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getTypeRefAccess().getIntersectionTypeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_128);
            this_IntersectionTypeExpression_0=ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_IntersectionTypeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt631=2;
            int LA631_0 = input.LA(1);
            if ( (LA631_0==VerticalLine) ) {
                alt631=1;
            }
            switch (alt631) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getTypeRefAccess().getUnionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                    }
                    }
                    int cnt630=0;
                    loop630:
                    do {
                        int alt630=2;
                        int LA630_0 = input.LA(1);
                        if ( (LA630_0==VerticalLine) ) {
                            alt630=1;
                        }
                        switch (alt630) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,VerticalLine,FOLLOW_20); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getTypeRefAccess().getVerticalLineKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getTypeRefAccess().getTypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_128);
                    	    lv_typeRefs_3_0=ruleIntersectionTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getTypeRefRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.TypeExpressions.IntersectionTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt630 >= 1 ) break loop630;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(630, input);
                                throw eee;
                        }
                        cnt630++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntersectionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpression=ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_2=null;
        EObject this_ArrayTypeExpression_0 = null;
        EObject lv_typeRefs_3_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getArrayTypeExpressionParserRuleCall_0());
            }
            pushFollow(FOLLOW_126);
            this_ArrayTypeExpression_0=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_ArrayTypeExpression_0;
              			afterParserOrEnumRuleCall();
            }
            int alt633=2;
            int LA633_0 = input.LA(1);
            if ( (LA633_0==Ampersand) ) {
                alt633=1;
            }
            switch (alt633) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElementAndAdd(
                      						grammarAccess.getIntersectionTypeExpressionAccess().getIntersectionTypeExpressionTypeRefsAction_1_0(),
                      						current);
                    }
                    }
                    int cnt632=0;
                    loop632:
                    do {
                        int alt632=2;
                        int LA632_0 = input.LA(1);
                        if ( (LA632_0==Ampersand) ) {
                            alt632=1;
                        }
                        switch (alt632) {
                    	case 1 :
                    	    {
                    	    otherlv_2=(Token)match(input,Ampersand,FOLLOW_20); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_126);
                    	    lv_typeRefs_3_0=ruleArrayTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"typeRefs",
                    	      								lv_typeRefs_3_0,
                    	      								"org.eclipse.n4js.TypeExpressions.ArrayTypeExpression");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt632 >= 1 ) break loop632;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(632, input);
                                throw eee;
                        }
                        cnt632++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayTypeExpression=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayTypeExpression() throws RecognitionException {
        EObject current = null;
        Token lv_arrayTypeExpression_2_0=null;
        Token otherlv_3=null;
        Token lv_arrayTypeExpression_5_0=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token lv_arrayTypeExpression_11_0=null;
        Token otherlv_12=null;
        Token lv_arrayTypeExpression_14_0=null;
        Token otherlv_15=null;
        Token lv_arrayTypeExpression_18_0=null;
        Token otherlv_19=null;
        EObject lv_declaredTypeArgs_1_0 = null;
        EObject lv_declaredTypeArgs_9_0 = null;
        EObject this_PrimaryTypeExpression_16 = null;
        	enterRule();
        try {
            {
            int alt637=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                alt637=1;
                }
                break;
            case LeftParenthesis:
                {
                switch ( input.LA(2) ) {
                case Intersection:
                case Constructor:
                case Implements:
                case Promisify:
                case Interface:
                case Namespace:
                case Protected:
                case Abstract:
                case External:
                case Default:
                case Private:
                case Project:
                case Public:
                case Static:
                case Target:
                case Async:
                case Await:
                case False:
                case Union:
                case Yield:
                case This:
                case From:
                case This_1:
                case True:
                case Type:
                case Void:
                case FullStopFullStopFullStop:
                case Get:
                case Let:
                case Set:
                case As:
                case Of:
                case LeftParenthesis:
                case RightParenthesis:
                case PlusSign:
                case HyphenMinus:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                case Tilde:
                case RULE_IDENTIFIER:
                case RULE_INT:
                case RULE_DOUBLE:
                case RULE_BINARY_INT:
                case RULE_OCTAL_INT:
                case RULE_LEGACY_OCTAL_INT:
                case RULE_HEX_INT:
                case RULE_SCIENTIFIC_INT:
                case RULE_STRING:
                    {
                    alt637=3;
                    }
                    break;
                case Out:
                    {
                    int LA637_4 = input.LA(3);
                    if ( (LA637_4==Colon) ) {
                        alt637=3;
                    }
                    else if ( ((LA637_4>=Intersection && LA637_4<=Constructor)||LA637_4==Promisify||LA637_4==Default||LA637_4==Target||LA637_4==Await||LA637_4==False||LA637_4==Union||LA637_4==This||(LA637_4>=This_1 && LA637_4<=Void)||LA637_4==LeftParenthesis||LA637_4==PlusSign||LA637_4==HyphenMinus||LA637_4==QuestionMark||LA637_4==LeftSquareBracket||LA637_4==LeftCurlyBracket||LA637_4==Tilde||LA637_4==RULE_IDENTIFIER||LA637_4==RULE_INT||LA637_4==RULE_DOUBLE||(LA637_4>=RULE_BINARY_INT && LA637_4<=RULE_SCIENTIFIC_INT)||LA637_4==RULE_STRING) ) {
                        alt637=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 637, 4, input);
                        throw nvae;
                    }
                    }
                    break;
                case QuestionMark:
                    {
                    int LA637_5 = input.LA(3);
                    if ( (LA637_5==LeftSquareBracket) ) {
                        alt637=3;
                    }
                    else if ( (LA637_5==Extends||LA637_5==Super||LA637_5==RightParenthesis) ) {
                        alt637=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 637, 5, input);
                        throw nvae;
                    }
                    }
                    break;
                case In:
                    {
                    alt637=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 637, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case False:
            case Union:
            case This:
            case This_1:
            case True:
            case Type:
            case Void:
            case PlusSign:
            case HyphenMinus:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_STRING:
                {
                alt637=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 637, 0, input);
                throw nvae;
            }
            switch (alt637) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_0_0(),
                      						current);
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getDeclaredTypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_114);
                    lv_declaredTypeArgs_1_0=ruleWildcardOldNotationWithoutBound();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"declaredTypeArgs",
                      							lv_declaredTypeArgs_1_0,
                      							"org.eclipse.n4js.TypeExpressions.WildcardOldNotationWithoutBound");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    {
                    lv_arrayTypeExpression_2_0=(Token)match(input,LeftSquareBracket,FOLLOW_115); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_arrayTypeExpression_2_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_2_0 != null, "[");
                    }
                    }
                    }
                    otherlv_3=(Token)match(input,RightSquareBracket,FOLLOW_177); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_3());
                    }
                    loop634:
                    do {
                        int alt634=2;
                        int LA634_0 = input.LA(1);
                        if ( (LA634_0==LeftSquareBracket) ) {
                            int LA634_2 = input.LA(2);
                            if ( (LA634_2==RightSquareBracket) ) {
                                int LA634_3 = input.LA(3);
                                if ( (synpred356_InternalN4JSParser()) ) {
                                    alt634=1;
                                }
                            }
                        }
                        switch (alt634) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefDeclaredTypeArgsAction_0_4_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_5_0=(Token)match(input,LeftSquareBracket,FOLLOW_115); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_5_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_5_0 != null, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_177); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_6, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_4_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop634;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					current = forceCreateModelElement(
                      						grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefAction_1_0(),
                      						current);
                    }
                    }
                    otherlv_8=(Token)match(input,LeftParenthesis,FOLLOW_178); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_8, grammarAccess.getArrayTypeExpressionAccess().getLeftParenthesisKeyword_1_1());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getDeclaredTypeArgsWildcardParserRuleCall_1_2_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_declaredTypeArgs_9_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"declaredTypeArgs",
                      							lv_declaredTypeArgs_9_0,
                      							"org.eclipse.n4js.TypeExpressions.Wildcard");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_10=(Token)match(input,RightParenthesis,FOLLOW_114); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_10, grammarAccess.getArrayTypeExpressionAccess().getRightParenthesisKeyword_1_3());
                    }
                    {
                    {
                    lv_arrayTypeExpression_11_0=(Token)match(input,LeftSquareBracket,FOLLOW_115); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_arrayTypeExpression_11_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                      						}
                      						setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_11_0 != null, "[");
                    }
                    }
                    }
                    otherlv_12=(Token)match(input,RightSquareBracket,FOLLOW_177); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_12, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_5());
                    }
                    loop635:
                    do {
                        int alt635=2;
                        int LA635_0 = input.LA(1);
                        if ( (LA635_0==LeftSquareBracket) ) {
                            int LA635_2 = input.LA(2);
                            if ( (LA635_2==RightSquareBracket) ) {
                                int LA635_3 = input.LA(3);
                                if ( (synpred357_InternalN4JSParser()) ) {
                                    alt635=1;
                                }
                            }
                        }
                        switch (alt635) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefDeclaredTypeArgsAction_1_6_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_14_0=(Token)match(input,LeftSquareBracket,FOLLOW_115); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_14_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_14_0 != null, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_177); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_15, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_6_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop635;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getArrayTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_2_0());
                    }
                    pushFollow(FOLLOW_177);
                    this_PrimaryTypeExpression_16=rulePrimaryTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_PrimaryTypeExpression_16;
                      				afterParserOrEnumRuleCall();
                    }
                    loop636:
                    do {
                        int alt636=2;
                        int LA636_0 = input.LA(1);
                        if ( (LA636_0==LeftSquareBracket) ) {
                            int LA636_2 = input.LA(2);
                            if ( (LA636_2==RightSquareBracket) ) {
                                int LA636_3 = input.LA(3);
                                if ( (synpred358_InternalN4JSParser()) ) {
                                    alt636=1;
                                }
                            }
                        }
                        switch (alt636) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							current = forceCreateModelElementAndAdd(
                    	      								grammarAccess.getArrayTypeExpressionAccess().getParameterizedTypeRefDeclaredTypeArgsAction_2_1_0_0(),
                    	      								current);
                    	    }
                    	    }
                    	    {
                    	    {
                    	    lv_arrayTypeExpression_18_0=(Token)match(input,LeftSquareBracket,FOLLOW_115); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								newLeafNode(lv_arrayTypeExpression_18_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0());
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElement(grammarAccess.getArrayTypeExpressionRule());
                    	      								}
                    	      								setWithLastConsumed(current, "arrayTypeExpression", lv_arrayTypeExpression_18_0 != null, "[");
                    	    }
                    	    }
                    	    }
                    	    otherlv_19=(Token)match(input,RightSquareBracket,FOLLOW_177); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_19, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_2_1_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop636;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_rulePrimaryTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimaryTypeExpression=rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimaryTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject rulePrimaryTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject this_LiteralTypeRef_0 = null;
        EObject this_ArrowFunctionTypeExpression_1 = null;
        EObject this_ArrayNTypeExpression_2 = null;
        EObject this_TypeRefWithModifiers_3 = null;
        EObject this_TypeRef_5 = null;
        	enterRule();
        try {
            {
            int alt638=5;
            alt638 = dfa638.predict(input);
            switch (alt638) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getLiteralTypeRefParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_LiteralTypeRef_0=ruleLiteralTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_LiteralTypeRef_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrowFunctionTypeExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrowFunctionTypeExpression_1=ruleArrowFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ArrowFunctionTypeExpression_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getArrayNTypeExpressionParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayNTypeExpression_2=ruleArrayNTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayNTypeExpression_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRefWithModifiers_3=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRefWithModifiers_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_4_1());
                    }
                    pushFollow(FOLLOW_69);
                    this_TypeRef_5=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeRef_5;
                      				afterParserOrEnumRuleCall();
                    }
                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_4_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefWithModifiers = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithModifiers=ruleTypeRefWithModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithModifiers() throws RecognitionException {
        EObject current = null;
        Token lv_followedByQuestionMark_1_0=null;
        EObject this_TypeRefWithoutModifiers_0 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			newCompositeNode(grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0());
            }
            pushFollow(FOLLOW_132);
            this_TypeRefWithoutModifiers_0=ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TypeRefWithoutModifiers_0;
              			afterParserOrEnumRuleCall();
            }
            int alt639=2;
            alt639 = dfa639.predict(input);
            switch (alt639) {
                case 1 :
                    {
                    {
                    lv_followedByQuestionMark_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_followedByQuestionMark_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTypeRefWithModifiersRule());
                      					}
                      					setWithLastConsumed(current, "followedByQuestionMark", lv_followedByQuestionMark_1_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefWithoutModifiers = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefWithoutModifiersRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefWithoutModifiers=ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefWithoutModifiers; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefWithoutModifiers() throws RecognitionException {
        EObject current = null;
        Token lv_dynamic_2_0=null;
        EObject this_ParameterizedTypeRef_0 = null;
        EObject this_ThisTypeRef_1 = null;
        EObject this_TypeTypeRef_3 = null;
        EObject this_FunctionTypeExpressionOLD_4 = null;
        EObject this_UnionTypeExpressionOLD_5 = null;
        EObject this_IntersectionTypeExpressionOLD_6 = null;
        	enterRule();
        try {
            {
            int alt642=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt642=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt642=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt642=3;
                }
                break;
            case Union:
                {
                alt642=4;
                }
                break;
            case Intersection:
                {
                alt642=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 642, 0, input);
                throw nvae;
            }
            switch (alt642) {
                case 1 :
                    {
                    {
                    int alt640=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Default:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt640=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA640_4 = input.LA(3);
                            if ( (LA640_4==This_1) ) {
                                alt640=2;
                            }
                            else if ( (LA640_4==Promisify||LA640_4==Default||LA640_4==Target||LA640_4==Await||LA640_4==This||LA640_4==Void||LA640_4==RULE_IDENTIFIER) ) {
                                alt640=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 640, 4, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA640_5 = input.LA(3);
                            if ( (LA640_5==This_1) ) {
                                alt640=2;
                            }
                            else if ( (LA640_5==Promisify||LA640_5==Default||LA640_5==Target||LA640_5==Await||LA640_5==This||LA640_5==Void||LA640_5==RULE_IDENTIFIER) ) {
                                alt640=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 640, 5, input);
                                throw nvae;
                            }
                            }
                            break;
                        case This_1:
                            {
                            alt640=2;
                            }
                            break;
                        case Promisify:
                        case Default:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt640=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return current;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 640, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case This_1:
                        {
                        alt640=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 640, 0, input);
                        throw nvae;
                    }
                    switch (alt640) {
                        case 1 :
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0());
                            }
                            pushFollow(FOLLOW_39);
                            this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ParameterizedTypeRef_0;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                        case 2 :
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1());
                            }
                            pushFollow(FOLLOW_39);
                            this_ThisTypeRef_1=ruleThisTypeRef();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					current = this_ThisTypeRef_1;
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            break;
                    }
                    int alt641=2;
                    alt641 = dfa641.predict(input);
                    switch (alt641) {
                        case 1 :
                            {
                            {
                            lv_dynamic_2_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              						newLeafNode(lv_dynamic_2_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                            }
                            if ( state.backtracking==0 ) {
                              						if (current==null) {
                              							current = createModelElement(grammarAccess.getTypeRefWithoutModifiersRule());
                              						}
                              						setWithLastConsumed(current, "dynamic", lv_dynamic_2_0 != null, "+");
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_3=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeTypeRef_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_FunctionTypeExpressionOLD_4=ruleFunctionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_FunctionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_5=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_UnionTypeExpressionOLD_5;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_6=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntersectionTypeExpressionOLD_6;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeRefFunctionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeRefFunctionTypeExpression=ruleTypeRefFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeRefFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRef_0 = null;
        EObject this_ArrayNTypeExpression_1 = null;
        EObject this_TypeTypeRef_2 = null;
        EObject this_UnionTypeExpressionOLD_3 = null;
        EObject this_IntersectionTypeExpressionOLD_4 = null;
        	enterRule();
        try {
            {
            int alt643=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt643=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt643=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt643=3;
                }
                break;
            case Union:
                {
                alt643=4;
                }
                break;
            case Intersection:
                {
                alt643=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 643, 0, input);
                throw nvae;
            }
            switch (alt643) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRef_0=ruleParameterizedTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRef_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayNTypeExpressionParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ArrayNTypeExpression_1=ruleArrayNTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ArrayNTypeExpression_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeTypeRef_2=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeTypeRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_UnionTypeExpressionOLD_3=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_UnionTypeExpressionOLD_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 5 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_IntersectionTypeExpressionOLD_4=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_IntersectionTypeExpressionOLD_4;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeArgInTypeTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgInTypeTypeRef=ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgInTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgInTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRefNominal_0 = null;
        EObject this_ThisTypeRefNominal_1 = null;
        EObject this_WildcardOldNotation_2 = null;
        	enterRule();
        try {
            {
            int alt644=3;
            int LA644_0 = input.LA(1);
            if ( (LA644_0==Promisify||LA644_0==Default||LA644_0==Target||LA644_0==Await||LA644_0==This||LA644_0==Void||LA644_0==RULE_IDENTIFIER) ) {
                alt644=1;
            }
            else if ( (LA644_0==This_1) ) {
                alt644=2;
            }
            else if ( (LA644_0==QuestionMark) && (synpred362_InternalN4JSParser())) {
                alt644=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 644, 0, input);
                throw nvae;
            }
            switch (alt644) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_1=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefNominal_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardOldNotationParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_2=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_WildcardOldNotation_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleLiteralTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleLiteralTypeRef=ruleLiteralTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_BooleanLiteralTypeRef_0 = null;
        EObject this_NumericLiteralTypeRef_1 = null;
        EObject this_StringLiteralTypeRef_2 = null;
        	enterRule();
        try {
            {
            int alt645=3;
            switch ( input.LA(1) ) {
            case False:
            case True:
                {
                alt645=1;
                }
                break;
            case PlusSign:
            case HyphenMinus:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
                {
                alt645=2;
                }
                break;
            case RULE_STRING:
                {
                alt645=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 645, 0, input);
                throw nvae;
            }
            switch (alt645) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getBooleanLiteralTypeRefParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_BooleanLiteralTypeRef_0=ruleBooleanLiteralTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_BooleanLiteralTypeRef_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getNumericLiteralTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_NumericLiteralTypeRef_1=ruleNumericLiteralTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_NumericLiteralTypeRef_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getLiteralTypeRefAccess().getStringLiteralTypeRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_StringLiteralTypeRef_2=ruleStringLiteralTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_StringLiteralTypeRef_2;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleBooleanLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleBooleanLiteralTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBooleanLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBooleanLiteralTypeRef=ruleBooleanLiteralTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBooleanLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleBooleanLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        Token lv_astValue_1_1=null;
        Token lv_astValue_1_2=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getBooleanLiteralTypeRefAccess().getBooleanLiteralTypeRefAction_0(),
              					current);
            }
            }
            {
            {
            int alt646=2;
            int LA646_0 = input.LA(1);
            if ( (LA646_0==True) ) {
                alt646=1;
            }
            else if ( (LA646_0==False) ) {
                alt646=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 646, 0, input);
                throw nvae;
            }
            switch (alt646) {
                case 1 :
                    {
                    lv_astValue_1_1=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_1_1, grammarAccess.getBooleanLiteralTypeRefAccess().getAstValueTrueKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astValue", lv_astValue_1_1, null);
                    }
                    }
                    break;
                case 2 :
                    {
                    lv_astValue_1_2=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_1_2, grammarAccess.getBooleanLiteralTypeRefAccess().getAstValueFalseKeyword_1_0_1());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getBooleanLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astValue", lv_astValue_1_2, null);
                    }
                    }
                    break;
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNumericLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNumericLiteralTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNumericLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNumericLiteralTypeRef=ruleNumericLiteralTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNumericLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNumericLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        Token otherlv_0=null;
        Token lv_astNegated_1_0=null;
        Token lv_astValue_2_0=null;
        Token lv_astValue_3_0=null;
        Token lv_astValue_4_0=null;
        Token lv_astValue_5_0=null;
        Token lv_astValue_6_0=null;
        Token lv_astValue_7_0=null;
        Token lv_astValue_8_0=null;
        	enterRule();
        try {
            {
            {
            int alt647=3;
            int LA647_0 = input.LA(1);
            if ( (LA647_0==PlusSign) ) {
                alt647=1;
            }
            else if ( (LA647_0==HyphenMinus) ) {
                alt647=2;
            }
            switch (alt647) {
                case 1 :
                    {
                    otherlv_0=(Token)match(input,PlusSign,FOLLOW_179); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_0, grammarAccess.getNumericLiteralTypeRefAccess().getPlusSignKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_astNegated_1_0=(Token)match(input,HyphenMinus,FOLLOW_179); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astNegated_1_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstNegatedHyphenMinusKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "astNegated", lv_astNegated_1_0 != null, "-");
                    }
                    }
                    }
                    }
                    break;
            }
            int alt648=7;
            switch ( input.LA(1) ) {
            case RULE_INT:
                {
                alt648=1;
                }
                break;
            case RULE_DOUBLE:
                {
                alt648=2;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt648=3;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt648=4;
                }
                break;
            case RULE_HEX_INT:
                {
                alt648=5;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt648=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt648=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 648, 0, input);
                throw nvae;
            }
            switch (alt648) {
                case 1 :
                    {
                    {
                    {
                    lv_astValue_2_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_2_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueINTTerminalRuleCall_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_2_0,
                      							"org.eclipse.n4js.TypeExpressions.INT");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_astValue_3_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_3_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueDOUBLETerminalRuleCall_1_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_3_0,
                      							"org.eclipse.n4js.TypeExpressions.DOUBLE");
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    lv_astValue_4_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_4_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueOCTAL_INTTerminalRuleCall_1_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_4_0,
                      							"org.eclipse.n4js.TypeExpressions.OCTAL_INT");
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    lv_astValue_5_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_5_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueLEGACY_OCTAL_INTTerminalRuleCall_1_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_5_0,
                      							"org.eclipse.n4js.TypeExpressions.LEGACY_OCTAL_INT");
                    }
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    {
                    lv_astValue_6_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_6_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueHEX_INTTerminalRuleCall_1_4_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_6_0,
                      							"org.eclipse.n4js.TypeExpressions.HEX_INT");
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    {
                    lv_astValue_7_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_7_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueBINARY_INTTerminalRuleCall_1_5_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_7_0,
                      							"org.eclipse.n4js.TypeExpressions.BINARY_INT");
                    }
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    {
                    lv_astValue_8_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_astValue_8_0, grammarAccess.getNumericLiteralTypeRefAccess().getAstValueSCIENTIFIC_INTTerminalRuleCall_1_6_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getNumericLiteralTypeRefRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"astValue",
                      							lv_astValue_8_0,
                      							"org.eclipse.n4js.TypeExpressions.SCIENTIFIC_INT");
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleStringLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleStringLiteralTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStringLiteralTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStringLiteralTypeRef=ruleStringLiteralTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStringLiteralTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleStringLiteralTypeRef() throws RecognitionException {
        EObject current = null;
        Token lv_astValue_0_0=null;
        	enterRule();
        try {
            {
            {
            {
            lv_astValue_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				newLeafNode(lv_astValue_0_0, grammarAccess.getStringLiteralTypeRefAccess().getAstValueSTRINGTerminalRuleCall_0());
            }
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getStringLiteralTypeRefRule());
              				}
              				setWithLastConsumed(
              					current,
              					"astValue",
              					lv_astValue_0_0,
              					"org.eclipse.n4js.TypeExpressions.STRING");
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRef=ruleThisTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ThisTypeRefNominal_0 = null;
        EObject this_ThisTypeRefStructural_1 = null;
        	enterRule();
        try {
            {
            int alt649=2;
            int LA649_0 = input.LA(1);
            if ( (LA649_0==This_1) ) {
                alt649=1;
            }
            else if ( (LA649_0==Tilde) ) {
                alt649=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 649, 0, input);
                throw nvae;
            }
            switch (alt649) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefNominal_0=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ThisTypeRefStructural_1=ruleThisTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ThisTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRefNominal = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefNominal=ruleThisTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefNominal() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getThisTypeRefNominalAccess().getThisTypeRefNominalAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleThisTypeRefStructural = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getThisTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleThisTypeRefStructural=ruleThisTypeRefStructural();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleThisTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleThisTypeRefStructural() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;
        EObject this_TStructMemberList_3 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_180);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getThisTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_1=(Token)match(input,This_1,FOLLOW_181); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
            }
            int alt650=2;
            int LA650_0 = input.LA(1);
            if ( (LA650_0==With) ) {
                int LA650_1 = input.LA(2);
                if ( (LA650_1==LeftCurlyBracket) ) {
                    alt650=1;
                }
            }
            switch (alt650) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,With,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getThisTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_3=ruleTStructMemberList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMemberList_3;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleFunctionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFunctionTypeExpressionOLD=ruleFunctionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFunctionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleFunctionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        EObject lv_declaredThisType_5_0 = null;
        EObject lv_ownedTypeVars_9_0 = null;
        EObject lv_ownedTypeVars_11_0 = null;
        EObject this_TAnonymousFormalParameterList_14 = null;
        EObject this_ColonSepReturnTypeRef_16 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,LeftCurlyBracket,FOLLOW_182); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt651=2;
            int LA651_0 = input.LA(1);
            if ( (LA651_0==CommercialAt) ) {
                alt651=1;
            }
            switch (alt651) {
                case 1 :
                    {
                    otherlv_2=(Token)match(input,CommercialAt,FOLLOW_183); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                    }
                    otherlv_3=(Token)match(input,This,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                    }
                    otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_184); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0());
                    }
                    pushFollow(FOLLOW_69);
                    lv_declaredThisType_5_0=ruleTypeRefFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						set(
                      							current,
                      							"declaredThisType",
                      							lv_declaredThisType_5_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRefFunctionTypeExpression");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_6, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                    }
                    }
                    break;
            }
            otherlv_7=(Token)match(input,Function,FOLLOW_159); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
            }
            int alt653=2;
            int LA653_0 = input.LA(1);
            if ( (LA653_0==LessThanSign) ) {
                alt653=1;
            }
            switch (alt653) {
                case 1 :
                    {
                    otherlv_8=(Token)match(input,LessThanSign,FOLLOW_185); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_8, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_1_0());
                    }
                    pushFollow(FOLLOW_104);
                    lv_ownedTypeVars_9_0=ruleTypeVariable();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                      						}
                      						add(
                      							current,
                      							"ownedTypeVars",
                      							lv_ownedTypeVars_9_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeVariable");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop652:
                    do {
                        int alt652=2;
                        int LA652_0 = input.LA(1);
                        if ( (LA652_0==Comma) ) {
                            alt652=1;
                        }
                        switch (alt652) {
                    	case 1 :
                    	    {
                    	    otherlv_10=(Token)match(input,Comma,FOLLOW_185); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      					newLeafNode(otherlv_10, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      							newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0());
                    	    }
                    	    pushFollow(FOLLOW_104);
                    	    lv_ownedTypeVars_11_0=ruleTypeVariable();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getFunctionTypeExpressionOLDRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"ownedTypeVars",
                    	      								lv_ownedTypeVars_11_0,
                    	      								"org.eclipse.n4js.TypeExpressions.TypeVariable");
                    	      							afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop652;
                        }
                    } while (true);
                    otherlv_12=(Token)match(input,GreaterThanSign,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_12, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                    }
                    }
                    break;
            }
            otherlv_13=(Token)match(input,LeftParenthesis,FOLLOW_186); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_13, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
              			}
              			newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6());
            }
            pushFollow(FOLLOW_69);
            this_TAnonymousFormalParameterList_14=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TAnonymousFormalParameterList_14;
              			afterParserOrEnumRuleCall();
            }
            otherlv_15=(Token)match(input,RightParenthesis,FOLLOW_187); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_15, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
            }
            int alt654=2;
            int LA654_0 = input.LA(1);
            if ( (LA654_0==Colon) ) {
                alt654=1;
            }
            switch (alt654) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getFunctionTypeExpressionOLDRule());
                      				}
                      				newCompositeNode(grammarAccess.getFunctionTypeExpressionOLDAccess().getColonSepReturnTypeRefParserRuleCall_8());
                    }
                    pushFollow(FOLLOW_29);
                    this_ColonSepReturnTypeRef_16=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_16;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            otherlv_17=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_17, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrowFunctionTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrowFunctionTypeExpression=ruleArrowFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrowFunctionTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrowFunctionTypeExpression() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject this_TAnonymousFormalParameterList_2 = null;
        EObject lv_returnTypeRef_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getArrowFunctionTypeExpressionAccess().getFunctionTypeExpressionAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_186); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_0_0_1());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_2());
            }
            pushFollow(FOLLOW_69);
            this_TAnonymousFormalParameterList_2=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					current = this_TAnonymousFormalParameterList_2;
              					afterParserOrEnumRuleCall();
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_0_0_3());
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getArrowParserRuleCall_0_0_4());
            }
            pushFollow(FOLLOW_20);
            ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_5_0=rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getArrowFunctionTypeExpressionRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_5_0,
              						"org.eclipse.n4js.TypeExpressions.PrimaryTypeExpression");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameterList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_fpars_0_0 = null;
        EObject lv_fpars_2_0 = null;
        	enterRule();
        try {
            {
            int alt656=2;
            int LA656_0 = input.LA(1);
            if ( ((LA656_0>=Intersection && LA656_0<=Implements)||(LA656_0>=Promisify && LA656_0<=Abstract)||LA656_0==External||LA656_0==Default||(LA656_0>=Private && LA656_0<=Project)||LA656_0==Public||LA656_0==Static||LA656_0==Target||(LA656_0>=Async && LA656_0<=Await)||LA656_0==False||LA656_0==Union||(LA656_0>=Yield && LA656_0<=This)||LA656_0==From||(LA656_0>=This_1 && LA656_0<=Void)||LA656_0==FullStopFullStopFullStop||(LA656_0>=Get && LA656_0<=Let)||(LA656_0>=Out && LA656_0<=Set)||LA656_0==As||LA656_0==Of||LA656_0==LeftParenthesis||LA656_0==PlusSign||LA656_0==HyphenMinus||LA656_0==QuestionMark||LA656_0==LeftSquareBracket||LA656_0==LeftCurlyBracket||LA656_0==Tilde||LA656_0==RULE_IDENTIFIER||LA656_0==RULE_INT||LA656_0==RULE_DOUBLE||(LA656_0>=RULE_BINARY_INT && LA656_0<=RULE_SCIENTIFIC_INT)||LA656_0==RULE_STRING) ) {
                alt656=1;
            }
            switch (alt656) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      					newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_0_0());
                    }
                    pushFollow(FOLLOW_36);
                    lv_fpars_0_0=ruleTAnonymousFormalParameter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                      					}
                      					add(
                      						current,
                      						"fpars",
                      						lv_fpars_0_0,
                      						"org.eclipse.n4js.TypeExpressions.TAnonymousFormalParameter");
                      					afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop655:
                    do {
                        int alt655=2;
                        int LA655_0 = input.LA(1);
                        if ( (LA655_0==Comma) ) {
                            alt655=1;
                        }
                        switch (alt655) {
                    	case 1 :
                    	    {
                    	    otherlv_1=(Token)match(input,Comma,FOLLOW_188); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      				newLeafNode(otherlv_1, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterListAccess().getFparsTAnonymousFormalParameterParserRuleCall_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_36);
                    	    lv_fpars_2_0=ruleTAnonymousFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterListRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"fpars",
                    	      							lv_fpars_2_0,
                    	      							"org.eclipse.n4js.TypeExpressions.TAnonymousFormalParameter");
                    	      						afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop655;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTAnonymousFormalParameter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTAnonymousFormalParameterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTAnonymousFormalParameter=ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTAnonymousFormalParameter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTAnonymousFormalParameter() throws RecognitionException {
        EObject current = null;
        Token lv_variadic_0_0=null;
        AntlrDatatypeRuleToken lv_name_1_0 = null;
        EObject this_ColonSepTypeRef_2 = null;
        EObject lv_typeRef_3_0 = null;
        EObject this_DefaultFormalParameter_4 = null;
        	enterRule();
        try {
            {
            {
            int alt657=2;
            int LA657_0 = input.LA(1);
            if ( (LA657_0==FullStopFullStopFullStop) ) {
                alt657=1;
            }
            switch (alt657) {
                case 1 :
                    {
                    {
                    lv_variadic_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_101); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_variadic_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "variadic", lv_variadic_0_0 != null, "...");
                    }
                    }
                    }
                    break;
            }
            int alt658=2;
            alt658 = dfa658.predict(input);
            switch (alt658) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getNameBindingIdentifierParserRuleCall_1_0_0_0_0());
                    }
                    pushFollow(FOLLOW_87);
                    lv_name_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      								}
                      								set(
                      									current,
                      									"name",
                      									lv_name_1_0,
                      									"org.eclipse.n4js.TypeExpressions.BindingIdentifier");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    {
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
                      							}
                      							newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getColonSepTypeRefParserRuleCall_1_0_0_1());
                    }
                    pushFollow(FOLLOW_19);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							current = this_ColonSepTypeRef_2;
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefTypeRefParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_19);
                    lv_typeRef_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTAnonymousFormalParameterRule());
                      						}
                      						set(
                      							current,
                      							"typeRef",
                      							lv_typeRef_3_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getTAnonymousFormalParameterRule());
              			}
              			newCompositeNode(grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_2());
            }
            pushFollow(FOLLOW_2);
            this_DefaultFormalParameter_4=ruleDefaultFormalParameter(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_DefaultFormalParameter_4;
              			afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleDefaultFormalParameter(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token lv_hasInitializerAssignment_0_0=null;
        AntlrDatatypeRuleToken lv_astInitializer_1_0 = null;
        	enterRule();
        try {
            {
            int alt660=2;
            int LA660_0 = input.LA(1);
            if ( (LA660_0==EqualsSign) ) {
                alt660=1;
            }
            switch (alt660) {
                case 1 :
                    {
                    {
                    {
                    lv_hasInitializerAssignment_0_0=(Token)match(input,EqualsSign,FOLLOW_189); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_hasInitializerAssignment_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getDefaultFormalParameterRule());
                      					}
                      					setWithLastConsumed(current, "hasInitializerAssignment", lv_hasInitializerAssignment_0_0 != null, "=");
                    }
                    }
                    }
                    int alt659=2;
                    int LA659_0 = input.LA(1);
                    if ( (LA659_0==Promisify||LA659_0==Default||LA659_0==Target||LA659_0==Await||LA659_0==This||LA659_0==Void||LA659_0==RULE_IDENTIFIER) ) {
                        alt659=1;
                    }
                    switch (alt659) {
                        case 1 :
                            {
                            {
                            if ( state.backtracking==0 ) {
                              					newCompositeNode(grammarAccess.getDefaultFormalParameterAccess().getAstInitializerTypeReferenceNameParserRuleCall_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            lv_astInitializer_1_0=ruleTypeReferenceName();
                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {
                              					if (current==null) {
                              						current = createModelElementForParent(grammarAccess.getDefaultFormalParameterRule());
                              					}
                              					set(
                              						current,
                              						"astInitializer",
                              						lv_astInitializer_1_0,
                              						"org.eclipse.n4js.TypeExpressions.TypeReferenceName");
                              					afterParserOrEnumRuleCall();
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleUnionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnionTypeExpressionOLD=ruleUnionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleUnionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;
        EObject lv_typeRefs_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getUnionTypeExpressionOLDAccess().getUnionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Union,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_16);
            lv_typeRefs_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop661:
            do {
                int alt661=2;
                int LA661_0 = input.LA(1);
                if ( (LA661_0==Comma) ) {
                    alt661=1;
                }
                switch (alt661) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_20); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_16);
            	    lv_typeRefs_5_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getUnionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop661;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleIntersectionTypeExpressionOLD = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIntersectionTypeExpressionOLD=ruleIntersectionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIntersectionTypeExpressionOLD; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        EObject lv_typeRefs_3_0 = null;
        EObject lv_typeRefs_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionTypeExpressionAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,Intersection,FOLLOW_6); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
            }
            otherlv_2=(Token)match(input,LeftCurlyBracket,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_16);
            lv_typeRefs_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
              					}
              					add(
              						current,
              						"typeRefs",
              						lv_typeRefs_3_0,
              						"org.eclipse.n4js.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop662:
            do {
                int alt662=2;
                int LA662_0 = input.LA(1);
                if ( (LA662_0==Comma) ) {
                    alt662=1;
                }
                switch (alt662) {
            	case 1 :
            	    {
            	    otherlv_4=(Token)match(input,Comma,FOLLOW_20); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_4, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsTypeRefParserRuleCall_4_1_0());
            	    }
            	    pushFollow(FOLLOW_16);
            	    lv_typeRefs_5_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getIntersectionTypeExpressionOLDRule());
            	      						}
            	      						add(
            	      							current,
            	      							"typeRefs",
            	      							lv_typeRefs_5_0,
            	      							"org.eclipse.n4js.TypeExpressions.TypeRef");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop662;
                }
            } while (true);
            otherlv_6=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRef=ruleParameterizedTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRef() throws RecognitionException {
        EObject current = null;
        EObject this_ParameterizedTypeRefNominal_0 = null;
        EObject this_ParameterizedTypeRefStructural_1 = null;
        	enterRule();
        try {
            {
            int alt663=2;
            int LA663_0 = input.LA(1);
            if ( (LA663_0==Promisify||LA663_0==Default||LA663_0==Target||LA663_0==Await||LA663_0==This||LA663_0==Void||LA663_0==RULE_IDENTIFIER) ) {
                alt663=1;
            }
            else if ( (LA663_0==Tilde) ) {
                alt663=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 663, 0, input);
                throw nvae;
            }
            switch (alt663) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefNominal_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefNominal_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ParameterizedTypeRefStructural_1=ruleParameterizedTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_ParameterizedTypeRefStructural_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRefNominal = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefNominalRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefNominal=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefNominal; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefNominal() throws RecognitionException {
        EObject current = null;
        EObject this_TypeReference_0 = null;
        EObject this_TypeArguments_1 = null;
        	enterRule();
        try {
            {
            {
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0());
            }
            pushFollow(FOLLOW_190);
            this_TypeReference_0=ruleTypeReference(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TypeReference_0;
              			afterParserOrEnumRuleCall();
            }
            int alt664=2;
            alt664 = dfa664.predict(input);
            switch (alt664) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefNominalRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgumentsParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeArguments_1=ruleTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeArguments_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleParameterizedTypeRefStructural = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleParameterizedTypeRefStructural=ruleParameterizedTypeRefStructural();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleParameterizedTypeRefStructural; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleParameterizedTypeRefStructural() throws RecognitionException {
        EObject current = null;
        Token otherlv_3=null;
        AntlrDatatypeRuleToken lv_definedTypingStrategy_0_0 = null;
        EObject this_TypeReference_1 = null;
        EObject this_TypeArguments_2 = null;
        EObject this_TStructMemberList_4 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_151);
            lv_definedTypingStrategy_0_0=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getParameterizedTypeRefStructuralRule());
              					}
              					set(
              						current,
              						"definedTypingStrategy",
              						lv_definedTypingStrategy_0_0,
              						"org.eclipse.n4js.TypeExpressions.TypingStrategyUseSiteOperator");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
              			}
              			newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_1());
            }
            pushFollow(FOLLOW_191);
            this_TypeReference_1=ruleTypeReference(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TypeReference_1;
              			afterParserOrEnumRuleCall();
            }
            int alt665=2;
            alt665 = dfa665.predict(input);
            switch (alt665) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgumentsParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_181);
                    this_TypeArguments_2=ruleTypeArguments(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TypeArguments_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            int alt666=2;
            int LA666_0 = input.LA(1);
            if ( (LA666_0==With) ) {
                int LA666_1 = input.LA(2);
                if ( (LA666_1==LeftCurlyBracket) ) {
                    alt666=1;
                }
            }
            switch (alt666) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,With,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0());
                    }
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getParameterizedTypeRefStructuralRule());
                      				}
                      				newCompositeNode(grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMemberList_4=ruleTStructMemberList(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMemberList_4;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleArrayNTypeExpression() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleArrayNTypeExpression = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrayNTypeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrayNTypeExpression=ruleArrayNTypeExpression();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrayNTypeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleArrayNTypeExpression() throws RecognitionException {
        EObject current = null;
        Token lv_arrayNTypeExpression_0_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_declaredTypeArgs_1_0 = null;
        EObject lv_declaredTypeArgs_2_0 = null;
        EObject lv_declaredTypeArgs_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            lv_arrayNTypeExpression_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_192); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_arrayNTypeExpression_0_0, grammarAccess.getArrayNTypeExpressionAccess().getArrayNTypeExpressionLeftSquareBracketKeyword_0_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getArrayNTypeExpressionRule());
              					}
              					setWithLastConsumed(current, "arrayNTypeExpression", lv_arrayNTypeExpression_0_0 != null, "[");
            }
            }
            }
            int alt668=2;
            int LA668_0 = input.LA(1);
            if ( (LA668_0==RightSquareBracket) ) {
                alt668=1;
            }
            else if ( ((LA668_0>=Intersection && LA668_0<=Constructor)||LA668_0==Promisify||LA668_0==Default||LA668_0==Target||LA668_0==Await||LA668_0==False||LA668_0==Union||LA668_0==This||(LA668_0>=This_1 && LA668_0<=Void)||LA668_0==Out||LA668_0==In||LA668_0==LeftParenthesis||LA668_0==PlusSign||LA668_0==HyphenMinus||LA668_0==QuestionMark||LA668_0==LeftSquareBracket||LA668_0==LeftCurlyBracket||LA668_0==Tilde||LA668_0==RULE_IDENTIFIER||LA668_0==RULE_INT||LA668_0==RULE_DOUBLE||(LA668_0>=RULE_BINARY_INT && LA668_0<=RULE_SCIENTIFIC_INT)||LA668_0==RULE_STRING) ) {
                alt668=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 668, 0, input);
                throw nvae;
            }
            switch (alt668) {
                case 1 :
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getDeclaredTypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredTypeArgs_1_0=ruleEmptyIterableTypeExpressionTail();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                      						}
                      						add(
                      							current,
                      							"declaredTypeArgs",
                      							lv_declaredTypeArgs_1_0,
                      							"org.eclipse.n4js.TypeExpressions.EmptyIterableTypeExpressionTail");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getDeclaredTypeArgsTypeArgumentParserRuleCall_1_1_0_0());
                    }
                    pushFollow(FOLLOW_92);
                    lv_declaredTypeArgs_2_0=ruleTypeArgument();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                      							}
                      							add(
                      								current,
                      								"declaredTypeArgs",
                      								lv_declaredTypeArgs_2_0,
                      								"org.eclipse.n4js.TypeExpressions.TypeArgument");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop667:
                    do {
                        int alt667=2;
                        int LA667_0 = input.LA(1);
                        if ( (LA667_0==Comma) ) {
                            alt667=1;
                        }
                        switch (alt667) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_192); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      						newLeafNode(otherlv_3, grammarAccess.getArrayNTypeExpressionAccess().getCommaKeyword_1_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      								newCompositeNode(grammarAccess.getArrayNTypeExpressionAccess().getDeclaredTypeArgsTypeArgumentParserRuleCall_1_1_1_1_0());
                    	    }
                    	    pushFollow(FOLLOW_92);
                    	    lv_declaredTypeArgs_4_0=ruleTypeArgument();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getArrayNTypeExpressionRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"declaredTypeArgs",
                    	      									lv_declaredTypeArgs_4_0,
                    	      									"org.eclipse.n4js.TypeExpressions.TypeArgument");
                    	      								afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop667;
                        }
                    } while (true);
                    otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_5, grammarAccess.getArrayNTypeExpressionAccess().getRightSquareBracketKeyword_1_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleEmptyIterableTypeExpressionTail = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEmptyIterableTypeExpressionTailRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEmptyIterableTypeExpressionTail=ruleEmptyIterableTypeExpressionTail();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEmptyIterableTypeExpressionTail; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleEmptyIterableTypeExpressionTail() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getEmptyIterableTypeExpressionTailAccess().getWildcardAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getEmptyIterableTypeExpressionTailAccess().getRightSquareBracketKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeReference(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_1=null;
        EObject lv_astNamespaceLikeRefs_0_0 = null;
        	enterRule();
        try {
            {
            {
            loop669:
            do {
                int alt669=2;
                alt669 = dfa669.predict(input);
                switch (alt669) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTypeReferenceAccess().getAstNamespaceLikeRefsNamespaceLikeRefParserRuleCall_0_0_0());
            	    }
            	    pushFollow(FOLLOW_110);
            	    lv_astNamespaceLikeRefs_0_0=ruleNamespaceLikeRef();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeReferenceRule());
            	      						}
            	      						add(
            	      							current,
            	      							"astNamespaceLikeRefs",
            	      							lv_astNamespaceLikeRefs_0_0,
            	      							"org.eclipse.n4js.TypeExpressions.NamespaceLikeRef");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    otherlv_1=(Token)match(input,FullStop,FOLLOW_151); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_1, grammarAccess.getTypeReferenceAccess().getFullStopKeyword_0_1());
            	    }
            	    }
            	    break;
            	default :
            	    break loop669;
                }
            } while (true);
            {
            {
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeReferenceRule());
              					}
            }
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeReferenceAccess().getDeclaredTypeTypeCrossReference_1_0());
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleNamespaceLikeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleNamespaceLikeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNamespaceLikeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNamespaceLikeRef=ruleNamespaceLikeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNamespaceLikeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleNamespaceLikeRef() throws RecognitionException {
        EObject current = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				if (current==null) {
              					current = createModelElement(grammarAccess.getNamespaceLikeRefRule());
              				}
            }
            if ( state.backtracking==0 ) {
              				newCompositeNode(grammarAccess.getNamespaceLikeRefAccess().getDeclaredTypeTypeCrossReference_0());
            }
            pushFollow(FOLLOW_2);
            ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              				afterParserOrEnumRuleCall();
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArguments(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredTypeArgs_1_0 = null;
        EObject lv_declaredTypeArgs_3_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LessThanSign,FOLLOW_192); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeArgumentsAccess().getDeclaredTypeArgsTypeArgumentParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_104);
            lv_declaredTypeArgs_1_0=ruleTypeArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
              					}
              					add(
              						current,
              						"declaredTypeArgs",
              						lv_declaredTypeArgs_1_0,
              						"org.eclipse.n4js.TypeExpressions.TypeArgument");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            loop670:
            do {
                int alt670=2;
                int LA670_0 = input.LA(1);
                if ( (LA670_0==Comma) ) {
                    alt670=1;
                }
                switch (alt670) {
            	case 1 :
            	    {
            	    otherlv_2=(Token)match(input,Comma,FOLLOW_192); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      				newLeafNode(otherlv_2, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTypeArgumentsAccess().getDeclaredTypeArgsTypeArgumentParserRuleCall_2_1_0());
            	    }
            	    pushFollow(FOLLOW_104);
            	    lv_declaredTypeArgs_3_0=ruleTypeArgument();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
            	      						}
            	      						add(
            	      							current,
            	      							"declaredTypeArgs",
            	      							lv_declaredTypeArgs_3_0,
            	      							"org.eclipse.n4js.TypeExpressions.TypeArgument");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop670;
                }
            } while (true);
            otherlv_4=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMemberList(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        EObject lv_astStructuralMembers_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,LeftCurlyBracket,FOLLOW_193); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
            }
            loop672:
            do {
                int alt672=2;
                int LA672_0 = input.LA(1);
                if ( ((LA672_0>=Intersection && LA672_0<=With)||(LA672_0>=For && LA672_0<=Var)||(LA672_0>=As && LA672_0<=Of)||LA672_0==LeftParenthesis||LA672_0==LessThanSign||LA672_0==RULE_IDENTIFIER) ) {
                    alt672=1;
                }
                switch (alt672) {
            	case 1 :
            	    {
            	    {
            	    {
            	    if ( state.backtracking==0 ) {
            	      						newCompositeNode(grammarAccess.getTStructMemberListAccess().getAstStructuralMembersTStructMemberParserRuleCall_1_0_0());
            	    }
            	    pushFollow(FOLLOW_194);
            	    lv_astStructuralMembers_1_0=ruleTStructMember();
            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {
            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getTStructMemberListRule());
            	      						}
            	      						add(
            	      							current,
            	      							"astStructuralMembers",
            	      							lv_astStructuralMembers_1_0,
            	      							"org.eclipse.n4js.TypeExpressions.TStructMember");
            	      						afterParserOrEnumRuleCall();
            	    }
            	    }
            	    }
            	    int alt671=3;
            	    int LA671_0 = input.LA(1);
            	    if ( (LA671_0==Semicolon) ) {
            	        alt671=1;
            	    }
            	    else if ( (LA671_0==Comma) ) {
            	        alt671=2;
            	    }
            	    switch (alt671) {
            	        case 1 :
            	            {
            	            otherlv_2=(Token)match(input,Semicolon,FOLLOW_193); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					newLeafNode(otherlv_2, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            otherlv_3=(Token)match(input,Comma,FOLLOW_193); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {
            	              					newLeafNode(otherlv_3, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop672;
                }
            } while (true);
            otherlv_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMember() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructMember = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMemberRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMember=ruleTStructMember();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMember; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMember() throws RecognitionException {
        EObject current = null;
        EObject this_TStructGetter_0 = null;
        EObject this_TStructSetter_1 = null;
        EObject this_TStructMethod_2 = null;
        EObject this_TStructField_3 = null;
        	enterRule();
        try {
            {
            int alt673=4;
            alt673 = dfa673.predict(input);
            switch (alt673) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructGetter_0=ruleTStructGetter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructGetter_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructSetter_1=ruleTStructSetter();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructSetter_1;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructMethod_2=ruleTStructMethod();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_TStructMethod_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_TStructField_3=ruleTStructField();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TStructField_3;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructMethod() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructMethod = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructMethodRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructMethod=ruleTStructMethod();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructMethod; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructMethod() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        EObject lv_typeVars_2_0 = null;
        EObject lv_typeVars_4_0 = null;
        AntlrDatatypeRuleToken lv_name_6_0 = null;
        EObject this_TAnonymousFormalParameterList_8 = null;
        EObject this_ColonSepReturnTypeRef_10 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructMethodAccess().getTStructMethodAction_0_0_0(),
              							current);
            }
            }
            int alt675=2;
            int LA675_0 = input.LA(1);
            if ( (LA675_0==LessThanSign) ) {
                alt675=1;
            }
            switch (alt675) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,LessThanSign,FOLLOW_185); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_1, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      								newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVarsTypeVariableParserRuleCall_0_0_1_1_0());
                    }
                    pushFollow(FOLLOW_104);
                    lv_typeVars_2_0=ruleTypeVariable();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      								if (current==null) {
                      									current = createModelElementForParent(grammarAccess.getTStructMethodRule());
                      								}
                      								add(
                      									current,
                      									"typeVars",
                      									lv_typeVars_2_0,
                      									"org.eclipse.n4js.TypeExpressions.TypeVariable");
                      								afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    loop674:
                    do {
                        int alt674=2;
                        int LA674_0 = input.LA(1);
                        if ( (LA674_0==Comma) ) {
                            alt674=1;
                        }
                        switch (alt674) {
                    	case 1 :
                    	    {
                    	    otherlv_3=(Token)match(input,Comma,FOLLOW_185); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      							newLeafNode(otherlv_3, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0());
                    	    }
                    	    {
                    	    {
                    	    if ( state.backtracking==0 ) {
                    	      									newCompositeNode(grammarAccess.getTStructMethodAccess().getTypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0());
                    	    }
                    	    pushFollow(FOLLOW_104);
                    	    lv_typeVars_4_0=ruleTypeVariable();
                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {
                    	      									if (current==null) {
                    	      										current = createModelElementForParent(grammarAccess.getTStructMethodRule());
                    	      									}
                    	      									add(
                    	      										current,
                    	      										"typeVars",
                    	      										lv_typeVars_4_0,
                    	      										"org.eclipse.n4js.TypeExpressions.TypeVariable");
                    	      									afterParserOrEnumRuleCall();
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop674;
                        }
                    } while (true);
                    otherlv_5=(Token)match(input,GreaterThanSign,FOLLOW_195); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(otherlv_5, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3());
                    }
                    }
                    break;
            }
            int alt676=2;
            int LA676_0 = input.LA(1);
            if ( ((LA676_0>=Intersection && LA676_0<=With)||(LA676_0>=For && LA676_0<=Var)||(LA676_0>=As && LA676_0<=Of)||LA676_0==RULE_IDENTIFIER) ) {
                alt676=1;
            }
            switch (alt676) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getTStructMethodAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
                    }
                    pushFollow(FOLLOW_46);
                    lv_name_6_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getTStructMethodRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_6_0,
                      								"org.eclipse.n4js.TypeExpressions.IdentifierName");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
            }
            otherlv_7=(Token)match(input,LeftParenthesis,FOLLOW_186); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_7, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
            }
            }
            }
            if ( state.backtracking==0 ) {
              			if (current==null) {
              				current = createModelElement(grammarAccess.getTStructMethodRule());
              			}
              			newCompositeNode(grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1());
            }
            pushFollow(FOLLOW_69);
            this_TAnonymousFormalParameterList_8=ruleTAnonymousFormalParameterList(current);
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current = this_TAnonymousFormalParameterList_8;
              			afterParserOrEnumRuleCall();
            }
            otherlv_9=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_9, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
            }
            int alt677=2;
            int LA677_0 = input.LA(1);
            if ( (LA677_0==Colon) ) {
                alt677=1;
            }
            switch (alt677) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructMethodRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructMethodAccess().getColonSepReturnTypeRefParserRuleCall_3());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepReturnTypeRef_10=ruleColonSepReturnTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepReturnTypeRef_10;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_typeRef_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepTypeRefAccess().getTypeRefTypeRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_typeRef_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepTypeRefRule());
              					}
              					set(
              						current,
              						"typeRef",
              						lv_typeRef_1_0,
              						"org.eclipse.n4js.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleColonSepReturnTypeRef(EObject in_current) throws RecognitionException {
        EObject current = in_current;
        Token otherlv_0=null;
        EObject lv_returnTypeRef_1_0 = null;
        	enterRule();
        try {
            {
            {
            otherlv_0=(Token)match(input,Colon,FOLLOW_20); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_0, grammarAccess.getColonSepReturnTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getColonSepReturnTypeRefAccess().getReturnTypeRefTypeRefParserRuleCall_1_0());
            }
            pushFollow(FOLLOW_2);
            lv_returnTypeRef_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getColonSepReturnTypeRefRule());
              					}
              					set(
              						current,
              						"returnTypeRef",
              						lv_returnTypeRef_1_0,
              						"org.eclipse.n4js.TypeExpressions.TypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructField() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructField = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructFieldRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructField=ruleTStructField();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructField; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructField() throws RecognitionException {
        EObject current = null;
        Token lv_optional_1_0=null;
        AntlrDatatypeRuleToken lv_name_0_0 = null;
        EObject this_ColonSepTypeRef_2 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTStructFieldAccess().getNameIdentifierNameParserRuleCall_0_0());
            }
            pushFollow(FOLLOW_196);
            lv_name_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructFieldRule());
              					}
              					set(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.n4js.TypeExpressions.IdentifierName");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            int alt678=2;
            int LA678_0 = input.LA(1);
            if ( (LA678_0==QuestionMark) ) {
                alt678=1;
            }
            switch (alt678) {
                case 1 :
                    {
                    {
                    lv_optional_1_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructFieldRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_1_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            int alt679=2;
            int LA679_0 = input.LA(1);
            if ( (LA679_0==Colon) ) {
                alt679=1;
            }
            switch (alt679) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructFieldRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructFieldAccess().getColonSepTypeRefParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_2=ruleColonSepTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepTypeRef_2;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructGetter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructGetter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructGetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructGetter=ruleTStructGetter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructGetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructGetter() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject this_ColonSepTypeRef_6 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructGetterAccess().getTStructGetterAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Get,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getTStructGetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_98);
            lv_name_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructGetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt680=2;
            int LA680_0 = input.LA(1);
            if ( (LA680_0==QuestionMark) ) {
                alt680=1;
            }
            switch (alt680) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructGetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
            }
            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
            }
            int alt681=2;
            int LA681_0 = input.LA(1);
            if ( (LA681_0==Colon) ) {
                alt681=1;
            }
            switch (alt681) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      				if (current==null) {
                      					current = createModelElement(grammarAccess.getTStructGetterRule());
                      				}
                      				newCompositeNode(grammarAccess.getTStructGetterAccess().getColonSepTypeRefParserRuleCall_4());
                    }
                    pushFollow(FOLLOW_2);
                    this_ColonSepTypeRef_6=ruleColonSepTypeRef(current);
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_ColonSepTypeRef_6;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTStructSetter() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTStructSetter = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTStructSetterRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTStructSetter=ruleTStructSetter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTStructSetter; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTStructSetter() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_optional_3_0=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;
        EObject lv_fpar_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getTStructSetterAccess().getTStructSetterAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,Set,FOLLOW_15); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
            }
            {
            {
            if ( state.backtracking==0 ) {
              							newCompositeNode(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0());
            }
            pushFollow(FOLLOW_98);
            lv_name_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              							if (current==null) {
              								current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              							}
              							set(
              								current,
              								"name",
              								lv_name_2_0,
              								"org.eclipse.n4js.TypeExpressions.IdentifierName");
              							afterParserOrEnumRuleCall();
            }
            }
            }
            }
            }
            int alt682=2;
            int LA682_0 = input.LA(1);
            if ( (LA682_0==QuestionMark) ) {
                alt682=1;
            }
            switch (alt682) {
                case 1 :
                    {
                    {
                    lv_optional_3_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(lv_optional_3_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      					if (current==null) {
                      						current = createModelElement(grammarAccess.getTStructSetterRule());
                      					}
                      					setWithLastConsumed(current, "optional", lv_optional_3_0 != null, "?");
                    }
                    }
                    }
                    break;
            }
            otherlv_4=(Token)match(input,LeftParenthesis,FOLLOW_188); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_4, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_69);
            lv_fpar_5_0=ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTStructSetterRule());
              					}
              					set(
              						current,
              						"fpar",
              						lv_fpar_5_0,
              						"org.eclipse.n4js.TypeExpressions.TAnonymousFormalParameter");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_6=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_6, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypingStrategyUseSiteOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyUseSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyUseSiteOperator=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyUseSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_STRUCTMODSUFFIX_2=null;
        	enterRule();
        try {
            {
            {
            kw=(Token)match(input,Tilde,FOLLOW_197); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
            }
            int alt683=3;
            int LA683_0 = input.LA(1);
            if ( (LA683_0==Tilde) ) {
                alt683=1;
            }
            else if ( (LA683_0==RULE_STRUCTMODSUFFIX) ) {
                alt683=2;
            }
            switch (alt683) {
                case 1 :
                    {
                    kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(kw);
                      				newLeafNode(kw, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    this_STRUCTMODSUFFIX_2=(Token)match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current.merge(this_STRUCTMODSUFFIX_2);
                    }
                    if ( state.backtracking==0 ) {
                      				newLeafNode(this_STRUCTMODSUFFIX_2, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getSTRUCTMODSUFFIXTerminalRuleCall_1_1());
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypingStrategyDefSiteOperator = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypingStrategyDefSiteOperatorRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypingStrategyDefSiteOperator=ruleTypingStrategyDefSiteOperator();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypingStrategyDefSiteOperator.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            kw=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              		current.merge(kw);
              		newLeafNode(kw, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeTypeRef() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeTypeRef = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeTypeRefRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeTypeRef=ruleTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeTypeRef; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeTypeRef() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token lv_constructorRef_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_typeArg_4_0 = null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getTypeTypeRefAccess().getTypeTypeRefAction_0(),
              					current);
            }
            }
            int alt684=2;
            int LA684_0 = input.LA(1);
            if ( (LA684_0==Type) ) {
                alt684=1;
            }
            else if ( (LA684_0==Constructor) ) {
                alt684=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 684, 0, input);
                throw nvae;
            }
            switch (alt684) {
                case 1 :
                    {
                    otherlv_1=(Token)match(input,Type,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_1, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_constructorRef_2_0=(Token)match(input,Constructor,FOLLOW_6); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_constructorRef_2_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeTypeRefRule());
                      						}
                      						setWithLastConsumed(current, "constructorRef", lv_constructorRef_2_0 != null, "constructor");
                    }
                    }
                    }
                    }
                    break;
            }
            otherlv_3=(Token)match(input,LeftCurlyBracket,FOLLOW_198); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_3, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            if ( state.backtracking==0 ) {
              					newCompositeNode(grammarAccess.getTypeTypeRefAccess().getTypeArgTypeArgInTypeTypeRefParserRuleCall_3_0());
            }
            pushFollow(FOLLOW_29);
            lv_typeArg_4_0=ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getTypeTypeRefRule());
              					}
              					set(
              						current,
              						"typeArg",
              						lv_typeArg_4_0,
              						"org.eclipse.n4js.TypeExpressions.TypeArgInTypeTypeRef");
              					afterParserOrEnumRuleCall();
            }
            }
            }
            otherlv_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_5, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleTypeReferenceName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleTypeReferenceName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeReferenceNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeReferenceName=ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeReferenceName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleTypeReferenceName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        Token this_IDENTIFIER_6=null;
        	enterRule();
        try {
            {
            int alt685=7;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt685=1;
                }
                break;
            case This:
                {
                alt685=2;
                }
                break;
            case Await:
                {
                alt685=3;
                }
                break;
            case Promisify:
                {
                alt685=4;
                }
                break;
            case Target:
                {
                alt685=5;
                }
                break;
            case Default:
                {
                alt685=6;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt685=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 685, 0, input);
                throw nvae;
            }
            switch (alt685) {
                case 1 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getTypeReferenceNameAccess().getDefaultKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    this_IDENTIFIER_6=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_6);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_6, grammarAccess.getTypeReferenceNameAccess().getIDENTIFIERTerminalRuleCall_6());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeArgument() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeArgument = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeArgumentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeArgument=ruleTypeArgument();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeArgument; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeArgument() throws RecognitionException {
        EObject current = null;
        EObject this_Wildcard_0 = null;
        EObject this_TypeRef_1 = null;
        	enterRule();
        try {
            {
            int alt686=2;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA686_1 = input.LA(2);
                if ( (LA686_1==EOF||LA686_1==Extends||LA686_1==Super||LA686_1==Comma||LA686_1==GreaterThanSign||LA686_1==RightSquareBracket) ) {
                    alt686=1;
                }
                else if ( (LA686_1==LeftSquareBracket) ) {
                    alt686=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 686, 1, input);
                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt686=1;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case False:
            case Union:
            case This:
            case This_1:
            case True:
            case Type:
            case Void:
            case LeftParenthesis:
            case PlusSign:
            case HyphenMinus:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_HEX_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_STRING:
                {
                alt686=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 686, 0, input);
                throw nvae;
            }
            switch (alt686) {
                case 1 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_Wildcard_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_Wildcard_0;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_TypeRef_1=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_TypeRef_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcard() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcard = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcard=ruleWildcard();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcard; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcard() throws RecognitionException {
        EObject current = null;
        EObject this_WildcardOldNotation_0 = null;
        EObject this_WildcardNewNotation_1 = null;
        	enterRule();
        try {
            {
            int alt687=2;
            int LA687_0 = input.LA(1);
            if ( (LA687_0==QuestionMark) && (synpred375_InternalN4JSParser())) {
                alt687=1;
            }
            else if ( (LA687_0==Out||LA687_0==In) ) {
                alt687=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 687, 0, input);
                throw nvae;
            }
            switch (alt687) {
                case 1 :
                    {
                    {
                    if ( state.backtracking==0 ) {
                      				newCompositeNode(grammarAccess.getWildcardAccess().getWildcardOldNotationParserRuleCall_0());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardOldNotation_0=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = this_WildcardOldNotation_0;
                      				afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getWildcardAccess().getWildcardNewNotationParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_WildcardNewNotation_1=ruleWildcardNewNotation();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current = this_WildcardNewNotation_1;
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardOldNotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardOldNotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotation=ruleWildcardOldNotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardOldNotation() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        EObject lv_declaredUpperBound_3_0 = null;
        EObject lv_declaredLowerBound_5_0 = null;
        	enterRule();
        try {
            {
            {
            {
            {
            {
            if ( state.backtracking==0 ) {
              						current = forceCreateModelElement(
              							grammarAccess.getWildcardOldNotationAccess().getWildcardAction_0_0_0(),
              							current);
            }
            }
            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_199); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationAccess().getQuestionMarkKeyword_0_0_1());
            }
            }
            }
            int alt688=3;
            int LA688_0 = input.LA(1);
            if ( (LA688_0==Extends) ) {
                alt688=1;
            }
            else if ( (LA688_0==Super) ) {
                alt688=2;
            }
            switch (alt688) {
                case 1 :
                    {
                    {
                    otherlv_2=(Token)match(input,Extends,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_2, grammarAccess.getWildcardOldNotationAccess().getExtendsKeyword_1_0_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredUpperBound",
                      								lv_declaredUpperBound_3_0,
                      								"org.eclipse.n4js.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    otherlv_4=(Token)match(input,Super,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      					newLeafNode(otherlv_4, grammarAccess.getWildcardOldNotationAccess().getSuperKeyword_1_1_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      							newCompositeNode(grammarAccess.getWildcardOldNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_5_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getWildcardOldNotationRule());
                      							}
                      							set(
                      								current,
                      								"declaredLowerBound",
                      								lv_declaredLowerBound_5_0,
                      								"org.eclipse.n4js.TypeExpressions.TypeRef");
                      							afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardOldNotationWithoutBound = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardOldNotationWithoutBoundRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardOldNotationWithoutBound=ruleWildcardOldNotationWithoutBound();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardOldNotationWithoutBound; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardOldNotationWithoutBound() throws RecognitionException {
        EObject current = null;
        Token otherlv_1=null;
        	enterRule();
        try {
            {
            {
            {
            if ( state.backtracking==0 ) {
              				current = forceCreateModelElement(
              					grammarAccess.getWildcardOldNotationWithoutBoundAccess().getWildcardAction_0(),
              					current);
            }
            }
            otherlv_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			newLeafNode(otherlv_1, grammarAccess.getWildcardOldNotationWithoutBoundAccess().getQuestionMarkKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleWildcardNewNotation() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleWildcardNewNotation = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWildcardNewNotationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWildcardNewNotation=ruleWildcardNewNotation();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWildcardNewNotation; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleWildcardNewNotation() throws RecognitionException {
        EObject current = null;
        Token lv_usingInOutNotation_0_0=null;
        Token lv_usingInOutNotation_2_0=null;
        EObject lv_declaredUpperBound_1_0 = null;
        EObject lv_declaredLowerBound_3_0 = null;
        	enterRule();
        try {
            {
            int alt689=2;
            int LA689_0 = input.LA(1);
            if ( (LA689_0==Out) ) {
                alt689=1;
            }
            else if ( (LA689_0==In) ) {
                alt689=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 689, 0, input);
                throw nvae;
            }
            switch (alt689) {
                case 1 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_0_0=(Token)match(input,Out,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_usingInOutNotation_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", lv_usingInOutNotation_0_0 != null, "out");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundTypeRefParserRuleCall_0_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredUpperBound_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_1_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    lv_usingInOutNotation_2_0=(Token)match(input,In,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_usingInOutNotation_2_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						setWithLastConsumed(current, "usingInOutNotation", lv_usingInOutNotation_2_0 != null, "in");
                    }
                    }
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundTypeRefParserRuleCall_1_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_declaredLowerBound_3_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getWildcardNewNotationRule());
                      						}
                      						set(
                      							current,
                      							"declaredLowerBound",
                      							lv_declaredLowerBound_3_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject entryRuleTypeVariable() throws RecognitionException {
        EObject current = null;
        EObject iv_ruleTypeVariable = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getTypeVariableRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleTypeVariable=ruleTypeVariable();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleTypeVariable; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final EObject ruleTypeVariable() throws RecognitionException {
        EObject current = null;
        Token lv_declaredCovariant_0_0=null;
        Token lv_declaredContravariant_1_0=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_declaredUpperBound_4_0 = null;
        EObject lv_defaultArgument_6_0 = null;
        	enterRule();
        try {
            {
            {
            int alt690=3;
            int LA690_0 = input.LA(1);
            if ( (LA690_0==Out) ) {
                alt690=1;
            }
            else if ( (LA690_0==In) ) {
                alt690=2;
            }
            switch (alt690) {
                case 1 :
                    {
                    {
                    {
                    lv_declaredCovariant_0_0=(Token)match(input,Out,FOLLOW_200); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredCovariant_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredCovariant", lv_declaredCovariant_0_0 != null, "out");
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    lv_declaredContravariant_1_0=(Token)match(input,In,FOLLOW_200); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						newLeafNode(lv_declaredContravariant_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                    }
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getTypeVariableRule());
                      						}
                      						setWithLastConsumed(current, "declaredContravariant", lv_declaredContravariant_1_0 != null, "in");
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            lv_name_2_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_62); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              					newLeafNode(lv_name_2_0, grammarAccess.getTypeVariableAccess().getNameIDENTIFIERTerminalRuleCall_1_0());
            }
            if ( state.backtracking==0 ) {
              					if (current==null) {
              						current = createModelElement(grammarAccess.getTypeVariableRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_2_0,
              						"org.eclipse.n4js.TypeExpressions.IDENTIFIER");
            }
            }
            }
            int alt691=2;
            int LA691_0 = input.LA(1);
            if ( (LA691_0==Extends) ) {
                alt691=1;
            }
            switch (alt691) {
                case 1 :
                    {
                    otherlv_3=(Token)match(input,Extends,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_3, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundTypeRefParserRuleCall_2_1_0());
                    }
                    pushFollow(FOLLOW_63);
                    lv_declaredUpperBound_4_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"declaredUpperBound",
                      							lv_declaredUpperBound_4_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            int alt692=2;
            int LA692_0 = input.LA(1);
            if ( (LA692_0==EqualsSign) ) {
                alt692=1;
            }
            switch (alt692) {
                case 1 :
                    {
                    otherlv_5=(Token)match(input,EqualsSign,FOLLOW_20); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				newLeafNode(otherlv_5, grammarAccess.getTypeVariableAccess().getEqualsSignKeyword_3_0());
                    }
                    {
                    {
                    if ( state.backtracking==0 ) {
                      						newCompositeNode(grammarAccess.getTypeVariableAccess().getDefaultArgumentTypeRefParserRuleCall_3_1_0());
                    }
                    pushFollow(FOLLOW_2);
                    lv_defaultArgument_6_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getTypeVariableRule());
                      						}
                      						set(
                      							current,
                      							"defaultArgument",
                      							lv_defaultArgument_6_0,
                      							"org.eclipse.n4js.TypeExpressions.TypeRef");
                      						afterParserOrEnumRuleCall();
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleBindingIdentifier() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleBindingIdentifier = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBindingIdentifierRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBindingIdentifier=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBindingIdentifier.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleBindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;
        	enterRule();
        try {
            {
            int alt693=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt693=1;
                }
                break;
            case Yield:
                {
                alt693=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt693=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 693, 0, input);
                throw nvae;
            }
            switch (alt693) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_2);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken norm1_BindingIdentifier() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_N4Keyword_1 = null;
        	enterRule();
        try {
            {
            int alt694=2;
            int LA694_0 = input.LA(1);
            if ( (LA694_0==RULE_IDENTIFIER) ) {
                alt694=1;
            }
            else if ( ((LA694_0>=Intersection && LA694_0<=Implements)||(LA694_0>=Promisify && LA694_0<=Abstract)||LA694_0==External||(LA694_0>=Private && LA694_0<=Project)||LA694_0==Public||LA694_0==Static||LA694_0==Target||(LA694_0>=Async && LA694_0<=Await)||LA694_0==Union||LA694_0==This||LA694_0==From||LA694_0==Type||(LA694_0>=Get && LA694_0<=Let)||(LA694_0>=Out && LA694_0<=Set)||LA694_0==As||LA694_0==Of) ) {
                alt694=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 694, 0, input);
                throw nvae;
            }
            switch (alt694) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getBindingIdentifierAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getBindingIdentifierAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_1=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_1);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleIdentifierName() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleIdentifierName = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIdentifierNameRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIdentifierName=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIdentifierName.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleIdentifierName() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token this_IDENTIFIER_0=null;
        AntlrDatatypeRuleToken this_ReservedWord_1 = null;
        AntlrDatatypeRuleToken this_N4Keyword_2 = null;
        	enterRule();
        try {
            {
            int alt695=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt695=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt695=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Namespace:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt695=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 695, 0, input);
                throw nvae;
            }
            switch (alt695) {
                case 1 :
                    {
                    this_IDENTIFIER_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_IDENTIFIER_0);
                    }
                    if ( state.backtracking==0 ) {
                      			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierNameAccess().getIDENTIFIERTerminalRuleCall_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getReservedWordParserRuleCall_1());
                    }
                    pushFollow(FOLLOW_2);
                    this_ReservedWord_1=ruleReservedWord();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_ReservedWord_1);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
                case 3 :
                    {
                    if ( state.backtracking==0 ) {
                      			newCompositeNode(grammarAccess.getIdentifierNameAccess().getN4KeywordParserRuleCall_2());
                    }
                    pushFollow(FOLLOW_2);
                    this_N4Keyword_2=ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(this_N4Keyword_2);
                    }
                    if ( state.backtracking==0 ) {
                      			afterParserOrEnumRuleCall();
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleReservedWord() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleReservedWord = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReservedWordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReservedWord=ruleReservedWord();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReservedWord.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleReservedWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt696=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt696=1;
                }
                break;
            case Case:
                {
                alt696=2;
                }
                break;
            case Catch:
                {
                alt696=3;
                }
                break;
            case Class:
                {
                alt696=4;
                }
                break;
            case Const:
                {
                alt696=5;
                }
                break;
            case Continue:
                {
                alt696=6;
                }
                break;
            case Debugger:
                {
                alt696=7;
                }
                break;
            case Default:
                {
                alt696=8;
                }
                break;
            case Delete:
                {
                alt696=9;
                }
                break;
            case Do:
                {
                alt696=10;
                }
                break;
            case Else:
                {
                alt696=11;
                }
                break;
            case Export:
                {
                alt696=12;
                }
                break;
            case Extends:
                {
                alt696=13;
                }
                break;
            case Finally:
                {
                alt696=14;
                }
                break;
            case For:
                {
                alt696=15;
                }
                break;
            case Function:
                {
                alt696=16;
                }
                break;
            case If:
                {
                alt696=17;
                }
                break;
            case Import:
                {
                alt696=18;
                }
                break;
            case In:
                {
                alt696=19;
                }
                break;
            case Instanceof:
                {
                alt696=20;
                }
                break;
            case New:
                {
                alt696=21;
                }
                break;
            case Return:
                {
                alt696=22;
                }
                break;
            case Super:
                {
                alt696=23;
                }
                break;
            case Switch:
                {
                alt696=24;
                }
                break;
            case This_1:
                {
                alt696=25;
                }
                break;
            case Throw:
                {
                alt696=26;
                }
                break;
            case Try:
                {
                alt696=27;
                }
                break;
            case Typeof:
                {
                alt696=28;
                }
                break;
            case Var:
                {
                alt696=29;
                }
                break;
            case Void:
                {
                alt696=30;
                }
                break;
            case While:
                {
                alt696=31;
                }
                break;
            case With:
                {
                alt696=32;
                }
                break;
            case Yield:
                {
                alt696=33;
                }
                break;
            case Null:
                {
                alt696=34;
                }
                break;
            case True:
                {
                alt696=35;
                }
                break;
            case False:
                {
                alt696=36;
                }
                break;
            case Enum:
                {
                alt696=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 696, 0, input);
                throw nvae;
            }
            switch (alt696) {
                case 1 :
                    {
                    kw=(Token)match(input,Break,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Case,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Class,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,Default,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Do,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Else,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Export,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,For,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getForKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,Function,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,If,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Import,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,In,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,New,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Return,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Super,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                    }
                    }
                    break;
                case 26 :
                    {
                    kw=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                    }
                    }
                    break;
                case 27 :
                    {
                    kw=(Token)match(input,Try,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                    }
                    }
                    break;
                case 28 :
                    {
                    kw=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                    }
                    }
                    break;
                case 29 :
                    {
                    kw=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                    }
                    }
                    break;
                case 30 :
                    {
                    kw=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                    }
                    }
                    break;
                case 31 :
                    {
                    kw=(Token)match(input,While,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                    }
                    }
                    break;
                case 32 :
                    {
                    kw=(Token)match(input,With,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                    }
                    }
                    break;
                case 33 :
                    {
                    kw=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                    }
                    }
                    break;
                case 34 :
                    {
                    kw=(Token)match(input,Null,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                    }
                    }
                    break;
                case 35 :
                    {
                    kw=(Token)match(input,True,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                    }
                    }
                    break;
                case 36 :
                    {
                    kw=(Token)match(input,False,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                    }
                    }
                    break;
                case 37 :
                    {
                    kw=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleN4Keyword() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleN4Keyword = null;
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getN4KeywordRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleN4Keyword=ruleN4Keyword();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleN4Keyword.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleN4Keyword() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        try {
            {
            int alt697=26;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt697=1;
                }
                break;
            case Set:
                {
                alt697=2;
                }
                break;
            case Let:
                {
                alt697=3;
                }
                break;
            case Project:
                {
                alt697=4;
                }
                break;
            case External:
                {
                alt697=5;
                }
                break;
            case Abstract:
                {
                alt697=6;
                }
                break;
            case Static:
                {
                alt697=7;
                }
                break;
            case As:
                {
                alt697=8;
                }
                break;
            case From:
                {
                alt697=9;
                }
                break;
            case Constructor:
                {
                alt697=10;
                }
                break;
            case Of:
                {
                alt697=11;
                }
                break;
            case Target:
                {
                alt697=12;
                }
                break;
            case Type:
                {
                alt697=13;
                }
                break;
            case Union:
                {
                alt697=14;
                }
                break;
            case Intersection:
                {
                alt697=15;
                }
                break;
            case This:
                {
                alt697=16;
                }
                break;
            case Promisify:
                {
                alt697=17;
                }
                break;
            case Await:
                {
                alt697=18;
                }
                break;
            case Async:
                {
                alt697=19;
                }
                break;
            case Implements:
                {
                alt697=20;
                }
                break;
            case Interface:
                {
                alt697=21;
                }
                break;
            case Private:
                {
                alt697=22;
                }
                break;
            case Protected:
                {
                alt697=23;
                }
                break;
            case Public:
                {
                alt697=24;
                }
                break;
            case Out:
                {
                alt697=25;
                }
                break;
            case Namespace:
                {
                alt697=26;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 697, 0, input);
                throw nvae;
            }
            switch (alt697) {
                case 1 :
                    {
                    kw=(Token)match(input,Get,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    kw=(Token)match(input,Set,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    kw=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    kw=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    kw=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    kw=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    kw=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    kw=(Token)match(input,As,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    kw=(Token)match(input,From,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    kw=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    kw=(Token)match(input,Of,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    kw=(Token)match(input,Target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    kw=(Token)match(input,Type,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    kw=(Token)match(input,Union,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    kw=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    kw=(Token)match(input,This,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    kw=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    kw=(Token)match(input,Await,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    kw=(Token)match(input,Async,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    kw=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    kw=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    kw=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    kw=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    kw=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    kw=(Token)match(input,Out,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                    }
                    }
                    break;
                case 26 :
                    {
                    kw=(Token)match(input,Namespace,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      			current.merge(kw);
                      			newLeafNode(kw, grammarAccess.getN4KeywordAccess().getNamespaceKeyword_25());
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final String entryRuleArrow() throws RecognitionException {
        String current = null;
        AntlrDatatypeRuleToken iv_ruleArrow = null;
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getArrowRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleArrow=ruleArrow();
            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleArrow.getText(); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final AntlrDatatypeRuleToken ruleArrow() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();
        Token kw=null;
        	enterRule();
        	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
        try {
            {
            {
            kw=(Token)match(input,EqualsSign,FOLLOW_121); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getArrowAccess().getEqualsSignKeyword_0());
            }
            kw=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {
              			current.merge(kw);
              			newLeafNode(kw, grammarAccess.getArrowAccess().getGreaterThanSignKeyword_1());
            }
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
            	myHiddenTokenState.restore();
        }
        return current;
    }
    public final Enumerator ruleVariableStatementKeyword() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        	enterRule();
        try {
            {
            int alt698=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt698=1;
                }
                break;
            case Const:
                {
                alt698=2;
                }
                break;
            case Let:
                {
                alt698=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 698, 0, input);
                throw nvae;
            }
            switch (alt698) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator rulePostfixOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        	enterRule();
        try {
            {
            int alt699=2;
            int LA699_0 = input.LA(1);
            if ( (LA699_0==PlusSignPlusSign) ) {
                alt699=1;
            }
            else if ( (LA699_0==HyphenMinusHyphenMinus) ) {
                alt699=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 699, 0, input);
                throw nvae;
            }
            switch (alt699) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleUnaryOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        	enterRule();
        try {
            {
            int alt700=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt700=1;
                }
                break;
            case Void:
                {
                alt700=2;
                }
                break;
            case Typeof:
                {
                alt700=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt700=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt700=5;
                }
                break;
            case PlusSign:
                {
                alt700=6;
                }
                break;
            case HyphenMinus:
                {
                alt700=7;
                }
                break;
            case Tilde:
                {
                alt700=8;
                }
                break;
            case ExclamationMark:
                {
                alt700=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 700, 0, input);
                throw nvae;
            }
            switch (alt700) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Void,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    {
                    enumLiteral_8=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleMultiplicativeOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        	enterRule();
        try {
            {
            int alt701=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt701=1;
                }
                break;
            case Solidus:
                {
                alt701=2;
                }
                break;
            case PercentSign:
                {
                alt701=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 701, 0, input);
                throw nvae;
            }
            switch (alt701) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleAdditiveOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        	enterRule();
        try {
            {
            int alt702=2;
            int LA702_0 = input.LA(1);
            if ( (LA702_0==PlusSign) ) {
                alt702=1;
            }
            else if ( (LA702_0==HyphenMinus) ) {
                alt702=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 702, 0, input);
                throw nvae;
            }
            switch (alt702) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleEqualityOperator() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        	enterRule();
        try {
            {
            int alt703=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt703=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt703=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt703=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt703=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 703, 0, input);
                throw nvae;
            }
            switch (alt703) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleN4Modifier() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        	enterRule();
        try {
            {
            int alt704=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt704=1;
                }
                break;
            case Project:
                {
                alt704=2;
                }
                break;
            case Protected:
                {
                alt704=3;
                }
                break;
            case Public:
                {
                alt704=4;
                }
                break;
            case External:
                {
                alt704=5;
                }
                break;
            case Abstract:
                {
                alt704=6;
                }
                break;
            case Static:
                {
                alt704=7;
                }
                break;
            case Const:
                {
                alt704=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 704, 0, input);
                throw nvae;
            }
            switch (alt704) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    enumLiteral_7=(Token)match(input,Const,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final Enumerator ruleN4ModifierWithoutConst() throws RecognitionException {
        Enumerator current = null;
        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        	enterRule();
        try {
            {
            int alt705=7;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt705=1;
                }
                break;
            case Project:
                {
                alt705=2;
                }
                break;
            case Protected:
                {
                alt705=3;
                }
                break;
            case Public:
                {
                alt705=4;
                }
                break;
            case External:
                {
                alt705=5;
                }
                break;
            case Abstract:
                {
                alt705=6;
                }
                break;
            case Static:
                {
                alt705=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 705, 0, input);
                throw nvae;
            }
            switch (alt705) {
                case 1 :
                    {
                    {
                    enumLiteral_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getPrivateEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getN4ModifierWithoutConstAccess().getPrivateEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    enumLiteral_1=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getProjectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getN4ModifierWithoutConstAccess().getProjectEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    enumLiteral_2=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getN4ModifierWithoutConstAccess().getProtectedEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    enumLiteral_3=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getPublicEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getN4ModifierWithoutConstAccess().getPublicEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    enumLiteral_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getExternalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getN4ModifierWithoutConstAccess().getExternalEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    enumLiteral_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getAbstractEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getN4ModifierWithoutConstAccess().getAbstractEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    enumLiteral_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {
                      				current = grammarAccess.getN4ModifierWithoutConstAccess().getStaticEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getN4ModifierWithoutConstAccess().getStaticEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
              	leaveRule();
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop706:
        do {
            int alt706=2;
            int LA706_0 = input.LA(1);
            if ( ((LA706_0>=Protected && LA706_0<=Abstract)||LA706_0==External||(LA706_0>=Private && LA706_0<=Project)||LA706_0==Public||LA706_0==Static||LA706_0==Const) ) {
                alt706=1;
            }
            switch (alt706) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_4);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop706;
            }
        } while (true);
        match(input,Namespace,FOLLOW_5); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop707:
        do {
            int alt707=2;
            int LA707_0 = input.LA(1);
            if ( ((LA707_0>=Protected && LA707_0<=Abstract)||LA707_0==External||(LA707_0>=Private && LA707_0<=Project)||LA707_0==Public||LA707_0==Static||LA707_0==Const) ) {
                alt707=1;
            }
            switch (alt707) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop707;
            }
        } while (true);
        match(input,Class,FOLLOW_201); if (state.failed) return ;
        int alt708=2;
        int LA708_0 = input.LA(1);
        if ( (LA708_0==Tilde) ) {
            alt708=1;
        }
        switch (alt708) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_202);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt709=2;
        int LA709_0 = input.LA(1);
        if ( ((LA709_0>=Intersection && LA709_0<=Implements)||(LA709_0>=Promisify && LA709_0<=Abstract)||LA709_0==External||(LA709_0>=Private && LA709_0<=Project)||LA709_0==Public||LA709_0==Static||LA709_0==Target||(LA709_0>=Async && LA709_0<=Await)||LA709_0==Union||(LA709_0>=Yield && LA709_0<=This)||LA709_0==From||LA709_0==Type||(LA709_0>=Get && LA709_0<=Let)||(LA709_0>=Out && LA709_0<=Set)||LA709_0==As||LA709_0==Of||LA709_0==RULE_IDENTIFIER) ) {
            alt709=1;
        }
        switch (alt709) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop710:
        do {
            int alt710=2;
            int LA710_0 = input.LA(1);
            if ( ((LA710_0>=Protected && LA710_0<=Abstract)||LA710_0==External||(LA710_0>=Private && LA710_0<=Project)||LA710_0==Public||LA710_0==Static||LA710_0==Const) ) {
                alt710=1;
            }
            switch (alt710) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_13);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop710;
            }
        } while (true);
        match(input,Interface,FOLLOW_201); if (state.failed) return ;
        int alt711=2;
        int LA711_0 = input.LA(1);
        if ( (LA711_0==Tilde) ) {
            alt711=1;
        }
        switch (alt711) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_202);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt712=2;
        int LA712_0 = input.LA(1);
        if ( ((LA712_0>=Intersection && LA712_0<=Implements)||(LA712_0>=Promisify && LA712_0<=Abstract)||LA712_0==External||(LA712_0>=Private && LA712_0<=Project)||LA712_0==Public||LA712_0==Static||LA712_0==Target||(LA712_0>=Async && LA712_0<=Await)||LA712_0==Union||(LA712_0>=Yield && LA712_0<=This)||LA712_0==From||LA712_0==Type||(LA712_0>=Get && LA712_0<=Let)||(LA712_0>=Out && LA712_0<=Set)||LA712_0==As||LA712_0==Of||LA712_0==RULE_IDENTIFIER) ) {
            alt712=1;
        }
        switch (alt712) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred5_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop713:
        do {
            int alt713=2;
            int LA713_0 = input.LA(1);
            if ( ((LA713_0>=Protected && LA713_0<=Abstract)||LA713_0==External||(LA713_0>=Private && LA713_0<=Project)||LA713_0==Public||LA713_0==Static||LA713_0==Const) ) {
                alt713=1;
            }
            switch (alt713) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_14);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop713;
            }
        } while (true);
        match(input,Enum,FOLLOW_202); if (state.failed) return ;
        int alt714=2;
        int LA714_0 = input.LA(1);
        if ( ((LA714_0>=Intersection && LA714_0<=Implements)||(LA714_0>=Promisify && LA714_0<=Abstract)||LA714_0==External||(LA714_0>=Private && LA714_0<=Project)||LA714_0==Public||LA714_0==Static||LA714_0==Target||(LA714_0>=Async && LA714_0<=Await)||LA714_0==Union||(LA714_0>=Yield && LA714_0<=This)||LA714_0==From||LA714_0==Type||(LA714_0>=Get && LA714_0<=Let)||(LA714_0>=Out && LA714_0<=Set)||LA714_0==As||LA714_0==Of||LA714_0==RULE_IDENTIFIER) ) {
            alt714=1;
        }
        switch (alt714) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred6_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop715:
        do {
            int alt715=2;
            int LA715_0 = input.LA(1);
            if ( ((LA715_0>=Protected && LA715_0<=Abstract)||LA715_0==External||(LA715_0>=Private && LA715_0<=Project)||LA715_0==Public||LA715_0==Static) ) {
                alt715=1;
            }
            switch (alt715) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_17);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop715;
            }
        } while (true);
        match(input,Type,FOLLOW_202); if (state.failed) return ;
        int alt716=2;
        int LA716_0 = input.LA(1);
        if ( ((LA716_0>=Intersection && LA716_0<=Implements)||(LA716_0>=Promisify && LA716_0<=Abstract)||LA716_0==External||(LA716_0>=Private && LA716_0<=Project)||LA716_0==Public||LA716_0==Static||LA716_0==Target||(LA716_0>=Async && LA716_0<=Await)||LA716_0==Union||(LA716_0>=Yield && LA716_0<=This)||LA716_0==From||LA716_0==Type||(LA716_0>=Get && LA716_0<=Let)||(LA716_0>=Out && LA716_0<=Set)||LA716_0==As||LA716_0==Of||LA716_0==RULE_IDENTIFIER) ) {
            alt716=1;
        }
        switch (alt716) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred7_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleImportDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop719:
        do {
            int alt719=2;
            int LA719_0 = input.LA(1);
            if ( ((LA719_0>=Protected && LA719_0<=Abstract)||LA719_0==External||(LA719_0>=Private && LA719_0<=Project)||LA719_0==Public||LA719_0==Static||LA719_0==Const) ) {
                alt719=1;
            }
            switch (alt719) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_4);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop719;
            }
        } while (true);
        match(input,Namespace,FOLLOW_5); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop720:
        do {
            int alt720=2;
            int LA720_0 = input.LA(1);
            if ( ((LA720_0>=Protected && LA720_0<=Abstract)||LA720_0==External||(LA720_0>=Private && LA720_0<=Project)||LA720_0==Public||LA720_0==Static||LA720_0==Const) ) {
                alt720=1;
            }
            switch (alt720) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop720;
            }
        } while (true);
        match(input,Class,FOLLOW_201); if (state.failed) return ;
        int alt721=2;
        int LA721_0 = input.LA(1);
        if ( (LA721_0==Tilde) ) {
            alt721=1;
        }
        switch (alt721) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_202);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt722=2;
        int LA722_0 = input.LA(1);
        if ( ((LA722_0>=Intersection && LA722_0<=Implements)||(LA722_0>=Promisify && LA722_0<=Abstract)||LA722_0==External||(LA722_0>=Private && LA722_0<=Project)||LA722_0==Public||LA722_0==Static||LA722_0==Target||(LA722_0>=Async && LA722_0<=Await)||LA722_0==Union||(LA722_0>=Yield && LA722_0<=This)||LA722_0==From||LA722_0==Type||(LA722_0>=Get && LA722_0<=Let)||(LA722_0>=Out && LA722_0<=Set)||LA722_0==As||LA722_0==Of||LA722_0==RULE_IDENTIFIER) ) {
            alt722=1;
        }
        switch (alt722) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop723:
        do {
            int alt723=2;
            int LA723_0 = input.LA(1);
            if ( ((LA723_0>=Protected && LA723_0<=Abstract)||LA723_0==External||(LA723_0>=Private && LA723_0<=Project)||LA723_0==Public||LA723_0==Static||LA723_0==Const) ) {
                alt723=1;
            }
            switch (alt723) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_13);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop723;
            }
        } while (true);
        match(input,Interface,FOLLOW_201); if (state.failed) return ;
        int alt724=2;
        int LA724_0 = input.LA(1);
        if ( (LA724_0==Tilde) ) {
            alt724=1;
        }
        switch (alt724) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_202);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt725=2;
        int LA725_0 = input.LA(1);
        if ( ((LA725_0>=Intersection && LA725_0<=Implements)||(LA725_0>=Promisify && LA725_0<=Abstract)||LA725_0==External||(LA725_0>=Private && LA725_0<=Project)||LA725_0==Public||LA725_0==Static||LA725_0==Target||(LA725_0>=Async && LA725_0<=Await)||LA725_0==Union||(LA725_0>=Yield && LA725_0<=This)||LA725_0==From||LA725_0==Type||(LA725_0>=Get && LA725_0<=Let)||(LA725_0>=Out && LA725_0<=Set)||LA725_0==As||LA725_0==Of||LA725_0==RULE_IDENTIFIER) ) {
            alt725=1;
        }
        switch (alt725) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred14_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop726:
        do {
            int alt726=2;
            int LA726_0 = input.LA(1);
            if ( ((LA726_0>=Protected && LA726_0<=Abstract)||LA726_0==External||(LA726_0>=Private && LA726_0<=Project)||LA726_0==Public||LA726_0==Static||LA726_0==Const) ) {
                alt726=1;
            }
            switch (alt726) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_14);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop726;
            }
        } while (true);
        match(input,Enum,FOLLOW_202); if (state.failed) return ;
        int alt727=2;
        int LA727_0 = input.LA(1);
        if ( ((LA727_0>=Intersection && LA727_0<=Implements)||(LA727_0>=Promisify && LA727_0<=Abstract)||LA727_0==External||(LA727_0>=Private && LA727_0<=Project)||LA727_0==Public||LA727_0==Static||LA727_0==Target||(LA727_0>=Async && LA727_0<=Await)||LA727_0==Union||(LA727_0>=Yield && LA727_0<=This)||LA727_0==From||LA727_0==Type||(LA727_0>=Get && LA727_0<=Let)||(LA727_0>=Out && LA727_0<=Set)||LA727_0==As||LA727_0==Of||LA727_0==RULE_IDENTIFIER) ) {
            alt727=1;
        }
        switch (alt727) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred15_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop728:
        do {
            int alt728=2;
            int LA728_0 = input.LA(1);
            if ( ((LA728_0>=Protected && LA728_0<=Abstract)||LA728_0==External||(LA728_0>=Private && LA728_0<=Project)||LA728_0==Public||LA728_0==Static) ) {
                alt728=1;
            }
            switch (alt728) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_17);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop728;
            }
        } while (true);
        match(input,Type,FOLLOW_202); if (state.failed) return ;
        int alt729=2;
        int LA729_0 = input.LA(1);
        if ( ((LA729_0>=Intersection && LA729_0<=Implements)||(LA729_0>=Promisify && LA729_0<=Abstract)||LA729_0==External||(LA729_0>=Private && LA729_0<=Project)||LA729_0==Public||LA729_0==Static||LA729_0==Target||(LA729_0>=Async && LA729_0<=Await)||LA729_0==Union||(LA729_0>=Yield && LA729_0<=This)||LA729_0==From||LA729_0==Type||(LA729_0>=Get && LA729_0<=Let)||(LA729_0>=Out && LA729_0<=Set)||LA729_0==As||LA729_0==Of||LA729_0==RULE_IDENTIFIER) ) {
            alt729=1;
        }
        switch (alt729) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred16_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop730:
        do {
            int alt730=2;
            int LA730_0 = input.LA(1);
            if ( ((LA730_0>=Protected && LA730_0<=Abstract)||LA730_0==External||(LA730_0>=Private && LA730_0<=Project)||LA730_0==Public||LA730_0==Static||LA730_0==Const) ) {
                alt730=1;
            }
            switch (alt730) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_9);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop730;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred17_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred18_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop731:
        do {
            int alt731=2;
            int LA731_0 = input.LA(1);
            if ( ((LA731_0>=Protected && LA731_0<=Abstract)||LA731_0==External||(LA731_0>=Private && LA731_0<=Project)||LA731_0==Public||LA731_0==Static||LA731_0==Const) ) {
                alt731=1;
            }
            switch (alt731) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_4);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop731;
            }
        } while (true);
        match(input,Namespace,FOLLOW_5); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred19_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop732:
        do {
            int alt732=2;
            int LA732_0 = input.LA(1);
            if ( ((LA732_0>=Protected && LA732_0<=Abstract)||LA732_0==External||(LA732_0>=Private && LA732_0<=Project)||LA732_0==Public||LA732_0==Static||LA732_0==Const) ) {
                alt732=1;
            }
            switch (alt732) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop732;
            }
        } while (true);
        match(input,Class,FOLLOW_201); if (state.failed) return ;
        int alt733=2;
        int LA733_0 = input.LA(1);
        if ( (LA733_0==Tilde) ) {
            alt733=1;
        }
        switch (alt733) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_202);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt734=2;
        int LA734_0 = input.LA(1);
        if ( ((LA734_0>=Intersection && LA734_0<=Implements)||(LA734_0>=Promisify && LA734_0<=Abstract)||LA734_0==External||(LA734_0>=Private && LA734_0<=Project)||LA734_0==Public||LA734_0==Static||LA734_0==Target||(LA734_0>=Async && LA734_0<=Await)||LA734_0==Union||LA734_0==This||LA734_0==From||LA734_0==Type||(LA734_0>=Get && LA734_0<=Let)||(LA734_0>=Out && LA734_0<=Set)||LA734_0==As||LA734_0==Of||LA734_0==RULE_IDENTIFIER) ) {
            alt734=1;
        }
        switch (alt734) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred20_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop735:
        do {
            int alt735=2;
            int LA735_0 = input.LA(1);
            if ( ((LA735_0>=Protected && LA735_0<=Abstract)||LA735_0==External||(LA735_0>=Private && LA735_0<=Project)||LA735_0==Public||LA735_0==Static||LA735_0==Const) ) {
                alt735=1;
            }
            switch (alt735) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_13);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop735;
            }
        } while (true);
        match(input,Interface,FOLLOW_201); if (state.failed) return ;
        int alt736=2;
        int LA736_0 = input.LA(1);
        if ( (LA736_0==Tilde) ) {
            alt736=1;
        }
        switch (alt736) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_202);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt737=2;
        int LA737_0 = input.LA(1);
        if ( ((LA737_0>=Intersection && LA737_0<=Implements)||(LA737_0>=Promisify && LA737_0<=Abstract)||LA737_0==External||(LA737_0>=Private && LA737_0<=Project)||LA737_0==Public||LA737_0==Static||LA737_0==Target||(LA737_0>=Async && LA737_0<=Await)||LA737_0==Union||LA737_0==This||LA737_0==From||LA737_0==Type||(LA737_0>=Get && LA737_0<=Let)||(LA737_0>=Out && LA737_0<=Set)||LA737_0==As||LA737_0==Of||LA737_0==RULE_IDENTIFIER) ) {
            alt737=1;
        }
        switch (alt737) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred21_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop738:
        do {
            int alt738=2;
            int LA738_0 = input.LA(1);
            if ( ((LA738_0>=Protected && LA738_0<=Abstract)||LA738_0==External||(LA738_0>=Private && LA738_0<=Project)||LA738_0==Public||LA738_0==Static||LA738_0==Const) ) {
                alt738=1;
            }
            switch (alt738) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_14);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop738;
            }
        } while (true);
        match(input,Enum,FOLLOW_202); if (state.failed) return ;
        int alt739=2;
        int LA739_0 = input.LA(1);
        if ( ((LA739_0>=Intersection && LA739_0<=Implements)||(LA739_0>=Promisify && LA739_0<=Abstract)||LA739_0==External||(LA739_0>=Private && LA739_0<=Project)||LA739_0==Public||LA739_0==Static||LA739_0==Target||(LA739_0>=Async && LA739_0<=Await)||LA739_0==Union||LA739_0==This||LA739_0==From||LA739_0==Type||(LA739_0>=Get && LA739_0<=Let)||(LA739_0>=Out && LA739_0<=Set)||LA739_0==As||LA739_0==Of||LA739_0==RULE_IDENTIFIER) ) {
            alt739=1;
        }
        switch (alt739) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred22_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop740:
        do {
            int alt740=2;
            int LA740_0 = input.LA(1);
            if ( ((LA740_0>=Protected && LA740_0<=Abstract)||LA740_0==External||(LA740_0>=Private && LA740_0<=Project)||LA740_0==Public||LA740_0==Static) ) {
                alt740=1;
            }
            switch (alt740) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_17);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop740;
            }
        } while (true);
        match(input,Type,FOLLOW_202); if (state.failed) return ;
        int alt741=2;
        int LA741_0 = input.LA(1);
        if ( ((LA741_0>=Intersection && LA741_0<=Implements)||(LA741_0>=Promisify && LA741_0<=Abstract)||LA741_0==External||(LA741_0>=Private && LA741_0<=Project)||LA741_0==Public||LA741_0==Static||LA741_0==Target||(LA741_0>=Async && LA741_0<=Await)||LA741_0==Union||LA741_0==This||LA741_0==From||LA741_0==Type||(LA741_0>=Get && LA741_0<=Let)||(LA741_0>=Out && LA741_0<=Set)||LA741_0==As||LA741_0==Of||LA741_0==RULE_IDENTIFIER) ) {
            alt741=1;
        }
        switch (alt741) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                norm1_BindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred23_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop742:
        do {
            int alt742=2;
            int LA742_0 = input.LA(1);
            if ( ((LA742_0>=Protected && LA742_0<=Abstract)||LA742_0==External||(LA742_0>=Private && LA742_0<=Project)||LA742_0==Public||LA742_0==Static||LA742_0==Const) ) {
                alt742=1;
            }
            switch (alt742) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_9);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop742;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred30_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred31_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Type||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred32_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred33_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop745:
        do {
            int alt745=2;
            int LA745_0 = input.LA(1);
            if ( ((LA745_0>=Protected && LA745_0<=Abstract)||LA745_0==External||(LA745_0>=Private && LA745_0<=Project)||LA745_0==Public||LA745_0==Static||LA745_0==Const) ) {
                alt745=1;
            }
            switch (alt745) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_4);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop745;
            }
        } while (true);
        match(input,Namespace,FOLLOW_5); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred34_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop746:
        do {
            int alt746=2;
            int LA746_0 = input.LA(1);
            if ( ((LA746_0>=Protected && LA746_0<=Abstract)||LA746_0==External||(LA746_0>=Private && LA746_0<=Project)||LA746_0==Public||LA746_0==Static||LA746_0==Const) ) {
                alt746=1;
            }
            switch (alt746) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop746;
            }
        } while (true);
        match(input,Class,FOLLOW_201); if (state.failed) return ;
        int alt747=2;
        int LA747_0 = input.LA(1);
        if ( (LA747_0==Tilde) ) {
            alt747=1;
        }
        switch (alt747) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_202);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt748=2;
        int LA748_0 = input.LA(1);
        if ( ((LA748_0>=Intersection && LA748_0<=Implements)||(LA748_0>=Promisify && LA748_0<=Abstract)||LA748_0==External||(LA748_0>=Private && LA748_0<=Project)||LA748_0==Public||LA748_0==Static||LA748_0==Target||(LA748_0>=Async && LA748_0<=Await)||LA748_0==Union||(LA748_0>=Yield && LA748_0<=This)||LA748_0==From||LA748_0==Type||(LA748_0>=Get && LA748_0<=Let)||(LA748_0>=Out && LA748_0<=Set)||LA748_0==As||LA748_0==Of||LA748_0==RULE_IDENTIFIER) ) {
            alt748=1;
        }
        switch (alt748) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred35_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop749:
        do {
            int alt749=2;
            int LA749_0 = input.LA(1);
            if ( ((LA749_0>=Protected && LA749_0<=Abstract)||LA749_0==External||(LA749_0>=Private && LA749_0<=Project)||LA749_0==Public||LA749_0==Static||LA749_0==Const) ) {
                alt749=1;
            }
            switch (alt749) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_13);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop749;
            }
        } while (true);
        match(input,Interface,FOLLOW_201); if (state.failed) return ;
        int alt750=2;
        int LA750_0 = input.LA(1);
        if ( (LA750_0==Tilde) ) {
            alt750=1;
        }
        switch (alt750) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_202);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt751=2;
        int LA751_0 = input.LA(1);
        if ( ((LA751_0>=Intersection && LA751_0<=Implements)||(LA751_0>=Promisify && LA751_0<=Abstract)||LA751_0==External||(LA751_0>=Private && LA751_0<=Project)||LA751_0==Public||LA751_0==Static||LA751_0==Target||(LA751_0>=Async && LA751_0<=Await)||LA751_0==Union||(LA751_0>=Yield && LA751_0<=This)||LA751_0==From||LA751_0==Type||(LA751_0>=Get && LA751_0<=Let)||(LA751_0>=Out && LA751_0<=Set)||LA751_0==As||LA751_0==Of||LA751_0==RULE_IDENTIFIER) ) {
            alt751=1;
        }
        switch (alt751) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred36_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop752:
        do {
            int alt752=2;
            int LA752_0 = input.LA(1);
            if ( ((LA752_0>=Protected && LA752_0<=Abstract)||LA752_0==External||(LA752_0>=Private && LA752_0<=Project)||LA752_0==Public||LA752_0==Static||LA752_0==Const) ) {
                alt752=1;
            }
            switch (alt752) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_14);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop752;
            }
        } while (true);
        match(input,Enum,FOLLOW_202); if (state.failed) return ;
        int alt753=2;
        int LA753_0 = input.LA(1);
        if ( ((LA753_0>=Intersection && LA753_0<=Implements)||(LA753_0>=Promisify && LA753_0<=Abstract)||LA753_0==External||(LA753_0>=Private && LA753_0<=Project)||LA753_0==Public||LA753_0==Static||LA753_0==Target||(LA753_0>=Async && LA753_0<=Await)||LA753_0==Union||(LA753_0>=Yield && LA753_0<=This)||LA753_0==From||LA753_0==Type||(LA753_0>=Get && LA753_0<=Let)||(LA753_0>=Out && LA753_0<=Set)||LA753_0==As||LA753_0==Of||LA753_0==RULE_IDENTIFIER) ) {
            alt753=1;
        }
        switch (alt753) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred37_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop754:
        do {
            int alt754=2;
            int LA754_0 = input.LA(1);
            if ( ((LA754_0>=Protected && LA754_0<=Abstract)||LA754_0==External||(LA754_0>=Private && LA754_0<=Project)||LA754_0==Public||LA754_0==Static) ) {
                alt754=1;
            }
            switch (alt754) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_17);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop754;
            }
        } while (true);
        match(input,Type,FOLLOW_202); if (state.failed) return ;
        int alt755=2;
        int LA755_0 = input.LA(1);
        if ( ((LA755_0>=Intersection && LA755_0<=Implements)||(LA755_0>=Promisify && LA755_0<=Abstract)||LA755_0==External||(LA755_0>=Private && LA755_0<=Project)||LA755_0==Public||LA755_0==Static||LA755_0==Target||(LA755_0>=Async && LA755_0<=Await)||LA755_0==Union||(LA755_0>=Yield && LA755_0<=This)||LA755_0==From||LA755_0==Type||(LA755_0>=Get && LA755_0<=Let)||(LA755_0>=Out && LA755_0<=Set)||LA755_0==As||LA755_0==Of||LA755_0==RULE_IDENTIFIER) ) {
            alt755=1;
        }
        switch (alt755) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred38_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop756:
        do {
            int alt756=2;
            int LA756_0 = input.LA(1);
            if ( ((LA756_0>=Protected && LA756_0<=Abstract)||LA756_0==External||(LA756_0>=Private && LA756_0<=Project)||LA756_0==Public||LA756_0==Static||LA756_0==Const) ) {
                alt756=1;
            }
            switch (alt756) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_9);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop756;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred42_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred45_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred46_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred47_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred48_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred49_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred50_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred51_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred60_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_51); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred62_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_51); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred68_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred72_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_51); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred74_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred78_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_51); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred80_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred81_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred82_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred85_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred86_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop771:
        do {
            int alt771=2;
            int LA771_0 = input.LA(1);
            if ( ((LA771_0>=Protected && LA771_0<=Abstract)||LA771_0==External||(LA771_0>=Private && LA771_0<=Project)||LA771_0==Public||LA771_0==Static||LA771_0==Const) ) {
                alt771=1;
            }
            switch (alt771) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_9);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop771;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred87_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred88_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_87);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred89_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred90_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop772:
        do {
            int alt772=2;
            int LA772_0 = input.LA(1);
            if ( ((LA772_0>=Protected && LA772_0<=Abstract)||LA772_0==External||(LA772_0>=Private && LA772_0<=Project)||LA772_0==Public||LA772_0==Static||LA772_0==Const) ) {
                alt772=1;
            }
            switch (alt772) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_9);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop772;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred91_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_87);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_140); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred98_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred99_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred100_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred101_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred111_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred112_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred113_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred114_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred115_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_47);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt773=2;
        int LA773_0 = input.LA(1);
        if ( (LA773_0==Colon) ) {
            alt773=1;
        }
        switch (alt773) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred116_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_47);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt774=2;
        int LA774_0 = input.LA(1);
        if ( (LA774_0==Colon) ) {
            alt774=1;
        }
        switch (alt774) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred117_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_47);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt775=2;
        int LA775_0 = input.LA(1);
        if ( (LA775_0==Colon) ) {
            alt775=1;
        }
        switch (alt775) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_47);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt776=2;
        int LA776_0 = input.LA(1);
        if ( (LA776_0==Colon) ) {
            alt776=1;
        }
        switch (alt776) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred119_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred120_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred122_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred123_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_75);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_52); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_69);
        norm1_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred124_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred125_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_76);
        ruleBindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt777=2;
        int LA777_0 = input.LA(1);
        if ( (LA777_0==In) ) {
            alt777=1;
        }
        else if ( (LA777_0==Of) ) {
            alt777=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 777, 0, input);
            throw nvae;
        }
        switch (alt777) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_67); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_67); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt778=2;
        int LA778_0 = input.LA(1);
        if ( ((LA778_0>=Intersection && LA778_0<=Implements)||(LA778_0>=Promisify && LA778_0<=Abstract)||(LA778_0>=External && LA778_0<=Function)||(LA778_0>=Private && LA778_0<=Delete)||(LA778_0>=Import && LA778_0<=Public)||LA778_0==Static||(LA778_0>=Target && LA778_0<=Await)||LA778_0==Class||(LA778_0>=False && LA778_0<=Super)||LA778_0==Union||(LA778_0>=Yield && LA778_0<=This)||(LA778_0>=From && LA778_0<=Void)||(LA778_0>=Get && LA778_0<=Set)||LA778_0==PlusSignPlusSign||(LA778_0>=HyphenMinusHyphenMinus && LA778_0<=SolidusEqualsSign)||LA778_0==As||LA778_0==Of||LA778_0==ExclamationMark||LA778_0==LeftParenthesis||LA778_0==PlusSign||LA778_0==HyphenMinus||LA778_0==Solidus||LA778_0==LessThanSign||(LA778_0>=CommercialAt && LA778_0<=LeftSquareBracket)||LA778_0==LeftCurlyBracket||LA778_0==Tilde||(LA778_0>=RULE_TEMPLATE_HEAD && LA778_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA778_0==RULE_IDENTIFIER||LA778_0==RULE_INT||LA778_0==RULE_DOUBLE||(LA778_0>=RULE_BINARY_INT && LA778_0<=RULE_SCIENTIFIC_INT)||LA778_0==RULE_STRING) ) {
            alt778=1;
        }
        switch (alt778) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred127_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_75);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_52); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_69);
        norm3_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred129_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_76);
        norm2_BindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt779=2;
        int LA779_0 = input.LA(1);
        if ( (LA779_0==In) ) {
            alt779=1;
        }
        else if ( (LA779_0==Of) ) {
            alt779=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 779, 0, input);
            throw nvae;
        }
        switch (alt779) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_67); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_67); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt780=2;
        int LA780_0 = input.LA(1);
        if ( ((LA780_0>=Intersection && LA780_0<=Implements)||(LA780_0>=Promisify && LA780_0<=Abstract)||(LA780_0>=External && LA780_0<=Function)||(LA780_0>=Private && LA780_0<=Delete)||(LA780_0>=Import && LA780_0<=Public)||LA780_0==Static||(LA780_0>=Target && LA780_0<=Await)||LA780_0==Class||(LA780_0>=False && LA780_0<=Super)||LA780_0==Union||(LA780_0>=Yield && LA780_0<=This)||(LA780_0>=From && LA780_0<=Void)||(LA780_0>=Get && LA780_0<=Set)||LA780_0==PlusSignPlusSign||(LA780_0>=HyphenMinusHyphenMinus && LA780_0<=SolidusEqualsSign)||LA780_0==As||LA780_0==Of||LA780_0==ExclamationMark||LA780_0==LeftParenthesis||LA780_0==PlusSign||LA780_0==HyphenMinus||LA780_0==Solidus||LA780_0==LessThanSign||(LA780_0>=CommercialAt && LA780_0<=LeftSquareBracket)||LA780_0==LeftCurlyBracket||LA780_0==Tilde||(LA780_0>=RULE_TEMPLATE_HEAD && LA780_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA780_0==RULE_IDENTIFIER||LA780_0==RULE_INT||LA780_0==RULE_DOUBLE||(LA780_0>=RULE_BINARY_INT && LA780_0<=RULE_SCIENTIFIC_INT)||LA780_0==RULE_STRING) ) {
            alt780=1;
        }
        switch (alt780) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred130_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred138_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_87);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred140_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred141_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_87);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred145_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_49);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred146_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_49);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred147_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt781=2;
        alt781 = dfa781.predict(input);
        switch (alt781) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_97);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_102);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt782=2;
        int LA782_0 = input.LA(1);
        if ( (LA782_0==QuestionMark) ) {
            alt782=1;
        }
        switch (alt782) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_87); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred148_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred149_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_203); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred150_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt783=2;
        int LA783_0 = input.LA(1);
        if ( (LA783_0==LessThanSign) ) {
            alt783=1;
        }
        switch (alt783) {
            case 1 :
                {
                pushFollow(FOLLOW_99);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt784=2;
        alt784 = dfa784.predict(input);
        switch (alt784) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_99);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        pushFollow(FOLLOW_99);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt785=2;
        int LA785_0 = input.LA(1);
        if ( (LA785_0==Asterisk) ) {
            alt785=1;
        }
        else if ( ((LA785_0>=Intersection && LA785_0<=With)||(LA785_0>=For && LA785_0<=Var)||(LA785_0>=As && LA785_0<=Of)||LA785_0==LeftSquareBracket||LA785_0==RULE_IDENTIFIER||LA785_0==RULE_INT||LA785_0==RULE_DOUBLE||(LA785_0>=RULE_BINARY_INT && LA785_0<=RULE_OCTAL_INT)||(LA785_0>=RULE_HEX_INT && LA785_0<=RULE_SCIENTIFIC_INT)||LA785_0==RULE_STRING) ) {
            alt785=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 785, 0, input);
            throw nvae;
        }
        switch (alt785) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_97); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred151_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt786=2;
        alt786 = dfa786.predict(input);
        switch (alt786) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_97);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_102);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt787=2;
        int LA787_0 = input.LA(1);
        if ( (LA787_0==QuestionMark) ) {
            alt787=1;
        }
        switch (alt787) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_87); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred152_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred153_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_203); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred154_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt788=2;
        int LA788_0 = input.LA(1);
        if ( (LA788_0==LessThanSign) ) {
            alt788=1;
        }
        switch (alt788) {
            case 1 :
                {
                pushFollow(FOLLOW_99);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt789=2;
        alt789 = dfa789.predict(input);
        switch (alt789) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_99);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        pushFollow(FOLLOW_99);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt790=2;
        int LA790_0 = input.LA(1);
        if ( (LA790_0==Asterisk) ) {
            alt790=1;
        }
        else if ( ((LA790_0>=Intersection && LA790_0<=With)||(LA790_0>=For && LA790_0<=Var)||(LA790_0>=As && LA790_0<=Of)||LA790_0==LeftSquareBracket||LA790_0==RULE_IDENTIFIER||LA790_0==RULE_INT||LA790_0==RULE_DOUBLE||(LA790_0>=RULE_BINARY_INT && LA790_0<=RULE_OCTAL_INT)||(LA790_0>=RULE_HEX_INT && LA790_0<=RULE_SCIENTIFIC_INT)||LA790_0==RULE_STRING) ) {
            alt790=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 790, 0, input);
            throw nvae;
        }
        switch (alt790) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_97); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred155_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt791=2;
        alt791 = dfa791.predict(input);
        switch (alt791) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_97);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_87);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred156_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred158_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_203); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred161_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt792=2;
        int LA792_0 = input.LA(1);
        if ( (LA792_0==LessThanSign) ) {
            alt792=1;
        }
        switch (alt792) {
            case 1 :
                {
                pushFollow(FOLLOW_99);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt793=2;
        alt793 = dfa793.predict(input);
        switch (alt793) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_99);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt794=2;
        int LA794_0 = input.LA(1);
        if ( (LA794_0==Asterisk) ) {
            alt794=1;
        }
        else if ( ((LA794_0>=Intersection && LA794_0<=With)||(LA794_0>=For && LA794_0<=Var)||(LA794_0>=As && LA794_0<=Of)||LA794_0==LeftSquareBracket||LA794_0==RULE_IDENTIFIER||LA794_0==RULE_INT||LA794_0==RULE_DOUBLE||(LA794_0>=RULE_BINARY_INT && LA794_0<=RULE_OCTAL_INT)||(LA794_0>=RULE_HEX_INT && LA794_0<=RULE_SCIENTIFIC_INT)||LA794_0==RULE_STRING) ) {
            alt794=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 794, 0, input);
            throw nvae;
        }
        switch (alt794) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_97); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred164_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt795=2;
        alt795 = dfa795.predict(input);
        switch (alt795) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_97);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_87);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred165_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred167_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_203); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred170_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt796=2;
        int LA796_0 = input.LA(1);
        if ( (LA796_0==LessThanSign) ) {
            alt796=1;
        }
        switch (alt796) {
            case 1 :
                {
                pushFollow(FOLLOW_99);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt797=2;
        alt797 = dfa797.predict(input);
        switch (alt797) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_99);
                ruleTypeReferenceWithModifiersNode();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt798=2;
        int LA798_0 = input.LA(1);
        if ( (LA798_0==Asterisk) ) {
            alt798=1;
        }
        else if ( ((LA798_0>=Intersection && LA798_0<=With)||(LA798_0>=For && LA798_0<=Var)||(LA798_0>=As && LA798_0<=Of)||LA798_0==LeftSquareBracket||LA798_0==RULE_IDENTIFIER||LA798_0==RULE_INT||LA798_0==RULE_DOUBLE||(LA798_0>=RULE_BINARY_INT && LA798_0<=RULE_OCTAL_INT)||(LA798_0>=RULE_HEX_INT && LA798_0<=RULE_SCIENTIFIC_INT)||LA798_0==RULE_STRING) ) {
            alt798=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 798, 0, input);
            throw nvae;
        }
        switch (alt798) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_97); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred191_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred193_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_110); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred195_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred197_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_110); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred199_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred201_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_52);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_204);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_52);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_52);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_204);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_204);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred237_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred243_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred244_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred245_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred246_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred247_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred248_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred249_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred250_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred252_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred253_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred254_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_136); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred255_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_51); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred257_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt811=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt811=1;
            }
            break;
        case Async:
            {
            int LA811_2 = input.LA(2);
            if ( (LA811_2==EqualsSign) ) {
                alt811=3;
            }
            else if ( (LA811_2==RULE_NO_LINE_TERMINATOR) && (synpred255_InternalN4JSParser())) {
                alt811=2;
            }
            else if ( (LA811_2==LeftParenthesis) && (synpred255_InternalN4JSParser())) {
                alt811=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 811, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Namespace:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt811=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 811, 0, input);
            throw nvae;
        }
        switch (alt811) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_50);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt809=2;
                int LA809_0 = input.LA(1);
                if ( (LA809_0==Colon) ) {
                    alt809=1;
                }
                switch (alt809) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_50);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_46);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_50);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt810=2;
                int LA810_0 = input.LA(1);
                if ( (LA810_0==Colon) ) {
                    alt810=1;
                }
                switch (alt810) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_50);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_50);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred258_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_136); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred261_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_51); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred263_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt814=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt814=1;
            }
            break;
        case Async:
            {
            int LA814_2 = input.LA(2);
            if ( (LA814_2==RULE_NO_LINE_TERMINATOR) && (synpred261_InternalN4JSParser())) {
                alt814=2;
            }
            else if ( (LA814_2==LeftParenthesis) && (synpred261_InternalN4JSParser())) {
                alt814=2;
            }
            else if ( (LA814_2==EqualsSign) ) {
                alt814=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 814, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Namespace:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt814=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 814, 0, input);
            throw nvae;
        }
        switch (alt814) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_50);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt812=2;
                int LA812_0 = input.LA(1);
                if ( (LA812_0==Colon) ) {
                    alt812=1;
                }
                switch (alt812) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_50);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_51); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_46);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_50);
                ruleStrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt813=2;
                int LA813_0 = input.LA(1);
                if ( (LA813_0==Colon) ) {
                    alt813=1;
                }
                switch (alt813) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_50);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_50);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred264_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred265_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred266_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_136); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred267_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_51); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred269_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt817=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt817=1;
            }
            break;
        case Async:
            {
            int LA817_2 = input.LA(2);
            if ( (LA817_2==EqualsSign) ) {
                alt817=3;
            }
            else if ( (LA817_2==RULE_NO_LINE_TERMINATOR) && (synpred267_InternalN4JSParser())) {
                alt817=2;
            }
            else if ( (LA817_2==LeftParenthesis) && (synpred267_InternalN4JSParser())) {
                alt817=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 817, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Namespace:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt817=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 817, 0, input);
            throw nvae;
        }
        switch (alt817) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_50);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt815=2;
                int LA815_0 = input.LA(1);
                if ( (LA815_0==Colon) ) {
                    alt815=1;
                }
                switch (alt815) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_50);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_54); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_44);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_50);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt816=2;
                int LA816_0 = input.LA(1);
                if ( (LA816_0==Colon) ) {
                    alt816=1;
                }
                switch (alt816) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_50);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_50);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred270_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred271_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred272_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,CommercialAt,FOLLOW_136); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred273_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_51); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt820=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt820=1;
            }
            break;
        case Async:
            {
            int LA820_2 = input.LA(2);
            if ( (LA820_2==RULE_NO_LINE_TERMINATOR) && (synpred273_InternalN4JSParser())) {
                alt820=2;
            }
            else if ( (LA820_2==LeftParenthesis) && (synpred273_InternalN4JSParser())) {
                alt820=2;
            }
            else if ( (LA820_2==EqualsSign) ) {
                alt820=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 820, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Namespace:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt820=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 820, 0, input);
            throw nvae;
        }
        switch (alt820) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_50);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                int alt818=2;
                int LA818_0 = input.LA(1);
                if ( (LA818_0==Colon) ) {
                    alt818=1;
                }
                switch (alt818) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_50);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_54); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_44);
                ruleNoLineTerminator(null);
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_50);
                norm1_StrictFormalParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt819=2;
                int LA819_0 = input.LA(1);
                if ( (LA819_0==Colon) ) {
                    alt819=1;
                }
                switch (alt819) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_50);
                        ruleColonSepDeclaredReturnTypeRef(null);
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_50);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred276_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred277_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred278_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred279_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred280_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleNoWhiteSpace(null);
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred290_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleLiteralAnnotationArgument();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred295_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominalNode();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred296_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominalNode();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred303_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop841:
        do {
            int alt841=2;
            int LA841_0 = input.LA(1);
            if ( ((LA841_0>=Protected && LA841_0<=Abstract)||LA841_0==External||(LA841_0>=Private && LA841_0<=Project)||LA841_0==Public||LA841_0==Static||LA841_0==Const) ) {
                alt841=1;
            }
            switch (alt841) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_155);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop841;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred304_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop842:
        do {
            int alt842=2;
            int LA842_0 = input.LA(1);
            if ( ((LA842_0>=Protected && LA842_0<=Abstract)||LA842_0==External||(LA842_0>=Private && LA842_0<=Project)||LA842_0==Public||LA842_0==Static||LA842_0==Const) ) {
                alt842=1;
            }
            switch (alt842) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_157);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop842;
            }
        } while (true);
        match(input,Set,FOLLOW_203); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred305_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop843:
        do {
            int alt843=2;
            alt843 = dfa843.predict(input);
            switch (alt843) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_158);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop843;
            }
        } while (true);
        int alt844=2;
        int LA844_0 = input.LA(1);
        if ( (LA844_0==LessThanSign) ) {
            alt844=1;
        }
        switch (alt844) {
            case 1 :
                {
                pushFollow(FOLLOW_99);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        pushFollow(FOLLOW_99);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt845=2;
        int LA845_0 = input.LA(1);
        if ( (LA845_0==Asterisk) ) {
            alt845=1;
        }
        else if ( ((LA845_0>=Intersection && LA845_0<=With)||(LA845_0>=For && LA845_0<=Var)||(LA845_0>=As && LA845_0<=Of)||LA845_0==LeftSquareBracket||LA845_0==RULE_IDENTIFIER||LA845_0==RULE_INT||LA845_0==RULE_DOUBLE||(LA845_0>=RULE_BINARY_INT && LA845_0<=RULE_OCTAL_INT)||(LA845_0>=RULE_HEX_INT && LA845_0<=RULE_SCIENTIFIC_INT)||LA845_0==RULE_STRING) ) {
            alt845=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 845, 0, input);
            throw nvae;
        }
        switch (alt845) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_97); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred306_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop846:
        do {
            int alt846=2;
            int LA846_0 = input.LA(1);
            if ( ((LA846_0>=Protected && LA846_0<=Abstract)||LA846_0==External||(LA846_0>=Private && LA846_0<=Project)||LA846_0==Public||LA846_0==Static||LA846_0==Const) ) {
                alt846=1;
            }
            switch (alt846) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_155);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop846;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred307_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop847:
        do {
            int alt847=2;
            int LA847_0 = input.LA(1);
            if ( ((LA847_0>=Protected && LA847_0<=Abstract)||LA847_0==External||(LA847_0>=Private && LA847_0<=Project)||LA847_0==Public||LA847_0==Static||LA847_0==Const) ) {
                alt847=1;
            }
            switch (alt847) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_157);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop847;
            }
        } while (true);
        match(input,Set,FOLLOW_203); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred308_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop848:
        do {
            int alt848=2;
            alt848 = dfa848.predict(input);
            switch (alt848) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_158);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop848;
            }
        } while (true);
        int alt849=2;
        int LA849_0 = input.LA(1);
        if ( (LA849_0==LessThanSign) ) {
            alt849=1;
        }
        switch (alt849) {
            case 1 :
                {
                pushFollow(FOLLOW_99);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        pushFollow(FOLLOW_99);
        ruleAsyncNoTrailingLineBreak(null);
        state._fsp--;
        if (state.failed) return ;
        int alt850=2;
        int LA850_0 = input.LA(1);
        if ( (LA850_0==Asterisk) ) {
            alt850=1;
        }
        else if ( ((LA850_0>=Intersection && LA850_0<=With)||(LA850_0>=For && LA850_0<=Var)||(LA850_0>=As && LA850_0<=Of)||LA850_0==LeftSquareBracket||LA850_0==RULE_IDENTIFIER||LA850_0==RULE_INT||LA850_0==RULE_DOUBLE||(LA850_0>=RULE_BINARY_INT && LA850_0<=RULE_OCTAL_INT)||(LA850_0>=RULE_HEX_INT && LA850_0<=RULE_SCIENTIFIC_INT)||LA850_0==RULE_STRING) ) {
            alt850=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 850, 0, input);
            throw nvae;
        }
        switch (alt850) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_97); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred309_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop851:
        do {
            int alt851=2;
            int LA851_0 = input.LA(1);
            if ( ((LA851_0>=Protected && LA851_0<=Abstract)||LA851_0==External||(LA851_0>=Private && LA851_0<=Project)||LA851_0==Public||LA851_0==Static||LA851_0==Const) ) {
                alt851=1;
            }
            switch (alt851) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_155);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop851;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred310_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred311_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop852:
        do {
            int alt852=2;
            int LA852_0 = input.LA(1);
            if ( ((LA852_0>=Protected && LA852_0<=Abstract)||LA852_0==External||(LA852_0>=Private && LA852_0<=Project)||LA852_0==Public||LA852_0==Static||LA852_0==Const) ) {
                alt852=1;
            }
            switch (alt852) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_157);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop852;
            }
        } while (true);
        match(input,Set,FOLLOW_203); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred313_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred314_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop853:
        do {
            int alt853=2;
            alt853 = dfa853.predict(input);
            switch (alt853) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_158);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop853;
            }
        } while (true);
        int alt854=2;
        int LA854_0 = input.LA(1);
        if ( (LA854_0==LessThanSign) ) {
            alt854=1;
        }
        switch (alt854) {
            case 1 :
                {
                pushFollow(FOLLOW_99);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt855=2;
        int LA855_0 = input.LA(1);
        if ( (LA855_0==Asterisk) ) {
            alt855=1;
        }
        else if ( ((LA855_0>=Intersection && LA855_0<=With)||(LA855_0>=For && LA855_0<=Var)||(LA855_0>=As && LA855_0<=Of)||LA855_0==LeftSquareBracket||LA855_0==RULE_IDENTIFIER||LA855_0==RULE_INT||LA855_0==RULE_DOUBLE||(LA855_0>=RULE_BINARY_INT && LA855_0<=RULE_OCTAL_INT)||(LA855_0>=RULE_HEX_INT && LA855_0<=RULE_SCIENTIFIC_INT)||LA855_0==RULE_STRING) ) {
            alt855=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 855, 0, input);
            throw nvae;
        }
        switch (alt855) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_97); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_97);
                ruleAsyncNoTrailingLineBreak(null);
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred317_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt856=2;
        int LA856_0 = input.LA(1);
        if ( (LA856_0==LessThanSign) ) {
            alt856=1;
        }
        switch (alt856) {
            case 1 :
                {
                pushFollow(FOLLOW_46);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred318_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred319_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop857:
        do {
            int alt857=2;
            int LA857_0 = input.LA(1);
            if ( ((LA857_0>=Protected && LA857_0<=Abstract)||LA857_0==External||(LA857_0>=Private && LA857_0<=Project)||LA857_0==Public||LA857_0==Static||LA857_0==Const) ) {
                alt857=1;
            }
            switch (alt857) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_155);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop857;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader(null);
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred320_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred321_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop858:
        do {
            int alt858=2;
            int LA858_0 = input.LA(1);
            if ( ((LA858_0>=Protected && LA858_0<=Abstract)||LA858_0==External||(LA858_0>=Private && LA858_0<=Project)||LA858_0==Public||LA858_0==Static||LA858_0==Const) ) {
                alt858=1;
            }
            switch (alt858) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_157);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop858;
            }
        } while (true);
        match(input,Set,FOLLOW_203); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_OCTAL_INT)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_SCIENTIFIC_INT)||input.LA(1)==RULE_STRING ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred323_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred324_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        loop859:
        do {
            int alt859=2;
            alt859 = dfa859.predict(input);
            switch (alt859) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_158);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop859;
            }
        } while (true);
        int alt860=2;
        int LA860_0 = input.LA(1);
        if ( (LA860_0==LessThanSign) ) {
            alt860=1;
        }
        switch (alt860) {
            case 1 :
                {
                pushFollow(FOLLOW_99);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt861=2;
        int LA861_0 = input.LA(1);
        if ( (LA861_0==Asterisk) ) {
            alt861=1;
        }
        else if ( ((LA861_0>=Intersection && LA861_0<=With)||(LA861_0>=For && LA861_0<=Var)||(LA861_0>=As && LA861_0<=Of)||LA861_0==LeftSquareBracket||LA861_0==RULE_IDENTIFIER||LA861_0==RULE_INT||LA861_0==RULE_DOUBLE||(LA861_0>=RULE_BINARY_INT && LA861_0<=RULE_OCTAL_INT)||(LA861_0>=RULE_HEX_INT && LA861_0<=RULE_SCIENTIFIC_INT)||LA861_0==RULE_STRING) ) {
            alt861=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 861, 0, input);
            throw nvae;
        }
        switch (alt861) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_97); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_97);
                ruleAsyncNoTrailingLineBreak(null);
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred327_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt862=2;
        int LA862_0 = input.LA(1);
        if ( (LA862_0==LessThanSign) ) {
            alt862=1;
        }
        switch (alt862) {
            case 1 :
                {
                pushFollow(FOLLOW_46);
                ruleTypeParameters(null);
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred328_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred335_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred336_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred337_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred338_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred340_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred342_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred347_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred350_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred351_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_87);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred352_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_87);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred353_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred354_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred355_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT||(input.LA(1)>=RULE_BINARY_INT && input.LA(1)<=RULE_SCIENTIFIC_INT) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred356_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_115); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred357_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_115); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred358_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        match(input,LeftSquareBracket,FOLLOW_115); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred359_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,LeftParenthesis,FOLLOW_186); if (state.failed) return ;
        pushFollow(FOLLOW_69);
        ruleTAnonymousFormalParameterList(null);
        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
        pushFollow(FOLLOW_2);
        ruleArrow();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred360_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred361_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred362_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred364_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_87);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred366_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred367_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred368_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleTypeReferenceName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred369_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Get,FOLLOW_15); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred370_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,Set,FOLLOW_15); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred371_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        int alt874=2;
        int LA874_0 = input.LA(1);
        if ( (LA874_0==LessThanSign) ) {
            alt874=1;
        }
        switch (alt874) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_185); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_104);
                ruleTypeVariable();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                loop873:
                do {
                    int alt873=2;
                    int LA873_0 = input.LA(1);
                    if ( (LA873_0==Comma) ) {
                        alt873=1;
                    }
                    switch (alt873) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_185); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_104);
                	    ruleTypeVariable();
                	    state._fsp--;
                	    if (state.failed) return ;
                	    }
                	    }
                	    }
                	    break;
                	default :
                	    break loop873;
                    }
                } while (true);
                match(input,GreaterThanSign,FOLLOW_195); if (state.failed) return ;
                }
                break;
        }
        int alt875=2;
        int LA875_0 = input.LA(1);
        if ( ((LA875_0>=Intersection && LA875_0<=With)||(LA875_0>=For && LA875_0<=Var)||(LA875_0>=As && LA875_0<=Of)||LA875_0==RULE_IDENTIFIER) ) {
            alt875=1;
        }
        switch (alt875) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleIdentifierName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred375_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final boolean synpred22_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred366_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred361_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred361_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred369_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred369_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred355_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred355_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred356_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred356_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred161_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred161_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred370_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred370_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA217 dfa217 = new DFA217(this);
    protected DFA216 dfa216 = new DFA216(this);
    protected DFA208 dfa208 = new DFA208(this);
    protected DFA201 dfa201 = new DFA201(this);
    protected DFA236 dfa236 = new DFA236(this);
    protected DFA235 dfa235 = new DFA235(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA257 dfa257 = new DFA257(this);
    protected DFA258 dfa258 = new DFA258(this);
    protected DFA259 dfa259 = new DFA259(this);
    protected DFA260 dfa260 = new DFA260(this);
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA281 dfa281 = new DFA281(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA283 dfa283 = new DFA283(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA289 dfa289 = new DFA289(this);
    protected DFA298 dfa298 = new DFA298(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA294 dfa294 = new DFA294(this);
    protected DFA297 dfa297 = new DFA297(this);
    protected DFA300 dfa300 = new DFA300(this);
    protected DFA304 dfa304 = new DFA304(this);
    protected DFA307 dfa307 = new DFA307(this);
    protected DFA309 dfa309 = new DFA309(this);
    protected DFA311 dfa311 = new DFA311(this);
    protected DFA312 dfa312 = new DFA312(this);
    protected DFA343 dfa343 = new DFA343(this);
    protected DFA351 dfa351 = new DFA351(this);
    protected DFA366 dfa366 = new DFA366(this);
    protected DFA367 dfa367 = new DFA367(this);
    protected DFA368 dfa368 = new DFA368(this);
    protected DFA369 dfa369 = new DFA369(this);
    protected DFA372 dfa372 = new DFA372(this);
    protected DFA373 dfa373 = new DFA373(this);
    protected DFA374 dfa374 = new DFA374(this);
    protected DFA375 dfa375 = new DFA375(this);
    protected DFA413 dfa413 = new DFA413(this);
    protected DFA412 dfa412 = new DFA412(this);
    protected DFA415 dfa415 = new DFA415(this);
    protected DFA414 dfa414 = new DFA414(this);
    protected DFA417 dfa417 = new DFA417(this);
    protected DFA416 dfa416 = new DFA416(this);
    protected DFA419 dfa419 = new DFA419(this);
    protected DFA418 dfa418 = new DFA418(this);
    protected DFA421 dfa421 = new DFA421(this);
    protected DFA423 dfa423 = new DFA423(this);
    protected DFA456 dfa456 = new DFA456(this);
    protected DFA457 dfa457 = new DFA457(this);
    protected DFA515 dfa515 = new DFA515(this);
    protected DFA516 dfa516 = new DFA516(this);
    protected DFA530 dfa530 = new DFA530(this);
    protected DFA524 dfa524 = new DFA524(this);
    protected DFA544 dfa544 = new DFA544(this);
    protected DFA538 dfa538 = new DFA538(this);
    protected DFA545 dfa545 = new DFA545(this);
    protected DFA549 dfa549 = new DFA549(this);
    protected DFA553 dfa553 = new DFA553(this);
    protected DFA557 dfa557 = new DFA557(this);
    protected DFA597 dfa597 = new DFA597(this);
    protected DFA603 dfa603 = new DFA603(this);
    protected DFA607 dfa607 = new DFA607(this);
    protected DFA608 dfa608 = new DFA608(this);
    protected DFA626 dfa626 = new DFA626(this);
    protected DFA638 dfa638 = new DFA638(this);
    protected DFA639 dfa639 = new DFA639(this);
    protected DFA641 dfa641 = new DFA641(this);
    protected DFA658 dfa658 = new DFA658(this);
    protected DFA664 dfa664 = new DFA664(this);
    protected DFA665 dfa665 = new DFA665(this);
    protected DFA669 dfa669 = new DFA669(this);
    protected DFA673 dfa673 = new DFA673(this);
    protected DFA781 dfa781 = new DFA781(this);
    protected DFA784 dfa784 = new DFA784(this);
    protected DFA786 dfa786 = new DFA786(this);
    protected DFA789 dfa789 = new DFA789(this);
    protected DFA791 dfa791 = new DFA791(this);
    protected DFA793 dfa793 = new DFA793(this);
    protected DFA795 dfa795 = new DFA795(this);
    protected DFA797 dfa797 = new DFA797(this);
    protected DFA843 dfa843 = new DFA843(this);
    protected DFA848 dfa848 = new DFA848(this);
    protected DFA853 dfa853 = new DFA853(this);
    protected DFA859 dfa859 = new DFA859(this);
    static final String dfa_1s = "\127\uffff";
    static final String dfa_2s = "\1\4\14\0\1\uffff\2\0\107\uffff";
    static final String dfa_3s = "\1\u0096\14\0\1\uffff\2\0\107\uffff";
    static final String dfa_4s = "\15\uffff\1\5\2\uffff\1\10\1\11\77\uffff\1\1\1\2\1\3\1\4\1\6\1\7";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\uffff\1\15\1\16\107\uffff}>";
    static final String[] dfa_6s = {
            "\3\21\1\uffff\1\21\1\14\1\12\1\4\1\7\2\21\1\6\1\21\3\uffff\1\2\1\3\1\21\1\20\1\17\1\5\1\21\1\10\6\21\1\uffff\1\13\1\11\7\21\2\uffff\1\15\4\21\1\16\2\21\4\uffff\10\21\5\uffff\1\21\1\uffff\2\21\7\uffff\3\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\1\uffff\2\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\12\uffff\2\21\11\uffff\1\21\1\uffff\1\21\2\uffff\1\21\1\uffff\5\21\3\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);
    class DFA3 extends DFA {
        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "174:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedScriptElement_0= ruleAnnotatedScriptElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Namespace ( ( ruleBindingIdentifier ) ) ) )=>this_N4NamespaceDeclaration_1= ruleN4NamespaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4ClassDeclaration_2= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_3= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>this_N4EnumDeclaration_4= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4ModifierWithoutConst ) )* Type ( ( ruleBindingIdentifier ) )? ) )=>this_N4TypeAliasDeclaration_5= ruleN4TypeAliasDeclaration ) | ( ( ruleImportDeclaration )=>this_ImportDeclaration_6= ruleImportDeclaration ) | this_ExportDeclaration_7= ruleExportDeclaration | this_RootStatement_8= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_0 = input.LA(1);
                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA3_0>=9 && LA3_0<=106 && (s=T2S.M_0[LA3_0-(9)])>=0)) { /* 12 cases */ }
                        else if ( (LA3_0==Enum) && (synpred5_InternalN4JSParser())) {s = 13;}
                        else if ( (LA3_0==Type) ) {s = 14;}
                        else if ( (LA3_0==Import) ) {s = 15;}
                        else if ( (LA3_0==Export) ) {s = 16;}
                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=True)||(LA3_0>=Void && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||(LA3_0>=HyphenMinusHyphenMinus && LA3_0<=SolidusEqualsSign)||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_INT||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_BINARY_INT && LA3_0<=RULE_SCIENTIFIC_INT)||LA3_0==RULE_STRING) ) {s = 17;}
                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_1 = input.LA(1);
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_2 = input.LA(1);
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_3 = input.LA(1);
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_4 = input.LA(1);
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_5 = input.LA(1);
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_6 = input.LA(1);
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_7 = input.LA(1);
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_8 = input.LA(1);
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA3_9 = input.LA(1);
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA3_10 = input.LA(1);
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 82;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA3_11 = input.LA(1);
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA3_12 = input.LA(1);
                        int index3_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSParser()) ) {s = 84;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA3_14 = input.LA(1);
                        int index3_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalN4JSParser()) ) {s = 85;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA3_15 = input.LA(1);
                        int index3_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_InternalN4JSParser()) ) {s = 86;}
                        else if ( (true) ) {s = 17;}
                        input.seek(index3_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\141\uffff";
    static final String dfa_8s = "\23\uffff\12\21\104\uffff";
    static final String dfa_9s = "\1\11\1\uffff\7\11\1\4\11\uffff\1\4\7\11\1\4\1\20\34\uffff\7\11\41\uffff";
    static final String dfa_10s = "\1\152\1\uffff\7\101\1\u0087\11\uffff\12\u009a\34\uffff\7\101\41\uffff";
    static final String dfa_11s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\12\uffff\34\2\7\uffff\40\4\1\7";
    static final String dfa_12s = "\1\4\1\uffff\1\26\1\3\1\10\1\14\1\23\1\0\1\21\1\12\11\uffff\1\15\1\7\1\16\1\22\1\31\1\11\1\17\1\24\1\2\1\30\34\uffff\1\25\1\5\1\13\1\20\1\27\1\6\1\1\41\uffff}>";
    static final String[] dfa_13s = {
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\1\uffff\1\22\1\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21\50\uffff\1\1",
            "",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\3\21\1\uffff\1\21\1\33\1\23\1\26\1\31\2\uffff\1\30\1\20\3\uffff\1\24\1\25\3\uffff\1\27\1\uffff\1\32\1\uffff\1\21\1\uffff\1\34\1\21\2\uffff\1\13\1\11\3\uffff\1\21\1\uffff\2\21\2\uffff\1\15\1\21\3\uffff\1\21\7\uffff\2\21\1\uffff\2\21\1\uffff\1\21\20\uffff\1\21\3\uffff\1\21\23\uffff\2\21\2\uffff\1\21\30\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\1\50\1\62\1\uffff\1\57\1\63\1\70\1\65\1\44\2\uffff\1\43\4\uffff\1\64\1\42\3\uffff\1\66\1\uffff\1\45\1\uffff\1\52\1\uffff\1\61\1\60\7\uffff\1\54\1\uffff\1\36\1\56\3\uffff\1\47\3\uffff\1\53\7\uffff\1\37\1\41\1\uffff\1\67\1\40\22\uffff\1\46\3\uffff\1\51\11\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\26\uffff\1\35\20\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\121\1\114\1\126\1\uffff\1\123\1\127\1\134\1\131\1\110\2\uffff\1\107\2\uffff\1\136\1\uffff\1\130\1\106\3\uffff\1\132\1\uffff\1\111\1\uffff\1\116\1\uffff\1\125\1\124\7\uffff\1\120\1\uffff\1\102\1\122\3\uffff\1\113\3\uffff\1\117\7\uffff\1\103\1\105\1\uffff\1\133\1\104\22\uffff\1\112\3\uffff\1\115\11\uffff\1\21\3\uffff\2\21\1\135\1\21\6\uffff\1\137\1\uffff\1\21\1\100\25\uffff\1\101\20\uffff\1\21\1\uffff\1\21",
            "\1\20\117\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\22\uffff\1\140\24\uffff\1\21\1\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\73\1\76\2\uffff\1\75\1\20\3\uffff\1\71\1\72\3\uffff\1\74\1\uffff\1\77\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);
    class DFA8 extends DFA {
        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = dfa_7;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "611:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedNamespaceElement_0= ruleAnnotatedNamespaceElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Namespace ( ( ruleBindingIdentifier ) ) ) )=>this_N4NamespaceDeclaration_1= ruleN4NamespaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4ClassDeclaration_2= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_3= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>this_N4EnumDeclaration_4= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4ModifierWithoutConst ) )* Type ( ( ruleBindingIdentifier ) )? ) )=>this_N4TypeAliasDeclaration_5= ruleN4TypeAliasDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_6= ruleFunctionDeclaration ) | this_VariableStatementWithModifier_7= ruleVariableStatementWithModifier | this_ExportDeclaration_8= ruleExportDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_7 = input.LA(1);
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_7==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_7==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_7==Private) ) {s = 2;}
                        else if ( (LA8_7==Project) ) {s = 3;}
                        else if ( (LA8_7==Protected) ) {s = 4;}
                        else if ( (LA8_7==Public) ) {s = 5;}
                        else if ( (LA8_7==External) ) {s = 6;}
                        else if ( (LA8_7==Abstract) ) {s = 7;}
                        else if ( (LA8_7==Static) ) {s = 8;}
                        else if ( (LA8_7==Const) ) {s = 9;}
                        else if ( (LA8_7==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_7==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_7==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA8_7==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_7==Let||LA8_7==Var) ) {s = 17;}
                        else if ( (LA8_7==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_63 = input.LA(1);
                        int index8_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_63==Let||LA8_63==Var) ) {s = 17;}
                        else if ( (LA8_63==Const) ) {s = 9;}
                        else if ( (LA8_63==Private) ) {s = 57;}
                        else if ( (LA8_63==Project) ) {s = 58;}
                        else if ( (LA8_63==Protected) ) {s = 59;}
                        else if ( (LA8_63==Public) ) {s = 60;}
                        else if ( (LA8_63==External) ) {s = 61;}
                        else if ( (LA8_63==Abstract) ) {s = 62;}
                        else if ( (LA8_63==Static) ) {s = 63;}
                        else if ( (LA8_63==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_63==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_63==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_63==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_63==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_63==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        input.seek(index8_63);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_27 = input.LA(1);
                        int index8_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_27==EOF||LA8_27==Comma||(LA8_27>=Colon && LA8_27<=Semicolon)||LA8_27==EqualsSign||LA8_27==RightCurlyBracket||LA8_27==RULE_ML_COMMENT||LA8_27==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_27==Tilde) && (synpred13_InternalN4JSParser())) {s = 64;}
                        else if ( (LA8_27==RULE_IDENTIFIER) && (synpred13_InternalN4JSParser())) {s = 65;}
                        else if ( (LA8_27==Yield) && (synpred13_InternalN4JSParser())) {s = 66;}
                        else if ( (LA8_27==Get) && (synpred13_InternalN4JSParser())) {s = 67;}
                        else if ( (LA8_27==Set) && (synpred13_InternalN4JSParser())) {s = 68;}
                        else if ( (LA8_27==Let) && (synpred13_InternalN4JSParser())) {s = 69;}
                        else if ( (LA8_27==Project) && (synpred13_InternalN4JSParser())) {s = 70;}
                        else if ( (LA8_27==External) && (synpred13_InternalN4JSParser())) {s = 71;}
                        else if ( (LA8_27==Abstract) && (synpred13_InternalN4JSParser())) {s = 72;}
                        else if ( (LA8_27==Static) && (synpred13_InternalN4JSParser())) {s = 73;}
                        else if ( (LA8_27==As) && (synpred13_InternalN4JSParser())) {s = 74;}
                        else if ( (LA8_27==From) && (synpred13_InternalN4JSParser())) {s = 75;}
                        else if ( (LA8_27==Constructor) && (synpred13_InternalN4JSParser())) {s = 76;}
                        else if ( (LA8_27==Of) && (synpred13_InternalN4JSParser())) {s = 77;}
                        else if ( (LA8_27==Target) && (synpred13_InternalN4JSParser())) {s = 78;}
                        else if ( (LA8_27==Type) && (synpred13_InternalN4JSParser())) {s = 79;}
                        else if ( (LA8_27==Union) && (synpred13_InternalN4JSParser())) {s = 80;}
                        else if ( (LA8_27==Intersection) && (synpred13_InternalN4JSParser())) {s = 81;}
                        else if ( (LA8_27==This) && (synpred13_InternalN4JSParser())) {s = 82;}
                        else if ( (LA8_27==Promisify) && (synpred13_InternalN4JSParser())) {s = 83;}
                        else if ( (LA8_27==Await) && (synpred13_InternalN4JSParser())) {s = 84;}
                        else if ( (LA8_27==Async) && (synpred13_InternalN4JSParser())) {s = 85;}
                        else if ( (LA8_27==Implements) && (synpred13_InternalN4JSParser())) {s = 86;}
                        else if ( (LA8_27==Interface) && (synpred13_InternalN4JSParser())) {s = 87;}
                        else if ( (LA8_27==Private) && (synpred13_InternalN4JSParser())) {s = 88;}
                        else if ( (LA8_27==Protected) && (synpred13_InternalN4JSParser())) {s = 89;}
                        else if ( (LA8_27==Public) && (synpred13_InternalN4JSParser())) {s = 90;}
                        else if ( (LA8_27==Out) && (synpred13_InternalN4JSParser())) {s = 91;}
                        else if ( (LA8_27==Namespace) && (synpred13_InternalN4JSParser())) {s = 92;}
                        else if ( (LA8_27==LessThanSign) && (synpred13_InternalN4JSParser())) {s = 93;}
                        else if ( (LA8_27==Extends) && (synpred13_InternalN4JSParser())) {s = 94;}
                        else if ( (LA8_27==LeftCurlyBracket) && (synpred13_InternalN4JSParser())) {s = 95;}
                        input.seek(index8_27);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_3 = input.LA(1);
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_3==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_3==Private) ) {s = 2;}
                        else if ( (LA8_3==Project) ) {s = 3;}
                        else if ( (LA8_3==Protected) ) {s = 4;}
                        else if ( (LA8_3==Public) ) {s = 5;}
                        else if ( (LA8_3==External) ) {s = 6;}
                        else if ( (LA8_3==Abstract) ) {s = 7;}
                        else if ( (LA8_3==Static) ) {s = 8;}
                        else if ( (LA8_3==Const) ) {s = 9;}
                        else if ( (LA8_3==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA8_3==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_3==Let||LA8_3==Var) ) {s = 17;}
                        else if ( (LA8_3==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_3==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_3==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_3==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_0 = input.LA(1);
                        int index8_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_0==CommercialAt) && (synpred10_InternalN4JSParser())) {s = 1;}
                        else if ( (LA8_0==Private) ) {s = 2;}
                        else if ( (LA8_0==Project) ) {s = 3;}
                        else if ( (LA8_0==Protected) ) {s = 4;}
                        else if ( (LA8_0==Public) ) {s = 5;}
                        else if ( (LA8_0==External) ) {s = 6;}
                        else if ( (LA8_0==Abstract) ) {s = 7;}
                        else if ( (LA8_0==Static) ) {s = 8;}
                        else if ( (LA8_0==Const) ) {s = 9;}
                        else if ( (LA8_0==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_0==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_0==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_0==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_0==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA8_0==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_0==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_0==Let||LA8_0==Var) ) {s = 17;}
                        else if ( (LA8_0==Export) ) {s = 18;}
                        input.seek(index8_0);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_58 = input.LA(1);
                        int index8_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_58==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_58==Private) ) {s = 57;}
                        else if ( (LA8_58==Project) ) {s = 58;}
                        else if ( (LA8_58==Protected) ) {s = 59;}
                        else if ( (LA8_58==Public) ) {s = 60;}
                        else if ( (LA8_58==External) ) {s = 61;}
                        else if ( (LA8_58==Abstract) ) {s = 62;}
                        else if ( (LA8_58==Static) ) {s = 63;}
                        else if ( (LA8_58==Const) ) {s = 9;}
                        else if ( (LA8_58==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_58==Let||LA8_58==Var) ) {s = 17;}
                        else if ( (LA8_58==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_58==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_58==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_58==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index8_58);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_62 = input.LA(1);
                        int index8_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_62==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_62==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_62==Private) ) {s = 57;}
                        else if ( (LA8_62==Project) ) {s = 58;}
                        else if ( (LA8_62==Protected) ) {s = 59;}
                        else if ( (LA8_62==Public) ) {s = 60;}
                        else if ( (LA8_62==External) ) {s = 61;}
                        else if ( (LA8_62==Abstract) ) {s = 62;}
                        else if ( (LA8_62==Static) ) {s = 63;}
                        else if ( (LA8_62==Const) ) {s = 9;}
                        else if ( (LA8_62==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_62==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_62==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_62==Let||LA8_62==Var) ) {s = 17;}
                        else if ( (LA8_62==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index8_62);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_20 = input.LA(1);
                        int index8_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_20==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_20==Private) ) {s = 57;}
                        else if ( (LA8_20==Project) ) {s = 58;}
                        else if ( (LA8_20==Protected) ) {s = 59;}
                        else if ( (LA8_20==Public) ) {s = 60;}
                        else if ( (LA8_20==External) ) {s = 61;}
                        else if ( (LA8_20==Abstract) ) {s = 62;}
                        else if ( (LA8_20==Static) ) {s = 63;}
                        else if ( (LA8_20==Const) ) {s = 9;}
                        else if ( (LA8_20==EOF||LA8_20==Let||LA8_20==Var||LA8_20==Comma||(LA8_20>=Colon && LA8_20<=Semicolon)||LA8_20==EqualsSign||LA8_20==RightCurlyBracket||LA8_20==RULE_ML_COMMENT||LA8_20==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_20==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_20==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_20==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_20==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_20==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        input.seek(index8_20);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_4 = input.LA(1);
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_4==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_4==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_4==Private) ) {s = 2;}
                        else if ( (LA8_4==Project) ) {s = 3;}
                        else if ( (LA8_4==Protected) ) {s = 4;}
                        else if ( (LA8_4==Public) ) {s = 5;}
                        else if ( (LA8_4==External) ) {s = 6;}
                        else if ( (LA8_4==Abstract) ) {s = 7;}
                        else if ( (LA8_4==Static) ) {s = 8;}
                        else if ( (LA8_4==Const) ) {s = 9;}
                        else if ( (LA8_4==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_4==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_4==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA8_4==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_4==Let||LA8_4==Var) ) {s = 17;}
                        else if ( (LA8_4==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_24 = input.LA(1);
                        int index8_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_24==EOF||LA8_24==Let||LA8_24==Var||LA8_24==Comma||(LA8_24>=Colon && LA8_24<=Semicolon)||LA8_24==EqualsSign||LA8_24==RightCurlyBracket||LA8_24==RULE_ML_COMMENT||LA8_24==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_24==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_24==Private) ) {s = 57;}
                        else if ( (LA8_24==Project) ) {s = 58;}
                        else if ( (LA8_24==Protected) ) {s = 59;}
                        else if ( (LA8_24==Public) ) {s = 60;}
                        else if ( (LA8_24==External) ) {s = 61;}
                        else if ( (LA8_24==Abstract) ) {s = 62;}
                        else if ( (LA8_24==Static) ) {s = 63;}
                        else if ( (LA8_24==Const) ) {s = 9;}
                        else if ( (LA8_24==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_24==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_24==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_24==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_24==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index8_24);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_9 = input.LA(1);
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_9==Namespace) ) {s = 19;}
                        else if ( (LA8_9==Private) ) {s = 20;}
                        else if ( (LA8_9==Project) ) {s = 21;}
                        else if ( (LA8_9==Protected) ) {s = 22;}
                        else if ( (LA8_9==Public) ) {s = 23;}
                        else if ( (LA8_9==External) ) {s = 24;}
                        else if ( (LA8_9==Abstract) ) {s = 25;}
                        else if ( (LA8_9==Static) ) {s = 26;}
                        else if ( (LA8_9==Const) ) {s = 9;}
                        else if ( (LA8_9==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( ((LA8_9>=Intersection && LA8_9<=Implements)||LA8_9==Promisify||LA8_9==Target||LA8_9==Await||LA8_9==Union||(LA8_9>=Yield && LA8_9<=This)||LA8_9==From||LA8_9==Type||(LA8_9>=Get && LA8_9<=Let)||(LA8_9>=Out && LA8_9<=Set)||LA8_9==Var||LA8_9==As||LA8_9==Of||(LA8_9>=CommercialAt && LA8_9<=LeftSquareBracket)||LA8_9==LeftCurlyBracket||LA8_9==RULE_IDENTIFIER) ) {s = 17;}
                        else if ( (LA8_9==Interface) ) {s = 27;}
                        else if ( (LA8_9==Async) ) {s = 28;}
                        else if ( (LA8_9==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_9==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_59 = input.LA(1);
                        int index8_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_59==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_59==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_59==Private) ) {s = 57;}
                        else if ( (LA8_59==Project) ) {s = 58;}
                        else if ( (LA8_59==Protected) ) {s = 59;}
                        else if ( (LA8_59==Public) ) {s = 60;}
                        else if ( (LA8_59==External) ) {s = 61;}
                        else if ( (LA8_59==Abstract) ) {s = 62;}
                        else if ( (LA8_59==Static) ) {s = 63;}
                        else if ( (LA8_59==Const) ) {s = 9;}
                        else if ( (LA8_59==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_59==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_59==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_59==Let||LA8_59==Var) ) {s = 17;}
                        else if ( (LA8_59==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index8_59);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_5 = input.LA(1);
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_5==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_5==Private) ) {s = 2;}
                        else if ( (LA8_5==Project) ) {s = 3;}
                        else if ( (LA8_5==Protected) ) {s = 4;}
                        else if ( (LA8_5==Public) ) {s = 5;}
                        else if ( (LA8_5==External) ) {s = 6;}
                        else if ( (LA8_5==Abstract) ) {s = 7;}
                        else if ( (LA8_5==Static) ) {s = 8;}
                        else if ( (LA8_5==Const) ) {s = 9;}
                        else if ( (LA8_5==Let||LA8_5==Var) ) {s = 17;}
                        else if ( (LA8_5==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_5==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_5==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_5==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_5==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_5==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_19 = input.LA(1);
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_19==EOF||LA8_19==Comma||(LA8_19>=Colon && LA8_19<=Semicolon)||LA8_19==EqualsSign||LA8_19==RightCurlyBracket||LA8_19==RULE_ML_COMMENT||LA8_19==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_19==RULE_IDENTIFIER) && (synpred11_InternalN4JSParser())) {s = 29;}
                        else if ( (LA8_19==Yield) && (synpred11_InternalN4JSParser())) {s = 30;}
                        else if ( (LA8_19==Get) && (synpred11_InternalN4JSParser())) {s = 31;}
                        else if ( (LA8_19==Set) && (synpred11_InternalN4JSParser())) {s = 32;}
                        else if ( (LA8_19==Let) && (synpred11_InternalN4JSParser())) {s = 33;}
                        else if ( (LA8_19==Project) && (synpred11_InternalN4JSParser())) {s = 34;}
                        else if ( (LA8_19==External) && (synpred11_InternalN4JSParser())) {s = 35;}
                        else if ( (LA8_19==Abstract) && (synpred11_InternalN4JSParser())) {s = 36;}
                        else if ( (LA8_19==Static) && (synpred11_InternalN4JSParser())) {s = 37;}
                        else if ( (LA8_19==As) && (synpred11_InternalN4JSParser())) {s = 38;}
                        else if ( (LA8_19==From) && (synpred11_InternalN4JSParser())) {s = 39;}
                        else if ( (LA8_19==Constructor) && (synpred11_InternalN4JSParser())) {s = 40;}
                        else if ( (LA8_19==Of) && (synpred11_InternalN4JSParser())) {s = 41;}
                        else if ( (LA8_19==Target) && (synpred11_InternalN4JSParser())) {s = 42;}
                        else if ( (LA8_19==Type) && (synpred11_InternalN4JSParser())) {s = 43;}
                        else if ( (LA8_19==Union) && (synpred11_InternalN4JSParser())) {s = 44;}
                        else if ( (LA8_19==Intersection) && (synpred11_InternalN4JSParser())) {s = 45;}
                        else if ( (LA8_19==This) && (synpred11_InternalN4JSParser())) {s = 46;}
                        else if ( (LA8_19==Promisify) && (synpred11_InternalN4JSParser())) {s = 47;}
                        else if ( (LA8_19==Await) && (synpred11_InternalN4JSParser())) {s = 48;}
                        else if ( (LA8_19==Async) && (synpred11_InternalN4JSParser())) {s = 49;}
                        else if ( (LA8_19==Implements) && (synpred11_InternalN4JSParser())) {s = 50;}
                        else if ( (LA8_19==Interface) && (synpred11_InternalN4JSParser())) {s = 51;}
                        else if ( (LA8_19==Private) && (synpred11_InternalN4JSParser())) {s = 52;}
                        else if ( (LA8_19==Protected) && (synpred11_InternalN4JSParser())) {s = 53;}
                        else if ( (LA8_19==Public) && (synpred11_InternalN4JSParser())) {s = 54;}
                        else if ( (LA8_19==Out) && (synpred11_InternalN4JSParser())) {s = 55;}
                        else if ( (LA8_19==Namespace) && (synpred11_InternalN4JSParser())) {s = 56;}
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_21 = input.LA(1);
                        int index8_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_21==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_21==Private) ) {s = 57;}
                        else if ( (LA8_21==Project) ) {s = 58;}
                        else if ( (LA8_21==Protected) ) {s = 59;}
                        else if ( (LA8_21==Public) ) {s = 60;}
                        else if ( (LA8_21==External) ) {s = 61;}
                        else if ( (LA8_21==Abstract) ) {s = 62;}
                        else if ( (LA8_21==Static) ) {s = 63;}
                        else if ( (LA8_21==Const) ) {s = 9;}
                        else if ( (LA8_21==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_21==EOF||LA8_21==Let||LA8_21==Var||LA8_21==Comma||(LA8_21>=Colon && LA8_21<=Semicolon)||LA8_21==EqualsSign||LA8_21==RightCurlyBracket||LA8_21==RULE_ML_COMMENT||LA8_21==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_21==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_21==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_21==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_21==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index8_21);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_25 = input.LA(1);
                        int index8_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_25==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_25==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_25==Private) ) {s = 57;}
                        else if ( (LA8_25==Project) ) {s = 58;}
                        else if ( (LA8_25==Protected) ) {s = 59;}
                        else if ( (LA8_25==Public) ) {s = 60;}
                        else if ( (LA8_25==External) ) {s = 61;}
                        else if ( (LA8_25==Abstract) ) {s = 62;}
                        else if ( (LA8_25==Static) ) {s = 63;}
                        else if ( (LA8_25==Const) ) {s = 9;}
                        else if ( (LA8_25==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_25==EOF||LA8_25==Let||LA8_25==Var||LA8_25==Comma||(LA8_25>=Colon && LA8_25<=Semicolon)||LA8_25==EqualsSign||LA8_25==RightCurlyBracket||LA8_25==RULE_ML_COMMENT||LA8_25==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_25==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_25==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_25==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index8_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_60 = input.LA(1);
                        int index8_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_60==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_60==Private) ) {s = 57;}
                        else if ( (LA8_60==Project) ) {s = 58;}
                        else if ( (LA8_60==Protected) ) {s = 59;}
                        else if ( (LA8_60==Public) ) {s = 60;}
                        else if ( (LA8_60==External) ) {s = 61;}
                        else if ( (LA8_60==Abstract) ) {s = 62;}
                        else if ( (LA8_60==Static) ) {s = 63;}
                        else if ( (LA8_60==Const) ) {s = 9;}
                        else if ( (LA8_60==Let||LA8_60==Var) ) {s = 17;}
                        else if ( (LA8_60==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_60==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_60==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_60==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_60==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        input.seek(index8_60);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_8 = input.LA(1);
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_8==Let||LA8_8==Var) ) {s = 17;}
                        else if ( (LA8_8==Const) ) {s = 9;}
                        else if ( (LA8_8==Private) ) {s = 2;}
                        else if ( (LA8_8==Project) ) {s = 3;}
                        else if ( (LA8_8==Protected) ) {s = 4;}
                        else if ( (LA8_8==Public) ) {s = 5;}
                        else if ( (LA8_8==External) ) {s = 6;}
                        else if ( (LA8_8==Abstract) ) {s = 7;}
                        else if ( (LA8_8==Static) ) {s = 8;}
                        else if ( (LA8_8==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_8==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_8==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_8==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_8==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_8==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA8_8==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA8_22 = input.LA(1);
                        int index8_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_22==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_22==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_22==Private) ) {s = 57;}
                        else if ( (LA8_22==Project) ) {s = 58;}
                        else if ( (LA8_22==Protected) ) {s = 59;}
                        else if ( (LA8_22==Public) ) {s = 60;}
                        else if ( (LA8_22==External) ) {s = 61;}
                        else if ( (LA8_22==Abstract) ) {s = 62;}
                        else if ( (LA8_22==Static) ) {s = 63;}
                        else if ( (LA8_22==Const) ) {s = 9;}
                        else if ( (LA8_22==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_22==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_22==EOF||LA8_22==Let||LA8_22==Var||LA8_22==Comma||(LA8_22>=Colon && LA8_22<=Semicolon)||LA8_22==EqualsSign||LA8_22==RightCurlyBracket||LA8_22==RULE_ML_COMMENT||LA8_22==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_22==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_22==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        input.seek(index8_22);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA8_6 = input.LA(1);
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_6==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_6==Private) ) {s = 2;}
                        else if ( (LA8_6==Project) ) {s = 3;}
                        else if ( (LA8_6==Protected) ) {s = 4;}
                        else if ( (LA8_6==Public) ) {s = 5;}
                        else if ( (LA8_6==External) ) {s = 6;}
                        else if ( (LA8_6==Abstract) ) {s = 7;}
                        else if ( (LA8_6==Static) ) {s = 8;}
                        else if ( (LA8_6==Const) ) {s = 9;}
                        else if ( (LA8_6==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        else if ( (LA8_6==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_6==Let||LA8_6==Var) ) {s = 17;}
                        else if ( (LA8_6==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_6==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_6==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_6==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA8_26 = input.LA(1);
                        int index8_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_26==EOF||LA8_26==Let||LA8_26==Var||LA8_26==Comma||(LA8_26>=Colon && LA8_26<=Semicolon)||LA8_26==EqualsSign||LA8_26==RightCurlyBracket||LA8_26==RULE_ML_COMMENT||LA8_26==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_26==Const) ) {s = 9;}
                        else if ( (LA8_26==Private) ) {s = 57;}
                        else if ( (LA8_26==Project) ) {s = 58;}
                        else if ( (LA8_26==Protected) ) {s = 59;}
                        else if ( (LA8_26==Public) ) {s = 60;}
                        else if ( (LA8_26==External) ) {s = 61;}
                        else if ( (LA8_26==Abstract) ) {s = 62;}
                        else if ( (LA8_26==Static) ) {s = 63;}
                        else if ( (LA8_26==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_26==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_26==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_26==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_26==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_26==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        input.seek(index8_26);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA8_57 = input.LA(1);
                        int index8_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_57==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_57==Private) ) {s = 57;}
                        else if ( (LA8_57==Project) ) {s = 58;}
                        else if ( (LA8_57==Protected) ) {s = 59;}
                        else if ( (LA8_57==Public) ) {s = 60;}
                        else if ( (LA8_57==External) ) {s = 61;}
                        else if ( (LA8_57==Abstract) ) {s = 62;}
                        else if ( (LA8_57==Static) ) {s = 63;}
                        else if ( (LA8_57==Const) ) {s = 9;}
                        else if ( (LA8_57==Let||LA8_57==Var) ) {s = 17;}
                        else if ( (LA8_57==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_57==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_57==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_57==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_57==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        input.seek(index8_57);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA8_2 = input.LA(1);
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_2==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_2==Private) ) {s = 2;}
                        else if ( (LA8_2==Project) ) {s = 3;}
                        else if ( (LA8_2==Protected) ) {s = 4;}
                        else if ( (LA8_2==Public) ) {s = 5;}
                        else if ( (LA8_2==External) ) {s = 6;}
                        else if ( (LA8_2==Abstract) ) {s = 7;}
                        else if ( (LA8_2==Static) ) {s = 8;}
                        else if ( (LA8_2==Const) ) {s = 9;}
                        else if ( (LA8_2==Let||LA8_2==Var) ) {s = 17;}
                        else if ( (LA8_2==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_2==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_2==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_2==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_2==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_2==Type) && (synpred15_InternalN4JSParser())) {s = 14;}
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA8_61 = input.LA(1);
                        int index8_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_61==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        else if ( (LA8_61==Private) ) {s = 57;}
                        else if ( (LA8_61==Project) ) {s = 58;}
                        else if ( (LA8_61==Protected) ) {s = 59;}
                        else if ( (LA8_61==Public) ) {s = 60;}
                        else if ( (LA8_61==External) ) {s = 61;}
                        else if ( (LA8_61==Abstract) ) {s = 62;}
                        else if ( (LA8_61==Static) ) {s = 63;}
                        else if ( (LA8_61==Const) ) {s = 9;}
                        else if ( (LA8_61==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_61==Let||LA8_61==Var) ) {s = 17;}
                        else if ( (LA8_61==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_61==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_61==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_61==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        input.seek(index8_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA8_28 = input.LA(1);
                        int index8_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_28==RULE_NO_LINE_TERMINATOR) && (synpred16_InternalN4JSParser())) {s = 96;}
                        else if ( (LA8_28==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_28==EOF||LA8_28==Comma||(LA8_28>=Colon && LA8_28<=Semicolon)||LA8_28==EqualsSign||LA8_28==RightCurlyBracket||LA8_28==RULE_ML_COMMENT||LA8_28==RULE_EOL) ) {s = 17;}
                        input.seek(index8_28);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA8_23 = input.LA(1);
                        int index8_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_23==Enum) && (synpred14_InternalN4JSParser())) {s = 13;}
                        else if ( (LA8_23==Private) ) {s = 57;}
                        else if ( (LA8_23==Project) ) {s = 58;}
                        else if ( (LA8_23==Protected) ) {s = 59;}
                        else if ( (LA8_23==Public) ) {s = 60;}
                        else if ( (LA8_23==External) ) {s = 61;}
                        else if ( (LA8_23==Abstract) ) {s = 62;}
                        else if ( (LA8_23==Static) ) {s = 63;}
                        else if ( (LA8_23==Const) ) {s = 9;}
                        else if ( (LA8_23==EOF||LA8_23==Let||LA8_23==Var||LA8_23==Comma||(LA8_23>=Colon && LA8_23<=Semicolon)||LA8_23==EqualsSign||LA8_23==RightCurlyBracket||LA8_23==RULE_ML_COMMENT||LA8_23==RULE_EOL) ) {s = 17;}
                        else if ( (LA8_23==Interface) && (synpred13_InternalN4JSParser())) {s = 12;}
                        else if ( (LA8_23==Async) && (synpred16_InternalN4JSParser())) {s = 15;}
                        else if ( (LA8_23==Function) && (synpred16_InternalN4JSParser())) {s = 16;}
                        else if ( (LA8_23==Class) && (synpred12_InternalN4JSParser())) {s = 11;}
                        else if ( (LA8_23==Namespace) && (synpred11_InternalN4JSParser())) {s = 10;}
                        input.seek(index8_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\137\uffff";
    static final String dfa_15s = "\23\uffff\12\21\102\uffff";
    static final String dfa_16s = "\1\11\1\uffff\7\11\1\4\11\uffff\1\4\7\11\1\20\1\4\33\uffff\7\11\40\uffff";
    static final String dfa_17s = "\1\152\1\uffff\7\101\1\u0087\11\uffff\12\u009a\33\uffff\7\101\40\uffff";
    static final String dfa_18s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\12\uffff\33\2\7\uffff\1\7\37\4";
    static final String dfa_19s = "\1\27\1\uffff\1\11\1\26\1\10\1\23\1\3\1\17\1\1\1\20\11\uffff\1\4\1\5\1\30\1\6\1\24\1\13\1\31\1\12\1\14\1\22\33\uffff\1\15\1\2\1\21\1\0\1\16\1\7\1\25\40\uffff}>";
    static final String[] dfa_20s = {
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\1\uffff\1\22\1\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21\50\uffff\1\1",
            "",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\3\21\1\uffff\1\21\1\34\1\23\1\26\1\31\2\uffff\1\30\1\20\3\uffff\1\24\1\25\3\uffff\1\27\1\uffff\1\32\1\uffff\1\21\1\uffff\1\33\1\21\2\uffff\1\13\1\11\3\uffff\1\21\2\uffff\1\21\2\uffff\1\15\1\21\3\uffff\1\21\7\uffff\2\21\1\uffff\2\21\1\uffff\1\21\20\uffff\1\21\3\uffff\1\21\23\uffff\2\21\2\uffff\1\21\30\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\54\1\47\1\61\1\uffff\1\56\1\62\1\67\1\64\1\43\2\uffff\1\42\4\uffff\1\63\1\41\3\uffff\1\65\1\uffff\1\44\1\uffff\1\51\1\uffff\1\60\1\57\7\uffff\1\53\2\uffff\1\55\3\uffff\1\46\3\uffff\1\52\7\uffff\1\36\1\40\1\uffff\1\66\1\37\22\uffff\1\45\3\uffff\1\50\11\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\26\uffff\1\35\20\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\20\117\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\22\uffff\1\77\24\uffff\1\21\1\uffff\1\21",
            "\1\120\1\113\1\125\1\uffff\1\122\1\126\1\133\1\130\1\107\2\uffff\1\106\2\uffff\1\135\1\uffff\1\127\1\105\3\uffff\1\131\1\uffff\1\110\1\uffff\1\115\1\uffff\1\124\1\123\7\uffff\1\117\2\uffff\1\121\3\uffff\1\112\3\uffff\1\116\7\uffff\1\102\1\104\1\uffff\1\132\1\103\22\uffff\1\111\3\uffff\1\114\11\uffff\1\21\3\uffff\2\21\1\134\1\21\6\uffff\1\136\1\uffff\1\21\1\100\25\uffff\1\101\20\uffff\1\21\1\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\72\1\75\2\uffff\1\74\1\20\3\uffff\1\70\1\71\3\uffff\1\73\1\uffff\1\76\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final char[] dfa_17 = DFA.unpackEncodedStringToUnsignedChars(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[][] dfa_20 = unpackEncodedStringArray(dfa_20s);
    class DFA9 extends DFA {
        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = dfa_14;
            this.eof = dfa_15;
            this.min = dfa_16;
            this.max = dfa_17;
            this.accept = dfa_18;
            this.special = dfa_19;
            this.transition = dfa_20;
        }
        public String getDescription() {
            return "829:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedNamespaceElement_0= ruleAnnotatedNamespaceElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Namespace ( ( norm1_BindingIdentifier ) ) ) )=>this_N4NamespaceDeclaration_1= norm1_N4NamespaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( norm1_BindingIdentifier ) )? ) )=>this_N4ClassDeclaration_2= norm1_N4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( norm1_BindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_3= norm1_N4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( norm1_BindingIdentifier ) )? ) )=>this_N4EnumDeclaration_4= norm1_N4EnumDeclaration ) | ( ( ( () ( ( ruleN4ModifierWithoutConst ) )* Type ( ( norm1_BindingIdentifier ) )? ) )=>this_N4TypeAliasDeclaration_5= norm1_N4TypeAliasDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_6= norm1_FunctionDeclaration ) | this_VariableStatementWithModifier_7= norm1_VariableStatementWithModifier | this_ExportDeclaration_8= ruleExportDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_59 = input.LA(1);
                        int index9_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_59==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_59==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_59==Private) ) {s = 56;}
                        else if ( (LA9_59==Project) ) {s = 57;}
                        else if ( (LA9_59==Protected) ) {s = 58;}
                        else if ( (LA9_59==Public) ) {s = 59;}
                        else if ( (LA9_59==External) ) {s = 60;}
                        else if ( (LA9_59==Abstract) ) {s = 61;}
                        else if ( (LA9_59==Static) ) {s = 62;}
                        else if ( (LA9_59==Const) ) {s = 9;}
                        else if ( (LA9_59==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_59==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_59==Let||LA9_59==Var) ) {s = 17;}
                        else if ( (LA9_59==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_59==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        input.seek(index9_59);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_8 = input.LA(1);
                        int index9_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_8==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_8==Private) ) {s = 2;}
                        else if ( (LA9_8==Project) ) {s = 3;}
                        else if ( (LA9_8==Protected) ) {s = 4;}
                        else if ( (LA9_8==Public) ) {s = 5;}
                        else if ( (LA9_8==External) ) {s = 6;}
                        else if ( (LA9_8==Abstract) ) {s = 7;}
                        else if ( (LA9_8==Static) ) {s = 8;}
                        else if ( (LA9_8==Const) ) {s = 9;}
                        else if ( (LA9_8==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_8==Let||LA9_8==Var) ) {s = 17;}
                        else if ( (LA9_8==Type) && (synpred22_InternalN4JSParser())) {s = 14;}
                        else if ( (LA9_8==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_8==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_8==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_8==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        input.seek(index9_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_57 = input.LA(1);
                        int index9_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_57==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_57==Private) ) {s = 56;}
                        else if ( (LA9_57==Project) ) {s = 57;}
                        else if ( (LA9_57==Protected) ) {s = 58;}
                        else if ( (LA9_57==Public) ) {s = 59;}
                        else if ( (LA9_57==External) ) {s = 60;}
                        else if ( (LA9_57==Abstract) ) {s = 61;}
                        else if ( (LA9_57==Static) ) {s = 62;}
                        else if ( (LA9_57==Const) ) {s = 9;}
                        else if ( (LA9_57==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_57==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_57==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_57==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_57==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_57==Let||LA9_57==Var) ) {s = 17;}
                        input.seek(index9_57);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_6 = input.LA(1);
                        int index9_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_6==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_6==Private) ) {s = 2;}
                        else if ( (LA9_6==Project) ) {s = 3;}
                        else if ( (LA9_6==Protected) ) {s = 4;}
                        else if ( (LA9_6==Public) ) {s = 5;}
                        else if ( (LA9_6==External) ) {s = 6;}
                        else if ( (LA9_6==Abstract) ) {s = 7;}
                        else if ( (LA9_6==Static) ) {s = 8;}
                        else if ( (LA9_6==Const) ) {s = 9;}
                        else if ( (LA9_6==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_6==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_6==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_6==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_6==Let||LA9_6==Var) ) {s = 17;}
                        else if ( (LA9_6==Type) && (synpred22_InternalN4JSParser())) {s = 14;}
                        else if ( (LA9_6==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        input.seek(index9_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_19 = input.LA(1);
                        int index9_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_19==EOF||LA9_19==Comma||(LA9_19>=Colon && LA9_19<=Semicolon)||LA9_19==EqualsSign||LA9_19==RightCurlyBracket||LA9_19==RULE_ML_COMMENT||LA9_19==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_19==RULE_IDENTIFIER) && (synpred18_InternalN4JSParser())) {s = 29;}
                        else if ( (LA9_19==Get) && (synpred18_InternalN4JSParser())) {s = 30;}
                        else if ( (LA9_19==Set) && (synpred18_InternalN4JSParser())) {s = 31;}
                        else if ( (LA9_19==Let) && (synpred18_InternalN4JSParser())) {s = 32;}
                        else if ( (LA9_19==Project) && (synpred18_InternalN4JSParser())) {s = 33;}
                        else if ( (LA9_19==External) && (synpred18_InternalN4JSParser())) {s = 34;}
                        else if ( (LA9_19==Abstract) && (synpred18_InternalN4JSParser())) {s = 35;}
                        else if ( (LA9_19==Static) && (synpred18_InternalN4JSParser())) {s = 36;}
                        else if ( (LA9_19==As) && (synpred18_InternalN4JSParser())) {s = 37;}
                        else if ( (LA9_19==From) && (synpred18_InternalN4JSParser())) {s = 38;}
                        else if ( (LA9_19==Constructor) && (synpred18_InternalN4JSParser())) {s = 39;}
                        else if ( (LA9_19==Of) && (synpred18_InternalN4JSParser())) {s = 40;}
                        else if ( (LA9_19==Target) && (synpred18_InternalN4JSParser())) {s = 41;}
                        else if ( (LA9_19==Type) && (synpred18_InternalN4JSParser())) {s = 42;}
                        else if ( (LA9_19==Union) && (synpred18_InternalN4JSParser())) {s = 43;}
                        else if ( (LA9_19==Intersection) && (synpred18_InternalN4JSParser())) {s = 44;}
                        else if ( (LA9_19==This) && (synpred18_InternalN4JSParser())) {s = 45;}
                        else if ( (LA9_19==Promisify) && (synpred18_InternalN4JSParser())) {s = 46;}
                        else if ( (LA9_19==Await) && (synpred18_InternalN4JSParser())) {s = 47;}
                        else if ( (LA9_19==Async) && (synpred18_InternalN4JSParser())) {s = 48;}
                        else if ( (LA9_19==Implements) && (synpred18_InternalN4JSParser())) {s = 49;}
                        else if ( (LA9_19==Interface) && (synpred18_InternalN4JSParser())) {s = 50;}
                        else if ( (LA9_19==Private) && (synpred18_InternalN4JSParser())) {s = 51;}
                        else if ( (LA9_19==Protected) && (synpred18_InternalN4JSParser())) {s = 52;}
                        else if ( (LA9_19==Public) && (synpred18_InternalN4JSParser())) {s = 53;}
                        else if ( (LA9_19==Out) && (synpred18_InternalN4JSParser())) {s = 54;}
                        else if ( (LA9_19==Namespace) && (synpred18_InternalN4JSParser())) {s = 55;}
                        input.seek(index9_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_20 = input.LA(1);
                        int index9_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_20==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_20==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_20==Private) ) {s = 56;}
                        else if ( (LA9_20==Project) ) {s = 57;}
                        else if ( (LA9_20==Protected) ) {s = 58;}
                        else if ( (LA9_20==Public) ) {s = 59;}
                        else if ( (LA9_20==External) ) {s = 60;}
                        else if ( (LA9_20==Abstract) ) {s = 61;}
                        else if ( (LA9_20==Static) ) {s = 62;}
                        else if ( (LA9_20==Const) ) {s = 9;}
                        else if ( (LA9_20==EOF||LA9_20==Let||LA9_20==Var||LA9_20==Comma||(LA9_20>=Colon && LA9_20<=Semicolon)||LA9_20==EqualsSign||LA9_20==RightCurlyBracket||LA9_20==RULE_ML_COMMENT||LA9_20==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_20==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_20==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_20==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_20==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        input.seek(index9_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA9_22 = input.LA(1);
                        int index9_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_22==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_22==Private) ) {s = 56;}
                        else if ( (LA9_22==Project) ) {s = 57;}
                        else if ( (LA9_22==Protected) ) {s = 58;}
                        else if ( (LA9_22==Public) ) {s = 59;}
                        else if ( (LA9_22==External) ) {s = 60;}
                        else if ( (LA9_22==Abstract) ) {s = 61;}
                        else if ( (LA9_22==Static) ) {s = 62;}
                        else if ( (LA9_22==Const) ) {s = 9;}
                        else if ( (LA9_22==EOF||LA9_22==Let||LA9_22==Var||LA9_22==Comma||(LA9_22>=Colon && LA9_22<=Semicolon)||LA9_22==EqualsSign||LA9_22==RightCurlyBracket||LA9_22==RULE_ML_COMMENT||LA9_22==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_22==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_22==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_22==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_22==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_22==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        input.seek(index9_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA9_61 = input.LA(1);
                        int index9_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_61==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_61==Private) ) {s = 56;}
                        else if ( (LA9_61==Project) ) {s = 57;}
                        else if ( (LA9_61==Protected) ) {s = 58;}
                        else if ( (LA9_61==Public) ) {s = 59;}
                        else if ( (LA9_61==External) ) {s = 60;}
                        else if ( (LA9_61==Abstract) ) {s = 61;}
                        else if ( (LA9_61==Static) ) {s = 62;}
                        else if ( (LA9_61==Const) ) {s = 9;}
                        else if ( (LA9_61==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_61==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_61==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_61==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_61==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_61==Let||LA9_61==Var) ) {s = 17;}
                        input.seek(index9_61);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA9_4 = input.LA(1);
                        int index9_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_4==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_4==Private) ) {s = 2;}
                        else if ( (LA9_4==Project) ) {s = 3;}
                        else if ( (LA9_4==Protected) ) {s = 4;}
                        else if ( (LA9_4==Public) ) {s = 5;}
                        else if ( (LA9_4==External) ) {s = 6;}
                        else if ( (LA9_4==Abstract) ) {s = 7;}
                        else if ( (LA9_4==Static) ) {s = 8;}
                        else if ( (LA9_4==Const) ) {s = 9;}
                        else if ( (LA9_4==Let||LA9_4==Var) ) {s = 17;}
                        else if ( (LA9_4==Type) && (synpred22_InternalN4JSParser())) {s = 14;}
                        else if ( (LA9_4==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_4==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_4==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_4==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_4==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        input.seek(index9_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA9_2 = input.LA(1);
                        int index9_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_2==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_2==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_2==Private) ) {s = 2;}
                        else if ( (LA9_2==Project) ) {s = 3;}
                        else if ( (LA9_2==Protected) ) {s = 4;}
                        else if ( (LA9_2==Public) ) {s = 5;}
                        else if ( (LA9_2==External) ) {s = 6;}
                        else if ( (LA9_2==Abstract) ) {s = 7;}
                        else if ( (LA9_2==Static) ) {s = 8;}
                        else if ( (LA9_2==Const) ) {s = 9;}
                        else if ( (LA9_2==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_2==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_2==Let||LA9_2==Var) ) {s = 17;}
                        else if ( (LA9_2==Type) && (synpred22_InternalN4JSParser())) {s = 14;}
                        else if ( (LA9_2==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_2==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        input.seek(index9_2);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA9_26 = input.LA(1);
                        int index9_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_26==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_26==Private) ) {s = 56;}
                        else if ( (LA9_26==Project) ) {s = 57;}
                        else if ( (LA9_26==Protected) ) {s = 58;}
                        else if ( (LA9_26==Public) ) {s = 59;}
                        else if ( (LA9_26==External) ) {s = 60;}
                        else if ( (LA9_26==Abstract) ) {s = 61;}
                        else if ( (LA9_26==Static) ) {s = 62;}
                        else if ( (LA9_26==Const) ) {s = 9;}
                        else if ( (LA9_26==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_26==EOF||LA9_26==Let||LA9_26==Var||LA9_26==Comma||(LA9_26>=Colon && LA9_26<=Semicolon)||LA9_26==EqualsSign||LA9_26==RightCurlyBracket||LA9_26==RULE_ML_COMMENT||LA9_26==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_26==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_26==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_26==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_26==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        input.seek(index9_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA9_24 = input.LA(1);
                        int index9_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_24==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_24==Private) ) {s = 56;}
                        else if ( (LA9_24==Project) ) {s = 57;}
                        else if ( (LA9_24==Protected) ) {s = 58;}
                        else if ( (LA9_24==Public) ) {s = 59;}
                        else if ( (LA9_24==External) ) {s = 60;}
                        else if ( (LA9_24==Abstract) ) {s = 61;}
                        else if ( (LA9_24==Static) ) {s = 62;}
                        else if ( (LA9_24==Const) ) {s = 9;}
                        else if ( (LA9_24==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_24==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_24==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_24==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_24==EOF||LA9_24==Let||LA9_24==Var||LA9_24==Comma||(LA9_24>=Colon && LA9_24<=Semicolon)||LA9_24==EqualsSign||LA9_24==RightCurlyBracket||LA9_24==RULE_ML_COMMENT||LA9_24==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_24==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        input.seek(index9_24);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA9_27 = input.LA(1);
                        int index9_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_27==EOF||LA9_27==Comma||(LA9_27>=Colon && LA9_27<=Semicolon)||LA9_27==EqualsSign||LA9_27==RightCurlyBracket||LA9_27==RULE_ML_COMMENT||LA9_27==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_27==RULE_NO_LINE_TERMINATOR) && (synpred23_InternalN4JSParser())) {s = 63;}
                        else if ( (LA9_27==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        input.seek(index9_27);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA9_56 = input.LA(1);
                        int index9_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_56==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_56==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_56==Private) ) {s = 56;}
                        else if ( (LA9_56==Project) ) {s = 57;}
                        else if ( (LA9_56==Protected) ) {s = 58;}
                        else if ( (LA9_56==Public) ) {s = 59;}
                        else if ( (LA9_56==External) ) {s = 60;}
                        else if ( (LA9_56==Abstract) ) {s = 61;}
                        else if ( (LA9_56==Static) ) {s = 62;}
                        else if ( (LA9_56==Const) ) {s = 9;}
                        else if ( (LA9_56==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_56==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_56==Let||LA9_56==Var) ) {s = 17;}
                        else if ( (LA9_56==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_56==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        input.seek(index9_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA9_60 = input.LA(1);
                        int index9_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_60==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_60==Private) ) {s = 56;}
                        else if ( (LA9_60==Project) ) {s = 57;}
                        else if ( (LA9_60==Protected) ) {s = 58;}
                        else if ( (LA9_60==Public) ) {s = 59;}
                        else if ( (LA9_60==External) ) {s = 60;}
                        else if ( (LA9_60==Abstract) ) {s = 61;}
                        else if ( (LA9_60==Static) ) {s = 62;}
                        else if ( (LA9_60==Const) ) {s = 9;}
                        else if ( (LA9_60==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_60==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_60==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_60==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_60==Let||LA9_60==Var) ) {s = 17;}
                        else if ( (LA9_60==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        input.seek(index9_60);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA9_7 = input.LA(1);
                        int index9_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_7==Type) && (synpred22_InternalN4JSParser())) {s = 14;}
                        else if ( (LA9_7==Private) ) {s = 2;}
                        else if ( (LA9_7==Project) ) {s = 3;}
                        else if ( (LA9_7==Protected) ) {s = 4;}
                        else if ( (LA9_7==Public) ) {s = 5;}
                        else if ( (LA9_7==External) ) {s = 6;}
                        else if ( (LA9_7==Abstract) ) {s = 7;}
                        else if ( (LA9_7==Static) ) {s = 8;}
                        else if ( (LA9_7==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_7==Const) ) {s = 9;}
                        else if ( (LA9_7==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_7==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_7==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_7==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_7==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_7==Let||LA9_7==Var) ) {s = 17;}
                        input.seek(index9_7);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA9_9 = input.LA(1);
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_9==Namespace) ) {s = 19;}
                        else if ( (LA9_9==Private) ) {s = 20;}
                        else if ( (LA9_9==Project) ) {s = 21;}
                        else if ( (LA9_9==Protected) ) {s = 22;}
                        else if ( (LA9_9==Public) ) {s = 23;}
                        else if ( (LA9_9==External) ) {s = 24;}
                        else if ( (LA9_9==Abstract) ) {s = 25;}
                        else if ( (LA9_9==Static) ) {s = 26;}
                        else if ( (LA9_9==Const) ) {s = 9;}
                        else if ( ((LA9_9>=Intersection && LA9_9<=Implements)||LA9_9==Promisify||LA9_9==Target||LA9_9==Await||LA9_9==Union||LA9_9==This||LA9_9==From||LA9_9==Type||(LA9_9>=Get && LA9_9<=Let)||(LA9_9>=Out && LA9_9<=Set)||LA9_9==Var||LA9_9==As||LA9_9==Of||(LA9_9>=CommercialAt && LA9_9<=LeftSquareBracket)||LA9_9==LeftCurlyBracket||LA9_9==RULE_IDENTIFIER) ) {s = 17;}
                        else if ( (LA9_9==Async) ) {s = 27;}
                        else if ( (LA9_9==Interface) ) {s = 28;}
                        else if ( (LA9_9==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_9==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_9==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA9_58 = input.LA(1);
                        int index9_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_58==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_58==Private) ) {s = 56;}
                        else if ( (LA9_58==Project) ) {s = 57;}
                        else if ( (LA9_58==Protected) ) {s = 58;}
                        else if ( (LA9_58==Public) ) {s = 59;}
                        else if ( (LA9_58==External) ) {s = 60;}
                        else if ( (LA9_58==Abstract) ) {s = 61;}
                        else if ( (LA9_58==Static) ) {s = 62;}
                        else if ( (LA9_58==Const) ) {s = 9;}
                        else if ( (LA9_58==Let||LA9_58==Var) ) {s = 17;}
                        else if ( (LA9_58==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_58==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_58==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_58==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_58==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        input.seek(index9_58);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA9_28 = input.LA(1);
                        int index9_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA9_28>=4 && LA9_28<=135 && (s=T2S.M_1[LA9_28-(4)])>=0) && (synpred20_InternalN4JSParser())) { /* 31 cases */ }
                        else if ( (LA9_28==EOF||LA9_28==Comma||(LA9_28>=Colon && LA9_28<=Semicolon)||LA9_28==EqualsSign||LA9_28==RightCurlyBracket||LA9_28==RULE_ML_COMMENT||LA9_28==RULE_EOL) ) {s = 17;}
                        input.seek(index9_28);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA9_5 = input.LA(1);
                        int index9_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_5==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_5==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_5==Private) ) {s = 2;}
                        else if ( (LA9_5==Project) ) {s = 3;}
                        else if ( (LA9_5==Protected) ) {s = 4;}
                        else if ( (LA9_5==Public) ) {s = 5;}
                        else if ( (LA9_5==External) ) {s = 6;}
                        else if ( (LA9_5==Abstract) ) {s = 7;}
                        else if ( (LA9_5==Static) ) {s = 8;}
                        else if ( (LA9_5==Const) ) {s = 9;}
                        else if ( (LA9_5==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_5==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_5==Let||LA9_5==Var) ) {s = 17;}
                        else if ( (LA9_5==Type) && (synpred22_InternalN4JSParser())) {s = 14;}
                        else if ( (LA9_5==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_5==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        input.seek(index9_5);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA9_23 = input.LA(1);
                        int index9_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_23==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_23==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_23==Private) ) {s = 56;}
                        else if ( (LA9_23==Project) ) {s = 57;}
                        else if ( (LA9_23==Protected) ) {s = 58;}
                        else if ( (LA9_23==Public) ) {s = 59;}
                        else if ( (LA9_23==External) ) {s = 60;}
                        else if ( (LA9_23==Abstract) ) {s = 61;}
                        else if ( (LA9_23==Static) ) {s = 62;}
                        else if ( (LA9_23==Const) ) {s = 9;}
                        else if ( (LA9_23==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_23==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_23==EOF||LA9_23==Let||LA9_23==Var||LA9_23==Comma||(LA9_23>=Colon && LA9_23<=Semicolon)||LA9_23==EqualsSign||LA9_23==RightCurlyBracket||LA9_23==RULE_ML_COMMENT||LA9_23==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_23==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_23==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        input.seek(index9_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA9_62 = input.LA(1);
                        int index9_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_62==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_62==Private) ) {s = 56;}
                        else if ( (LA9_62==Project) ) {s = 57;}
                        else if ( (LA9_62==Protected) ) {s = 58;}
                        else if ( (LA9_62==Public) ) {s = 59;}
                        else if ( (LA9_62==External) ) {s = 60;}
                        else if ( (LA9_62==Abstract) ) {s = 61;}
                        else if ( (LA9_62==Static) ) {s = 62;}
                        else if ( (LA9_62==Const) ) {s = 9;}
                        else if ( (LA9_62==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_62==Let||LA9_62==Var) ) {s = 17;}
                        else if ( (LA9_62==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_62==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_62==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_62==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        input.seek(index9_62);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA9_3 = input.LA(1);
                        int index9_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_3==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_3==Private) ) {s = 2;}
                        else if ( (LA9_3==Project) ) {s = 3;}
                        else if ( (LA9_3==Protected) ) {s = 4;}
                        else if ( (LA9_3==Public) ) {s = 5;}
                        else if ( (LA9_3==External) ) {s = 6;}
                        else if ( (LA9_3==Abstract) ) {s = 7;}
                        else if ( (LA9_3==Static) ) {s = 8;}
                        else if ( (LA9_3==Const) ) {s = 9;}
                        else if ( (LA9_3==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_3==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_3==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_3==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_3==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_3==Let||LA9_3==Var) ) {s = 17;}
                        else if ( (LA9_3==Type) && (synpred22_InternalN4JSParser())) {s = 14;}
                        input.seek(index9_3);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA9_0 = input.LA(1);
                        int index9_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_0==CommercialAt) && (synpred17_InternalN4JSParser())) {s = 1;}
                        else if ( (LA9_0==Private) ) {s = 2;}
                        else if ( (LA9_0==Project) ) {s = 3;}
                        else if ( (LA9_0==Protected) ) {s = 4;}
                        else if ( (LA9_0==Public) ) {s = 5;}
                        else if ( (LA9_0==External) ) {s = 6;}
                        else if ( (LA9_0==Abstract) ) {s = 7;}
                        else if ( (LA9_0==Static) ) {s = 8;}
                        else if ( (LA9_0==Const) ) {s = 9;}
                        else if ( (LA9_0==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_0==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_0==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        else if ( (LA9_0==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_0==Type) && (synpred22_InternalN4JSParser())) {s = 14;}
                        else if ( (LA9_0==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_0==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_0==Let||LA9_0==Var) ) {s = 17;}
                        else if ( (LA9_0==Export) ) {s = 18;}
                        input.seek(index9_0);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA9_21 = input.LA(1);
                        int index9_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_21==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_21==Private) ) {s = 56;}
                        else if ( (LA9_21==Project) ) {s = 57;}
                        else if ( (LA9_21==Protected) ) {s = 58;}
                        else if ( (LA9_21==Public) ) {s = 59;}
                        else if ( (LA9_21==External) ) {s = 60;}
                        else if ( (LA9_21==Abstract) ) {s = 61;}
                        else if ( (LA9_21==Static) ) {s = 62;}
                        else if ( (LA9_21==Const) ) {s = 9;}
                        else if ( (LA9_21==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_21==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_21==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_21==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_21==EOF||LA9_21==Let||LA9_21==Var||LA9_21==Comma||(LA9_21>=Colon && LA9_21<=Semicolon)||LA9_21==EqualsSign||LA9_21==RightCurlyBracket||LA9_21==RULE_ML_COMMENT||LA9_21==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_21==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        input.seek(index9_21);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA9_25 = input.LA(1);
                        int index9_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_25==EOF||LA9_25==Let||LA9_25==Var||LA9_25==Comma||(LA9_25>=Colon && LA9_25<=Semicolon)||LA9_25==EqualsSign||LA9_25==RightCurlyBracket||LA9_25==RULE_ML_COMMENT||LA9_25==RULE_EOL) ) {s = 17;}
                        else if ( (LA9_25==Class) && (synpred19_InternalN4JSParser())) {s = 11;}
                        else if ( (LA9_25==Private) ) {s = 56;}
                        else if ( (LA9_25==Project) ) {s = 57;}
                        else if ( (LA9_25==Protected) ) {s = 58;}
                        else if ( (LA9_25==Public) ) {s = 59;}
                        else if ( (LA9_25==External) ) {s = 60;}
                        else if ( (LA9_25==Abstract) ) {s = 61;}
                        else if ( (LA9_25==Static) ) {s = 62;}
                        else if ( (LA9_25==Const) ) {s = 9;}
                        else if ( (LA9_25==Namespace) && (synpred18_InternalN4JSParser())) {s = 10;}
                        else if ( (LA9_25==Async) && (synpred23_InternalN4JSParser())) {s = 15;}
                        else if ( (LA9_25==Function) && (synpred23_InternalN4JSParser())) {s = 16;}
                        else if ( (LA9_25==Enum) && (synpred21_InternalN4JSParser())) {s = 13;}
                        else if ( (LA9_25==Interface) && (synpred20_InternalN4JSParser())) {s = 12;}
                        input.seek(index9_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_21s = "\26\uffff";
    static final String dfa_22s = "\1\11\2\uffff\10\11\4\uffff\7\11";
    static final String dfa_23s = "\1\63\2\uffff\7\63\1\56\4\uffff\7\56";
    static final String dfa_24s = "\1\uffff\1\1\1\2\10\uffff\1\3\1\4\1\5\1\6\7\uffff";
    static final String dfa_25s = "\26\uffff}>";
    static final String[] dfa_26s = {
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "",
            "",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\5\1\10\2\uffff\1\7\1\13\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15\4\uffff\1\16",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "",
            "",
            "",
            "",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15",
            "\1\14\1\uffff\1\21\1\24\2\uffff\1\23\1\13\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\3\uffff\1\13\3\uffff\1\14\1\12\11\uffff\1\15"
    };
    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[][] dfa_26 = unpackEncodedStringArray(dfa_26s);
    class DFA24 extends DFA {
        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "1077:3: ( ( () this_ExportDeclarationImpl_2= ruleExportDeclarationImpl[$current] ) | ( () this_ImportDeclarationImpl_4= ruleImportDeclarationImpl[$current] ) | ( () ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=> ( ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_7= ruleAsyncNoTrailingLineBreak[$current] ( ( Function )=>this_FunctionImpl_8= ruleFunctionImpl[$current] ) ) ) ) | ( ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_TypeParameters_14= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_15= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* otherlv_18= Interface ( (lv_typingStrategy_19_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_20_0= ruleBindingIdentifier ) ) (this_TypeParameters_21= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_22= ruleInterfaceExtendsList[$current] )? ) ) this_Members_23= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_25_0= ruleN4Modifier ) )* otherlv_26= Enum ( (lv_name_27_0= ruleBindingIdentifier ) ) otherlv_28= LeftCurlyBracket ( (lv_literals_29_0= ruleN4EnumLiteral ) ) (otherlv_30= Comma ( (lv_literals_31_0= ruleN4EnumLiteral ) ) )* otherlv_32= RightCurlyBracket ) | ( () ( (lv_declaredModifiers_34_0= ruleN4ModifierWithoutConst ) )* otherlv_35= Type ( (lv_name_36_0= ruleBindingIdentifier ) ) (this_TypeParameters_37= ruleTypeParameters[$current] )? otherlv_38= EqualsSign ( (lv_declaredTypeRefNode_39_0= ruleTypeReferenceNode ) ) ) )";
        }
    }
    static final String dfa_27s = "\13\uffff";
    static final String dfa_28s = "\11\11\2\uffff";
    static final String dfa_29s = "\11\44\2\uffff";
    static final String dfa_30s = "\11\uffff\1\1\1\2";
    static final String dfa_31s = "\13\uffff}>";
    static final String[] dfa_32s = {
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };
    static final short[] dfa_27 = DFA.unpackEncodedString(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final char[] dfa_29 = DFA.unpackEncodedStringToUnsignedChars(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[][] dfa_32 = unpackEncodedStringArray(dfa_32s);
    class DFA19 extends DFA {
        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "1189:5: ( ( () ( (lv_declaredModifiers_10_0= ruleN4Modifier ) )* otherlv_11= Class ( (lv_typingStrategy_12_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_13_0= ruleBindingIdentifier ) ) (this_TypeParameters_14= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_15= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* otherlv_18= Interface ( (lv_typingStrategy_19_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_20_0= ruleBindingIdentifier ) ) (this_TypeParameters_21= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_22= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_33s = "\24\uffff";
    static final String dfa_34s = "\11\11\4\uffff\7\11";
    static final String dfa_35s = "\10\63\1\56\4\uffff\7\56";
    static final String dfa_36s = "\11\uffff\1\1\1\2\1\3\1\4\7\uffff";
    static final String dfa_37s = "\24\uffff}>";
    static final String[] dfa_38s = {
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13\4\uffff\1\14",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13\4\uffff\1\14",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13\4\uffff\1\14",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13\4\uffff\1\14",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13\4\uffff\1\14",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13\4\uffff\1\14",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13\4\uffff\1\14",
            "\1\12\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13\4\uffff\1\14",
            "\1\12\1\uffff\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13",
            "",
            "",
            "",
            "",
            "\1\12\1\uffff\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13",
            "\1\12\1\uffff\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13",
            "\1\12\1\uffff\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13",
            "\1\12\1\uffff\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13",
            "\1\12\1\uffff\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13",
            "\1\12\1\uffff\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13",
            "\1\12\1\uffff\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\3\uffff\1\11\3\uffff\1\12\1\10\11\uffff\1\13"
    };
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);
    class DFA39 extends DFA {
        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = dfa_33;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "1631:3: ( ( () ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=> ( ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_3= ruleAsyncNoTrailingLineBreak[$current] ( ( Function )=>this_FunctionImpl_4= ruleFunctionImpl[$current] ) ) ) ) | ( ( ( () ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* otherlv_7= Class ( (lv_typingStrategy_8_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_9_0= ruleBindingIdentifier ) ) (this_TypeParameters_10= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_11= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Interface ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeParameters_17= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_18= ruleInterfaceExtendsList[$current] )? ) ) this_Members_19= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_21_0= ruleN4Modifier ) )* otherlv_22= Enum ( (lv_name_23_0= ruleBindingIdentifier ) ) otherlv_24= LeftCurlyBracket ( (lv_literals_25_0= ruleN4EnumLiteral ) ) (otherlv_26= Comma ( (lv_literals_27_0= ruleN4EnumLiteral ) ) )* otherlv_28= RightCurlyBracket ) | ( () ( (lv_declaredModifiers_30_0= ruleN4ModifierWithoutConst ) )* otherlv_31= Type ( (lv_name_32_0= ruleBindingIdentifier ) ) (this_TypeParameters_33= ruleTypeParameters[$current] )? otherlv_34= EqualsSign ( (lv_declaredTypeRefNode_35_0= ruleTypeReferenceNode ) ) ) )";
        }
    }
    class DFA34 extends DFA {
        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "1701:5: ( ( () ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* otherlv_7= Class ( (lv_typingStrategy_8_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_9_0= ruleBindingIdentifier ) ) (this_TypeParameters_10= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_11= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Interface ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeParameters_17= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_18= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_39s = "\103\uffff";
    static final String dfa_40s = "\1\4\10\0\1\uffff\3\0\1\uffff\3\0\1\uffff\1\0\60\uffff";
    static final String dfa_41s = "\1\u0096\10\0\1\uffff\3\0\1\uffff\3\0\1\uffff\1\0\60\uffff";
    static final String dfa_42s = "\11\uffff\1\1\3\uffff\1\1\3\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_43s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\13\1\uffff\1\14\1\15\1\16\1\uffff\1\17\60\uffff}>";
    static final String[] dfa_44s = {
            "\3\23\1\uffff\1\23\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\1\23\1\uffff\1\23\1\5\1\uffff\1\10\1\uffff\2\23\1\17\1\23\2\uffff\1\13\1\11\2\23\1\uffff\1\23\1\uffff\2\23\2\uffff\1\15\4\23\1\16\1\23\6\uffff\1\23\1\22\3\23\1\uffff\1\21\5\uffff\1\23\1\uffff\2\23\7\uffff\1\23\3\uffff\1\23\2\uffff\1\23\2\uffff\1\23\2\uffff\1\23\1\uffff\1\23\1\uffff\1\23\2\uffff\1\23\3\uffff\1\1\1\23\2\uffff\1\23\2\uffff\1\23\12\uffff\2\23\11\uffff\1\23\1\uffff\1\23\2\uffff\1\23\1\uffff\5\23\3\uffff\1\23",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final char[] dfa_40 = DFA.unpackEncodedStringToUnsignedChars(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[][] dfa_44 = unpackEncodedStringArray(dfa_44s);
    class DFA41 extends DFA {
        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_40;
            this.max = dfa_41;
            this.accept = dfa_42;
            this.special = dfa_43;
            this.transition = dfa_44;
        }
        public String getDescription() {
            return "2258:5: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Namespace | Class | Interface | Enum | Type | Async | Function | Var | Let )=> (lv_exportedElement_9_0= ruleExportableElement ) ) | ( ( (lv_defaultExportedExpression_10_0= norm1_AssignmentExpression ) ) ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_0 = input.LA(1);
                        int index41_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA41_0==CommercialAt) ) {s = 1;}
                        else if ( (LA41_0==Private) ) {s = 2;}
                        else if ( (LA41_0==Project) ) {s = 3;}
                        else if ( (LA41_0==Protected) ) {s = 4;}
                        else if ( (LA41_0==Public) ) {s = 5;}
                        else if ( (LA41_0==External) ) {s = 6;}
                        else if ( (LA41_0==Abstract) ) {s = 7;}
                        else if ( (LA41_0==Static) ) {s = 8;}
                        else if ( (LA41_0==Const) && (synpred31_InternalN4JSParser())) {s = 9;}
                        else if ( (LA41_0==Namespace) ) {s = 10;}
                        else if ( (LA41_0==Class) ) {s = 11;}
                        else if ( (LA41_0==Interface) ) {s = 12;}
                        else if ( (LA41_0==Enum) && (synpred31_InternalN4JSParser())) {s = 13;}
                        else if ( (LA41_0==Type) ) {s = 14;}
                        else if ( (LA41_0==Async) ) {s = 15;}
                        else if ( (LA41_0==Function) ) {s = 16;}
                        else if ( (LA41_0==Var) && (synpred31_InternalN4JSParser())) {s = 17;}
                        else if ( (LA41_0==Let) ) {s = 18;}
                        else if ( ((LA41_0>=Intersection && LA41_0<=Implements)||LA41_0==Promisify||LA41_0==Delete||LA41_0==Import||(LA41_0>=Target && LA41_0<=Typeof)||LA41_0==Await||(LA41_0>=False && LA41_0<=Super)||LA41_0==Union||(LA41_0>=Yield && LA41_0<=This)||(LA41_0>=From && LA41_0<=True)||LA41_0==Void||LA41_0==Get||(LA41_0>=New && LA41_0<=Set)||LA41_0==PlusSignPlusSign||(LA41_0>=HyphenMinusHyphenMinus && LA41_0<=SolidusEqualsSign)||LA41_0==As||LA41_0==Of||LA41_0==ExclamationMark||LA41_0==LeftParenthesis||LA41_0==PlusSign||LA41_0==HyphenMinus||LA41_0==Solidus||LA41_0==LessThanSign||LA41_0==LeftSquareBracket||LA41_0==LeftCurlyBracket||LA41_0==Tilde||(LA41_0>=RULE_TEMPLATE_HEAD && LA41_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA41_0==RULE_IDENTIFIER||LA41_0==RULE_INT||LA41_0==RULE_DOUBLE||(LA41_0>=RULE_BINARY_INT && LA41_0<=RULE_SCIENTIFIC_INT)||LA41_0==RULE_STRING) ) {s = 19;}
                        input.seek(index41_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_1 = input.LA(1);
                        int index41_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_2 = input.LA(1);
                        int index41_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_3 = input.LA(1);
                        int index41_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_4 = input.LA(1);
                        int index41_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_5 = input.LA(1);
                        int index41_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_6 = input.LA(1);
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_7 = input.LA(1);
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_8 = input.LA(1);
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA41_10 = input.LA(1);
                        int index41_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA41_11 = input.LA(1);
                        int index41_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA41_12 = input.LA(1);
                        int index41_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA41_14 = input.LA(1);
                        int index41_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA41_15 = input.LA(1);
                        int index41_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA41_16 = input.LA(1);
                        int index41_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA41_18 = input.LA(1);
                        int index41_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred31_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 19;}
                        input.seek(index41_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_45s = "\140\uffff";
    static final String dfa_46s = "\22\uffff\12\21\104\uffff";
    static final String dfa_47s = "\1\11\1\uffff\7\11\1\4\10\uffff\7\11\1\4\1\20\1\4\7\11\75\uffff";
    static final String dfa_48s = "\1\152\1\uffff\7\101\1\u0087\10\uffff\12\u009a\7\101\75\uffff";
    static final String dfa_49s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\2\7\1\10\21\uffff\40\4\1\7\34\2";
    static final String dfa_50s = "\1\7\1\uffff\1\26\1\3\1\10\1\14\1\23\1\0\1\21\1\12\10\uffff\1\6\1\16\1\22\1\31\1\11\1\17\1\24\1\2\1\30\1\15\1\25\1\4\1\13\1\20\1\27\1\5\1\1\75\uffff}>";
    static final String[] dfa_51s = {
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21\50\uffff\1\1",
            "",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\4\1\7\2\uffff\1\6\1\20\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\4\uffff\1\16\10\uffff\1\21\4\uffff\1\21",
            "\3\21\1\uffff\1\21\1\31\1\33\1\24\1\27\2\uffff\1\26\1\20\3\uffff\1\22\1\23\3\uffff\1\25\1\uffff\1\30\1\uffff\1\21\1\uffff\1\32\1\21\2\uffff\1\13\1\11\3\uffff\1\21\1\uffff\2\21\2\uffff\1\15\1\21\3\uffff\1\21\7\uffff\2\21\1\uffff\2\21\1\uffff\1\21\20\uffff\1\21\3\uffff\1\21\23\uffff\2\21\2\uffff\1\21\30\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21\36\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\47\uffff\1\21\1\uffff\1\21",
            "\1\64\1\57\1\71\1\uffff\1\66\1\72\1\77\1\74\1\53\2\uffff\1\52\2\uffff\1\101\1\uffff\1\73\1\51\3\uffff\1\75\1\uffff\1\54\1\uffff\1\61\1\uffff\1\70\1\67\7\uffff\1\63\1\uffff\1\45\1\65\3\uffff\1\56\3\uffff\1\62\7\uffff\1\46\1\50\1\uffff\1\76\1\47\22\uffff\1\55\3\uffff\1\60\11\uffff\1\21\3\uffff\2\21\1\100\1\21\6\uffff\1\102\1\uffff\1\21\1\43\25\uffff\1\44\20\uffff\1\21\1\uffff\1\21",
            "\1\20\117\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\22\uffff\1\103\24\uffff\1\21\1\uffff\1\21",
            "\1\124\1\117\1\131\1\uffff\1\126\1\132\1\137\1\134\1\113\2\uffff\1\112\4\uffff\1\133\1\111\3\uffff\1\135\1\uffff\1\114\1\uffff\1\121\1\uffff\1\130\1\127\7\uffff\1\123\1\uffff\1\105\1\125\3\uffff\1\116\3\uffff\1\122\7\uffff\1\106\1\110\1\uffff\1\136\1\107\22\uffff\1\115\3\uffff\1\120\11\uffff\1\21\3\uffff\2\21\1\uffff\1\21\10\uffff\1\21\26\uffff\1\104\20\uffff\1\21\1\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "\1\14\1\12\1\36\1\41\2\uffff\1\40\1\20\3\uffff\1\34\1\35\3\uffff\1\37\1\uffff\1\42\3\uffff\1\17\3\uffff\1\13\1\11\11\uffff\1\15\15\uffff\1\21\4\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final char[] dfa_47 = DFA.unpackEncodedStringToUnsignedChars(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final short[] dfa_49 = DFA.unpackEncodedString(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[][] dfa_51 = unpackEncodedStringArray(dfa_51s);
    class DFA48 extends DFA {
        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = dfa_45;
            this.eof = dfa_46;
            this.min = dfa_47;
            this.max = dfa_48;
            this.accept = dfa_49;
            this.special = dfa_50;
            this.transition = dfa_51;
        }
        public String getDescription() {
            return "2583:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedExportableElement_0= ruleAnnotatedExportableElement ) | ( ( ( () ( ( ruleN4Modifier ) )* Namespace ( ( ruleBindingIdentifier ) ) ) )=>this_N4NamespaceDeclaration_1= ruleN4NamespaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4ClassDeclaration_2= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>this_N4InterfaceDeclaration_3= ruleN4InterfaceDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>this_N4EnumDeclaration_4= ruleN4EnumDeclaration ) | ( ( ( () ( ( ruleN4ModifierWithoutConst ) )* Type ( ( ruleBindingIdentifier ) )? ) )=>this_N4TypeAliasDeclaration_5= ruleN4TypeAliasDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_6= ruleFunctionDeclaration ) | this_VariableStatementWithModifier_7= ruleVariableStatementWithModifier )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_7 = input.LA(1);
                        int index48_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_7==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_7==Private) ) {s = 2;}
                        else if ( (LA48_7==Project) ) {s = 3;}
                        else if ( (LA48_7==Protected) ) {s = 4;}
                        else if ( (LA48_7==Public) ) {s = 5;}
                        else if ( (LA48_7==External) ) {s = 6;}
                        else if ( (LA48_7==Abstract) ) {s = 7;}
                        else if ( (LA48_7==Static) ) {s = 8;}
                        else if ( (LA48_7==Const) ) {s = 9;}
                        else if ( (LA48_7==Type) && (synpred37_InternalN4JSParser())) {s = 14;}
                        else if ( (LA48_7==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_7==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_7==Let||LA48_7==Var) ) {s = 17;}
                        else if ( (LA48_7==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_7==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_7==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_34 = input.LA(1);
                        int index48_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_34==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_34==Private) ) {s = 28;}
                        else if ( (LA48_34==Project) ) {s = 29;}
                        else if ( (LA48_34==Protected) ) {s = 30;}
                        else if ( (LA48_34==Public) ) {s = 31;}
                        else if ( (LA48_34==External) ) {s = 32;}
                        else if ( (LA48_34==Abstract) ) {s = 33;}
                        else if ( (LA48_34==Static) ) {s = 34;}
                        else if ( (LA48_34==Const) ) {s = 9;}
                        else if ( (LA48_34==Let||LA48_34==Var) ) {s = 17;}
                        else if ( (LA48_34==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_34==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_34==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_34==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_34==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_25 = input.LA(1);
                        int index48_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA48_25>=4 && LA48_25<=135 && (s=T2S.M_2[LA48_25-(4)])>=0) && (synpred35_InternalN4JSParser())) { /* 32 cases */ }
                        else if ( (LA48_25==EOF||LA48_25==Comma||(LA48_25>=Colon && LA48_25<=Semicolon)||LA48_25==EqualsSign||LA48_25==RightCurlyBracket||LA48_25==RULE_ML_COMMENT||LA48_25==RULE_EOL) ) {s = 17;}
                        input.seek(index48_25);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_3 = input.LA(1);
                        int index48_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_3==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_3==Private) ) {s = 2;}
                        else if ( (LA48_3==Project) ) {s = 3;}
                        else if ( (LA48_3==Protected) ) {s = 4;}
                        else if ( (LA48_3==Public) ) {s = 5;}
                        else if ( (LA48_3==External) ) {s = 6;}
                        else if ( (LA48_3==Abstract) ) {s = 7;}
                        else if ( (LA48_3==Static) ) {s = 8;}
                        else if ( (LA48_3==Const) ) {s = 9;}
                        else if ( (LA48_3==Type) && (synpred37_InternalN4JSParser())) {s = 14;}
                        else if ( (LA48_3==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_3==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_3==Let||LA48_3==Var) ) {s = 17;}
                        else if ( (LA48_3==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_3==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_3==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_29 = input.LA(1);
                        int index48_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_29==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_29==Private) ) {s = 28;}
                        else if ( (LA48_29==Project) ) {s = 29;}
                        else if ( (LA48_29==Protected) ) {s = 30;}
                        else if ( (LA48_29==Public) ) {s = 31;}
                        else if ( (LA48_29==External) ) {s = 32;}
                        else if ( (LA48_29==Abstract) ) {s = 33;}
                        else if ( (LA48_29==Static) ) {s = 34;}
                        else if ( (LA48_29==Const) ) {s = 9;}
                        else if ( (LA48_29==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_29==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_29==Let||LA48_29==Var) ) {s = 17;}
                        else if ( (LA48_29==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_29==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_29==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_29);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_33 = input.LA(1);
                        int index48_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_33==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_33==Private) ) {s = 28;}
                        else if ( (LA48_33==Project) ) {s = 29;}
                        else if ( (LA48_33==Protected) ) {s = 30;}
                        else if ( (LA48_33==Public) ) {s = 31;}
                        else if ( (LA48_33==External) ) {s = 32;}
                        else if ( (LA48_33==Abstract) ) {s = 33;}
                        else if ( (LA48_33==Static) ) {s = 34;}
                        else if ( (LA48_33==Const) ) {s = 9;}
                        else if ( (LA48_33==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_33==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_33==Let||LA48_33==Var) ) {s = 17;}
                        else if ( (LA48_33==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_33==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_33==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_33);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_18 = input.LA(1);
                        int index48_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_18==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_18==Private) ) {s = 28;}
                        else if ( (LA48_18==Project) ) {s = 29;}
                        else if ( (LA48_18==Protected) ) {s = 30;}
                        else if ( (LA48_18==Public) ) {s = 31;}
                        else if ( (LA48_18==External) ) {s = 32;}
                        else if ( (LA48_18==Abstract) ) {s = 33;}
                        else if ( (LA48_18==Static) ) {s = 34;}
                        else if ( (LA48_18==Const) ) {s = 9;}
                        else if ( (LA48_18==EOF||LA48_18==Let||LA48_18==Var||LA48_18==Comma||(LA48_18>=Colon && LA48_18<=Semicolon)||LA48_18==EqualsSign||LA48_18==RightCurlyBracket||LA48_18==RULE_ML_COMMENT||LA48_18==RULE_EOL) ) {s = 17;}
                        else if ( (LA48_18==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_18==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_18==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_18==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_18==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_0 = input.LA(1);
                        int index48_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_0==CommercialAt) && (synpred32_InternalN4JSParser())) {s = 1;}
                        else if ( (LA48_0==Private) ) {s = 2;}
                        else if ( (LA48_0==Project) ) {s = 3;}
                        else if ( (LA48_0==Protected) ) {s = 4;}
                        else if ( (LA48_0==Public) ) {s = 5;}
                        else if ( (LA48_0==External) ) {s = 6;}
                        else if ( (LA48_0==Abstract) ) {s = 7;}
                        else if ( (LA48_0==Static) ) {s = 8;}
                        else if ( (LA48_0==Const) ) {s = 9;}
                        else if ( (LA48_0==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_0==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_0==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_0==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_0==Type) && (synpred37_InternalN4JSParser())) {s = 14;}
                        else if ( (LA48_0==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_0==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_0==Let||LA48_0==Var) ) {s = 17;}
                        input.seek(index48_0);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA48_4 = input.LA(1);
                        int index48_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_4==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_4==Private) ) {s = 2;}
                        else if ( (LA48_4==Project) ) {s = 3;}
                        else if ( (LA48_4==Protected) ) {s = 4;}
                        else if ( (LA48_4==Public) ) {s = 5;}
                        else if ( (LA48_4==External) ) {s = 6;}
                        else if ( (LA48_4==Abstract) ) {s = 7;}
                        else if ( (LA48_4==Static) ) {s = 8;}
                        else if ( (LA48_4==Const) ) {s = 9;}
                        else if ( (LA48_4==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_4==Type) && (synpred37_InternalN4JSParser())) {s = 14;}
                        else if ( (LA48_4==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_4==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_4==Let||LA48_4==Var) ) {s = 17;}
                        else if ( (LA48_4==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_4==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        input.seek(index48_4);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA48_22 = input.LA(1);
                        int index48_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_22==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_22==Private) ) {s = 28;}
                        else if ( (LA48_22==Project) ) {s = 29;}
                        else if ( (LA48_22==Protected) ) {s = 30;}
                        else if ( (LA48_22==Public) ) {s = 31;}
                        else if ( (LA48_22==External) ) {s = 32;}
                        else if ( (LA48_22==Abstract) ) {s = 33;}
                        else if ( (LA48_22==Static) ) {s = 34;}
                        else if ( (LA48_22==Const) ) {s = 9;}
                        else if ( (LA48_22==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_22==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_22==EOF||LA48_22==Let||LA48_22==Var||LA48_22==Comma||(LA48_22>=Colon && LA48_22<=Semicolon)||LA48_22==EqualsSign||LA48_22==RightCurlyBracket||LA48_22==RULE_ML_COMMENT||LA48_22==RULE_EOL) ) {s = 17;}
                        else if ( (LA48_22==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_22==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_22==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_22);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA48_9 = input.LA(1);
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_9==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ((LA48_9>=9 && LA48_9<=46 && (s=T2S.M_3[LA48_9-(9)])>=0)) { /* 10 cases */ }
                        else if ( ((LA48_9>=Intersection && LA48_9<=Implements)||LA48_9==Promisify||LA48_9==Target||LA48_9==Await||LA48_9==Union||(LA48_9>=Yield && LA48_9<=This)||LA48_9==From||LA48_9==Type||(LA48_9>=Get && LA48_9<=Let)||(LA48_9>=Out && LA48_9<=Set)||LA48_9==Var||LA48_9==As||LA48_9==Of||(LA48_9>=CommercialAt && LA48_9<=LeftSquareBracket)||LA48_9==LeftCurlyBracket||LA48_9==RULE_IDENTIFIER) ) {s = 17;}
                        else if ( (LA48_9==Async) ) {s = 26;}
                        else if ( (LA48_9==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_9==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_9==Namespace) ) {s = 27;}
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA48_30 = input.LA(1);
                        int index48_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_30==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_30==Private) ) {s = 28;}
                        else if ( (LA48_30==Project) ) {s = 29;}
                        else if ( (LA48_30==Protected) ) {s = 30;}
                        else if ( (LA48_30==Public) ) {s = 31;}
                        else if ( (LA48_30==External) ) {s = 32;}
                        else if ( (LA48_30==Abstract) ) {s = 33;}
                        else if ( (LA48_30==Static) ) {s = 34;}
                        else if ( (LA48_30==Const) ) {s = 9;}
                        else if ( (LA48_30==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_30==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_30==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_30==Let||LA48_30==Var) ) {s = 17;}
                        else if ( (LA48_30==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_30==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        input.seek(index48_30);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA48_5 = input.LA(1);
                        int index48_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_5==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_5==Private) ) {s = 2;}
                        else if ( (LA48_5==Project) ) {s = 3;}
                        else if ( (LA48_5==Protected) ) {s = 4;}
                        else if ( (LA48_5==Public) ) {s = 5;}
                        else if ( (LA48_5==External) ) {s = 6;}
                        else if ( (LA48_5==Abstract) ) {s = 7;}
                        else if ( (LA48_5==Static) ) {s = 8;}
                        else if ( (LA48_5==Const) ) {s = 9;}
                        else if ( (LA48_5==Let||LA48_5==Var) ) {s = 17;}
                        else if ( (LA48_5==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_5==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_5==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_5==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_5==Type) && (synpred37_InternalN4JSParser())) {s = 14;}
                        else if ( (LA48_5==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_5);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA48_27 = input.LA(1);
                        int index48_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_27==EOF||LA48_27==Comma||(LA48_27>=Colon && LA48_27<=Semicolon)||LA48_27==EqualsSign||LA48_27==RightCurlyBracket||LA48_27==RULE_ML_COMMENT||LA48_27==RULE_EOL) ) {s = 17;}
                        else if ( (LA48_27==RULE_IDENTIFIER) && (synpred33_InternalN4JSParser())) {s = 68;}
                        else if ( (LA48_27==Yield) && (synpred33_InternalN4JSParser())) {s = 69;}
                        else if ( (LA48_27==Get) && (synpred33_InternalN4JSParser())) {s = 70;}
                        else if ( (LA48_27==Set) && (synpred33_InternalN4JSParser())) {s = 71;}
                        else if ( (LA48_27==Let) && (synpred33_InternalN4JSParser())) {s = 72;}
                        else if ( (LA48_27==Project) && (synpred33_InternalN4JSParser())) {s = 73;}
                        else if ( (LA48_27==External) && (synpred33_InternalN4JSParser())) {s = 74;}
                        else if ( (LA48_27==Abstract) && (synpred33_InternalN4JSParser())) {s = 75;}
                        else if ( (LA48_27==Static) && (synpred33_InternalN4JSParser())) {s = 76;}
                        else if ( (LA48_27==As) && (synpred33_InternalN4JSParser())) {s = 77;}
                        else if ( (LA48_27==From) && (synpred33_InternalN4JSParser())) {s = 78;}
                        else if ( (LA48_27==Constructor) && (synpred33_InternalN4JSParser())) {s = 79;}
                        else if ( (LA48_27==Of) && (synpred33_InternalN4JSParser())) {s = 80;}
                        else if ( (LA48_27==Target) && (synpred33_InternalN4JSParser())) {s = 81;}
                        else if ( (LA48_27==Type) && (synpred33_InternalN4JSParser())) {s = 82;}
                        else if ( (LA48_27==Union) && (synpred33_InternalN4JSParser())) {s = 83;}
                        else if ( (LA48_27==Intersection) && (synpred33_InternalN4JSParser())) {s = 84;}
                        else if ( (LA48_27==This) && (synpred33_InternalN4JSParser())) {s = 85;}
                        else if ( (LA48_27==Promisify) && (synpred33_InternalN4JSParser())) {s = 86;}
                        else if ( (LA48_27==Await) && (synpred33_InternalN4JSParser())) {s = 87;}
                        else if ( (LA48_27==Async) && (synpred33_InternalN4JSParser())) {s = 88;}
                        else if ( (LA48_27==Implements) && (synpred33_InternalN4JSParser())) {s = 89;}
                        else if ( (LA48_27==Interface) && (synpred33_InternalN4JSParser())) {s = 90;}
                        else if ( (LA48_27==Private) && (synpred33_InternalN4JSParser())) {s = 91;}
                        else if ( (LA48_27==Protected) && (synpred33_InternalN4JSParser())) {s = 92;}
                        else if ( (LA48_27==Public) && (synpred33_InternalN4JSParser())) {s = 93;}
                        else if ( (LA48_27==Out) && (synpred33_InternalN4JSParser())) {s = 94;}
                        else if ( (LA48_27==Namespace) && (synpred33_InternalN4JSParser())) {s = 95;}
                        input.seek(index48_27);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA48_19 = input.LA(1);
                        int index48_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_19==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_19==Private) ) {s = 28;}
                        else if ( (LA48_19==Project) ) {s = 29;}
                        else if ( (LA48_19==Protected) ) {s = 30;}
                        else if ( (LA48_19==Public) ) {s = 31;}
                        else if ( (LA48_19==External) ) {s = 32;}
                        else if ( (LA48_19==Abstract) ) {s = 33;}
                        else if ( (LA48_19==Static) ) {s = 34;}
                        else if ( (LA48_19==Const) ) {s = 9;}
                        else if ( (LA48_19==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_19==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_19==EOF||LA48_19==Let||LA48_19==Var||LA48_19==Comma||(LA48_19>=Colon && LA48_19<=Semicolon)||LA48_19==EqualsSign||LA48_19==RightCurlyBracket||LA48_19==RULE_ML_COMMENT||LA48_19==RULE_EOL) ) {s = 17;}
                        else if ( (LA48_19==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_19==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_19==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA48_23 = input.LA(1);
                        int index48_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_23==EOF||LA48_23==Let||LA48_23==Var||LA48_23==Comma||(LA48_23>=Colon && LA48_23<=Semicolon)||LA48_23==EqualsSign||LA48_23==RightCurlyBracket||LA48_23==RULE_ML_COMMENT||LA48_23==RULE_EOL) ) {s = 17;}
                        else if ( (LA48_23==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_23==Private) ) {s = 28;}
                        else if ( (LA48_23==Project) ) {s = 29;}
                        else if ( (LA48_23==Protected) ) {s = 30;}
                        else if ( (LA48_23==Public) ) {s = 31;}
                        else if ( (LA48_23==External) ) {s = 32;}
                        else if ( (LA48_23==Abstract) ) {s = 33;}
                        else if ( (LA48_23==Static) ) {s = 34;}
                        else if ( (LA48_23==Const) ) {s = 9;}
                        else if ( (LA48_23==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_23==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_23==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_23==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_23==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_23);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA48_31 = input.LA(1);
                        int index48_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_31==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_31==Private) ) {s = 28;}
                        else if ( (LA48_31==Project) ) {s = 29;}
                        else if ( (LA48_31==Protected) ) {s = 30;}
                        else if ( (LA48_31==Public) ) {s = 31;}
                        else if ( (LA48_31==External) ) {s = 32;}
                        else if ( (LA48_31==Abstract) ) {s = 33;}
                        else if ( (LA48_31==Static) ) {s = 34;}
                        else if ( (LA48_31==Const) ) {s = 9;}
                        else if ( (LA48_31==Let||LA48_31==Var) ) {s = 17;}
                        else if ( (LA48_31==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_31==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_31==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_31==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_31==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_31);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA48_8 = input.LA(1);
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_8==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_8==Private) ) {s = 2;}
                        else if ( (LA48_8==Project) ) {s = 3;}
                        else if ( (LA48_8==Protected) ) {s = 4;}
                        else if ( (LA48_8==Public) ) {s = 5;}
                        else if ( (LA48_8==External) ) {s = 6;}
                        else if ( (LA48_8==Abstract) ) {s = 7;}
                        else if ( (LA48_8==Static) ) {s = 8;}
                        else if ( (LA48_8==Const) ) {s = 9;}
                        else if ( (LA48_8==Let||LA48_8==Var) ) {s = 17;}
                        else if ( (LA48_8==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_8==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_8==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_8==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_8==Type) && (synpred37_InternalN4JSParser())) {s = 14;}
                        else if ( (LA48_8==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA48_20 = input.LA(1);
                        int index48_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_20==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_20==Private) ) {s = 28;}
                        else if ( (LA48_20==Project) ) {s = 29;}
                        else if ( (LA48_20==Protected) ) {s = 30;}
                        else if ( (LA48_20==Public) ) {s = 31;}
                        else if ( (LA48_20==External) ) {s = 32;}
                        else if ( (LA48_20==Abstract) ) {s = 33;}
                        else if ( (LA48_20==Static) ) {s = 34;}
                        else if ( (LA48_20==Const) ) {s = 9;}
                        else if ( (LA48_20==EOF||LA48_20==Let||LA48_20==Var||LA48_20==Comma||(LA48_20>=Colon && LA48_20<=Semicolon)||LA48_20==EqualsSign||LA48_20==RightCurlyBracket||LA48_20==RULE_ML_COMMENT||LA48_20==RULE_EOL) ) {s = 17;}
                        else if ( (LA48_20==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_20==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_20==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_20==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_20==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        input.seek(index48_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA48_6 = input.LA(1);
                        int index48_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_6==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_6==Private) ) {s = 2;}
                        else if ( (LA48_6==Project) ) {s = 3;}
                        else if ( (LA48_6==Protected) ) {s = 4;}
                        else if ( (LA48_6==Public) ) {s = 5;}
                        else if ( (LA48_6==External) ) {s = 6;}
                        else if ( (LA48_6==Abstract) ) {s = 7;}
                        else if ( (LA48_6==Static) ) {s = 8;}
                        else if ( (LA48_6==Const) ) {s = 9;}
                        else if ( (LA48_6==Type) && (synpred37_InternalN4JSParser())) {s = 14;}
                        else if ( (LA48_6==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_6==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_6==Let||LA48_6==Var) ) {s = 17;}
                        else if ( (LA48_6==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_6==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_6==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_6);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA48_24 = input.LA(1);
                        int index48_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_24==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_24==Private) ) {s = 28;}
                        else if ( (LA48_24==Project) ) {s = 29;}
                        else if ( (LA48_24==Protected) ) {s = 30;}
                        else if ( (LA48_24==Public) ) {s = 31;}
                        else if ( (LA48_24==External) ) {s = 32;}
                        else if ( (LA48_24==Abstract) ) {s = 33;}
                        else if ( (LA48_24==Static) ) {s = 34;}
                        else if ( (LA48_24==Const) ) {s = 9;}
                        else if ( (LA48_24==EOF||LA48_24==Let||LA48_24==Var||LA48_24==Comma||(LA48_24>=Colon && LA48_24<=Semicolon)||LA48_24==EqualsSign||LA48_24==RightCurlyBracket||LA48_24==RULE_ML_COMMENT||LA48_24==RULE_EOL) ) {s = 17;}
                        else if ( (LA48_24==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_24==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_24==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_24==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_24==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_24);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA48_28 = input.LA(1);
                        int index48_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_28==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_28==Private) ) {s = 28;}
                        else if ( (LA48_28==Project) ) {s = 29;}
                        else if ( (LA48_28==Protected) ) {s = 30;}
                        else if ( (LA48_28==Public) ) {s = 31;}
                        else if ( (LA48_28==External) ) {s = 32;}
                        else if ( (LA48_28==Abstract) ) {s = 33;}
                        else if ( (LA48_28==Static) ) {s = 34;}
                        else if ( (LA48_28==Const) ) {s = 9;}
                        else if ( (LA48_28==Let||LA48_28==Var) ) {s = 17;}
                        else if ( (LA48_28==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_28==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_28==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_28==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_28==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_28);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA48_2 = input.LA(1);
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_2==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_2==Private) ) {s = 2;}
                        else if ( (LA48_2==Project) ) {s = 3;}
                        else if ( (LA48_2==Protected) ) {s = 4;}
                        else if ( (LA48_2==Public) ) {s = 5;}
                        else if ( (LA48_2==External) ) {s = 6;}
                        else if ( (LA48_2==Abstract) ) {s = 7;}
                        else if ( (LA48_2==Static) ) {s = 8;}
                        else if ( (LA48_2==Const) ) {s = 9;}
                        else if ( (LA48_2==Let||LA48_2==Var) ) {s = 17;}
                        else if ( (LA48_2==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_2==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_2==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_2==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_2==Type) && (synpred37_InternalN4JSParser())) {s = 14;}
                        else if ( (LA48_2==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA48_32 = input.LA(1);
                        int index48_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_32==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_32==Private) ) {s = 28;}
                        else if ( (LA48_32==Project) ) {s = 29;}
                        else if ( (LA48_32==Protected) ) {s = 30;}
                        else if ( (LA48_32==Public) ) {s = 31;}
                        else if ( (LA48_32==External) ) {s = 32;}
                        else if ( (LA48_32==Abstract) ) {s = 33;}
                        else if ( (LA48_32==Static) ) {s = 34;}
                        else if ( (LA48_32==Const) ) {s = 9;}
                        else if ( (LA48_32==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        else if ( (LA48_32==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_32==Let||LA48_32==Var) ) {s = 17;}
                        else if ( (LA48_32==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_32==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_32==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        input.seek(index48_32);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA48_26 = input.LA(1);
                        int index48_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_26==RULE_NO_LINE_TERMINATOR) && (synpred38_InternalN4JSParser())) {s = 67;}
                        else if ( (LA48_26==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_26==EOF||LA48_26==Comma||(LA48_26>=Colon && LA48_26<=Semicolon)||LA48_26==EqualsSign||LA48_26==RightCurlyBracket||LA48_26==RULE_ML_COMMENT||LA48_26==RULE_EOL) ) {s = 17;}
                        input.seek(index48_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA48_21 = input.LA(1);
                        int index48_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_21==Interface) && (synpred35_InternalN4JSParser())) {s = 12;}
                        else if ( (LA48_21==Private) ) {s = 28;}
                        else if ( (LA48_21==Project) ) {s = 29;}
                        else if ( (LA48_21==Protected) ) {s = 30;}
                        else if ( (LA48_21==Public) ) {s = 31;}
                        else if ( (LA48_21==External) ) {s = 32;}
                        else if ( (LA48_21==Abstract) ) {s = 33;}
                        else if ( (LA48_21==Static) ) {s = 34;}
                        else if ( (LA48_21==Const) ) {s = 9;}
                        else if ( (LA48_21==EOF||LA48_21==Let||LA48_21==Var||LA48_21==Comma||(LA48_21>=Colon && LA48_21<=Semicolon)||LA48_21==EqualsSign||LA48_21==RightCurlyBracket||LA48_21==RULE_ML_COMMENT||LA48_21==RULE_EOL) ) {s = 17;}
                        else if ( (LA48_21==Async) && (synpred38_InternalN4JSParser())) {s = 15;}
                        else if ( (LA48_21==Function) && (synpred38_InternalN4JSParser())) {s = 16;}
                        else if ( (LA48_21==Class) && (synpred34_InternalN4JSParser())) {s = 11;}
                        else if ( (LA48_21==Namespace) && (synpred33_InternalN4JSParser())) {s = 10;}
                        else if ( (LA48_21==Enum) && (synpred36_InternalN4JSParser())) {s = 13;}
                        input.seek(index48_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_52s = "\36\uffff";
    static final String dfa_53s = "\16\uffff\11\12\7\uffff";
    static final String dfa_54s = "\10\11\1\4\5\uffff\1\4\7\11\1\20\7\11";
    static final String dfa_55s = "\10\101\1\u0087\5\uffff\11\u009a\7\101";
    static final String dfa_56s = "\11\uffff\1\1\1\2\1\3\1\4\1\5\20\uffff";
    static final String dfa_57s = "\36\uffff}>";
    static final String[] dfa_58s = {
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\16\1\12\1\21\1\24\2\uffff\1\23\1\11\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\12\1\uffff\1\26\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\20\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\30\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "\3\13\1\uffff\5\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\25\uffff\1\13\20\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\47\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\47\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\47\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\47\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\47\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\47\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\36\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\47\uffff\1\12\1\uffff\1\12",
            "\1\11\117\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\22\uffff\1\11\24\uffff\1\12\1\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\uffff\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12"
    };
    static final short[] dfa_52 = DFA.unpackEncodedString(dfa_52s);
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final char[] dfa_54 = DFA.unpackEncodedStringToUnsignedChars(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[][] dfa_58 = unpackEncodedStringArray(dfa_58s);
    class DFA65 extends DFA {
        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = dfa_52;
            this.eof = dfa_53;
            this.min = dfa_54;
            this.max = dfa_55;
            this.accept = dfa_56;
            this.special = dfa_57;
            this.transition = dfa_58;
        }
        public String getDescription() {
            return "2822:3: ( ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_AsyncNoTrailingLineBreak_3= ruleAsyncNoTrailingLineBreak[$current] this_FunctionImpl_4= ruleFunctionImpl[$current] ) | ( () ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )* ( (lv_varStmtKeyword_7_0= ruleVariableStatementKeyword ) ) ( (lv_varDeclsOrBindings_8_0= norm1_VariableDeclarationOrBinding ) ) (otherlv_9= Comma ( (lv_varDeclsOrBindings_10_0= norm1_VariableDeclarationOrBinding ) ) )* ruleSemi ) | ( ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeParameters_17= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_18= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeParameters_24= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_25= ruleInterfaceExtendsList[$current] )? ) ) this_Members_26= ruleMembers[$current] ) | ( () ( (lv_declaredModifiers_28_0= ruleN4Modifier ) )* otherlv_29= Enum ( (lv_name_30_0= ruleBindingIdentifier ) ) otherlv_31= LeftCurlyBracket ( (lv_literals_32_0= ruleN4EnumLiteral ) ) (otherlv_33= Comma ( (lv_literals_34_0= ruleN4EnumLiteral ) ) )* otherlv_35= RightCurlyBracket ) | ( () ( (lv_declaredModifiers_37_0= ruleN4ModifierWithoutConst ) )* otherlv_38= Type ( (lv_name_39_0= ruleBindingIdentifier ) ) (this_TypeParameters_40= ruleTypeParameters[$current] )? otherlv_41= EqualsSign ( (lv_declaredTypeRefNode_42_0= ruleTypeReferenceNode ) ) ) )";
        }
    }
    static final String dfa_59s = "\14\uffff";
    static final String dfa_60s = "\4\uffff\10\1";
    static final String dfa_61s = "\1\13\1\uffff\1\4\1\uffff\1\4\7\13";
    static final String dfa_62s = "\1\101\1\uffff\1\u0087\1\uffff\10\u009a";
    static final String dfa_63s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_64s = "\14\uffff}>";
    static final String[] dfa_65s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\3\1\1\12\1\7\2\uffff\1\6\4\uffff\1\11\1\5\3\uffff\1\13\1\uffff\1\10\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\20\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\30\uffff\1\1",
            "",
            "\3\3\1\uffff\5\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\22\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\26\uffff\1\3\20\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1"
    };
    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final char[] dfa_61 = DFA.unpackEncodedStringToUnsignedChars(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[][] dfa_65 = unpackEncodedStringArray(dfa_65s);
    class DFA50 extends DFA {
        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = dfa_59;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "()* loopback of 2882:5: ( (lv_declaredModifiers_6_0= ruleN4Modifier ) )*";
        }
    }
    class DFA60 extends DFA {
        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "2974:5: ( ( () ( (lv_declaredModifiers_13_0= ruleN4Modifier ) )* otherlv_14= Class ( (lv_typingStrategy_15_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_16_0= ruleBindingIdentifier ) ) (this_TypeParameters_17= ruleTypeParameters[$current] )? (this_ClassExtendsImplements_18= ruleClassExtendsImplements[$current] )? ) | ( () ( (lv_declaredModifiers_20_0= ruleN4Modifier ) )* otherlv_21= Interface ( (lv_typingStrategy_22_0= ruleTypingStrategyDefSiteOperator ) )? ( (lv_name_23_0= ruleBindingIdentifier ) ) (this_TypeParameters_24= ruleTypeParameters[$current] )? (this_InterfaceExtendsList_25= ruleInterfaceExtendsList[$current] )? ) )";
        }
    }
    static final String dfa_66s = "\37\uffff";
    static final String dfa_67s = "\1\uffff\34\36\2\uffff";
    static final String dfa_68s = "\1\4\34\122\2\uffff";
    static final String dfa_69s = "\1\u0087\34\160\2\uffff";
    static final String dfa_70s = "\35\uffff\1\2\1\1";
    static final String dfa_71s = "\37\uffff}>";
    static final String[] dfa_72s = {
            "\1\21\1\14\1\26\1\35\1\23\1\27\1\34\1\31\1\10\2\35\1\7\4\35\1\30\1\6\3\35\1\32\1\35\1\11\1\35\1\16\1\35\1\25\1\24\7\35\1\20\1\35\1\2\1\22\3\35\1\13\3\35\1\17\2\35\4\uffff\1\35\1\3\1\5\1\35\1\33\1\4\2\35\20\uffff\1\12\3\35\1\15\60\uffff\1\1",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "\1\35\14\uffff\2\36\17\uffff\1\36",
            "",
            ""
    };
    static final short[] dfa_66 = DFA.unpackEncodedString(dfa_66s);
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);
    class DFA75 extends DFA {
        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = dfa_66;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "3654:2: ( ( ( ( ruleBindingIdentifier ) ) ( (lv_declaredDynamic_1_0= PlusSign ) )? ) | ( ( ( ruleIdentifierName ) ) otherlv_3= As ( (lv_alias_4_0= ruleBindingIdentifier ) ) ( (lv_declaredDynamic_5_0= PlusSign ) )? ) )";
        }
    }
    static final String dfa_73s = "\135\uffff";
    static final String dfa_74s = "\1\2\1\uffff\1\6\3\uffff\1\134\126\uffff";
    static final String dfa_75s = "\1\4\1\0\1\4\1\0\2\uffff\1\0\126\uffff";
    static final String dfa_76s = "\1\u009a\1\0\1\u0096\1\0\2\uffff\1\0\126\uffff";
    static final String dfa_77s = "\4\uffff\1\2\1\1\1\uffff\126\1";
    static final String dfa_78s = "\1\2\1\4\1\1\1\3\2\uffff\1\0\126\uffff}>";
    static final String[] dfa_79s = {
            "\3\4\1\uffff\12\4\2\uffff\16\4\1\uffff\23\4\4\uffff\10\4\5\uffff\1\4\1\uffff\2\4\5\uffff\1\4\1\uffff\3\4\1\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\1\1\4\3\uffff\2\4\2\uffff\1\4\1\uffff\1\3\1\4\12\uffff\2\4\11\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\5\4\3\uffff\1\4\1\uffff\1\5\1\uffff\1\5",
            "\1\uffff",
            "\1\51\1\45\1\55\1\uffff\1\53\1\23\1\21\1\13\1\16\1\121\1\130\1\15\1\27\1\132\2\uffff\1\11\1\12\1\104\1\32\1\34\1\14\1\123\1\17\1\125\1\47\1\106\1\26\1\54\1\122\1\uffff\1\22\1\20\1\74\1\62\1\126\1\50\1\117\1\40\1\52\1\133\1\131\1\24\1\44\1\76\1\61\1\73\1\25\1\105\1\124\4\uffff\1\120\1\41\1\31\1\60\1\56\1\42\1\127\1\30\5\uffff\1\107\1\uffff\1\110\1\100\5\uffff\1\33\1\uffff\1\43\1\116\1\115\1\uffff\1\46\2\uffff\1\114\2\uffff\1\57\2\uffff\1\111\1\uffff\1\112\1\uffff\1\77\1\uffff\1\36\1\63\3\uffff\1\10\1\101\2\uffff\1\35\1\uffff\1\7\1\113\12\uffff\1\103\1\102\11\uffff\1\37\1\uffff\1\65\2\uffff\1\64\1\uffff\1\66\1\67\1\70\1\71\1\72\3\uffff\1\75",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final short[][] dfa_79 = unpackEncodedStringArray(dfa_79s);
    class DFA79 extends DFA {
        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = dfa_73;
            this.eof = dfa_74;
            this.min = dfa_75;
            this.max = dfa_76;
            this.accept = dfa_77;
            this.special = dfa_78;
            this.transition = dfa_79;
        }
        public String getDescription() {
            return "3969:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_6 = input.LA(1);
                        int index79_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_6==EOF) && (synpred42_InternalN4JSParser())) {s = 92;}
                        input.seek(index79_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA79_2 = input.LA(1);
                        int index79_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_2==EOF) ) {s = 6;}
                        else if ((LA79_2>=-1 && LA79_2<=150 && (s=T2S.M_4[LA79_2-(-1)])>=0) && (synpred42_InternalN4JSParser())) { /* 86 cases */ }
                        input.seek(index79_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA79_0 = input.LA(1);
                        int index79_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA79_0==Semicolon) ) {s = 1;}
                        else if ( (LA79_0==EOF) ) {s = 2;}
                        else if ( (LA79_0==RightCurlyBracket) ) {s = 3;}
                        else if ( ((LA79_0>=Intersection && LA79_0<=Implements)||(LA79_0>=Promisify && LA79_0<=Default)||(LA79_0>=Private && LA79_0<=Break)||(LA79_0>=Class && LA79_0<=With)||(LA79_0>=For && LA79_0<=Var)||LA79_0==PlusSignPlusSign||(LA79_0>=HyphenMinusHyphenMinus && LA79_0<=SolidusEqualsSign)||LA79_0==CommercialAtCommercialAt||(LA79_0>=As && LA79_0<=If)||LA79_0==Of||LA79_0==ExclamationMark||LA79_0==LeftParenthesis||LA79_0==PlusSign||LA79_0==HyphenMinus||LA79_0==Solidus||LA79_0==LessThanSign||(LA79_0>=CommercialAt && LA79_0<=LeftSquareBracket)||LA79_0==LeftCurlyBracket||LA79_0==Tilde||(LA79_0>=RULE_TEMPLATE_HEAD && LA79_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA79_0==RULE_IDENTIFIER||LA79_0==RULE_INT||LA79_0==RULE_DOUBLE||(LA79_0>=RULE_BINARY_INT && LA79_0<=RULE_SCIENTIFIC_INT)||LA79_0==RULE_STRING) ) {s = 4;}
                        else if ( (LA79_0==RULE_ML_COMMENT||LA79_0==RULE_EOL) && (synpred42_InternalN4JSParser())) {s = 5;}
                        input.seek(index79_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA79_3 = input.LA(1);
                        int index79_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalN4JSParser()) ) {s = 91;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index79_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA79_1 = input.LA(1);
                        int index79_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalN4JSParser()) ) {s = 5;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index79_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_80s = "\131\uffff";
    static final String dfa_81s = "\1\2\130\uffff";
    static final String dfa_82s = "\1\4\1\0\127\uffff";
    static final String dfa_83s = "\1\u009a\1\0\127\uffff";
    static final String dfa_84s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_85s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_86s = {
            "\3\2\1\uffff\12\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\12\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_80 = DFA.unpackEncodedString(dfa_80s);
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final char[] dfa_83 = DFA.unpackEncodedStringToUnsignedChars(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final short[][] dfa_86 = unpackEncodedStringArray(dfa_86s);
    class DFA103 extends DFA {
        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = dfa_80;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "5091:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA103_1 = input.LA(1);
                        int index103_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_InternalN4JSParser()) ) {s = 88;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index103_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 103, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA104 extends DFA {
        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = dfa_80;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "5127:2: ( ( ( () LeftCurlyBracket ) )=> (lv_body_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_1 = input.LA(1);
                        int index104_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_InternalN4JSParser()) ) {s = 88;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index104_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_87s = "\101\uffff";
    static final String dfa_88s = "\1\4\1\0\77\uffff";
    static final String dfa_89s = "\1\u0096\1\0\77\uffff";
    static final String dfa_90s = "\2\uffff\1\2\75\uffff\1\1";
    static final String dfa_91s = "\1\uffff\1\0\77\uffff}>";
    static final String[] dfa_92s = {
            "\3\2\1\uffff\5\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\2\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\12\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final char[] dfa_88 = DFA.unpackEncodedStringToUnsignedChars(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final short[][] dfa_92 = unpackEncodedStringArray(dfa_92s);
    class DFA110 extends DFA {
        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "5706:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_1 = input.LA(1);
                        int index110_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index110_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA114 extends DFA {
        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "5957:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= ruleBlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA114_1 = input.LA(1);
                        int index114_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index114_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA118 extends DFA {
        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "6208:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA118_1 = input.LA(1);
                        int index118_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index118_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA122 extends DFA {
        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "6459:3: ( ( ( ( LeftCurlyBracket )=> (lv_hasBracesAroundBody_8_0= LeftCurlyBracket ) ) ( (lv_body_9_0= norm1_BlockMinusBraces ) ) otherlv_10= RightCurlyBracket ) | ( (lv_body_11_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_1 = input.LA(1);
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred80_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_93s = "\122\uffff";
    static final String dfa_94s = "\1\4\13\0\1\uffff\1\0\1\uffff\23\0\60\uffff";
    static final String dfa_95s = "\1\u0096\13\0\1\uffff\1\0\1\uffff\23\0\60\uffff";
    static final String dfa_96s = "\14\uffff\1\3\1\uffff\1\4\23\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_97s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\60\uffff}>";
    static final String[] dfa_98s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\41\1\4\1\7\1\107\1\116\1\6\1\13\3\uffff\1\2\1\3\1\42\1\uffff\1\42\1\5\1\111\1\10\1\113\1\27\1\42\1\12\1\35\1\110\1\uffff\1\42\1\11\2\42\1\114\1\31\1\104\1\20\1\33\3\uffff\1\24\3\42\1\30\1\42\1\112\4\uffff\1\104\1\21\1\15\1\42\1\40\1\22\1\115\1\14\5\uffff\1\42\1\uffff\2\42\7\uffff\1\23\1\104\1\103\1\uffff\1\26\2\uffff\1\42\2\uffff\1\42\2\uffff\1\42\1\uffff\1\42\1\uffff\1\42\1\uffff\1\16\1\42\3\uffff\2\42\2\uffff\1\1\2\uffff\1\42\12\uffff\2\42\11\uffff\1\17\1\uffff\1\42\2\uffff\1\42\1\uffff\5\42\3\uffff\1\42",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_93 = DFA.unpackEncodedString(dfa_93s);
    static final char[] dfa_94 = DFA.unpackEncodedStringToUnsignedChars(dfa_94s);
    static final char[] dfa_95 = DFA.unpackEncodedStringToUnsignedChars(dfa_95s);
    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final short[] dfa_97 = DFA.unpackEncodedString(dfa_97s);
    static final short[][] dfa_98 = unpackEncodedStringArray(dfa_98s);
    class DFA153 extends DFA {
        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = dfa_93;
            this.eof = dfa_93;
            this.min = dfa_94;
            this.max = dfa_95;
            this.accept = dfa_96;
            this.special = dfa_97;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "7800:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= ruleBlock ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= ruleFunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm1_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= ruleLabelledStatement ) | this_ExpressionStatement_5= ruleExpressionStatement | this_IfStatement_6= ruleIfStatement | this_IterationStatement_7= ruleIterationStatement | this_ContinueStatement_8= ruleContinueStatement | this_BreakStatement_9= ruleBreakStatement | this_ReturnStatement_10= ruleReturnStatement | this_WithStatement_11= ruleWithStatement | this_SwitchStatement_12= ruleSwitchStatement | this_ThrowStatement_13= ruleThrowStatement | this_TryStatement_14= ruleTryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_0 = input.LA(1);
                        int index153_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA153_0>=11 && LA153_0<=110 && (s=T2S.M_5[LA153_0-(11)])>=0)) { /* 11 cases */ }
                        else if ( (LA153_0==Var) && (synpred87_InternalN4JSParser())) {s = 12;}
                        else if ((LA153_0>=4 && LA153_0<=135 && (s=T2S.M_6[LA153_0-(4)])>=0)) { /* 22 cases */ }
                        else if ( (LA153_0==Delete||LA153_0==Import||LA153_0==Typeof||LA153_0==Class||(LA153_0>=False && LA153_0<=Super)||(LA153_0>=Null && LA153_0<=True)||LA153_0==Void||LA153_0==New||LA153_0==PlusSignPlusSign||(LA153_0>=HyphenMinusHyphenMinus && LA153_0<=SolidusEqualsSign)||LA153_0==ExclamationMark||LA153_0==LeftParenthesis||LA153_0==PlusSign||LA153_0==HyphenMinus||LA153_0==Solidus||LA153_0==LessThanSign||(LA153_0>=CommercialAt && LA153_0<=LeftSquareBracket)||LA153_0==Tilde||(LA153_0>=RULE_TEMPLATE_HEAD && LA153_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA153_0==RULE_INT||LA153_0==RULE_DOUBLE||(LA153_0>=RULE_BINARY_INT && LA153_0<=RULE_SCIENTIFIC_INT)||LA153_0==RULE_STRING) ) {s = 34;}
                        else if ( (LA153_0==If) ) {s = 67;}
                        else if ( (LA153_0==While||LA153_0==For||LA153_0==Do) ) {s = 68;}
                        else if ( (LA153_0==Continue) ) {s = 71;}
                        else if ( (LA153_0==Break) ) {s = 72;}
                        else if ( (LA153_0==Return) ) {s = 73;}
                        else if ( (LA153_0==With) ) {s = 74;}
                        else if ( (LA153_0==Switch) ) {s = 75;}
                        else if ( (LA153_0==Throw) ) {s = 76;}
                        else if ( (LA153_0==Try) ) {s = 77;}
                        else if ( (LA153_0==Debugger) ) {s = 78;}
                        input.seek(index153_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA153_1 = input.LA(1);
                        int index153_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred85_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA153_2 = input.LA(1);
                        int index153_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA153_3 = input.LA(1);
                        int index153_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA153_4 = input.LA(1);
                        int index153_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA153_5 = input.LA(1);
                        int index153_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA153_6 = input.LA(1);
                        int index153_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA153_7 = input.LA(1);
                        int index153_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA153_8 = input.LA(1);
                        int index153_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA153_9 = input.LA(1);
                        int index153_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred87_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index153_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA153_10 = input.LA(1);
                        int index153_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA153_11 = input.LA(1);
                        int index153_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred86_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA153_13 = input.LA(1);
                        int index153_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA153_15 = input.LA(1);
                        int index153_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA153_16 = input.LA(1);
                        int index153_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA153_17 = input.LA(1);
                        int index153_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA153_18 = input.LA(1);
                        int index153_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA153_19 = input.LA(1);
                        int index153_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA153_20 = input.LA(1);
                        int index153_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA153_21 = input.LA(1);
                        int index153_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA153_22 = input.LA(1);
                        int index153_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA153_23 = input.LA(1);
                        int index153_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA153_24 = input.LA(1);
                        int index153_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA153_25 = input.LA(1);
                        int index153_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA153_26 = input.LA(1);
                        int index153_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA153_27 = input.LA(1);
                        int index153_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA153_28 = input.LA(1);
                        int index153_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA153_29 = input.LA(1);
                        int index153_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA153_30 = input.LA(1);
                        int index153_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA153_31 = input.LA(1);
                        int index153_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA153_32 = input.LA(1);
                        int index153_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA153_33 = input.LA(1);
                        int index153_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 34;}
                        input.seek(index153_33);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_99s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\61\uffff";
    static final String dfa_100s = "\1\u0096\13\0\1\uffff\1\0\1\uffff\22\0\61\uffff";
    static final String dfa_101s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\41\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_102s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\61\uffff}>";
    static final String[] dfa_103s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\40\1\4\1\7\1\107\1\116\1\6\1\13\3\uffff\1\2\1\3\1\41\1\uffff\1\41\1\5\1\111\1\10\1\113\1\26\1\41\1\12\1\34\1\110\1\uffff\1\41\1\11\2\41\1\114\1\30\1\104\1\41\1\32\3\uffff\1\23\3\41\1\27\1\41\1\112\4\uffff\1\104\1\20\1\15\1\41\1\37\1\21\1\115\1\14\5\uffff\1\41\1\uffff\2\41\7\uffff\1\22\1\104\1\103\1\uffff\1\25\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\12\uffff\2\41\11\uffff\1\17\1\uffff\1\41\2\uffff\1\41\1\uffff\5\41\3\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_99 = DFA.unpackEncodedStringToUnsignedChars(dfa_99s);
    static final char[] dfa_100 = DFA.unpackEncodedStringToUnsignedChars(dfa_100s);
    static final short[] dfa_101 = DFA.unpackEncodedString(dfa_101s);
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final short[][] dfa_103 = unpackEncodedStringArray(dfa_103s);
    class DFA154 extends DFA {
        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = dfa_93;
            this.eof = dfa_93;
            this.min = dfa_99;
            this.max = dfa_100;
            this.accept = dfa_101;
            this.special = dfa_102;
            this.transition = dfa_103;
        }
        public String getDescription() {
            return "8001:2: ( ( ( ( () LeftCurlyBracket ) )=>this_Block_0= norm1_Block ) | ( ( ( () ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak[null] Function ) )=>this_FunctionDeclaration_1= norm1_FunctionDeclaration ) | ( ( ( () ( ( ruleVariableStatementKeyword ) ) ) )=>this_VariableStatement_2= norm3_VariableStatement ) | this_EmptyStatement_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>this_LabelledStatement_4= norm1_LabelledStatement ) | this_ExpressionStatement_5= norm1_ExpressionStatement | this_IfStatement_6= norm1_IfStatement | this_IterationStatement_7= norm1_IterationStatement | this_ContinueStatement_8= norm1_ContinueStatement | this_BreakStatement_9= norm1_BreakStatement | this_ReturnStatement_10= norm1_ReturnStatement | this_WithStatement_11= norm1_WithStatement | this_SwitchStatement_12= norm1_SwitchStatement | this_ThrowStatement_13= norm1_ThrowStatement | this_TryStatement_14= norm1_TryStatement | this_DebuggerStatement_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_0 = input.LA(1);
                        int index154_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA154_0>=11 && LA154_0<=110 && (s=T2S.M_5[LA154_0-(11)])>=0)) { /* 11 cases */ }
                        else if ( (LA154_0==Var) && (synpred91_InternalN4JSParser())) {s = 12;}
                        else if ((LA154_0>=4 && LA154_0<=135 && (s=T2S.M_8[LA154_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA154_0==Delete||LA154_0==Import||LA154_0==Typeof||LA154_0==Class||(LA154_0>=False && LA154_0<=Super)||LA154_0==Yield||(LA154_0>=Null && LA154_0<=True)||LA154_0==Void||LA154_0==New||LA154_0==PlusSignPlusSign||(LA154_0>=HyphenMinusHyphenMinus && LA154_0<=SolidusEqualsSign)||LA154_0==ExclamationMark||LA154_0==LeftParenthesis||LA154_0==PlusSign||LA154_0==HyphenMinus||LA154_0==Solidus||LA154_0==LessThanSign||(LA154_0>=CommercialAt && LA154_0<=LeftSquareBracket)||LA154_0==Tilde||(LA154_0>=RULE_TEMPLATE_HEAD && LA154_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA154_0==RULE_INT||LA154_0==RULE_DOUBLE||(LA154_0>=RULE_BINARY_INT && LA154_0<=RULE_SCIENTIFIC_INT)||LA154_0==RULE_STRING) ) {s = 33;}
                        else if ( (LA154_0==If) ) {s = 67;}
                        else if ( (LA154_0==While||LA154_0==For||LA154_0==Do) ) {s = 68;}
                        else if ( (LA154_0==Continue) ) {s = 71;}
                        else if ( (LA154_0==Break) ) {s = 72;}
                        else if ( (LA154_0==Return) ) {s = 73;}
                        else if ( (LA154_0==With) ) {s = 74;}
                        else if ( (LA154_0==Switch) ) {s = 75;}
                        else if ( (LA154_0==Throw) ) {s = 76;}
                        else if ( (LA154_0==Try) ) {s = 77;}
                        else if ( (LA154_0==Debugger) ) {s = 78;}
                        input.seek(index154_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_1 = input.LA(1);
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA154_2 = input.LA(1);
                        int index154_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA154_3 = input.LA(1);
                        int index154_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA154_4 = input.LA(1);
                        int index154_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA154_5 = input.LA(1);
                        int index154_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA154_6 = input.LA(1);
                        int index154_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA154_7 = input.LA(1);
                        int index154_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA154_8 = input.LA(1);
                        int index154_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA154_9 = input.LA(1);
                        int index154_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred91_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index154_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA154_10 = input.LA(1);
                        int index154_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA154_11 = input.LA(1);
                        int index154_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA154_13 = input.LA(1);
                        int index154_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA154_15 = input.LA(1);
                        int index154_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA154_16 = input.LA(1);
                        int index154_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA154_17 = input.LA(1);
                        int index154_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA154_18 = input.LA(1);
                        int index154_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA154_19 = input.LA(1);
                        int index154_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA154_20 = input.LA(1);
                        int index154_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA154_21 = input.LA(1);
                        int index154_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA154_22 = input.LA(1);
                        int index154_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA154_23 = input.LA(1);
                        int index154_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA154_24 = input.LA(1);
                        int index154_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA154_25 = input.LA(1);
                        int index154_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA154_26 = input.LA(1);
                        int index154_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA154_27 = input.LA(1);
                        int index154_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA154_28 = input.LA(1);
                        int index154_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA154_29 = input.LA(1);
                        int index154_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA154_30 = input.LA(1);
                        int index154_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA154_31 = input.LA(1);
                        int index154_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA154_32 = input.LA(1);
                        int index154_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index154_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_104s = "\120\uffff";
    static final String dfa_105s = "\1\4\1\0\116\uffff";
    static final String dfa_106s = "\1\u0096\1\0\116\uffff";
    static final String dfa_107s = "\2\uffff\1\2\114\uffff\1\1";
    static final String dfa_108s = "\1\uffff\1\0\116\uffff}>";
    static final String[] dfa_109s = {
            "\3\2\1\uffff\11\2\3\uffff\3\2\1\uffff\12\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\12\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_104 = DFA.unpackEncodedString(dfa_104s);
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final char[] dfa_106 = DFA.unpackEncodedStringToUnsignedChars(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final short[][] dfa_109 = unpackEncodedStringArray(dfa_109s);
    class DFA155 extends DFA {
        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = dfa_104;
            this.eof = dfa_104;
            this.min = dfa_105;
            this.max = dfa_106;
            this.accept = dfa_107;
            this.special = dfa_108;
            this.transition = dfa_109;
        }
        public String getDescription() {
            return "8208:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= ruleAnnotatedFunctionDeclaration ) | this_RootStatement_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_1 = input.LA(1);
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA156 extends DFA {
        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = dfa_104;
            this.eof = dfa_104;
            this.min = dfa_105;
            this.max = dfa_106;
            this.accept = dfa_107;
            this.special = dfa_108;
            this.transition = dfa_109;
        }
        public String getDescription() {
            return "8253:2: ( ( ( ( () CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>this_AnnotatedFunctionDeclaration_0= norm1_AnnotatedFunctionDeclaration ) | this_RootStatement_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_1 = input.LA(1);
                        int index156_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index156_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA159 extends DFA {
        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = dfa_59;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "()* loopback of 8520:3: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    static final String[] dfa_110s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\3\1\1\12\1\7\2\uffff\1\6\4\uffff\1\11\1\5\3\uffff\1\13\1\uffff\1\10\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\20\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\30\uffff\1\1",
            "",
            "\3\3\1\uffff\5\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\22\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\26\uffff\1\3\20\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\36\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\47\uffff\1\1\1\uffff\1\1"
    };
    static final short[][] dfa_110 = unpackEncodedStringArray(dfa_110s);
    class DFA161 extends DFA {
        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = dfa_59;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_110;
        }
        public String getDescription() {
            return "()* loopback of 8629:3: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_111s = "\1\4\35\uffff";
    static final String dfa_112s = "\1\u0087\35\uffff";
    static final String dfa_113s = "\1\uffff\34\2\1\1";
    static final String dfa_114s = "\1\0\35\uffff}>";
    static final String[] dfa_115s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\34\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\22\uffff\1\12\3\uffff\1\15\23\uffff\1\35\34\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final char[] dfa_112 = DFA.unpackEncodedStringToUnsignedChars(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final short[][] dfa_115 = unpackEncodedStringArray(dfa_115s);
    class DFA173 extends DFA {
        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = dfa_52;
            this.eof = dfa_52;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "()* loopback of 9633:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA173_0 = input.LA(1);
                        int index173_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA173_0>=4 && LA173_0<=135 && (s=T2S.M_9[LA173_0-(4)])>=0) && (synpred111_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA173_0==CommercialAt) ) {s = 29;}
                        input.seek(index173_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA175 extends DFA {
        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = dfa_52;
            this.eof = dfa_52;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "()* loopback of 9719:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_0 = input.LA(1);
                        int index175_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA175_0>=4 && LA175_0<=135 && (s=T2S.M_9[LA175_0-(4)])>=0) && (synpred112_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA175_0==CommercialAt) ) {s = 29;}
                        input.seek(index175_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_116s = "\35\uffff";
    static final String dfa_117s = "\1\4\34\uffff";
    static final String dfa_118s = "\1\u0087\34\uffff";
    static final String dfa_119s = "\1\uffff\33\2\1\1";
    static final String dfa_120s = "\1\0\34\uffff}>";
    static final String[] dfa_121s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\33\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\22\uffff\1\11\3\uffff\1\14\23\uffff\1\34\34\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_116 = DFA.unpackEncodedString(dfa_116s);
    static final char[] dfa_117 = DFA.unpackEncodedStringToUnsignedChars(dfa_117s);
    static final char[] dfa_118 = DFA.unpackEncodedStringToUnsignedChars(dfa_118s);
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);
    static final short[][] dfa_121 = unpackEncodedStringArray(dfa_121s);
    class DFA177 extends DFA {
        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 9805:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_0 = input.LA(1);
                        int index177_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA177_0>=4 && LA177_0<=135 && (s=T2S.M_11[LA177_0-(4)])>=0) && (synpred113_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA177_0==CommercialAt) ) {s = 28;}
                        input.seek(index177_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA179 extends DFA {
        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 9891:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_0 = input.LA(1);
                        int index179_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA179_0>=4 && LA179_0<=135 && (s=T2S.M_11[LA179_0-(4)])>=0) && (synpred114_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA179_0==CommercialAt) ) {s = 28;}
                        input.seek(index179_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA181 extends DFA {
        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = dfa_52;
            this.eof = dfa_52;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "()* loopback of 9977:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_0 = input.LA(1);
                        int index181_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA181_0>=4 && LA181_0<=135 && (s=T2S.M_9[LA181_0-(4)])>=0) && (synpred115_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA181_0==CommercialAt) ) {s = 29;}
                        input.seek(index181_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA184 extends DFA {
        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = dfa_52;
            this.eof = dfa_52;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "()* loopback of 10083:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA184_0 = input.LA(1);
                        int index184_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA184_0>=4 && LA184_0<=135 && (s=T2S.M_9[LA184_0-(4)])>=0) && (synpred116_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA184_0==CommercialAt) ) {s = 29;}
                        input.seek(index184_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA187 extends DFA {
        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 10189:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_0 = input.LA(1);
                        int index187_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA187_0>=4 && LA187_0<=135 && (s=T2S.M_11[LA187_0-(4)])>=0) && (synpred117_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA187_0==CommercialAt) ) {s = 28;}
                        input.seek(index187_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA190 extends DFA {
        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 10295:3: ( (lv_annotations_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA190_0 = input.LA(1);
                        int index190_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA190_0>=4 && LA190_0<=135 && (s=T2S.M_11[LA190_0-(4)])>=0) && (synpred118_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA190_0==CommercialAt) ) {s = 28;}
                        input.seek(index190_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_122s = "\4\uffff\1\1\1\2\1\uffff\126\1";
    static final String dfa_123s = "\1\0\1\3\1\1\1\2\2\uffff\1\4\126\uffff}>";
    static final String[] dfa_124s = {
            "\3\5\1\uffff\12\5\2\uffff\16\5\1\uffff\23\5\4\uffff\10\5\5\uffff\1\5\1\uffff\2\5\5\uffff\1\5\1\uffff\3\5\1\uffff\1\5\2\uffff\1\5\2\uffff\1\5\2\uffff\1\5\1\uffff\1\5\1\uffff\1\5\1\uffff\1\1\1\5\3\uffff\2\5\2\uffff\1\5\1\uffff\1\3\1\5\12\uffff\2\5\11\uffff\1\5\1\uffff\1\5\2\uffff\1\5\1\uffff\5\5\3\uffff\1\5\1\uffff\1\4\1\uffff\1\4",
            "\1\uffff",
            "\1\50\1\44\1\54\1\uffff\1\52\1\23\1\21\1\13\1\16\1\120\1\127\1\15\1\32\1\132\2\uffff\1\11\1\12\1\103\1\27\1\26\1\14\1\122\1\17\1\124\1\46\1\105\1\31\1\53\1\121\1\uffff\1\22\1\20\1\73\1\61\1\125\1\47\1\116\1\37\1\51\1\133\1\131\1\24\1\43\1\75\1\60\1\72\1\25\1\104\1\123\4\uffff\1\117\1\40\1\34\1\57\1\55\1\41\1\126\1\33\5\uffff\1\106\1\uffff\1\107\1\77\5\uffff\1\7\1\uffff\1\42\1\115\1\114\1\uffff\1\45\2\uffff\1\113\2\uffff\1\56\2\uffff\1\110\1\uffff\1\111\1\uffff\1\76\1\uffff\1\35\1\62\3\uffff\1\10\1\100\2\uffff\1\30\1\uffff\1\130\1\112\12\uffff\1\102\1\101\11\uffff\1\36\1\uffff\1\64\2\uffff\1\63\1\uffff\1\65\1\66\1\67\1\70\1\71\3\uffff\1\74",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final short[] dfa_123 = DFA.unpackEncodedString(dfa_123s);
    static final short[][] dfa_124 = unpackEncodedStringArray(dfa_124s);
    class DFA197 extends DFA {
        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = dfa_73;
            this.eof = dfa_74;
            this.min = dfa_75;
            this.max = dfa_76;
            this.accept = dfa_122;
            this.special = dfa_123;
            this.transition = dfa_124;
        }
        public String getDescription() {
            return "10847:3: ( ( ruleSemi )=> ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA197_0 = input.LA(1);
                        int index197_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_0==Semicolon) ) {s = 1;}
                        else if ( (LA197_0==EOF) ) {s = 2;}
                        else if ( (LA197_0==RightCurlyBracket) ) {s = 3;}
                        else if ( (LA197_0==RULE_ML_COMMENT||LA197_0==RULE_EOL) && (synpred121_InternalN4JSParser())) {s = 4;}
                        else if ( ((LA197_0>=Intersection && LA197_0<=Implements)||(LA197_0>=Promisify && LA197_0<=Default)||(LA197_0>=Private && LA197_0<=Break)||(LA197_0>=Class && LA197_0<=With)||(LA197_0>=For && LA197_0<=Var)||LA197_0==PlusSignPlusSign||(LA197_0>=HyphenMinusHyphenMinus && LA197_0<=SolidusEqualsSign)||LA197_0==CommercialAtCommercialAt||(LA197_0>=As && LA197_0<=If)||LA197_0==Of||LA197_0==ExclamationMark||LA197_0==LeftParenthesis||LA197_0==PlusSign||LA197_0==HyphenMinus||LA197_0==Solidus||LA197_0==LessThanSign||(LA197_0>=CommercialAt && LA197_0<=LeftSquareBracket)||LA197_0==LeftCurlyBracket||LA197_0==Tilde||(LA197_0>=RULE_TEMPLATE_HEAD && LA197_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA197_0==RULE_IDENTIFIER||LA197_0==RULE_INT||LA197_0==RULE_DOUBLE||(LA197_0>=RULE_BINARY_INT && LA197_0<=RULE_SCIENTIFIC_INT)||LA197_0==RULE_STRING) ) {s = 5;}
                        input.seek(index197_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA197_2 = input.LA(1);
                        int index197_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_2==EOF) ) {s = 6;}
                        else if ((LA197_2>=-1 && LA197_2<=150 && (s=T2S.M_17[LA197_2-(-1)])>=0) && (synpred121_InternalN4JSParser())) { /* 86 cases */ }
                        input.seek(index197_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA197_3 = input.LA(1);
                        int index197_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 91;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index197_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA197_1 = input.LA(1);
                        int index197_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred121_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 5;}
                        input.seek(index197_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA197_6 = input.LA(1);
                        int index197_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_6==EOF) && (synpred121_InternalN4JSParser())) {s = 92;}
                        input.seek(index197_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_125s = "\104\uffff";
    static final String dfa_126s = "\1\4\1\0\102\uffff";
    static final String dfa_127s = "\1\u0096\1\0\102\uffff";
    static final String dfa_128s = "\2\uffff\1\2\100\uffff\1\1";
    static final String dfa_129s = "\1\uffff\1\0\102\uffff}>";
    static final String[] dfa_130s = {
            "\3\2\1\uffff\5\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\2\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\12\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final char[] dfa_126 = DFA.unpackEncodedStringToUnsignedChars(dfa_126s);
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final short[] dfa_128 = DFA.unpackEncodedString(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[][] dfa_130 = unpackEncodedStringArray(dfa_130s);
    class DFA217 extends DFA {
        public DFA217(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 217;
            this.eot = dfa_125;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "11114:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_4_0= ruleLetIdentifierRef ) ) ( (lv_forIn_5_0= In ) ) ( (lv_expression_6_0= norm1_Expression ) ) otherlv_7= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= ruleExpression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm1_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm1_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm1_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm1_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm1_Expression ) )? ) ) otherlv_37= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA217_1 = input.LA(1);
                        int index217_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 67;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index217_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 217, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_131s = "\1\4\2\uffff\1\0\77\uffff";
    static final String dfa_132s = "\1\u0096\2\uffff\1\0\77\uffff";
    static final String dfa_133s = "\1\uffff\2\1\1\uffff\1\2\75\uffff\1\3";
    static final String dfa_134s = "\1\0\2\uffff\1\1\77\uffff}>";
    static final String[] dfa_135s = {
            "\3\4\1\uffff\5\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\2\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\102\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\12\uffff\2\4\11\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\5\4\3\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_131 = DFA.unpackEncodedStringToUnsignedChars(dfa_131s);
    static final char[] dfa_132 = DFA.unpackEncodedStringToUnsignedChars(dfa_132s);
    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final short[] dfa_134 = DFA.unpackEncodedString(dfa_134s);
    static final short[][] dfa_135 = unpackEncodedStringArray(dfa_135s);
    class DFA216 extends DFA {
        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_131;
            this.max = dfa_132;
            this.accept = dfa_133;
            this.special = dfa_134;
            this.transition = dfa_135;
        }
        public String getDescription() {
            return "11196:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= ruleExpression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm1_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm1_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm1_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm1_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm1_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA216_0 = input.LA(1);
                        int index216_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA216_0==Var) && (synpred124_InternalN4JSParser())) {s = 1;}
                        else if ( (LA216_0==Const) && (synpred124_InternalN4JSParser())) {s = 2;}
                        else if ( (LA216_0==Let) ) {s = 3;}
                        else if ( ((LA216_0>=Intersection && LA216_0<=Implements)||(LA216_0>=Promisify && LA216_0<=Abstract)||(LA216_0>=External && LA216_0<=Function)||(LA216_0>=Private && LA216_0<=Delete)||(LA216_0>=Import && LA216_0<=Public)||LA216_0==Static||(LA216_0>=Target && LA216_0<=Await)||LA216_0==Class||(LA216_0>=False && LA216_0<=Super)||LA216_0==Union||(LA216_0>=Yield && LA216_0<=This)||(LA216_0>=From && LA216_0<=Void)||LA216_0==Get||(LA216_0>=New && LA216_0<=Set)||LA216_0==PlusSignPlusSign||(LA216_0>=HyphenMinusHyphenMinus && LA216_0<=SolidusEqualsSign)||LA216_0==As||LA216_0==Of||LA216_0==ExclamationMark||LA216_0==LeftParenthesis||LA216_0==PlusSign||LA216_0==HyphenMinus||LA216_0==Solidus||LA216_0==LessThanSign||(LA216_0>=CommercialAt && LA216_0<=LeftSquareBracket)||LA216_0==LeftCurlyBracket||LA216_0==Tilde||(LA216_0>=RULE_TEMPLATE_HEAD && LA216_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA216_0==RULE_IDENTIFIER||LA216_0==RULE_INT||LA216_0==RULE_DOUBLE||(LA216_0>=RULE_BINARY_INT && LA216_0<=RULE_SCIENTIFIC_INT)||LA216_0==RULE_STRING) ) {s = 4;}
                        else if ( (LA216_0==Semicolon) ) {s = 66;}
                        input.seek(index216_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA216_3 = input.LA(1);
                        int index216_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index216_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 216, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_136s = "\41\uffff";
    static final String dfa_137s = "\1\4\34\125\1\uffff\2\0\1\uffff";
    static final String dfa_138s = "\1\u0087\34\147\1\uffff\2\0\1\uffff";
    static final String dfa_139s = "\35\uffff\1\2\2\uffff\1\1";
    static final String dfa_140s = "\36\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_141s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\34\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\22\uffff\1\12\3\uffff\1\15\23\uffff\2\35\2\uffff\1\35\30\uffff\1\1",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "\1\36\1\37\11\uffff\1\35\3\uffff\2\35\1\uffff\1\35",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final char[] dfa_137 = DFA.unpackEncodedStringToUnsignedChars(dfa_137s);
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final short[] dfa_139 = DFA.unpackEncodedString(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[][] dfa_141 = unpackEncodedStringArray(dfa_141s);
    class DFA208 extends DFA {
        public DFA208(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 208;
            this.eot = dfa_136;
            this.eof = dfa_136;
            this.min = dfa_137;
            this.max = dfa_138;
            this.accept = dfa_139;
            this.special = dfa_140;
            this.transition = dfa_141;
        }
        public String getDescription() {
            return "11218:7: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm4_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= ruleVariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm1_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm1_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm1_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA208_31 = input.LA(1);
                        int index208_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_InternalN4JSParser()) ) {s = 32;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index208_31);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA208_30 = input.LA(1);
                        int index208_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_InternalN4JSParser()) ) {s = 32;}
                        else if ( (true) ) {s = 29;}
                        input.seek(index208_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 208, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_142s = "\1\4\100\uffff";
    static final String dfa_143s = "\1\u0096\100\uffff";
    static final String dfa_144s = "\1\uffff\77\1\1\2";
    static final String dfa_145s = "\1\0\100\uffff}>";
    static final String[] dfa_146s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\36\1\33\1\14\2\uffff\1\13\1\63\3\uffff\1\32\1\12\1\67\1\uffff\1\43\1\34\1\uffff\1\15\1\uffff\1\22\1\71\1\4\1\1\2\uffff\1\64\1\uffff\1\54\1\41\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\56\1\40\1\53\1\23\1\70\6\uffff\1\7\1\11\1\37\1\35\1\10\7\uffff\1\72\1\uffff\1\73\1\60\7\uffff\1\16\3\uffff\1\21\2\uffff\1\77\2\uffff\1\3\1\100\1\uffff\1\74\1\uffff\1\75\1\uffff\1\57\2\uffff\1\42\3\uffff\1\2\1\61\2\uffff\1\62\2\uffff\1\76\12\uffff\1\66\1\65\11\uffff\1\5\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_142 = DFA.unpackEncodedStringToUnsignedChars(dfa_142s);
    static final char[] dfa_143 = DFA.unpackEncodedStringToUnsignedChars(dfa_143s);
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final short[] dfa_145 = DFA.unpackEncodedString(dfa_145s);
    static final short[][] dfa_146 = unpackEncodedStringArray(dfa_146s);
    class DFA201 extends DFA {
        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_142;
            this.max = dfa_143;
            this.accept = dfa_144;
            this.special = dfa_145;
            this.transition = dfa_146;
        }
        public String getDescription() {
            return "11419:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA201_0 = input.LA(1);
                        int index201_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA201_0>=4 && LA201_0<=150 && (s=T2S.M_18[LA201_0-(4)])>=0) && (synpred126_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA201_0==RightParenthesis) ) {s = 64;}
                        input.seek(index201_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 201, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA236 extends DFA {
        public DFA236(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 236;
            this.eot = dfa_125;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "11873:3: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (lv_initExpr_4_0= ruleLetIdentifierRef ) ) ( (lv_forIn_5_0= In ) ) ( (lv_expression_6_0= norm3_Expression ) ) otherlv_7= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= norm2_Expression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm3_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm3_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm3_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm3_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm3_Expression ) )? ) ) otherlv_37= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA236_1 = input.LA(1);
                        int index236_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 67;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index236_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 236, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA235 extends DFA {
        public DFA235(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 235;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_131;
            this.max = dfa_132;
            this.accept = dfa_133;
            this.special = dfa_134;
            this.transition = dfa_135;
        }
        public String getDescription() {
            return "11955:5: ( ( ( ( Var | Const | Let )=> (lv_varStmtKeyword_8_0= ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (lv_initExpr_24_0= norm2_Expression ) ) ( (otherlv_25= Semicolon ( (lv_expression_26_0= norm3_Expression ) )? otherlv_27= Semicolon ( (lv_updateExpr_28_0= norm3_Expression ) )? ) | ( ( (lv_forIn_29_0= In ) ) ( (lv_expression_30_0= norm3_Expression ) )? ) | ( ( (lv_forOf_31_0= Of ) ) ( (lv_expression_32_0= norm3_AssignmentExpression ) )? ) ) ) | (otherlv_33= Semicolon ( (lv_expression_34_0= norm3_Expression ) )? otherlv_35= Semicolon ( (lv_updateExpr_36_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA235_0 = input.LA(1);
                        int index235_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA235_0==Var) && (synpred128_InternalN4JSParser())) {s = 1;}
                        else if ( (LA235_0==Const) && (synpred128_InternalN4JSParser())) {s = 2;}
                        else if ( (LA235_0==Let) ) {s = 3;}
                        else if ( ((LA235_0>=Intersection && LA235_0<=Implements)||(LA235_0>=Promisify && LA235_0<=Abstract)||(LA235_0>=External && LA235_0<=Function)||(LA235_0>=Private && LA235_0<=Delete)||(LA235_0>=Import && LA235_0<=Public)||LA235_0==Static||(LA235_0>=Target && LA235_0<=Await)||LA235_0==Class||(LA235_0>=False && LA235_0<=Super)||LA235_0==Union||(LA235_0>=Yield && LA235_0<=This)||(LA235_0>=From && LA235_0<=Void)||LA235_0==Get||(LA235_0>=New && LA235_0<=Set)||LA235_0==PlusSignPlusSign||(LA235_0>=HyphenMinusHyphenMinus && LA235_0<=SolidusEqualsSign)||LA235_0==As||LA235_0==Of||LA235_0==ExclamationMark||LA235_0==LeftParenthesis||LA235_0==PlusSign||LA235_0==HyphenMinus||LA235_0==Solidus||LA235_0==LessThanSign||(LA235_0>=CommercialAt && LA235_0<=LeftSquareBracket)||LA235_0==LeftCurlyBracket||LA235_0==Tilde||(LA235_0>=RULE_TEMPLATE_HEAD && LA235_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA235_0==RULE_IDENTIFIER||LA235_0==RULE_INT||LA235_0==RULE_DOUBLE||(LA235_0>=RULE_BINARY_INT && LA235_0<=RULE_SCIENTIFIC_INT)||LA235_0==RULE_STRING) ) {s = 4;}
                        else if ( (LA235_0==Semicolon) ) {s = 66;}
                        input.seek(index235_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA235_3 = input.LA(1);
                        int index235_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred128_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index235_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 235, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_147s = "\40\uffff";
    static final String dfa_148s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_149s = "\1\u0087\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_150s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_151s = "\35\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_152s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\33\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\22\uffff\1\11\3\uffff\1\14\23\uffff\2\34\2\uffff\1\34\30\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final char[] dfa_148 = DFA.unpackEncodedStringToUnsignedChars(dfa_148s);
    static final char[] dfa_149 = DFA.unpackEncodedStringToUnsignedChars(dfa_149s);
    static final short[] dfa_150 = DFA.unpackEncodedString(dfa_150s);
    static final short[] dfa_151 = DFA.unpackEncodedString(dfa_151s);
    static final short[][] dfa_152 = unpackEncodedStringArray(dfa_152s);
    class DFA227 extends DFA {
        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = dfa_147;
            this.eof = dfa_147;
            this.min = dfa_148;
            this.max = dfa_149;
            this.accept = dfa_150;
            this.special = dfa_151;
            this.transition = dfa_152;
        }
        public String getDescription() {
            return "11977:7: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (lv_varDeclsOrBindings_9_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (lv_forIn_10_0= In ) ) | ( (lv_forOf_11_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )? ) ) | ( ( (lv_varDeclsOrBindings_13_0= norm6_VariableDeclarationOrBinding ) ) ( ( (otherlv_14= Comma ( (lv_varDeclsOrBindings_15_0= norm2_VariableDeclarationOrBinding ) ) )* otherlv_16= Semicolon ( (lv_expression_17_0= norm3_Expression ) )? otherlv_18= Semicolon ( (lv_updateExpr_19_0= norm3_Expression ) )? ) | ( ( (lv_forIn_20_0= In ) ) ( (lv_expression_21_0= norm3_Expression ) )? ) | ( ( (lv_forOf_22_0= Of ) ) ( (lv_expression_23_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA227_30 = input.LA(1);
                        int index227_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index227_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA227_29 = input.LA(1);
                        int index227_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index227_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 227, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_153s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\35\1\32\1\13\2\uffff\1\12\1\63\3\uffff\1\31\1\11\1\67\1\uffff\1\43\1\33\1\uffff\1\14\1\uffff\1\21\1\71\1\4\1\1\2\uffff\1\64\1\uffff\1\54\1\41\1\uffff\1\23\1\uffff\1\36\1\25\3\uffff\1\16\1\56\1\40\1\53\1\22\1\70\6\uffff\1\6\1\10\1\37\1\34\1\7\7\uffff\1\72\1\uffff\1\73\1\60\7\uffff\1\15\3\uffff\1\20\2\uffff\1\77\2\uffff\1\3\1\100\1\uffff\1\74\1\uffff\1\75\1\uffff\1\57\2\uffff\1\42\3\uffff\1\2\1\61\2\uffff\1\62\2\uffff\1\76\12\uffff\1\66\1\65\11\uffff\1\5\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_153 = unpackEncodedStringArray(dfa_153s);
    class DFA220 extends DFA {
        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_142;
            this.max = dfa_143;
            this.accept = dfa_144;
            this.special = dfa_145;
            this.transition = dfa_153;
        }
        public String getDescription() {
            return "12178:10: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_12_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_0 = input.LA(1);
                        int index220_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA220_0>=4 && LA220_0<=150 && (s=T2S.M_19[LA220_0-(4)])>=0) && (synpred130_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA220_0==RightParenthesis) ) {s = 64;}
                        input.seek(index220_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_154s = "\3\uffff\34\40\2\uffff";
    static final String dfa_155s = "\1\4\2\uffff\34\135\2\uffff";
    static final String dfa_156s = "\1\u0087\2\uffff\34\144\2\uffff";
    static final String dfa_157s = "\1\uffff\2\1\34\uffff\1\2\1\3";
    static final String dfa_158s = "\1\25\2\uffff\1\6\1\7\1\16\1\26\1\0\1\10\1\17\1\27\1\1\1\11\1\20\1\30\1\2\1\12\1\21\1\31\1\3\1\13\1\22\1\32\1\4\1\14\1\23\1\33\1\5\1\15\1\24\1\34\2\uffff}>";
    static final String[] dfa_159s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\36\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\3\uffff\1\21\7\uffff\1\5\1\7\1\uffff\1\35\1\6\22\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\30\uffff\1\3",
            "",
            "",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "\1\40\6\uffff\1\37",
            "",
            ""
    };
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final char[] dfa_155 = DFA.unpackEncodedStringToUnsignedChars(dfa_155s);
    static final char[] dfa_156 = DFA.unpackEncodedStringToUnsignedChars(dfa_156s);
    static final short[] dfa_157 = DFA.unpackEncodedString(dfa_157s);
    static final short[] dfa_158 = DFA.unpackEncodedString(dfa_158s);
    static final short[][] dfa_159 = unpackEncodedStringArray(dfa_159s);
    class DFA257 extends DFA {
        public DFA257(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 257;
            this.eot = dfa_136;
            this.eof = dfa_154;
            this.min = dfa_155;
            this.max = dfa_156;
            this.accept = dfa_157;
            this.special = dfa_158;
            this.transition = dfa_159;
        }
        public String getDescription() {
            return "14225:2: ( ( ( ( ruleBindingPattern ) )=> (lv_bindingPattern_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (lv_name_3_0= ruleBindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA257_7 = input.LA(1);
                        int index257_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_7==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_7==EOF||LA257_7==RightParenthesis) ) {s = 32;}
                        input.seek(index257_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA257_11 = input.LA(1);
                        int index257_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_11==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_11==EOF||LA257_11==RightParenthesis) ) {s = 32;}
                        input.seek(index257_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA257_15 = input.LA(1);
                        int index257_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_15==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_15==EOF||LA257_15==RightParenthesis) ) {s = 32;}
                        input.seek(index257_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA257_19 = input.LA(1);
                        int index257_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_19==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_19==EOF||LA257_19==RightParenthesis) ) {s = 32;}
                        input.seek(index257_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA257_23 = input.LA(1);
                        int index257_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_23==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_23==EOF||LA257_23==RightParenthesis) ) {s = 32;}
                        input.seek(index257_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA257_27 = input.LA(1);
                        int index257_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_27==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_27==EOF||LA257_27==RightParenthesis) ) {s = 32;}
                        input.seek(index257_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA257_3 = input.LA(1);
                        int index257_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_3==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_3==EOF||LA257_3==RightParenthesis) ) {s = 32;}
                        input.seek(index257_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA257_4 = input.LA(1);
                        int index257_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_4==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_4==EOF||LA257_4==RightParenthesis) ) {s = 32;}
                        input.seek(index257_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA257_8 = input.LA(1);
                        int index257_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_8==EOF||LA257_8==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_8==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA257_12 = input.LA(1);
                        int index257_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_12==EOF||LA257_12==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_12==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA257_16 = input.LA(1);
                        int index257_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_16==EOF||LA257_16==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_16==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA257_20 = input.LA(1);
                        int index257_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_20==EOF||LA257_20==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_20==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA257_24 = input.LA(1);
                        int index257_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_24==EOF||LA257_24==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_24==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA257_28 = input.LA(1);
                        int index257_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_28==EOF||LA257_28==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_28==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_28);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA257_5 = input.LA(1);
                        int index257_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_5==EOF||LA257_5==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_5==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_5);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA257_9 = input.LA(1);
                        int index257_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_9==EOF||LA257_9==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_9==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_9);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA257_13 = input.LA(1);
                        int index257_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_13==EOF||LA257_13==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_13==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_13);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA257_17 = input.LA(1);
                        int index257_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_17==EOF||LA257_17==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_17==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA257_21 = input.LA(1);
                        int index257_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_21==EOF||LA257_21==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_21==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA257_25 = input.LA(1);
                        int index257_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_25==EOF||LA257_25==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_25==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA257_29 = input.LA(1);
                        int index257_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_29==EOF||LA257_29==RightParenthesis) ) {s = 32;}
                        else if ( (LA257_29==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        input.seek(index257_29);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA257_0 = input.LA(1);
                        int index257_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_0==LeftCurlyBracket) && (synpred137_InternalN4JSParser())) {s = 1;}
                        else if ( (LA257_0==LeftSquareBracket) && (synpred137_InternalN4JSParser())) {s = 2;}
                        else if ((LA257_0>=4 && LA257_0<=135 && (s=T2S.M_20[LA257_0-(4)])>=0)) { /* 28 cases */ }
                        input.seek(index257_0);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA257_6 = input.LA(1);
                        int index257_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_6==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_6==EOF||LA257_6==RightParenthesis) ) {s = 32;}
                        input.seek(index257_6);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA257_10 = input.LA(1);
                        int index257_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_10==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_10==EOF||LA257_10==RightParenthesis) ) {s = 32;}
                        input.seek(index257_10);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA257_14 = input.LA(1);
                        int index257_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_14==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_14==EOF||LA257_14==RightParenthesis) ) {s = 32;}
                        input.seek(index257_14);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA257_18 = input.LA(1);
                        int index257_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_18==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_18==EOF||LA257_18==RightParenthesis) ) {s = 32;}
                        input.seek(index257_18);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA257_22 = input.LA(1);
                        int index257_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_22==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_22==EOF||LA257_22==RightParenthesis) ) {s = 32;}
                        input.seek(index257_22);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA257_26 = input.LA(1);
                        int index257_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_26==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_26==EOF||LA257_26==RightParenthesis) ) {s = 32;}
                        input.seek(index257_26);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA257_30 = input.LA(1);
                        int index257_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA257_30==Colon) && (synpred138_InternalN4JSParser())) {s = 31;}
                        else if ( (LA257_30==EOF||LA257_30==RightParenthesis) ) {s = 32;}
                        input.seek(index257_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 257, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_160s = "\1\4\2\uffff\33\135\2\uffff";
    static final String dfa_161s = "\1\u0087\2\uffff\33\144\2\uffff";
    static final String dfa_162s = "\1\uffff\2\1\33\uffff\1\2\1\3";
    static final String dfa_163s = "\1\16\2\uffff\1\6\1\7\1\17\1\26\1\0\1\10\1\20\1\27\1\1\1\11\1\21\1\30\1\2\1\12\1\22\1\31\1\3\1\13\1\23\1\32\1\4\1\14\1\24\1\33\1\5\1\15\1\25\2\uffff}>";
    static final String[] dfa_164s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\35\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\3\uffff\1\20\7\uffff\1\4\1\6\1\uffff\1\34\1\5\22\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\30\uffff\1\3",
            "",
            "",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "",
            ""
    };
    static final char[] dfa_160 = DFA.unpackEncodedStringToUnsignedChars(dfa_160s);
    static final char[] dfa_161 = DFA.unpackEncodedStringToUnsignedChars(dfa_161s);
    static final short[] dfa_162 = DFA.unpackEncodedString(dfa_162s);
    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[][] dfa_164 = unpackEncodedStringArray(dfa_164s);
    class DFA258 extends DFA {
        public DFA258(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 258;
            this.eot = dfa_147;
            this.eof = dfa_147;
            this.min = dfa_160;
            this.max = dfa_161;
            this.accept = dfa_162;
            this.special = dfa_163;
            this.transition = dfa_164;
        }
        public String getDescription() {
            return "14328:2: ( ( ( ( norm1_BindingPattern ) )=> (lv_bindingPattern_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= norm1_BindingIdentifier ) ) ( ( Colon )=>this_ColonSepDeclaredTypeRef_2= ruleColonSepDeclaredTypeRef[$current] ) ) ) | ( (lv_name_3_0= norm1_BindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA258_7 = input.LA(1);
                        int index258_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_7==RightParenthesis) ) {s = 31;}
                        else if ( (LA258_7==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        input.seek(index258_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA258_11 = input.LA(1);
                        int index258_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_11==RightParenthesis) ) {s = 31;}
                        else if ( (LA258_11==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        input.seek(index258_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA258_15 = input.LA(1);
                        int index258_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_15==RightParenthesis) ) {s = 31;}
                        else if ( (LA258_15==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        input.seek(index258_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA258_19 = input.LA(1);
                        int index258_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_19==RightParenthesis) ) {s = 31;}
                        else if ( (LA258_19==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        input.seek(index258_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA258_23 = input.LA(1);
                        int index258_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_23==RightParenthesis) ) {s = 31;}
                        else if ( (LA258_23==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        input.seek(index258_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA258_27 = input.LA(1);
                        int index258_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_27==RightParenthesis) ) {s = 31;}
                        else if ( (LA258_27==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        input.seek(index258_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA258_3 = input.LA(1);
                        int index258_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_3==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_3==RightParenthesis) ) {s = 31;}
                        input.seek(index258_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA258_4 = input.LA(1);
                        int index258_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_4==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_4==RightParenthesis) ) {s = 31;}
                        input.seek(index258_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA258_8 = input.LA(1);
                        int index258_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_8==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_8==RightParenthesis) ) {s = 31;}
                        input.seek(index258_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA258_12 = input.LA(1);
                        int index258_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_12==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_12==RightParenthesis) ) {s = 31;}
                        input.seek(index258_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA258_16 = input.LA(1);
                        int index258_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_16==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_16==RightParenthesis) ) {s = 31;}
                        input.seek(index258_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA258_20 = input.LA(1);
                        int index258_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_20==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_20==RightParenthesis) ) {s = 31;}
                        input.seek(index258_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA258_24 = input.LA(1);
                        int index258_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_24==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_24==RightParenthesis) ) {s = 31;}
                        input.seek(index258_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA258_28 = input.LA(1);
                        int index258_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_28==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_28==RightParenthesis) ) {s = 31;}
                        input.seek(index258_28);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA258_0 = input.LA(1);
                        int index258_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_0==LeftCurlyBracket) && (synpred140_InternalN4JSParser())) {s = 1;}
                        else if ( (LA258_0==LeftSquareBracket) && (synpred140_InternalN4JSParser())) {s = 2;}
                        else if ((LA258_0>=4 && LA258_0<=135 && (s=T2S.M_21[LA258_0-(4)])>=0)) { /* 27 cases */ }
                        input.seek(index258_0);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA258_5 = input.LA(1);
                        int index258_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_5==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_5==RightParenthesis) ) {s = 31;}
                        input.seek(index258_5);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA258_9 = input.LA(1);
                        int index258_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_9==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_9==RightParenthesis) ) {s = 31;}
                        input.seek(index258_9);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA258_13 = input.LA(1);
                        int index258_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_13==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_13==RightParenthesis) ) {s = 31;}
                        input.seek(index258_13);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA258_17 = input.LA(1);
                        int index258_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_17==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_17==RightParenthesis) ) {s = 31;}
                        input.seek(index258_17);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA258_21 = input.LA(1);
                        int index258_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_21==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_21==RightParenthesis) ) {s = 31;}
                        input.seek(index258_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA258_25 = input.LA(1);
                        int index258_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_25==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_25==RightParenthesis) ) {s = 31;}
                        input.seek(index258_25);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA258_29 = input.LA(1);
                        int index258_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_29==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_29==RightParenthesis) ) {s = 31;}
                        input.seek(index258_29);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA258_6 = input.LA(1);
                        int index258_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_6==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_6==RightParenthesis) ) {s = 31;}
                        input.seek(index258_6);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA258_10 = input.LA(1);
                        int index258_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_10==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_10==RightParenthesis) ) {s = 31;}
                        input.seek(index258_10);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA258_14 = input.LA(1);
                        int index258_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_14==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_14==RightParenthesis) ) {s = 31;}
                        input.seek(index258_14);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA258_18 = input.LA(1);
                        int index258_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_18==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_18==RightParenthesis) ) {s = 31;}
                        input.seek(index258_18);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA258_22 = input.LA(1);
                        int index258_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_22==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_22==RightParenthesis) ) {s = 31;}
                        input.seek(index258_22);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA258_26 = input.LA(1);
                        int index258_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA258_26==Colon) && (synpred141_InternalN4JSParser())) {s = 30;}
                        else if ( (LA258_26==RightParenthesis) ) {s = 31;}
                        input.seek(index258_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 258, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_165s = "\51\uffff";
    static final String dfa_166s = "\4\uffff\1\3\44\uffff";
    static final String dfa_167s = "\1\4\3\uffff\1\6\1\4\14\uffff\11\4\2\uffff\2\4\1\10\11\4";
    static final String dfa_168s = "\1\u0096\3\uffff\1\u009a\1\u0096\14\uffff\11\u0087\2\uffff\3\u0087\2\u0096\7\u0087";
    static final String dfa_169s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\7\11\uffff\1\4\1\5\14\uffff";
    static final String dfa_170s = "\4\uffff\1\0\44\uffff}>";
    static final String[] dfa_171s = {
            "\3\3\1\uffff\5\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\7\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\15\uffff\2\16\11\uffff\1\3\1\uffff\1\7\2\uffff\1\7\1\uffff\5\7\3\uffff\1\7",
            "",
            "",
            "",
            "\2\3\10\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\16\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\13\uffff\2\3\5\uffff\1\17\24\uffff\1\3\1\uffff\1\3",
            "\1\32\1\30\1\34\1\uffff\1\24\4\34\2\uffff\1\34\1\uffff\1\21\2\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\25\1\uffff\1\34\1\23\4\uffff\1\21\2\uffff\1\31\1\uffff\1\34\1\22\3\uffff\1\34\1\uffff\2\21\1\27\1\21\6\uffff\2\34\1\uffff\2\34\22\uffff\1\34\3\uffff\1\34\5\uffff\1\21\2\uffff\1\21\1\uffff\1\21\6\uffff\1\33\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\25\uffff\1\26\1\uffff\1\21\2\uffff\1\21\1\uffff\5\21\3\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\37\30\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\37\30\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\40\30\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\41\30\uffff\1\34",
            "",
            "",
            "\4\34\1\45\10\34\1\47\13\34\1\46\2\34\1\44\12\34\1\43\10\34\1\42\1\34\4\uffff\10\34\20\uffff\5\34\17\uffff\1\34\40\uffff\1\50",
            "\3\21\1\uffff\5\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\21\1\uffff\2\21\7\uffff\1\21\1\uffff\2\21\3\uffff\1\21\3\uffff\1\21\7\uffff\2\21\1\uffff\2\21\22\uffff\1\21\3\uffff\1\21\17\uffff\1\34\7\uffff\1\34\30\uffff\1\21",
            "\1\21\10\uffff\1\21\13\uffff\1\21\2\uffff\1\21\12\uffff\1\21\5\uffff\1\21\2\uffff\1\21\2\uffff\1\34\61\uffff\1\21\35\uffff\1\21",
            "\2\21\2\uffff\1\21\10\uffff\1\21\13\uffff\1\21\2\uffff\1\21\4\uffff\1\21\2\uffff\1\21\2\uffff\1\21\5\uffff\4\21\2\uffff\1\34\44\uffff\1\21\2\uffff\1\21\1\uffff\1\21\7\uffff\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\25\uffff\1\21\1\uffff\1\21\2\uffff\1\21\1\uffff\5\21\3\uffff\1\21",
            "\2\21\2\uffff\1\21\10\uffff\1\21\13\uffff\1\21\2\uffff\1\21\4\uffff\1\21\2\uffff\1\21\2\uffff\1\21\5\uffff\4\21\2\uffff\1\34\44\uffff\1\21\2\uffff\1\21\1\uffff\1\21\7\uffff\1\21\1\uffff\1\21\2\uffff\1\21\2\uffff\1\21\25\uffff\1\21\1\uffff\1\21\2\uffff\1\21\1\uffff\5\21\3\uffff\1\21",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\21\3\uffff\2\21\1\uffff\1\35\1\34\2\uffff\1\21\1\uffff\1\36\1\21\1\uffff\1\21\2\uffff\1\34\1\21\27\uffff\1\34"
    };
    static final short[] dfa_165 = DFA.unpackEncodedString(dfa_165s);
    static final short[] dfa_166 = DFA.unpackEncodedString(dfa_166s);
    static final char[] dfa_167 = DFA.unpackEncodedStringToUnsignedChars(dfa_167s);
    static final char[] dfa_168 = DFA.unpackEncodedStringToUnsignedChars(dfa_168s);
    static final short[] dfa_169 = DFA.unpackEncodedString(dfa_169s);
    static final short[] dfa_170 = DFA.unpackEncodedString(dfa_170s);
    static final short[][] dfa_171 = unpackEncodedStringArray(dfa_171s);
    class DFA259 extends DFA {
        public DFA259(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 259;
            this.eot = dfa_165;
            this.eof = dfa_166;
            this.min = dfa_167;
            this.max = dfa_168;
            this.accept = dfa_169;
            this.special = dfa_170;
            this.transition = dfa_171;
        }
        public String getDescription() {
            return "14578:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= ruleIdentifierRef | this_JSXFragment_3= ruleJSXFragment | this_JSXElement_4= ruleJSXElement | this_ImportCallExpression_5= ruleImportCallExpression | this_ParameterizedCallExpression_6= ruleParameterizedCallExpression | this_Literal_7= ruleLiteral | this_ArrayLiteral_8= ruleArrayLiteral | this_ObjectLiteral_9= ruleObjectLiteral | this_ParenExpression_10= ruleParenExpression | this_AnnotatedExpression_11= ruleAnnotatedExpression | this_FunctionExpression_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_13= ruleAsyncFunctionExpression ) | this_N4ClassExpression_14= ruleN4ClassExpression | this_TemplateLiteral_15= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA259_4 = input.LA(1);
                        int index259_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA259_4==RULE_NO_LINE_TERMINATOR) && (synpred145_InternalN4JSParser())) {s = 15;}
                        else if ( (LA259_4==Function) && (synpred145_InternalN4JSParser())) {s = 16;}
                        else if ( (LA259_4==EOF||(LA259_4>=Implements && LA259_4<=Instanceof)||LA259_4==ExclamationMarkEqualsSignEqualsSign||(LA259_4>=LessThanSignLessThanSignEqualsSign && LA259_4<=EqualsSignEqualsSignEqualsSign)||(LA259_4>=ExclamationMarkEqualsSign && LA259_4<=QuestionMarkQuestionMark)||(LA259_4>=CircumflexAccentEqualsSign && LA259_4<=As)||(LA259_4>=In && LA259_4<=VerticalLineVerticalLine)||(LA259_4>=PercentSign && LA259_4<=QuestionMark)||(LA259_4>=LeftSquareBracket && LA259_4<=RightCurlyBracket)||(LA259_4>=RULE_TEMPLATE_HEAD && LA259_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA259_4==RULE_ML_COMMENT||LA259_4==RULE_EOL) ) {s = 3;}
                        input.seek(index259_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 259, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_172s = "\1\4\3\uffff\1\6\1\4\15\uffff\11\4\1\uffff\2\4\1\10\11\4";
    static final String dfa_173s = "\1\u0096\3\uffff\1\u009a\1\u0096\15\uffff\11\u0087\1\uffff\3\u0087\2\u0096\7\u0087";
    static final String dfa_174s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\4\1\7\11\uffff\1\5\14\uffff";
    static final String[] dfa_175s = {
            "\3\3\1\uffff\5\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\7\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\15\uffff\2\16\11\uffff\1\3\1\uffff\1\7\2\uffff\1\7\1\uffff\5\7\3\uffff\1\7",
            "",
            "",
            "",
            "\2\3\10\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\16\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\13\uffff\2\3\5\uffff\1\17\24\uffff\1\3\1\uffff\1\3",
            "\1\33\1\31\1\34\1\uffff\1\25\4\34\2\uffff\1\34\1\uffff\1\22\2\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\26\1\uffff\1\34\1\24\4\uffff\1\22\2\uffff\1\32\1\uffff\1\34\1\23\3\uffff\1\34\1\uffff\2\22\1\30\1\22\6\uffff\2\34\1\uffff\2\34\22\uffff\1\34\3\uffff\1\34\5\uffff\1\22\2\uffff\1\22\1\uffff\1\22\6\uffff\1\21\1\22\1\uffff\1\22\2\uffff\1\22\2\uffff\1\22\25\uffff\1\27\1\uffff\1\22\2\uffff\1\22\1\uffff\5\22\3\uffff\1\22",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\37\30\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\37\30\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\40\30\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\41\30\uffff\1\34",
            "",
            "\3\22\1\uffff\5\22\2\uffff\1\22\4\uffff\2\22\3\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1\uffff\2\22\7\uffff\1\22\2\uffff\1\22\3\uffff\1\22\3\uffff\1\22\7\uffff\2\22\1\uffff\2\22\22\uffff\1\22\3\uffff\1\22\17\uffff\1\34\7\uffff\1\34\30\uffff\1\22",
            "\4\34\1\47\10\34\1\43\13\34\1\45\2\34\1\50\12\34\1\46\10\34\1\44\1\34\4\uffff\10\34\20\uffff\5\34\17\uffff\1\34\40\uffff\1\42",
            "\1\22\10\uffff\1\22\13\uffff\1\22\2\uffff\1\22\12\uffff\1\22\5\uffff\1\22\2\uffff\1\22\2\uffff\1\34\61\uffff\1\22\35\uffff\1\22",
            "\2\22\2\uffff\1\22\10\uffff\1\22\13\uffff\1\22\2\uffff\1\22\4\uffff\1\22\2\uffff\1\22\2\uffff\1\22\5\uffff\4\22\2\uffff\1\34\44\uffff\1\22\2\uffff\1\22\1\uffff\1\22\7\uffff\1\22\1\uffff\1\22\2\uffff\1\22\2\uffff\1\22\25\uffff\1\22\1\uffff\1\22\2\uffff\1\22\1\uffff\5\22\3\uffff\1\22",
            "\2\22\2\uffff\1\22\10\uffff\1\22\13\uffff\1\22\2\uffff\1\22\4\uffff\1\22\2\uffff\1\22\2\uffff\1\22\5\uffff\4\22\2\uffff\1\34\44\uffff\1\22\2\uffff\1\22\1\uffff\1\22\7\uffff\1\22\1\uffff\1\22\2\uffff\1\22\2\uffff\1\22\25\uffff\1\22\1\uffff\1\22\2\uffff\1\22\1\uffff\5\22\3\uffff\1\22",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34",
            "\62\34\4\uffff\10\34\14\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\36\1\34\2\uffff\1\22\1\uffff\1\35\1\22\1\uffff\1\22\2\uffff\1\34\1\22\27\uffff\1\34"
    };
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[][] dfa_175 = unpackEncodedStringArray(dfa_175s);
    class DFA260 extends DFA {
        public DFA260(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 260;
            this.eot = dfa_165;
            this.eof = dfa_166;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_170;
            this.transition = dfa_175;
        }
        public String getDescription() {
            return "14746:2: (this_ThisLiteral_0= ruleThisLiteral | this_SuperLiteral_1= ruleSuperLiteral | this_IdentifierRef_2= norm1_IdentifierRef | this_JSXFragment_3= ruleJSXFragment | this_JSXElement_4= ruleJSXElement | this_ImportCallExpression_5= norm1_ImportCallExpression | this_ParameterizedCallExpression_6= norm1_ParameterizedCallExpression | this_Literal_7= ruleLiteral | this_ArrayLiteral_8= norm1_ArrayLiteral | this_ObjectLiteral_9= norm1_ObjectLiteral | this_ParenExpression_10= norm1_ParenExpression | this_AnnotatedExpression_11= norm1_AnnotatedExpression | this_FunctionExpression_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] Function ) )=>this_AsyncFunctionExpression_13= ruleAsyncFunctionExpression ) | this_N4ClassExpression_14= norm1_N4ClassExpression | this_TemplateLiteral_15= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA260_4 = input.LA(1);
                        int index260_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA260_4==EOF||(LA260_4>=Implements && LA260_4<=Instanceof)||LA260_4==ExclamationMarkEqualsSignEqualsSign||(LA260_4>=LessThanSignLessThanSignEqualsSign && LA260_4<=EqualsSignEqualsSignEqualsSign)||(LA260_4>=ExclamationMarkEqualsSign && LA260_4<=QuestionMarkQuestionMark)||(LA260_4>=CircumflexAccentEqualsSign && LA260_4<=As)||(LA260_4>=In && LA260_4<=VerticalLineVerticalLine)||(LA260_4>=PercentSign && LA260_4<=QuestionMark)||(LA260_4>=LeftSquareBracket && LA260_4<=RightCurlyBracket)||(LA260_4>=RULE_TEMPLATE_HEAD && LA260_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA260_4==RULE_ML_COMMENT||LA260_4==RULE_EOL) ) {s = 3;}
                        else if ( (LA260_4==RULE_NO_LINE_TERMINATOR) && (synpred146_InternalN4JSParser())) {s = 15;}
                        else if ( (LA260_4==Function) && (synpred146_InternalN4JSParser())) {s = 16;}
                        input.seek(index260_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 260, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_176s = "\5\uffff";
    static final String dfa_177s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_178s = "\1\154\1\u0096\1\uffff\1\u0096\1\uffff";
    static final String dfa_179s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_180s = "\5\uffff}>";
    static final String[] dfa_181s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\5\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\11\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\5\4\3\uffff\1\4",
            "",
            "\3\4\1\uffff\5\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\11\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\5\4\3\uffff\1\4",
            ""
    };
    static final short[] dfa_176 = DFA.unpackEncodedString(dfa_176s);
    static final char[] dfa_177 = DFA.unpackEncodedStringToUnsignedChars(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final short[] dfa_179 = DFA.unpackEncodedString(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[][] dfa_181 = unpackEncodedStringArray(dfa_181s);
    class DFA263 extends DFA {
        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_177;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "()* loopback of 15177:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= ruleArrayElement ) ) )*";
        }
    }
    class DFA269 extends DFA {
        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_177;
            this.max = dfa_178;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "()* loopback of 15324:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleArrayPadding ) )* ( (lv_elements_6_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_182s = "\1\4\1\uffff\112\0\13\uffff";
    static final String dfa_183s = "\1\u0096\1\uffff\112\0\13\uffff";
    static final String dfa_184s = "\1\uffff\1\1\112\uffff\2\5\1\6\4\uffff\1\7\1\2\1\3\1\4";
    static final String dfa_185s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\13\uffff}>";
    static final String[] dfa_186s = {
            "\1\17\1\14\1\75\1\42\1\5\1\76\1\103\1\100\1\67\1\25\1\26\1\66\1\36\1\7\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\6\1\51\1\74\1\4\1\20\1\22\1\23\1\24\1\60\1\45\1\47\1\16\1\53\1\55\1\3\1\21\1\31\1\61\1\72\1\56\1\12\1\57\1\13\1\2\1\54\1\uffff\1\123\2\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\20\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\116\1\uffff\1\115\1\116\1\uffff\1\116\4\uffff\1\114\2\uffff\1\116\1\1\1\113\2\uffff\1\15\2\uffff\1\11\25\uffff\1\10\1\uffff\1\106\2\uffff\1\105\1\uffff\1\107\1\110\1\116\1\111\1\112\3\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_182 = DFA.unpackEncodedStringToUnsignedChars(dfa_182s);
    static final char[] dfa_183 = DFA.unpackEncodedStringToUnsignedChars(dfa_183s);
    static final short[] dfa_184 = DFA.unpackEncodedString(dfa_184s);
    static final short[] dfa_185 = DFA.unpackEncodedString(dfa_185s);
    static final short[][] dfa_186 = unpackEncodedStringArray(dfa_186s);
    class DFA281 extends DFA {
        public DFA281(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 281;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_182;
            this.max = dfa_183;
            this.accept = dfa_184;
            this.special = dfa_185;
            this.transition = dfa_186;
        }
        public String getDescription() {
            return "15734:2: (this_AnnotatedPropertyAssignment_0= ruleAnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( ruleLiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= rulePropertyNameValuePair ) | ( ( ( () ruleGetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= rulePropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= rulePropertySetterDeclaration ) | ( ( ( () ( ruleTypeParameters[null] )? ( ( ruleTypeReferenceWithModifiersNode ) )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= rulePropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= rulePropertyNameValuePairSingleName | this_PropertySpread_6= rulePropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA281_0 = input.LA(1);
                        int index281_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA281_0>=4 && LA281_0<=150 && (s=T2S.M_22[LA281_0-(4)])>=0)) { /* 75 cases */ }
                        else if ( (LA281_0==LessThanSign) && (synpred150_InternalN4JSParser())) {s = 76;}
                        else if ( (LA281_0==Asterisk) && (synpred150_InternalN4JSParser())) {s = 77;}
                        else if ( (LA281_0==LeftParenthesis||LA281_0==PlusSign||LA281_0==HyphenMinus||LA281_0==QuestionMark||LA281_0==RULE_LEGACY_OCTAL_INT) ) {s = 78;}
                        else if ( (LA281_0==FullStopFullStopFullStop) ) {s = 83;}
                        input.seek(index281_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA281_2 = input.LA(1);
                        int index281_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA281_3 = input.LA(1);
                        int index281_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA281_4 = input.LA(1);
                        int index281_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA281_5 = input.LA(1);
                        int index281_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA281_6 = input.LA(1);
                        int index281_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA281_7 = input.LA(1);
                        int index281_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA281_8 = input.LA(1);
                        int index281_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA281_9 = input.LA(1);
                        int index281_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA281_10 = input.LA(1);
                        int index281_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA281_11 = input.LA(1);
                        int index281_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA281_12 = input.LA(1);
                        int index281_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA281_13 = input.LA(1);
                        int index281_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA281_14 = input.LA(1);
                        int index281_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA281_15 = input.LA(1);
                        int index281_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA281_16 = input.LA(1);
                        int index281_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA281_17 = input.LA(1);
                        int index281_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA281_18 = input.LA(1);
                        int index281_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA281_19 = input.LA(1);
                        int index281_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA281_20 = input.LA(1);
                        int index281_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA281_21 = input.LA(1);
                        int index281_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA281_22 = input.LA(1);
                        int index281_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA281_23 = input.LA(1);
                        int index281_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA281_24 = input.LA(1);
                        int index281_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA281_25 = input.LA(1);
                        int index281_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA281_26 = input.LA(1);
                        int index281_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA281_27 = input.LA(1);
                        int index281_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA281_28 = input.LA(1);
                        int index281_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA281_29 = input.LA(1);
                        int index281_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA281_30 = input.LA(1);
                        int index281_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA281_31 = input.LA(1);
                        int index281_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA281_32 = input.LA(1);
                        int index281_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA281_33 = input.LA(1);
                        int index281_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA281_34 = input.LA(1);
                        int index281_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA281_35 = input.LA(1);
                        int index281_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA281_36 = input.LA(1);
                        int index281_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA281_37 = input.LA(1);
                        int index281_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA281_38 = input.LA(1);
                        int index281_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA281_39 = input.LA(1);
                        int index281_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA281_40 = input.LA(1);
                        int index281_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA281_41 = input.LA(1);
                        int index281_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA281_42 = input.LA(1);
                        int index281_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA281_43 = input.LA(1);
                        int index281_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA281_44 = input.LA(1);
                        int index281_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA281_45 = input.LA(1);
                        int index281_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA281_46 = input.LA(1);
                        int index281_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA281_47 = input.LA(1);
                        int index281_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA281_48 = input.LA(1);
                        int index281_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA281_49 = input.LA(1);
                        int index281_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index281_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA281_50 = input.LA(1);
                        int index281_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred148_InternalN4JSParser()) ) {s = 85;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA281_51 = input.LA(1);
                        int index281_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred149_InternalN4JSParser()) ) {s = 86;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA281_52 = input.LA(1);
                        int index281_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA281_53 = input.LA(1);
                        int index281_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA281_54 = input.LA(1);
                        int index281_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA281_55 = input.LA(1);
                        int index281_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA281_56 = input.LA(1);
                        int index281_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA281_57 = input.LA(1);
                        int index281_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA281_58 = input.LA(1);
                        int index281_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA281_59 = input.LA(1);
                        int index281_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA281_60 = input.LA(1);
                        int index281_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA281_61 = input.LA(1);
                        int index281_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA281_62 = input.LA(1);
                        int index281_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA281_63 = input.LA(1);
                        int index281_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA281_64 = input.LA(1);
                        int index281_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA281_65 = input.LA(1);
                        int index281_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA281_66 = input.LA(1);
                        int index281_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA281_67 = input.LA(1);
                        int index281_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA281_68 = input.LA(1);
                        int index281_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA281_69 = input.LA(1);
                        int index281_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA281_70 = input.LA(1);
                        int index281_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA281_71 = input.LA(1);
                        int index281_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA281_72 = input.LA(1);
                        int index281_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA281_73 = input.LA(1);
                        int index281_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_73);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA281_74 = input.LA(1);
                        int index281_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_74);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA281_75 = input.LA(1);
                        int index281_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index281_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 281, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA282 extends DFA {
        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_182;
            this.max = dfa_183;
            this.accept = dfa_184;
            this.special = dfa_185;
            this.transition = dfa_186;
        }
        public String getDescription() {
            return "16033:2: (this_AnnotatedPropertyAssignment_0= norm1_AnnotatedPropertyAssignment | ( ( ( () ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>this_PropertyNameValuePair_1= norm1_PropertyNameValuePair ) | ( ( ( () norm1_GetterHeader[null] ) )=>this_PropertyGetterDeclaration_2= norm1_PropertyGetterDeclaration ) | ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_PropertySetterDeclaration_3= norm1_PropertySetterDeclaration ) | ( ( ( () ( ruleTypeParameters[null] )? ( ( ruleTypeReferenceWithModifiersNode ) )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_PropertyMethodDeclaration_4= norm1_PropertyMethodDeclaration ) | this_PropertyNameValuePairSingleName_5= norm1_PropertyNameValuePairSingleName | this_PropertySpread_6= norm1_PropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA282_0 = input.LA(1);
                        int index282_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA282_0>=4 && LA282_0<=150 && (s=T2S.M_22[LA282_0-(4)])>=0)) { /* 75 cases */ }
                        else if ( (LA282_0==LessThanSign) && (synpred154_InternalN4JSParser())) {s = 76;}
                        else if ( (LA282_0==Asterisk) && (synpred154_InternalN4JSParser())) {s = 77;}
                        else if ( (LA282_0==LeftParenthesis||LA282_0==PlusSign||LA282_0==HyphenMinus||LA282_0==QuestionMark||LA282_0==RULE_LEGACY_OCTAL_INT) ) {s = 78;}
                        else if ( (LA282_0==FullStopFullStopFullStop) ) {s = 83;}
                        input.seek(index282_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA282_2 = input.LA(1);
                        int index282_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA282_3 = input.LA(1);
                        int index282_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA282_4 = input.LA(1);
                        int index282_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA282_5 = input.LA(1);
                        int index282_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA282_6 = input.LA(1);
                        int index282_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA282_7 = input.LA(1);
                        int index282_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA282_8 = input.LA(1);
                        int index282_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA282_9 = input.LA(1);
                        int index282_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA282_10 = input.LA(1);
                        int index282_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA282_11 = input.LA(1);
                        int index282_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA282_12 = input.LA(1);
                        int index282_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA282_13 = input.LA(1);
                        int index282_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA282_14 = input.LA(1);
                        int index282_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA282_15 = input.LA(1);
                        int index282_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA282_16 = input.LA(1);
                        int index282_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA282_17 = input.LA(1);
                        int index282_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA282_18 = input.LA(1);
                        int index282_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA282_19 = input.LA(1);
                        int index282_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA282_20 = input.LA(1);
                        int index282_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA282_21 = input.LA(1);
                        int index282_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA282_22 = input.LA(1);
                        int index282_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA282_23 = input.LA(1);
                        int index282_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA282_24 = input.LA(1);
                        int index282_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA282_25 = input.LA(1);
                        int index282_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA282_26 = input.LA(1);
                        int index282_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA282_27 = input.LA(1);
                        int index282_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA282_28 = input.LA(1);
                        int index282_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA282_29 = input.LA(1);
                        int index282_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA282_30 = input.LA(1);
                        int index282_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA282_31 = input.LA(1);
                        int index282_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA282_32 = input.LA(1);
                        int index282_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA282_33 = input.LA(1);
                        int index282_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA282_34 = input.LA(1);
                        int index282_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA282_35 = input.LA(1);
                        int index282_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA282_36 = input.LA(1);
                        int index282_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA282_37 = input.LA(1);
                        int index282_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA282_38 = input.LA(1);
                        int index282_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA282_39 = input.LA(1);
                        int index282_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA282_40 = input.LA(1);
                        int index282_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA282_41 = input.LA(1);
                        int index282_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA282_42 = input.LA(1);
                        int index282_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA282_43 = input.LA(1);
                        int index282_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA282_44 = input.LA(1);
                        int index282_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA282_45 = input.LA(1);
                        int index282_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA282_46 = input.LA(1);
                        int index282_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA282_47 = input.LA(1);
                        int index282_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA282_48 = input.LA(1);
                        int index282_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA282_49 = input.LA(1);
                        int index282_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        input.seek(index282_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA282_50 = input.LA(1);
                        int index282_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred152_InternalN4JSParser()) ) {s = 85;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA282_51 = input.LA(1);
                        int index282_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 86;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA282_52 = input.LA(1);
                        int index282_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA282_53 = input.LA(1);
                        int index282_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA282_54 = input.LA(1);
                        int index282_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA282_55 = input.LA(1);
                        int index282_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA282_56 = input.LA(1);
                        int index282_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA282_57 = input.LA(1);
                        int index282_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA282_58 = input.LA(1);
                        int index282_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA282_59 = input.LA(1);
                        int index282_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA282_60 = input.LA(1);
                        int index282_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA282_61 = input.LA(1);
                        int index282_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA282_62 = input.LA(1);
                        int index282_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA282_63 = input.LA(1);
                        int index282_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA282_64 = input.LA(1);
                        int index282_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA282_65 = input.LA(1);
                        int index282_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA282_66 = input.LA(1);
                        int index282_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA282_67 = input.LA(1);
                        int index282_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA282_68 = input.LA(1);
                        int index282_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA282_69 = input.LA(1);
                        int index282_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA282_70 = input.LA(1);
                        int index282_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA282_71 = input.LA(1);
                        int index282_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA282_72 = input.LA(1);
                        int index282_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA282_73 = input.LA(1);
                        int index282_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_73);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA282_74 = input.LA(1);
                        int index282_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_74);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA282_75 = input.LA(1);
                        int index282_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_InternalN4JSParser()) ) {s = 84;}
                        else if ( (synpred154_InternalN4JSParser()) ) {s = 77;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index282_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 282, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_187s = "\1\4\112\0\7\uffff";
    static final String dfa_188s = "\1\u0096\112\0\7\uffff";
    static final String dfa_189s = "\113\uffff\2\4\1\6\1\1\1\5\1\2\1\3";
    static final String dfa_190s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\7\uffff}>";
    static final String[] dfa_191s = {
            "\1\16\1\13\1\74\1\41\1\4\1\75\1\102\1\77\1\66\1\24\1\25\1\65\1\35\1\6\1\32\1\33\1\76\1\64\1\26\1\31\1\37\1\100\1\43\1\67\1\45\1\5\1\50\1\73\1\3\1\17\1\21\1\22\1\23\1\57\1\44\1\46\1\15\1\52\1\54\1\2\1\20\1\30\1\60\1\71\1\55\1\11\1\56\1\12\1\1\1\53\1\uffff\1\115\2\uffff\1\34\1\61\1\63\1\42\1\101\1\62\1\47\1\51\20\uffff\1\70\1\27\1\36\1\40\1\72\7\uffff\1\114\7\uffff\1\113\4\uffff\1\112\2\uffff\1\14\2\uffff\1\10\25\uffff\1\7\1\uffff\1\105\2\uffff\1\104\1\uffff\1\106\1\107\1\uffff\1\110\1\111\3\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_187 = DFA.unpackEncodedStringToUnsignedChars(dfa_187s);
    static final char[] dfa_188 = DFA.unpackEncodedStringToUnsignedChars(dfa_188s);
    static final short[] dfa_189 = DFA.unpackEncodedString(dfa_189s);
    static final short[] dfa_190 = DFA.unpackEncodedString(dfa_190s);
    static final short[][] dfa_191 = unpackEncodedStringArray(dfa_191s);
    class DFA290 extends DFA {
        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = dfa_93;
            this.eof = dfa_93;
            this.min = dfa_187;
            this.max = dfa_188;
            this.accept = dfa_189;
            this.special = dfa_190;
            this.transition = dfa_191;
        }
        public String getDescription() {
            return "16347:3: ( ( ( ( ( () ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )? ( (lv_declaredName_3_0= ruleLiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( () ruleGetterHeader[null] ) )=> ( () this_GetterHeader_7= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= ruleFormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeParameters[null] )? ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeParameters_18= ruleTypeParameters[$current] )? ( (lv_declaredReturnTypeRefNode_19_0= ruleTypeReferenceWithModifiersNode ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRefNode_27_0= ruleTypeReferenceWithModifiersNode ) )? ( (lv_expression_28_0= rulePropertyNameValuePairSingleNamePart ) ) ) | ( () otherlv_30= FullStopFullStopFullStop ( (lv_expression_31_0= norm1_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA290_0 = input.LA(1);
                        int index290_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA290_0>=4 && LA290_0<=150 && (s=T2S.M_24[LA290_0-(4)])>=0)) { /* 74 cases */ }
                        else if ( (LA290_0==LessThanSign) && (synpred161_InternalN4JSParser())) {s = 75;}
                        else if ( (LA290_0==Asterisk) && (synpred161_InternalN4JSParser())) {s = 76;}
                        else if ( (LA290_0==FullStopFullStopFullStop) ) {s = 77;}
                        input.seek(index290_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA290_1 = input.LA(1);
                        int index290_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA290_2 = input.LA(1);
                        int index290_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA290_3 = input.LA(1);
                        int index290_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA290_4 = input.LA(1);
                        int index290_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA290_5 = input.LA(1);
                        int index290_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA290_6 = input.LA(1);
                        int index290_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA290_7 = input.LA(1);
                        int index290_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA290_8 = input.LA(1);
                        int index290_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA290_9 = input.LA(1);
                        int index290_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA290_10 = input.LA(1);
                        int index290_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA290_11 = input.LA(1);
                        int index290_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA290_12 = input.LA(1);
                        int index290_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA290_13 = input.LA(1);
                        int index290_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA290_14 = input.LA(1);
                        int index290_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA290_15 = input.LA(1);
                        int index290_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA290_16 = input.LA(1);
                        int index290_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA290_17 = input.LA(1);
                        int index290_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA290_18 = input.LA(1);
                        int index290_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA290_19 = input.LA(1);
                        int index290_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA290_20 = input.LA(1);
                        int index290_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA290_21 = input.LA(1);
                        int index290_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA290_22 = input.LA(1);
                        int index290_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA290_23 = input.LA(1);
                        int index290_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA290_24 = input.LA(1);
                        int index290_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA290_25 = input.LA(1);
                        int index290_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA290_26 = input.LA(1);
                        int index290_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA290_27 = input.LA(1);
                        int index290_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA290_28 = input.LA(1);
                        int index290_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA290_29 = input.LA(1);
                        int index290_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA290_30 = input.LA(1);
                        int index290_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA290_31 = input.LA(1);
                        int index290_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA290_32 = input.LA(1);
                        int index290_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA290_33 = input.LA(1);
                        int index290_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA290_34 = input.LA(1);
                        int index290_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA290_35 = input.LA(1);
                        int index290_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA290_36 = input.LA(1);
                        int index290_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA290_37 = input.LA(1);
                        int index290_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA290_38 = input.LA(1);
                        int index290_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA290_39 = input.LA(1);
                        int index290_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA290_40 = input.LA(1);
                        int index290_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA290_41 = input.LA(1);
                        int index290_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA290_42 = input.LA(1);
                        int index290_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA290_43 = input.LA(1);
                        int index290_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA290_44 = input.LA(1);
                        int index290_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA290_45 = input.LA(1);
                        int index290_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA290_46 = input.LA(1);
                        int index290_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA290_47 = input.LA(1);
                        int index290_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA290_48 = input.LA(1);
                        int index290_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA290_49 = input.LA(1);
                        int index290_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred156_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA290_50 = input.LA(1);
                        int index290_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred158_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA290_51 = input.LA(1);
                        int index290_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA290_52 = input.LA(1);
                        int index290_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA290_53 = input.LA(1);
                        int index290_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA290_54 = input.LA(1);
                        int index290_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA290_55 = input.LA(1);
                        int index290_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA290_56 = input.LA(1);
                        int index290_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA290_57 = input.LA(1);
                        int index290_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA290_58 = input.LA(1);
                        int index290_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA290_59 = input.LA(1);
                        int index290_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA290_60 = input.LA(1);
                        int index290_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA290_61 = input.LA(1);
                        int index290_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA290_62 = input.LA(1);
                        int index290_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA290_63 = input.LA(1);
                        int index290_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA290_64 = input.LA(1);
                        int index290_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA290_65 = input.LA(1);
                        int index290_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA290_66 = input.LA(1);
                        int index290_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index290_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA290_67 = input.LA(1);
                        int index290_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA290_68 = input.LA(1);
                        int index290_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA290_69 = input.LA(1);
                        int index290_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA290_70 = input.LA(1);
                        int index290_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA290_71 = input.LA(1);
                        int index290_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA290_72 = input.LA(1);
                        int index290_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_72);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA290_73 = input.LA(1);
                        int index290_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_73);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA290_74 = input.LA(1);
                        int index290_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred161_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index290_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 290, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_192s = "\17\uffff";
    static final String dfa_193s = "\10\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_194s = "\10\u0096\1\uffff\1\u0096\4\156\1\uffff";
    static final String dfa_195s = "\10\uffff\1\1\5\uffff\1\2";
    static final String dfa_196s = "\17\uffff}>";
    static final String[] dfa_197s = {
            "\1\15\1\13\2\16\1\4\10\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\20\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\25\uffff\1\7\1\uffff\1\16\2\uffff\1\16\1\uffff\2\16\1\uffff\2\16\3\uffff\1\16",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            ""
    };
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final char[] dfa_193 = DFA.unpackEncodedStringToUnsignedChars(dfa_193s);
    static final char[] dfa_194 = DFA.unpackEncodedStringToUnsignedChars(dfa_194s);
    static final short[] dfa_195 = DFA.unpackEncodedString(dfa_195s);
    static final short[] dfa_196 = DFA.unpackEncodedString(dfa_196s);
    static final short[][] dfa_197 = unpackEncodedStringArray(dfa_197s);
    class DFA283 extends DFA {
        public DFA283(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "16374:7: ( (lv_declaredTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String dfa_198s = "\10\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_199s = {
            "\1\15\1\13\2\16\1\4\10\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\20\uffff\5\16\7\uffff\1\16\14\uffff\1\16\2\uffff\1\10\2\uffff\1\10\25\uffff\1\7\1\uffff\1\16\2\uffff\1\16\1\uffff\2\16\1\uffff\2\16\3\uffff\1\16",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "",
            "\62\10\4\uffff\10\10\20\uffff\5\10\5\uffff\1\16\1\uffff\2\10\11\uffff\1\10\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            ""
    };
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[][] dfa_199 = unpackEncodedStringArray(dfa_199s);
    class DFA286 extends DFA {
        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "16810:7: ( (lv_declaredReturnTypeRefNode_19_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String dfa_200s = "\2\uffff\11\13\1\uffff";
    static final String dfa_201s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_202s = "\1\u0087\1\uffff\5\u0087\4\160\1\uffff";
    static final String dfa_203s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_204s = {
            "\1\12\1\10\1\13\1\uffff\1\4\4\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\25\uffff\1\6",
            "",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[] dfa_200 = DFA.unpackEncodedString(dfa_200s);
    static final char[] dfa_201 = DFA.unpackEncodedStringToUnsignedChars(dfa_201s);
    static final char[] dfa_202 = DFA.unpackEncodedStringToUnsignedChars(dfa_202s);
    static final short[] dfa_203 = DFA.unpackEncodedString(dfa_203s);
    static final short[][] dfa_204 = unpackEncodedStringArray(dfa_204s);
    class DFA289 extends DFA {
        public DFA289(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 289;
            this.eot = dfa_59;
            this.eof = dfa_200;
            this.min = dfa_201;
            this.max = dfa_202;
            this.accept = dfa_203;
            this.special = dfa_64;
            this.transition = dfa_204;
        }
        public String getDescription() {
            return "16934:5: ( (lv_declaredTypeRefNode_27_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA298 extends DFA {
        public DFA298(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 298;
            this.eot = dfa_93;
            this.eof = dfa_93;
            this.min = dfa_187;
            this.max = dfa_188;
            this.accept = dfa_189;
            this.special = dfa_190;
            this.transition = dfa_191;
        }
        public String getDescription() {
            return "17028:3: ( ( ( ( ( () ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( () ( (lv_declaredTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )? ( (lv_declaredName_3_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_4= Colon ) ) ( (lv_expression_5_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( () norm1_GetterHeader[null] ) )=> ( () this_GetterHeader_7= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_8_0= ruleBlock ) ) ) | ( ( ( ( () Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () otherlv_10= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_11_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_12_0= QuestionMark ) )? otherlv_13= LeftParenthesis ( (lv_fpar_14_0= norm1_FormalParameter ) ) otherlv_15= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_16_0= ruleBlock ) ) ) | ( ( ( ( () ( ruleTypeParameters[null] )? ( ( ruleTypeReferenceWithModifiersNode ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () (this_TypeParameters_18= ruleTypeParameters[$current] )? ( (lv_declaredReturnTypeRefNode_19_0= ruleTypeReferenceWithModifiersNode ) )? ( ( ( (lv_generator_20_0= Asterisk ) ) ( (lv_declaredName_21_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_22= norm1_MethodParamsAndBody[$current] ) ) | ( ( (lv_declaredName_23_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsAndBody_24= ruleMethodParamsAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( () ( (lv_declaredTypeRefNode_27_0= ruleTypeReferenceWithModifiersNode ) )? ( (lv_expression_28_0= norm1_PropertyNameValuePairSingleNamePart ) ) ) | ( () otherlv_30= FullStopFullStopFullStop ( (lv_expression_31_0= norm3_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA298_0 = input.LA(1);
                        int index298_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA298_0>=4 && LA298_0<=150 && (s=T2S.M_24[LA298_0-(4)])>=0)) { /* 74 cases */ }
                        else if ( (LA298_0==LessThanSign) && (synpred170_InternalN4JSParser())) {s = 75;}
                        else if ( (LA298_0==Asterisk) && (synpred170_InternalN4JSParser())) {s = 76;}
                        else if ( (LA298_0==FullStopFullStopFullStop) ) {s = 77;}
                        input.seek(index298_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA298_1 = input.LA(1);
                        int index298_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA298_2 = input.LA(1);
                        int index298_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA298_3 = input.LA(1);
                        int index298_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA298_4 = input.LA(1);
                        int index298_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA298_5 = input.LA(1);
                        int index298_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA298_6 = input.LA(1);
                        int index298_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA298_7 = input.LA(1);
                        int index298_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA298_8 = input.LA(1);
                        int index298_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA298_9 = input.LA(1);
                        int index298_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA298_10 = input.LA(1);
                        int index298_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA298_11 = input.LA(1);
                        int index298_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA298_12 = input.LA(1);
                        int index298_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA298_13 = input.LA(1);
                        int index298_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA298_14 = input.LA(1);
                        int index298_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA298_15 = input.LA(1);
                        int index298_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA298_16 = input.LA(1);
                        int index298_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA298_17 = input.LA(1);
                        int index298_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA298_18 = input.LA(1);
                        int index298_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA298_19 = input.LA(1);
                        int index298_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA298_20 = input.LA(1);
                        int index298_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA298_21 = input.LA(1);
                        int index298_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA298_22 = input.LA(1);
                        int index298_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA298_23 = input.LA(1);
                        int index298_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA298_24 = input.LA(1);
                        int index298_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA298_25 = input.LA(1);
                        int index298_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA298_26 = input.LA(1);
                        int index298_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA298_27 = input.LA(1);
                        int index298_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA298_28 = input.LA(1);
                        int index298_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA298_29 = input.LA(1);
                        int index298_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA298_30 = input.LA(1);
                        int index298_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA298_31 = input.LA(1);
                        int index298_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA298_32 = input.LA(1);
                        int index298_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA298_33 = input.LA(1);
                        int index298_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA298_34 = input.LA(1);
                        int index298_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA298_35 = input.LA(1);
                        int index298_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA298_36 = input.LA(1);
                        int index298_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA298_37 = input.LA(1);
                        int index298_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA298_38 = input.LA(1);
                        int index298_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA298_39 = input.LA(1);
                        int index298_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA298_40 = input.LA(1);
                        int index298_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA298_41 = input.LA(1);
                        int index298_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA298_42 = input.LA(1);
                        int index298_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA298_43 = input.LA(1);
                        int index298_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA298_44 = input.LA(1);
                        int index298_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA298_45 = input.LA(1);
                        int index298_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA298_46 = input.LA(1);
                        int index298_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA298_47 = input.LA(1);
                        int index298_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA298_48 = input.LA(1);
                        int index298_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA298_49 = input.LA(1);
                        int index298_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred165_InternalN4JSParser()) ) {s = 80;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA298_50 = input.LA(1);
                        int index298_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred167_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA298_51 = input.LA(1);
                        int index298_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA298_52 = input.LA(1);
                        int index298_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA298_53 = input.LA(1);
                        int index298_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA298_54 = input.LA(1);
                        int index298_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA298_55 = input.LA(1);
                        int index298_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA298_56 = input.LA(1);
                        int index298_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA298_57 = input.LA(1);
                        int index298_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA298_58 = input.LA(1);
                        int index298_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA298_59 = input.LA(1);
                        int index298_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA298_60 = input.LA(1);
                        int index298_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA298_61 = input.LA(1);
                        int index298_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA298_62 = input.LA(1);
                        int index298_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA298_63 = input.LA(1);
                        int index298_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA298_64 = input.LA(1);
                        int index298_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA298_65 = input.LA(1);
                        int index298_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA298_66 = input.LA(1);
                        int index298_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index298_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA298_67 = input.LA(1);
                        int index298_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA298_68 = input.LA(1);
                        int index298_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA298_69 = input.LA(1);
                        int index298_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_69);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA298_70 = input.LA(1);
                        int index298_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_70);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA298_71 = input.LA(1);
                        int index298_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_71);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA298_72 = input.LA(1);
                        int index298_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_72);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA298_73 = input.LA(1);
                        int index298_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_73);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA298_74 = input.LA(1);
                        int index298_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred164_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred170_InternalN4JSParser()) ) {s = 76;}
                        input.seek(index298_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 298, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA291 extends DFA {
        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "17055:7: ( (lv_declaredTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA294 extends DFA {
        public DFA294(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 294;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "17491:7: ( (lv_declaredReturnTypeRefNode_19_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String[] dfa_205s = {
            "\1\12\1\10\1\13\1\uffff\1\4\4\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\27\uffff\1\1\2\uffff\1\1\25\uffff\1\6",
            "",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\26\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_205 = unpackEncodedStringArray(dfa_205s);
    class DFA297 extends DFA {
        public DFA297(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 297;
            this.eot = dfa_59;
            this.eof = dfa_59;
            this.min = dfa_201;
            this.max = dfa_202;
            this.accept = dfa_203;
            this.special = dfa_64;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "17615:5: ( (lv_declaredTypeRefNode_27_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA300 extends DFA {
        public DFA300(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 300;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "17767:5: ( (lv_declaredReturnTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA304 extends DFA {
        public DFA304(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 304;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "17965:5: ( (lv_declaredReturnTypeRefNode_2_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String dfa_206s = "\20\uffff";
    static final String dfa_207s = "\10\4\1\uffff\1\4\4\144\1\uffff\1\4";
    static final String dfa_208s = "\10\u0096\1\uffff\1\u0096\4\156\1\uffff\1\u0096";
    static final String dfa_209s = "\10\uffff\1\1\5\uffff\1\2\1\uffff";
    static final String dfa_210s = "\20\uffff}>";
    static final String[] dfa_211s = {
            "\1\15\1\13\2\16\1\4\10\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\20\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\25\uffff\1\7\1\uffff\1\16\2\uffff\1\16\1\uffff\2\16\1\uffff\2\16\3\uffff\1\16",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "",
            "\62\10\4\uffff\10\10\20\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\17\1\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "",
            "\62\10\4\uffff\10\10\20\uffff\5\10\15\uffff\1\16\6\uffff\1\10\33\uffff\1\10\1\uffff\1\10\2\uffff\1\10\1\uffff\2\10\1\uffff\2\10\3\uffff\1\10"
    };
    static final short[] dfa_206 = DFA.unpackEncodedString(dfa_206s);
    static final char[] dfa_207 = DFA.unpackEncodedStringToUnsignedChars(dfa_207s);
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[][] dfa_211 = unpackEncodedStringArray(dfa_211s);
    class DFA307 extends DFA {
        public DFA307(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 307;
            this.eot = dfa_206;
            this.eof = dfa_206;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "18139:5: ( (lv_declaredTypeRefNode_1_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA309 extends DFA {
        public DFA309(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 309;
            this.eot = dfa_206;
            this.eof = dfa_206;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "18259:5: ( (lv_declaredTypeRefNode_1_0= ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    static final String dfa_212s = "\1\u0096\1\uffff\5\u0087\4\160\1\uffff";
    static final String[] dfa_213s = {
            "\1\12\1\10\1\13\1\uffff\1\4\4\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\4\uffff\1\1\2\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\2\1\1\7\1\1\6\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\7\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\25\uffff\1\6\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final char[] dfa_212 = DFA.unpackEncodedStringToUnsignedChars(dfa_212s);
    static final short[][] dfa_213 = unpackEncodedStringArray(dfa_213s);
    class DFA311 extends DFA {
        public DFA311(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 311;
            this.eot = dfa_59;
            this.eof = dfa_200;
            this.min = dfa_201;
            this.max = dfa_212;
            this.accept = dfa_203;
            this.special = dfa_64;
            this.transition = dfa_213;
        }
        public String getDescription() {
            return "18355:3: ( (lv_declaredTypeRefNode_0_0= ruleTypeReferenceNode ) )?";
        }
    }
    static final String[] dfa_214s = {
            "\1\12\1\10\1\13\1\uffff\1\4\4\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\4\uffff\1\1\2\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\2\1\1\7\1\1\6\uffff\2\13\1\uffff\2\13\22\uffff\1\13\3\uffff\1\13\5\uffff\1\1\2\uffff\1\1\1\uffff\1\1\7\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\25\uffff\1\6\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\3\1\1\uffff\5\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\22\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\26\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_214 = unpackEncodedStringArray(dfa_214s);
    class DFA312 extends DFA {
        public DFA312(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 312;
            this.eot = dfa_59;
            this.eof = dfa_59;
            this.min = dfa_201;
            this.max = dfa_212;
            this.accept = dfa_203;
            this.special = dfa_64;
            this.transition = dfa_214;
        }
        public String getDescription() {
            return "18406:3: ( (lv_declaredTypeRefNode_0_0= ruleTypeReferenceNode ) )?";
        }
    }
    static final String dfa_215s = "\72\uffff";
    static final String dfa_216s = "\2\4\70\uffff";
    static final String dfa_217s = "\2\u0096\70\uffff";
    static final String dfa_218s = "\2\uffff\1\3\66\2\1\1";
    static final String dfa_219s = "\1\uffff\1\0\70\uffff}>";
    static final String[] dfa_220s = {
            "\3\2\1\uffff\5\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\15\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\41\1\36\1\15\2\uffff\1\14\1\65\3\uffff\1\35\1\13\2\uffff\1\43\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\66\1\uffff\1\54\1\5\1\uffff\1\25\1\uffff\1\7\1\27\3\uffff\1\20\1\56\1\4\1\53\1\24\7\uffff\1\10\1\12\1\3\1\40\1\11\12\uffff\1\60\7\uffff\1\17\3\uffff\1\22\5\uffff\1\63\5\uffff\1\71\1\57\2\uffff\1\42\3\uffff\1\64\1\61\2\uffff\1\62\15\uffff\1\70\1\67\11\uffff\1\6\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final char[] dfa_216 = DFA.unpackEncodedStringToUnsignedChars(dfa_216s);
    static final char[] dfa_217 = DFA.unpackEncodedStringToUnsignedChars(dfa_217s);
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final short[] dfa_219 = DFA.unpackEncodedString(dfa_219s);
    static final short[][] dfa_220 = unpackEncodedStringArray(dfa_220s);
    class DFA343 extends DFA {
        public DFA343(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 343;
            this.eot = dfa_215;
            this.eof = dfa_215;
            this.min = dfa_216;
            this.max = dfa_217;
            this.accept = dfa_218;
            this.special = dfa_219;
            this.transition = dfa_220;
        }
        public String getDescription() {
            return "20485:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= ruleMemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= ruleArguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_16_0= QuestionMarkFullStop ) )? ( (lv_template_17_0= ruleTemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_18= rulePrimaryExpression ( ( () this_IndexedAccessExpressionTail_20= ruleIndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_22= ruleParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_24_0= QuestionMarkFullStop ) )? ( (lv_template_25_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA343_1 = input.LA(1);
                        int index343_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA343_1>=4 && LA343_1<=150 && (s=T2S.M_26[LA343_1-(4)])>=0) && (synpred194_InternalN4JSParser())) { /* 54 cases */ }
                        else if ( (LA343_1==FullStop) && (synpred193_InternalN4JSParser())) {s = 57;}
                        input.seek(index343_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 343, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_221s = "\71\uffff";
    static final String dfa_222s = "\2\4\67\uffff";
    static final String dfa_223s = "\2\u0096\67\uffff";
    static final String dfa_224s = "\2\uffff\1\3\1\1\65\2";
    static final String dfa_225s = "\1\uffff\1\0\67\uffff}>";
    static final String[] dfa_226s = {
            "\3\2\1\uffff\5\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\15\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\41\1\36\1\15\2\uffff\1\14\1\65\3\uffff\1\35\1\13\2\uffff\1\43\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\56\1\5\1\53\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\12\uffff\1\60\7\uffff\1\17\3\uffff\1\22\5\uffff\1\63\5\uffff\1\3\1\57\2\uffff\1\42\3\uffff\1\64\1\61\2\uffff\1\62\15\uffff\1\70\1\67\11\uffff\1\7\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_221 = DFA.unpackEncodedString(dfa_221s);
    static final char[] dfa_222 = DFA.unpackEncodedStringToUnsignedChars(dfa_222s);
    static final char[] dfa_223 = DFA.unpackEncodedStringToUnsignedChars(dfa_223s);
    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final short[] dfa_225 = DFA.unpackEncodedString(dfa_225s);
    static final short[][] dfa_226 = unpackEncodedStringArray(dfa_226s);
    class DFA351 extends DFA {
        public DFA351(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 351;
            this.eot = dfa_221;
            this.eof = dfa_221;
            this.min = dfa_222;
            this.max = dfa_223;
            this.accept = dfa_224;
            this.special = dfa_225;
            this.transition = dfa_226;
        }
        public String getDescription() {
            return "20807:2: ( ( ( ( ( () New FullStop ) )=> ( () otherlv_1= New otherlv_2= FullStop ) ) otherlv_3= Target ) | ( ( ( ( () New ) )=> ( () otherlv_5= New ) ) ( (lv_callee_6_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>this_ConcreteTypeArguments_7= ruleConcreteTypeArguments[$current] )? ( ( ( ( LeftParenthesis ) )=> (lv_withArgs_8_0= LeftParenthesis ) ) (this_Arguments_9= norm1_Arguments[$current] )? otherlv_10= RightParenthesis ( ( () this_IndexedAccessExpressionTail_12= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_14= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_16_0= QuestionMarkFullStop ) )? ( (lv_template_17_0= norm1_TemplateLiteral ) ) ) )* )? ) | (this_PrimaryExpression_18= norm1_PrimaryExpression ( ( () this_IndexedAccessExpressionTail_20= norm1_IndexedAccessExpressionTail[$current] ) | ( () this_ParameterizedPropertyAccessExpressionTail_22= norm1_ParameterizedPropertyAccessExpressionTail[$current] ) | ( () ( (lv_optionalChaining_24_0= QuestionMarkFullStop ) )? ( (lv_template_25_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA351_1 = input.LA(1);
                        int index351_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_1==FullStop) && (synpred197_InternalN4JSParser())) {s = 3;}
                        else if ((LA351_1>=4 && LA351_1<=150 && (s=T2S.M_27[LA351_1-(4)])>=0) && (synpred198_InternalN4JSParser())) { /* 54 cases */ }
                        input.seek(index351_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 351, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_227s = "\1\1\102\uffff";
    static final String dfa_228s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_229s = "\1\u009a\1\uffff\1\u0096\100\uffff";
    static final String dfa_230s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_231s = "\1\0\1\uffff\1\1\100\uffff}>";
    static final String[] dfa_232s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\47\uffff\1\1\1\uffff\1\1",
            "",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\42\1\37\1\16\2\uffff\1\15\1\66\3\uffff\1\36\1\14\1\72\1\uffff\1\44\1\40\1\uffff\1\17\1\uffff\1\24\1\74\1\33\1\32\2\uffff\1\67\1\uffff\1\55\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\57\1\5\1\54\1\25\1\73\6\uffff\1\11\1\13\1\4\1\41\1\12\7\uffff\1\75\1\uffff\1\76\1\61\7\uffff\1\20\3\uffff\1\23\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\2\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\12\uffff\1\71\1\70\11\uffff\1\7\1\uffff\1\46\2\uffff\1\45\1\uffff\1\47\1\50\1\51\1\52\1\53\3\uffff\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_227 = DFA.unpackEncodedString(dfa_227s);
    static final char[] dfa_228 = DFA.unpackEncodedStringToUnsignedChars(dfa_228s);
    static final char[] dfa_229 = DFA.unpackEncodedStringToUnsignedChars(dfa_229s);
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[] dfa_231 = DFA.unpackEncodedString(dfa_231s);
    static final short[][] dfa_232 = unpackEncodedStringArray(dfa_232s);
    class DFA366 extends DFA {
        public DFA366(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 366;
            this.eot = dfa_39;
            this.eof = dfa_227;
            this.min = dfa_228;
            this.max = dfa_229;
            this.accept = dfa_230;
            this.special = dfa_231;
            this.transition = dfa_232;
        }
        public String getDescription() {
            return "()* loopback of 21952:3: ( ( ( ( () ( ( ruleAdditiveOperator ) ) ) )=> ( () ( (lv_op_2_0= ruleAdditiveOperator ) ) ) ) ( (lv_rhs_3_0= ruleMultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA366_0 = input.LA(1);
                        int index366_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA366_0==EOF||LA366_0==Instanceof||LA366_0==ExclamationMarkEqualsSignEqualsSign||(LA366_0>=LessThanSignLessThanSignEqualsSign && LA366_0<=EqualsSignEqualsSignEqualsSign)||(LA366_0>=ExclamationMarkEqualsSign && LA366_0<=AsteriskEqualsSign)||LA366_0==PlusSignEqualsSign||(LA366_0>=SolidusEqualsSign && LA366_0<=EqualsSignEqualsSign)||LA366_0==QuestionMarkQuestionMark||LA366_0==CircumflexAccentEqualsSign||(LA366_0>=In && LA366_0<=VerticalLineVerticalLine)||LA366_0==Ampersand||LA366_0==RightParenthesis||LA366_0==Comma||(LA366_0>=Colon && LA366_0<=QuestionMark)||(LA366_0>=RightSquareBracket && LA366_0<=CircumflexAccent)||(LA366_0>=VerticalLine && LA366_0<=RightCurlyBracket)||LA366_0==RULE_ML_COMMENT||LA366_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA366_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA366_0==PlusSign) && (synpred207_InternalN4JSParser())) {s = 3;}
                        input.seek(index366_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA366_2 = input.LA(1);
                        int index366_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA366_2==EqualsSign) ) {s = 1;}
                        else if ((LA366_2>=4 && LA366_2<=150 && (s=T2S.M_28[LA366_2-(4)])>=0) && (synpred207_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index366_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 366, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_233s = "\102\uffff";
    static final String dfa_234s = "\1\1\101\uffff";
    static final String dfa_235s = "\1\7\1\uffff\1\4\77\uffff";
    static final String dfa_236s = "\1\u009a\1\uffff\1\u0096\77\uffff";
    static final String dfa_237s = "\1\uffff\1\2\1\uffff\77\1";
    static final String dfa_238s = "\1\1\1\uffff\1\0\77\uffff}>";
    static final String[] dfa_239s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\47\uffff\1\1\1\uffff\1\1",
            "",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\41\1\36\1\15\2\uffff\1\14\1\65\3\uffff\1\35\1\13\1\71\1\uffff\1\43\1\37\1\uffff\1\16\1\uffff\1\23\1\73\1\32\1\31\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\56\1\5\1\53\1\24\1\72\6\uffff\1\10\1\12\1\4\1\40\1\11\7\uffff\1\74\1\uffff\1\75\1\60\7\uffff\1\17\3\uffff\1\22\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\42\1\1\2\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\12\uffff\1\70\1\67\11\uffff\1\7\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_233 = DFA.unpackEncodedString(dfa_233s);
    static final short[] dfa_234 = DFA.unpackEncodedString(dfa_234s);
    static final char[] dfa_235 = DFA.unpackEncodedStringToUnsignedChars(dfa_235s);
    static final char[] dfa_236 = DFA.unpackEncodedStringToUnsignedChars(dfa_236s);
    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final short[] dfa_238 = DFA.unpackEncodedString(dfa_238s);
    static final short[][] dfa_239 = unpackEncodedStringArray(dfa_239s);
    class DFA367 extends DFA {
        public DFA367(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 367;
            this.eot = dfa_233;
            this.eof = dfa_234;
            this.min = dfa_235;
            this.max = dfa_236;
            this.accept = dfa_237;
            this.special = dfa_238;
            this.transition = dfa_239;
        }
        public String getDescription() {
            return "()* loopback of 22034:3: ( ( ( ( () ( ( ruleAdditiveOperator ) ) ) )=> ( () ( (lv_op_2_0= ruleAdditiveOperator ) ) ) ) ( (lv_rhs_3_0= norm1_MultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA367_2 = input.LA(1);
                        int index367_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA367_2==EqualsSign) ) {s = 1;}
                        else if ((LA367_2>=4 && LA367_2<=150 && (s=T2S.M_29[LA367_2-(4)])>=0) && (synpred208_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index367_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA367_0 = input.LA(1);
                        int index367_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA367_0==EOF||LA367_0==Instanceof||LA367_0==ExclamationMarkEqualsSignEqualsSign||(LA367_0>=LessThanSignLessThanSignEqualsSign && LA367_0<=EqualsSignEqualsSignEqualsSign)||(LA367_0>=ExclamationMarkEqualsSign && LA367_0<=AsteriskEqualsSign)||LA367_0==PlusSignEqualsSign||(LA367_0>=SolidusEqualsSign && LA367_0<=EqualsSignEqualsSign)||LA367_0==QuestionMarkQuestionMark||LA367_0==CircumflexAccentEqualsSign||(LA367_0>=In && LA367_0<=VerticalLineVerticalLine)||LA367_0==Ampersand||LA367_0==RightParenthesis||LA367_0==Comma||(LA367_0>=Colon && LA367_0<=QuestionMark)||(LA367_0>=RightSquareBracket && LA367_0<=CircumflexAccent)||(LA367_0>=VerticalLine && LA367_0<=RightCurlyBracket)||LA367_0==RULE_ML_COMMENT||LA367_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA367_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA367_0==PlusSign) && (synpred208_InternalN4JSParser())) {s = 3;}
                        input.seek(index367_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 367, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_240s = "\105\uffff";
    static final String dfa_241s = "\1\1\104\uffff";
    static final String dfa_242s = "\1\7\1\uffff\1\4\1\uffff\2\4\77\uffff";
    static final String dfa_243s = "\1\u009a\1\uffff\1\u0096\1\uffff\2\u0096\77\uffff";
    static final String dfa_244s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\77\1";
    static final String dfa_245s = "\1\0\3\uffff\1\1\1\2\77\uffff}>";
    static final String[] dfa_246s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\47\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\5\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\7\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\12\uffff\2\1\11\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\44\1\41\1\20\2\uffff\1\17\1\70\3\uffff\1\40\1\16\1\74\1\uffff\1\46\1\42\1\uffff\1\21\1\uffff\1\26\1\76\1\35\1\34\2\uffff\1\71\1\uffff\1\57\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\61\1\7\1\56\1\27\1\75\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\77\1\uffff\1\100\1\63\7\uffff\1\22\3\uffff\1\25\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\1\1\5\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\12\uffff\1\73\1\72\11\uffff\1\11\1\uffff\1\50\2\uffff\1\47\1\uffff\1\51\1\52\1\53\1\54\1\55\3\uffff\1\60",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\44\1\41\1\20\2\uffff\1\17\1\70\3\uffff\1\40\1\16\1\74\1\uffff\1\46\1\42\1\uffff\1\21\1\uffff\1\26\1\76\1\35\1\34\2\uffff\1\71\1\uffff\1\57\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\61\1\7\1\56\1\27\1\75\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\77\1\uffff\1\100\1\63\7\uffff\1\22\3\uffff\1\25\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\1\2\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\12\uffff\1\73\1\72\11\uffff\1\11\1\uffff\1\50\2\uffff\1\47\1\uffff\1\51\1\52\1\53\1\54\1\55\3\uffff\1\60",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_240 = DFA.unpackEncodedString(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final char[] dfa_242 = DFA.unpackEncodedStringToUnsignedChars(dfa_242s);
    static final char[] dfa_243 = DFA.unpackEncodedStringToUnsignedChars(dfa_243s);
    static final short[] dfa_244 = DFA.unpackEncodedString(dfa_244s);
    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[][] dfa_246 = unpackEncodedStringArray(dfa_246s);
    class DFA368 extends DFA {
        public DFA368(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 368;
            this.eot = dfa_240;
            this.eof = dfa_241;
            this.min = dfa_242;
            this.max = dfa_243;
            this.accept = dfa_244;
            this.special = dfa_245;
            this.transition = dfa_246;
        }
        public String getDescription() {
            return "()* loopback of 22122:3: ( ( ( () ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA368_0 = input.LA(1);
                        int index368_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA368_0==EOF||LA368_0==Instanceof||LA368_0==ExclamationMarkEqualsSignEqualsSign||(LA368_0>=LessThanSignLessThanSignEqualsSign && LA368_0<=EqualsSignEqualsSignEqualsSign)||(LA368_0>=ExclamationMarkEqualsSign && LA368_0<=AsteriskEqualsSign)||LA368_0==PlusSignEqualsSign||LA368_0==SolidusEqualsSign||(LA368_0>=LessThanSignEqualsSign && LA368_0<=EqualsSignEqualsSign)||LA368_0==QuestionMarkQuestionMark||LA368_0==CircumflexAccentEqualsSign||(LA368_0>=In && LA368_0<=VerticalLineVerticalLine)||LA368_0==Ampersand||LA368_0==RightParenthesis||(LA368_0>=Comma && LA368_0<=HyphenMinus)||(LA368_0>=Colon && LA368_0<=EqualsSign)||LA368_0==QuestionMark||(LA368_0>=RightSquareBracket && LA368_0<=CircumflexAccent)||(LA368_0>=VerticalLine && LA368_0<=RightCurlyBracket)||LA368_0==RULE_ML_COMMENT||LA368_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA368_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA368_0==LessThanSignLessThanSign) && (synpred209_InternalN4JSParser())) {s = 3;}
                        input.seek(index368_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA368_4 = input.LA(1);
                        int index368_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA368_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA368_4==EqualsSign) ) {s = 1;}
                        else if ((LA368_4>=4 && LA368_4<=150 && (s=T2S.M_30[LA368_4-(4)])>=0) && (synpred209_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index368_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA368_5 = input.LA(1);
                        int index368_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA368_5==EqualsSign) ) {s = 1;}
                        else if ((LA368_5>=4 && LA368_5<=150 && (s=T2S.M_31[LA368_5-(4)])>=0) && (synpred209_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index368_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 368, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_247s = "\1\1\103\uffff";
    static final String dfa_248s = "\1\7\1\uffff\1\4\1\uffff\2\4\76\uffff";
    static final String dfa_249s = "\1\u009a\1\uffff\1\u0096\1\uffff\2\u0096\76\uffff";
    static final String dfa_250s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\76\1";
    static final String dfa_251s = "\1\2\3\uffff\1\1\1\0\76\uffff}>";
    static final String[] dfa_252s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\47\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\5\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\7\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\12\uffff\2\1\11\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\43\1\40\1\17\2\uffff\1\16\1\67\3\uffff\1\37\1\15\1\73\1\uffff\1\45\1\41\1\uffff\1\20\1\uffff\1\25\1\75\1\34\1\33\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\60\1\7\1\55\1\26\1\74\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\76\1\uffff\1\77\1\62\7\uffff\1\21\3\uffff\1\24\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\1\5\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\12\uffff\1\72\1\71\11\uffff\1\11\1\uffff\1\47\2\uffff\1\46\1\uffff\1\50\1\51\1\52\1\53\1\54\3\uffff\1\57",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\43\1\40\1\17\2\uffff\1\16\1\67\3\uffff\1\37\1\15\1\73\1\uffff\1\45\1\41\1\uffff\1\20\1\uffff\1\25\1\75\1\34\1\33\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\60\1\7\1\55\1\26\1\74\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\76\1\uffff\1\77\1\62\7\uffff\1\21\3\uffff\1\24\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\2\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\12\uffff\1\72\1\71\11\uffff\1\11\1\uffff\1\47\2\uffff\1\46\1\uffff\1\50\1\51\1\52\1\53\1\54\3\uffff\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_247 = DFA.unpackEncodedString(dfa_247s);
    static final char[] dfa_248 = DFA.unpackEncodedStringToUnsignedChars(dfa_248s);
    static final char[] dfa_249 = DFA.unpackEncodedStringToUnsignedChars(dfa_249s);
    static final short[] dfa_250 = DFA.unpackEncodedString(dfa_250s);
    static final short[] dfa_251 = DFA.unpackEncodedString(dfa_251s);
    static final short[][] dfa_252 = unpackEncodedStringArray(dfa_252s);
    class DFA369 extends DFA {
        public DFA369(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 369;
            this.eot = dfa_125;
            this.eof = dfa_247;
            this.min = dfa_248;
            this.max = dfa_249;
            this.accept = dfa_250;
            this.special = dfa_251;
            this.transition = dfa_252;
        }
        public String getDescription() {
            return "()* loopback of 22330:3: ( ( ( () ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA369_5 = input.LA(1);
                        int index369_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA369_5==EqualsSign) ) {s = 1;}
                        else if ((LA369_5>=4 && LA369_5<=150 && (s=T2S.M_32[LA369_5-(4)])>=0) && (synpred211_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index369_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA369_4 = input.LA(1);
                        int index369_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA369_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA369_4==EqualsSign) ) {s = 1;}
                        else if ((LA369_4>=4 && LA369_4<=150 && (s=T2S.M_33[LA369_4-(4)])>=0) && (synpred211_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index369_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA369_0 = input.LA(1);
                        int index369_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA369_0==EOF||LA369_0==Instanceof||LA369_0==ExclamationMarkEqualsSignEqualsSign||(LA369_0>=LessThanSignLessThanSignEqualsSign && LA369_0<=EqualsSignEqualsSignEqualsSign)||(LA369_0>=ExclamationMarkEqualsSign && LA369_0<=AsteriskEqualsSign)||LA369_0==PlusSignEqualsSign||LA369_0==SolidusEqualsSign||(LA369_0>=LessThanSignEqualsSign && LA369_0<=EqualsSignEqualsSign)||LA369_0==QuestionMarkQuestionMark||LA369_0==CircumflexAccentEqualsSign||(LA369_0>=In && LA369_0<=VerticalLineVerticalLine)||LA369_0==Ampersand||LA369_0==RightParenthesis||(LA369_0>=Comma && LA369_0<=HyphenMinus)||(LA369_0>=Colon && LA369_0<=EqualsSign)||LA369_0==QuestionMark||(LA369_0>=RightSquareBracket && LA369_0<=CircumflexAccent)||(LA369_0>=VerticalLine && LA369_0<=RightCurlyBracket)||LA369_0==RULE_ML_COMMENT||LA369_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA369_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA369_0==LessThanSignLessThanSign) && (synpred211_InternalN4JSParser())) {s = 3;}
                        input.seek(index369_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 369, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_253s = "\106\uffff";
    static final String dfa_254s = "\1\1\105\uffff";
    static final String dfa_255s = "\1\7\1\uffff\1\4\103\uffff";
    static final String dfa_256s = "\1\160\1\uffff\1\u0096\103\uffff";
    static final String dfa_257s = "\1\uffff\1\2\1\uffff\103\1";
    static final String dfa_258s = "\1\0\1\uffff\1\1\103\uffff}>";
    static final String[] dfa_259s = {
            "\1\5\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\45\1\42\1\21\2\uffff\1\20\1\71\3\uffff\1\41\1\17\1\75\1\uffff\1\47\1\43\1\uffff\1\22\1\uffff\1\27\1\77\1\36\1\35\2\uffff\1\72\1\uffff\1\60\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\62\1\10\1\57\1\30\1\76\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\100\1\uffff\1\101\1\64\7\uffff\1\23\3\uffff\1\26\2\uffff\1\105\2\uffff\1\67\2\uffff\1\102\1\uffff\1\103\1\uffff\1\63\2\uffff\1\46\1\6\1\1\1\uffff\1\70\1\65\2\uffff\1\66\2\uffff\1\104\12\uffff\1\74\1\73\11\uffff\1\12\1\uffff\1\51\2\uffff\1\50\1\uffff\1\52\1\53\1\54\1\55\1\56\3\uffff\1\61",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_253 = DFA.unpackEncodedString(dfa_253s);
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final char[] dfa_255 = DFA.unpackEncodedStringToUnsignedChars(dfa_255s);
    static final char[] dfa_256 = DFA.unpackEncodedStringToUnsignedChars(dfa_256s);
    static final short[] dfa_257 = DFA.unpackEncodedString(dfa_257s);
    static final short[] dfa_258 = DFA.unpackEncodedString(dfa_258s);
    static final short[][] dfa_259 = unpackEncodedStringArray(dfa_259s);
    class DFA372 extends DFA {
        public DFA372(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 372;
            this.eot = dfa_253;
            this.eof = dfa_254;
            this.min = dfa_255;
            this.max = dfa_256;
            this.accept = dfa_257;
            this.special = dfa_258;
            this.transition = dfa_259;
        }
        public String getDescription() {
            return "()* loopback of 22586:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA372_0 = input.LA(1);
                        int index372_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA372_0==EOF||LA372_0==ExclamationMarkEqualsSignEqualsSign||(LA372_0>=LessThanSignLessThanSignEqualsSign && LA372_0<=EqualsSignEqualsSignEqualsSign)||(LA372_0>=ExclamationMarkEqualsSign && LA372_0<=AsteriskEqualsSign)||LA372_0==PlusSignEqualsSign||LA372_0==SolidusEqualsSign||LA372_0==EqualsSignEqualsSign||LA372_0==QuestionMarkQuestionMark||LA372_0==CircumflexAccentEqualsSign||(LA372_0>=In && LA372_0<=VerticalLineVerticalLine)||LA372_0==Ampersand||(LA372_0>=Comma && LA372_0<=HyphenMinus)||LA372_0==Semicolon||LA372_0==EqualsSign||LA372_0==QuestionMark||LA372_0==CircumflexAccent||(LA372_0>=VerticalLine && LA372_0<=RightCurlyBracket)) ) {s = 1;}
                        else if ( (LA372_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA372_0==LessThanSign) && (synpred213_InternalN4JSParser())) {s = 3;}
                        else if ( (LA372_0==LessThanSignEqualsSign) && (synpred213_InternalN4JSParser())) {s = 4;}
                        else if ( (LA372_0==Instanceof) && (synpred213_InternalN4JSParser())) {s = 5;}
                        input.seek(index372_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA372_2 = input.LA(1);
                        int index372_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA372_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA372_2>=4 && LA372_2<=150 && (s=T2S.M_34[LA372_2-(4)])>=0) && (synpred213_InternalN4JSParser())) { /* 65 cases */ }
                        input.seek(index372_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 372, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_260s = "\107\uffff";
    static final String dfa_261s = "\1\1\106\uffff";
    static final String dfa_262s = "\1\7\1\uffff\1\4\104\uffff";
    static final String dfa_263s = "\1\u009a\1\uffff\1\u0096\104\uffff";
    static final String dfa_264s = "\1\uffff\1\2\1\uffff\104\1";
    static final String dfa_265s = "\1\0\1\uffff\1\1\104\uffff}>";
    static final String[] dfa_266s = {
            "\1\5\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\47\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\46\1\43\1\22\2\uffff\1\21\1\72\3\uffff\1\42\1\20\1\76\1\uffff\1\50\1\44\1\uffff\1\23\1\uffff\1\30\1\100\1\37\1\36\2\uffff\1\73\1\uffff\1\61\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\63\1\11\1\60\1\31\1\77\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\101\1\uffff\1\102\1\65\7\uffff\1\24\3\uffff\1\27\2\uffff\1\106\2\uffff\1\70\2\uffff\1\103\1\uffff\1\104\1\uffff\1\64\2\uffff\1\47\1\7\1\1\1\uffff\1\71\1\66\2\uffff\1\67\2\uffff\1\105\12\uffff\1\75\1\74\11\uffff\1\13\1\uffff\1\52\2\uffff\1\51\1\uffff\1\53\1\54\1\55\1\56\1\57\3\uffff\1\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_260 = DFA.unpackEncodedString(dfa_260s);
    static final short[] dfa_261 = DFA.unpackEncodedString(dfa_261s);
    static final char[] dfa_262 = DFA.unpackEncodedStringToUnsignedChars(dfa_262s);
    static final char[] dfa_263 = DFA.unpackEncodedStringToUnsignedChars(dfa_263s);
    static final short[] dfa_264 = DFA.unpackEncodedString(dfa_264s);
    static final short[] dfa_265 = DFA.unpackEncodedString(dfa_265s);
    static final short[][] dfa_266 = unpackEncodedStringArray(dfa_266s);
    class DFA373 extends DFA {
        public DFA373(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 373;
            this.eot = dfa_260;
            this.eof = dfa_261;
            this.min = dfa_262;
            this.max = dfa_263;
            this.accept = dfa_264;
            this.special = dfa_265;
            this.transition = dfa_266;
        }
        public String getDescription() {
            return "()* loopback of 22794:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA373_0 = input.LA(1);
                        int index373_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA373_0==EOF||LA373_0==ExclamationMarkEqualsSignEqualsSign||(LA373_0>=LessThanSignLessThanSignEqualsSign && LA373_0<=EqualsSignEqualsSignEqualsSign)||(LA373_0>=ExclamationMarkEqualsSign && LA373_0<=AsteriskEqualsSign)||LA373_0==PlusSignEqualsSign||LA373_0==SolidusEqualsSign||LA373_0==EqualsSignEqualsSign||LA373_0==QuestionMarkQuestionMark||LA373_0==CircumflexAccentEqualsSign||(LA373_0>=VerticalLineEqualsSign && LA373_0<=VerticalLineVerticalLine)||LA373_0==Ampersand||LA373_0==RightParenthesis||(LA373_0>=Comma && LA373_0<=HyphenMinus)||(LA373_0>=Colon && LA373_0<=Semicolon)||LA373_0==EqualsSign||LA373_0==QuestionMark||(LA373_0>=RightSquareBracket && LA373_0<=CircumflexAccent)||(LA373_0>=VerticalLine && LA373_0<=RightCurlyBracket)||LA373_0==RULE_ML_COMMENT||LA373_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA373_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA373_0==LessThanSign) && (synpred215_InternalN4JSParser())) {s = 3;}
                        else if ( (LA373_0==LessThanSignEqualsSign) && (synpred215_InternalN4JSParser())) {s = 4;}
                        else if ( (LA373_0==Instanceof) && (synpred215_InternalN4JSParser())) {s = 5;}
                        else if ( (LA373_0==In) && (synpred215_InternalN4JSParser())) {s = 6;}
                        input.seek(index373_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA373_2 = input.LA(1);
                        int index373_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA373_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA373_2>=4 && LA373_2<=150 && (s=T2S.M_35[LA373_2-(4)])>=0) && (synpred215_InternalN4JSParser())) { /* 65 cases */ }
                        input.seek(index373_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 373, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_267s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_268s = "\1\157\1\uffff\1\u0096\102\uffff";
    static final String dfa_269s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_270s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_271s = {
            "\1\5\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\44\1\41\1\20\2\uffff\1\17\1\70\3\uffff\1\40\1\16\1\74\1\uffff\1\46\1\42\1\uffff\1\21\1\uffff\1\26\1\76\1\35\1\34\2\uffff\1\71\1\uffff\1\57\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\61\1\10\1\56\1\27\1\75\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\77\1\uffff\1\100\1\63\7\uffff\1\22\3\uffff\1\25\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\6\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\12\uffff\1\73\1\72\11\uffff\1\12\1\uffff\1\50\2\uffff\1\47\1\uffff\1\51\1\52\1\53\1\54\1\55\3\uffff\1\60",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_267 = DFA.unpackEncodedStringToUnsignedChars(dfa_267s);
    static final char[] dfa_268 = DFA.unpackEncodedStringToUnsignedChars(dfa_268s);
    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);
    static final short[][] dfa_271 = unpackEncodedStringArray(dfa_271s);
    class DFA374 extends DFA {
        public DFA374(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 374;
            this.eot = dfa_240;
            this.eof = dfa_241;
            this.min = dfa_267;
            this.max = dfa_268;
            this.accept = dfa_269;
            this.special = dfa_270;
            this.transition = dfa_271;
        }
        public String getDescription() {
            return "()* loopback of 23002:3: ( ( ( () ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA374_0 = input.LA(1);
                        int index374_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA374_0==EOF||LA374_0==ExclamationMarkEqualsSignEqualsSign||(LA374_0>=LessThanSignLessThanSignEqualsSign && LA374_0<=EqualsSignEqualsSignEqualsSign)||(LA374_0>=ExclamationMarkEqualsSign && LA374_0<=AsteriskEqualsSign)||LA374_0==PlusSignEqualsSign||LA374_0==SolidusEqualsSign||LA374_0==EqualsSignEqualsSign||LA374_0==QuestionMarkQuestionMark||LA374_0==CircumflexAccentEqualsSign||(LA374_0>=In && LA374_0<=VerticalLineVerticalLine)||LA374_0==Ampersand||(LA374_0>=Comma && LA374_0<=HyphenMinus)||LA374_0==Semicolon||LA374_0==EqualsSign||LA374_0==QuestionMark||LA374_0==CircumflexAccent||LA374_0==VerticalLine) ) {s = 1;}
                        else if ( (LA374_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA374_0==LessThanSign) && (synpred217_InternalN4JSParser())) {s = 3;}
                        else if ( (LA374_0==LessThanSignEqualsSign) && (synpred217_InternalN4JSParser())) {s = 4;}
                        else if ( (LA374_0==Instanceof) && (synpred217_InternalN4JSParser())) {s = 5;}
                        input.seek(index374_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA374_2 = input.LA(1);
                        int index374_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA374_2>=4 && LA374_2<=150 && (s=T2S.M_36[LA374_2-(4)])>=0) && (synpred217_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA374_2==GreaterThanSign) ) {s = 1;}
                        input.seek(index374_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 374, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_272s = "\1\u009a\1\uffff\1\u0096\103\uffff";
    static final String[] dfa_273s = {
            "\1\5\56\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\47\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\45\1\42\1\21\2\uffff\1\20\1\71\3\uffff\1\41\1\17\1\75\1\uffff\1\47\1\43\1\uffff\1\22\1\uffff\1\27\1\77\1\36\1\35\2\uffff\1\72\1\uffff\1\60\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\62\1\11\1\57\1\30\1\76\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\100\1\uffff\1\101\1\64\7\uffff\1\23\3\uffff\1\26\2\uffff\1\105\2\uffff\1\67\2\uffff\1\102\1\uffff\1\103\1\uffff\1\63\2\uffff\1\46\1\7\1\1\1\uffff\1\70\1\65\2\uffff\1\66\2\uffff\1\104\12\uffff\1\74\1\73\11\uffff\1\13\1\uffff\1\51\2\uffff\1\50\1\uffff\1\52\1\53\1\54\1\55\1\56\3\uffff\1\61",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_272 = DFA.unpackEncodedStringToUnsignedChars(dfa_272s);
    static final short[][] dfa_273 = unpackEncodedStringArray(dfa_273s);
    class DFA375 extends DFA {
        public DFA375(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 375;
            this.eot = dfa_253;
            this.eof = dfa_254;
            this.min = dfa_255;
            this.max = dfa_272;
            this.accept = dfa_257;
            this.special = dfa_258;
            this.transition = dfa_273;
        }
        public String getDescription() {
            return "()* loopback of 23208:3: ( ( ( () ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( () ( (lv_op_2_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_rhs_3_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA375_0 = input.LA(1);
                        int index375_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA375_0==EOF||LA375_0==ExclamationMarkEqualsSignEqualsSign||(LA375_0>=LessThanSignLessThanSignEqualsSign && LA375_0<=EqualsSignEqualsSignEqualsSign)||(LA375_0>=ExclamationMarkEqualsSign && LA375_0<=AsteriskEqualsSign)||LA375_0==PlusSignEqualsSign||LA375_0==SolidusEqualsSign||LA375_0==EqualsSignEqualsSign||LA375_0==QuestionMarkQuestionMark||LA375_0==CircumflexAccentEqualsSign||(LA375_0>=VerticalLineEqualsSign && LA375_0<=VerticalLineVerticalLine)||LA375_0==Ampersand||LA375_0==RightParenthesis||(LA375_0>=Comma && LA375_0<=HyphenMinus)||(LA375_0>=Colon && LA375_0<=Semicolon)||LA375_0==EqualsSign||LA375_0==QuestionMark||(LA375_0>=RightSquareBracket && LA375_0<=CircumflexAccent)||(LA375_0>=VerticalLine && LA375_0<=RightCurlyBracket)||LA375_0==RULE_ML_COMMENT||LA375_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA375_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA375_0==LessThanSign) && (synpred219_InternalN4JSParser())) {s = 3;}
                        else if ( (LA375_0==LessThanSignEqualsSign) && (synpred219_InternalN4JSParser())) {s = 4;}
                        else if ( (LA375_0==Instanceof) && (synpred219_InternalN4JSParser())) {s = 5;}
                        else if ( (LA375_0==In) && (synpred219_InternalN4JSParser())) {s = 6;}
                        input.seek(index375_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA375_2 = input.LA(1);
                        int index375_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA375_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA375_2>=4 && LA375_2<=150 && (s=T2S.M_37[LA375_2-(4)])>=0) && (synpred219_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index375_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 375, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_274s = "\1\4\36\0\44\uffff";
    static final String dfa_275s = "\1\u0096\36\0\44\uffff";
    static final String dfa_276s = "\37\uffff\1\4\40\uffff\1\1\1\3\1\2";
    static final String dfa_277s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\44\uffff}>";
    static final String[] dfa_278s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\36\1\33\1\14\2\uffff\1\13\1\37\3\uffff\1\32\1\12\1\37\1\uffff\1\37\1\34\1\uffff\1\15\1\uffff\1\22\1\37\1\4\1\1\2\uffff\1\37\1\uffff\2\37\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\37\1\23\1\37\6\uffff\1\7\1\11\1\37\1\35\1\10\7\uffff\1\37\1\uffff\2\37\7\uffff\1\16\3\uffff\1\21\2\uffff\1\37\2\uffff\1\3\2\uffff\1\37\1\uffff\1\37\1\uffff\1\37\2\uffff\1\37\3\uffff\1\2\1\37\2\uffff\1\37\2\uffff\1\37\12\uffff\2\37\11\uffff\1\5\1\uffff\1\37\2\uffff\1\37\1\uffff\5\37\3\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_274 = DFA.unpackEncodedStringToUnsignedChars(dfa_274s);
    static final char[] dfa_275 = DFA.unpackEncodedStringToUnsignedChars(dfa_275s);
    static final short[] dfa_276 = DFA.unpackEncodedString(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final short[][] dfa_278 = unpackEncodedStringArray(dfa_278s);
    class DFA413 extends DFA {
        public DFA413(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 413;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_274;
            this.max = dfa_275;
            this.accept = dfa_276;
            this.special = dfa_277;
            this.transition = dfa_278;
        }
        public String getDescription() {
            return "26248:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= ruleAwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= rulePromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) ruleArrow ) )=>this_ArrowExpression_2= ruleArrowExpression ) | (this_ConditionalExpression_3= ruleConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA413_1 = input.LA(1);
                        int index413_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 64;}
                        else if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA413_2 = input.LA(1);
                        int index413_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA413_3 = input.LA(1);
                        int index413_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA413_4 = input.LA(1);
                        int index413_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA413_5 = input.LA(1);
                        int index413_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA413_6 = input.LA(1);
                        int index413_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA413_7 = input.LA(1);
                        int index413_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA413_8 = input.LA(1);
                        int index413_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA413_9 = input.LA(1);
                        int index413_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA413_10 = input.LA(1);
                        int index413_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA413_11 = input.LA(1);
                        int index413_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA413_12 = input.LA(1);
                        int index413_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA413_13 = input.LA(1);
                        int index413_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA413_14 = input.LA(1);
                        int index413_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA413_15 = input.LA(1);
                        int index413_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA413_16 = input.LA(1);
                        int index413_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA413_17 = input.LA(1);
                        int index413_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA413_18 = input.LA(1);
                        int index413_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA413_19 = input.LA(1);
                        int index413_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA413_20 = input.LA(1);
                        int index413_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA413_21 = input.LA(1);
                        int index413_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA413_22 = input.LA(1);
                        int index413_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA413_23 = input.LA(1);
                        int index413_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA413_24 = input.LA(1);
                        int index413_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA413_25 = input.LA(1);
                        int index413_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA413_26 = input.LA(1);
                        int index413_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA413_27 = input.LA(1);
                        int index413_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA413_28 = input.LA(1);
                        int index413_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA413_29 = input.LA(1);
                        int index413_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA413_30 = input.LA(1);
                        int index413_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index413_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 413, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_279s = "\16\uffff";
    static final String dfa_280s = "\1\14\15\uffff";
    static final String dfa_281s = "\1\70\13\0\2\uffff";
    static final String dfa_282s = "\1\160\13\0\2\uffff";
    static final String dfa_283s = "\14\uffff\1\2\1\1";
    static final String dfa_284s = "\1\uffff\1\0\1\11\1\5\1\4\1\1\1\3\1\6\1\7\1\2\1\12\1\10\2\uffff}>";
    static final String[] dfa_285s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_279 = DFA.unpackEncodedString(dfa_279s);
    static final short[] dfa_280 = DFA.unpackEncodedString(dfa_280s);
    static final char[] dfa_281 = DFA.unpackEncodedStringToUnsignedChars(dfa_281s);
    static final char[] dfa_282 = DFA.unpackEncodedStringToUnsignedChars(dfa_282s);
    static final short[] dfa_283 = DFA.unpackEncodedString(dfa_283s);
    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final short[][] dfa_285 = unpackEncodedStringArray(dfa_285s);
    class DFA412 extends DFA {
        public DFA412(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 412;
            this.eot = dfa_279;
            this.eof = dfa_280;
            this.min = dfa_281;
            this.max = dfa_282;
            this.accept = dfa_283;
            this.special = dfa_284;
            this.transition = dfa_285;
        }
        public String getDescription() {
            return "26352:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA412_1 = input.LA(1);
                        int index412_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA412_5 = input.LA(1);
                        int index412_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA412_9 = input.LA(1);
                        int index412_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA412_6 = input.LA(1);
                        int index412_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA412_4 = input.LA(1);
                        int index412_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA412_3 = input.LA(1);
                        int index412_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA412_7 = input.LA(1);
                        int index412_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA412_8 = input.LA(1);
                        int index412_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA412_11 = input.LA(1);
                        int index412_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA412_2 = input.LA(1);
                        int index412_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_2);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA412_10 = input.LA(1);
                        int index412_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index412_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 412, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA415 extends DFA {
        public DFA415(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 415;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_274;
            this.max = dfa_275;
            this.accept = dfa_276;
            this.special = dfa_277;
            this.transition = dfa_278;
        }
        public String getDescription() {
            return "26426:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm1_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm1_PromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters[null] ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> ruleStrictFormalParameters[null] ) ) ) ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) ruleArrow ) )=>this_ArrowExpression_2= norm1_ArrowExpression ) | (this_ConditionalExpression_3= norm1_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA415_1 = input.LA(1);
                        int index415_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 64;}
                        else if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA415_2 = input.LA(1);
                        int index415_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA415_3 = input.LA(1);
                        int index415_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA415_4 = input.LA(1);
                        int index415_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA415_5 = input.LA(1);
                        int index415_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA415_6 = input.LA(1);
                        int index415_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA415_7 = input.LA(1);
                        int index415_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA415_8 = input.LA(1);
                        int index415_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA415_9 = input.LA(1);
                        int index415_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA415_10 = input.LA(1);
                        int index415_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA415_11 = input.LA(1);
                        int index415_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA415_12 = input.LA(1);
                        int index415_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA415_13 = input.LA(1);
                        int index415_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA415_14 = input.LA(1);
                        int index415_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA415_15 = input.LA(1);
                        int index415_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA415_16 = input.LA(1);
                        int index415_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA415_17 = input.LA(1);
                        int index415_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA415_18 = input.LA(1);
                        int index415_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA415_19 = input.LA(1);
                        int index415_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA415_20 = input.LA(1);
                        int index415_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA415_21 = input.LA(1);
                        int index415_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA415_22 = input.LA(1);
                        int index415_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA415_23 = input.LA(1);
                        int index415_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA415_24 = input.LA(1);
                        int index415_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA415_25 = input.LA(1);
                        int index415_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA415_26 = input.LA(1);
                        int index415_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA415_27 = input.LA(1);
                        int index415_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA415_28 = input.LA(1);
                        int index415_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA415_29 = input.LA(1);
                        int index415_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA415_30 = input.LA(1);
                        int index415_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index415_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 415, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_286s = "\1\u009a\13\0\2\uffff";
    static final String dfa_287s = "\1\uffff\1\3\1\0\1\11\1\5\1\4\1\2\1\6\1\10\1\1\1\12\1\7\2\uffff}>";
    static final String[] dfa_288s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\1\6\2\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\47\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_286 = DFA.unpackEncodedStringToUnsignedChars(dfa_286s);
    static final short[] dfa_287 = DFA.unpackEncodedString(dfa_287s);
    static final short[][] dfa_288 = unpackEncodedStringArray(dfa_288s);
    class DFA414 extends DFA {
        public DFA414(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 414;
            this.eot = dfa_279;
            this.eof = dfa_280;
            this.min = dfa_281;
            this.max = dfa_286;
            this.accept = dfa_283;
            this.special = dfa_287;
            this.transition = dfa_288;
        }
        public String getDescription() {
            return "26530:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_5_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_6_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA414_2 = input.LA(1);
                        int index414_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA414_9 = input.LA(1);
                        int index414_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA414_6 = input.LA(1);
                        int index414_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA414_1 = input.LA(1);
                        int index414_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA414_5 = input.LA(1);
                        int index414_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA414_4 = input.LA(1);
                        int index414_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA414_7 = input.LA(1);
                        int index414_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA414_11 = input.LA(1);
                        int index414_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA414_8 = input.LA(1);
                        int index414_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA414_3 = input.LA(1);
                        int index414_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA414_10 = input.LA(1);
                        int index414_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index414_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 414, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_289s = "\1\4\35\0\45\uffff";
    static final String dfa_290s = "\1\u0096\35\0\45\uffff";
    static final String dfa_291s = "\36\uffff\1\4\1\5\40\uffff\1\1\1\3\1\2";
    static final String dfa_292s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\45\uffff}>";
    static final String[] dfa_293s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\35\1\32\1\13\2\uffff\1\12\1\37\3\uffff\1\31\1\11\1\37\1\uffff\1\37\1\33\1\uffff\1\14\1\uffff\1\21\1\37\1\4\1\1\2\uffff\1\37\1\uffff\2\37\1\uffff\1\23\1\uffff\1\36\1\25\3\uffff\1\16\3\37\1\22\1\37\6\uffff\1\6\1\10\1\37\1\34\1\7\7\uffff\1\37\1\uffff\2\37\7\uffff\1\15\3\uffff\1\20\2\uffff\1\37\2\uffff\1\3\2\uffff\1\37\1\uffff\1\37\1\uffff\1\37\2\uffff\1\37\3\uffff\1\2\1\37\2\uffff\1\37\2\uffff\1\37\12\uffff\2\37\11\uffff\1\5\1\uffff\1\37\2\uffff\1\37\1\uffff\5\37\3\uffff\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_289 = DFA.unpackEncodedStringToUnsignedChars(dfa_289s);
    static final char[] dfa_290 = DFA.unpackEncodedStringToUnsignedChars(dfa_290s);
    static final short[] dfa_291 = DFA.unpackEncodedString(dfa_291s);
    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final short[][] dfa_293 = unpackEncodedStringArray(dfa_293s);
    class DFA417 extends DFA {
        public DFA417(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 417;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_289;
            this.max = dfa_290;
            this.accept = dfa_291;
            this.special = dfa_292;
            this.transition = dfa_293;
        }
        public String getDescription() {
            return "26604:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm2_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm2_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) ruleArrow ) )=>this_ArrowExpression_2= norm2_ArrowExpression ) | this_YieldExpression_3= ruleYieldExpression | (this_ConditionalExpression_4= norm2_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA417_1 = input.LA(1);
                        int index417_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 64;}
                        else if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA417_2 = input.LA(1);
                        int index417_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA417_3 = input.LA(1);
                        int index417_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA417_4 = input.LA(1);
                        int index417_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA417_5 = input.LA(1);
                        int index417_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA417_6 = input.LA(1);
                        int index417_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA417_7 = input.LA(1);
                        int index417_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA417_8 = input.LA(1);
                        int index417_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA417_9 = input.LA(1);
                        int index417_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA417_10 = input.LA(1);
                        int index417_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA417_11 = input.LA(1);
                        int index417_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA417_12 = input.LA(1);
                        int index417_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA417_13 = input.LA(1);
                        int index417_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA417_14 = input.LA(1);
                        int index417_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA417_15 = input.LA(1);
                        int index417_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA417_16 = input.LA(1);
                        int index417_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA417_17 = input.LA(1);
                        int index417_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA417_18 = input.LA(1);
                        int index417_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA417_19 = input.LA(1);
                        int index417_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA417_20 = input.LA(1);
                        int index417_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA417_21 = input.LA(1);
                        int index417_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA417_22 = input.LA(1);
                        int index417_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA417_23 = input.LA(1);
                        int index417_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA417_24 = input.LA(1);
                        int index417_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA417_25 = input.LA(1);
                        int index417_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA417_26 = input.LA(1);
                        int index417_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA417_27 = input.LA(1);
                        int index417_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA417_28 = input.LA(1);
                        int index417_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA417_29 = input.LA(1);
                        int index417_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index417_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 417, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_294s = "\1\150\13\0\2\uffff";
    static final String dfa_295s = "\1\uffff\1\10\1\2\1\11\1\3\1\12\1\7\1\4\1\1\1\5\1\0\1\6\2\uffff}>";
    static final String[] dfa_296s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_294 = DFA.unpackEncodedStringToUnsignedChars(dfa_294s);
    static final short[] dfa_295 = DFA.unpackEncodedString(dfa_295s);
    static final short[][] dfa_296 = unpackEncodedStringArray(dfa_296s);
    class DFA416 extends DFA {
        public DFA416(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 416;
            this.eot = dfa_279;
            this.eof = dfa_280;
            this.min = dfa_281;
            this.max = dfa_294;
            this.accept = dfa_283;
            this.special = dfa_295;
            this.transition = dfa_296;
        }
        public String getDescription() {
            return "26717:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA416_10 = input.LA(1);
                        int index416_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA416_8 = input.LA(1);
                        int index416_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA416_2 = input.LA(1);
                        int index416_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA416_4 = input.LA(1);
                        int index416_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA416_7 = input.LA(1);
                        int index416_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA416_9 = input.LA(1);
                        int index416_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA416_11 = input.LA(1);
                        int index416_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_11);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA416_6 = input.LA(1);
                        int index416_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA416_1 = input.LA(1);
                        int index416_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA416_3 = input.LA(1);
                        int index416_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA416_5 = input.LA(1);
                        int index416_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index416_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 416, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA419 extends DFA {
        public DFA419(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 419;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_289;
            this.max = dfa_290;
            this.accept = dfa_291;
            this.special = dfa_292;
            this.transition = dfa_293;
        }
        public String getDescription() {
            return "26791:2: ( ( ( ( () Await ) )=>this_AwaitExpression_0= norm3_AwaitExpression ) | ( ( ( () CommercialAt Promisify ) )=>this_PromisifyExpression_1= norm3_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters[null] ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator[null] LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator[null] ( ( LeftParenthesis )=> norm1_StrictFormalParameters[null] ) ) ) ( ruleColonSepDeclaredReturnTypeRef[null] )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) ruleArrow ) )=>this_ArrowExpression_2= norm3_ArrowExpression ) | this_YieldExpression_3= norm1_YieldExpression | (this_ConditionalExpression_4= norm3_ConditionalExpression ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA419_1 = input.LA(1);
                        int index419_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred271_InternalN4JSParser()) ) {s = 64;}
                        else if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA419_2 = input.LA(1);
                        int index419_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA419_3 = input.LA(1);
                        int index419_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA419_4 = input.LA(1);
                        int index419_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA419_5 = input.LA(1);
                        int index419_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA419_6 = input.LA(1);
                        int index419_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA419_7 = input.LA(1);
                        int index419_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA419_8 = input.LA(1);
                        int index419_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA419_9 = input.LA(1);
                        int index419_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA419_10 = input.LA(1);
                        int index419_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA419_11 = input.LA(1);
                        int index419_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA419_12 = input.LA(1);
                        int index419_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA419_13 = input.LA(1);
                        int index419_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA419_14 = input.LA(1);
                        int index419_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA419_15 = input.LA(1);
                        int index419_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA419_16 = input.LA(1);
                        int index419_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA419_17 = input.LA(1);
                        int index419_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA419_18 = input.LA(1);
                        int index419_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA419_19 = input.LA(1);
                        int index419_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA419_20 = input.LA(1);
                        int index419_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA419_21 = input.LA(1);
                        int index419_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA419_22 = input.LA(1);
                        int index419_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA419_23 = input.LA(1);
                        int index419_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA419_24 = input.LA(1);
                        int index419_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA419_25 = input.LA(1);
                        int index419_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA419_26 = input.LA(1);
                        int index419_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA419_27 = input.LA(1);
                        int index419_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA419_28 = input.LA(1);
                        int index419_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA419_29 = input.LA(1);
                        int index419_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 31;}
                        input.seek(index419_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 419, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_297s = "\1\uffff\1\0\1\5\1\1\1\6\1\2\1\7\1\10\1\4\1\11\1\3\1\12\2\uffff}>";
    static final short[] dfa_297 = DFA.unpackEncodedString(dfa_297s);
    class DFA418 extends DFA {
        public DFA418(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 418;
            this.eot = dfa_279;
            this.eof = dfa_280;
            this.min = dfa_281;
            this.max = dfa_286;
            this.accept = dfa_283;
            this.special = dfa_297;
            this.transition = dfa_288;
        }
        public String getDescription() {
            return "26904:4: ( ( ( ( () ( ( ruleAssignmentOperator ) ) ) )=> ( () ( (lv_op_6_0= ruleAssignmentOperator ) ) ) ) ( (lv_rhs_7_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA418_1 = input.LA(1);
                        int index418_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA418_3 = input.LA(1);
                        int index418_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA418_5 = input.LA(1);
                        int index418_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA418_10 = input.LA(1);
                        int index418_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA418_8 = input.LA(1);
                        int index418_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA418_2 = input.LA(1);
                        int index418_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA418_4 = input.LA(1);
                        int index418_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA418_6 = input.LA(1);
                        int index418_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA418_7 = input.LA(1);
                        int index418_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA418_9 = input.LA(1);
                        int index418_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA418_11 = input.LA(1);
                        int index418_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred276_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index418_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 418, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_298s = "\115\uffff";
    static final String dfa_299s = "\1\100\114\uffff";
    static final String dfa_300s = "\1\4\17\uffff\1\0\37\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_301s = "\1\u0096\17\uffff\1\0\37\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_302s = "\1\uffff\17\1\1\uffff\37\1\1\uffff\14\1\1\uffff\2\1\1\2\14\uffff";
    static final String dfa_303s = "\1\0\17\uffff\1\1\37\uffff\1\2\14\uffff\1\3\17\uffff}>";
    static final String[] dfa_304s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\35\1\32\1\13\2\uffff\1\12\1\63\3\uffff\1\31\1\11\1\67\1\uffff\1\43\1\33\1\uffff\1\14\1\uffff\1\21\1\71\1\4\1\1\2\uffff\1\64\1\uffff\1\54\1\41\1\uffff\1\23\1\uffff\1\36\1\25\3\uffff\1\16\1\56\1\40\1\53\1\22\1\70\3\uffff\1\100\2\uffff\1\6\1\10\1\37\1\34\1\7\3\uffff\1\100\1\uffff\2\100\1\72\1\100\1\73\1\60\6\uffff\1\100\1\15\2\uffff\1\100\1\20\1\100\1\uffff\1\77\2\uffff\1\3\2\uffff\1\74\1\100\1\75\1\uffff\1\57\1\uffff\1\100\1\42\2\100\1\uffff\1\2\1\61\2\uffff\1\62\2\uffff\1\76\12\uffff\1\66\1\65\11\uffff\1\5\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final char[] dfa_300 = DFA.unpackEncodedStringToUnsignedChars(dfa_300s);
    static final char[] dfa_301 = DFA.unpackEncodedStringToUnsignedChars(dfa_301s);
    static final short[] dfa_302 = DFA.unpackEncodedString(dfa_302s);
    static final short[] dfa_303 = DFA.unpackEncodedString(dfa_303s);
    static final short[][] dfa_304 = unpackEncodedStringArray(dfa_304s);
    class DFA421 extends DFA {
        public DFA421(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 421;
            this.eot = dfa_298;
            this.eof = dfa_299;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_303;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "27014:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA421_0 = input.LA(1);
                        int index421_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA421_0>=5 && LA421_0<=135 && (s=T2S.M_38[LA421_0-(5)])>=0) && (synpred278_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA421_0==Of) ) {s = 16;}
                        else if ((LA421_0>=4 && LA421_0<=150 && (s=T2S.M_39[LA421_0-(4)])>=0) && (synpred278_InternalN4JSParser())) { /* 32 cases */ }
                        else if ( (LA421_0==SolidusEqualsSign) ) {s = 48;}
                        else if ((LA421_0>=16 && LA421_0<=125 && (s=T2S.M_40[LA421_0-(16)])>=0) && (synpred278_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA421_0==HyphenMinus) ) {s = 61;}
                        else if ( (LA421_0==Tilde) && (synpred278_InternalN4JSParser())) {s = 62;}
                        else if ( (LA421_0==ExclamationMark) && (synpred278_InternalN4JSParser())) {s = 63;}
                        else if ( (LA421_0==EOF||LA421_0==LessThanSignLessThanSignEqualsSign||LA421_0==PercentSignEqualsSign||(LA421_0>=AmpersandEqualsSign && LA421_0<=AsteriskEqualsSign)||LA421_0==PlusSignEqualsSign||LA421_0==CircumflexAccentEqualsSign||LA421_0==In||LA421_0==VerticalLineEqualsSign||LA421_0==Comma||LA421_0==Semicolon||(LA421_0>=EqualsSign && LA421_0<=GreaterThanSign)) ) {s = 64;}
                        input.seek(index421_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA421_16 = input.LA(1);
                        int index421_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index421_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA421_48 = input.LA(1);
                        int index421_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index421_48);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA421_61 = input.LA(1);
                        int index421_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index421_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 421, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_305s = "\121\uffff";
    static final String dfa_306s = "\1\100\120\uffff";
    static final String dfa_307s = "\1\4\57\uffff\1\0\14\uffff\1\0\23\uffff";
    static final String dfa_308s = "\1\u009a\57\uffff\1\0\14\uffff\1\0\23\uffff";
    static final String dfa_309s = "\1\uffff\57\1\1\uffff\14\1\1\uffff\2\1\1\2\20\uffff";
    static final String dfa_310s = "\1\0\57\uffff\1\1\14\uffff\1\2\23\uffff}>";
    static final String[] dfa_311s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\35\1\32\1\13\2\uffff\1\12\1\63\3\uffff\1\31\1\11\1\67\1\uffff\1\43\1\33\1\uffff\1\14\1\uffff\1\21\1\71\1\4\1\1\2\uffff\1\64\1\uffff\1\54\1\41\1\uffff\1\23\1\uffff\1\36\1\25\3\uffff\1\16\1\56\1\40\1\53\1\22\1\70\3\uffff\1\100\2\uffff\1\6\1\10\1\37\1\34\1\7\3\uffff\1\100\1\uffff\2\100\1\72\1\100\1\73\1\60\6\uffff\1\100\1\15\3\uffff\1\20\1\100\1\uffff\1\77\2\uffff\1\3\1\100\1\uffff\1\74\1\100\1\75\1\uffff\1\57\2\100\1\42\2\100\1\uffff\1\2\1\61\1\100\1\uffff\1\62\1\uffff\1\100\1\76\12\uffff\1\66\1\65\11\uffff\1\5\1\uffff\1\45\2\uffff\1\44\1\uffff\1\46\1\47\1\50\1\51\1\52\3\uffff\1\55\1\uffff\1\100\1\uffff\1\100",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    static final short[] dfa_306 = DFA.unpackEncodedString(dfa_306s);
    static final char[] dfa_307 = DFA.unpackEncodedStringToUnsignedChars(dfa_307s);
    static final char[] dfa_308 = DFA.unpackEncodedStringToUnsignedChars(dfa_308s);
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final short[][] dfa_311 = unpackEncodedStringArray(dfa_311s);
    class DFA423 extends DFA {
        public DFA423(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 423;
            this.eot = dfa_305;
            this.eof = dfa_306;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "27076:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Namespace | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (lv_expression_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA423_0 = input.LA(1);
                        int index423_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA423_0>=4 && LA423_0<=150 && (s=T2S.M_41[LA423_0-(4)])>=0) && (synpred280_InternalN4JSParser())) { /* 47 cases */ }
                        else if ( (LA423_0==SolidusEqualsSign) ) {s = 48;}
                        else if ((LA423_0>=16 && LA423_0<=125 && (s=T2S.M_40[LA423_0-(16)])>=0) && (synpred280_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA423_0==HyphenMinus) ) {s = 61;}
                        else if ( (LA423_0==Tilde) && (synpred280_InternalN4JSParser())) {s = 62;}
                        else if ( (LA423_0==ExclamationMark) && (synpred280_InternalN4JSParser())) {s = 63;}
                        else if ( (LA423_0==EOF||LA423_0==LessThanSignLessThanSignEqualsSign||LA423_0==PercentSignEqualsSign||(LA423_0>=AmpersandEqualsSign && LA423_0<=AsteriskEqualsSign)||LA423_0==PlusSignEqualsSign||LA423_0==CircumflexAccentEqualsSign||LA423_0==VerticalLineEqualsSign||LA423_0==RightParenthesis||LA423_0==Comma||(LA423_0>=Colon && LA423_0<=Semicolon)||(LA423_0>=EqualsSign && LA423_0<=GreaterThanSign)||LA423_0==RightSquareBracket||LA423_0==RightCurlyBracket||LA423_0==RULE_ML_COMMENT||LA423_0==RULE_EOL) ) {s = 64;}
                        input.seek(index423_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA423_48 = input.LA(1);
                        int index423_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index423_48);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA423_61 = input.LA(1);
                        int index423_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 64;}
                        input.seek(index423_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 423, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_312s = "\136\uffff";
    static final String dfa_313s = "\1\3\135\uffff";
    static final String dfa_314s = "\1\4\1\uffff\1\0\133\uffff";
    static final String dfa_315s = "\1\u0096\1\uffff\1\0\133\uffff";
    static final String dfa_316s = "\1\uffff\1\1\1\uffff\1\2\132\uffff";
    static final String dfa_317s = "\1\0\1\uffff\1\1\133\uffff}>";
    static final String[] dfa_318s = {
            "\62\3\1\uffff\1\3\2\uffff\10\3\5\uffff\1\3\1\uffff\2\3\5\uffff\1\3\1\uffff\5\3\2\uffff\1\3\2\uffff\1\2\1\uffff\2\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\3\uffff\2\3\2\uffff\1\3\2\uffff\1\3\12\uffff\2\3\6\uffff\1\1\2\uffff\1\3\1\uffff\1\3\2\uffff\1\3\1\uffff\5\3\3\uffff\1\3",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_312 = DFA.unpackEncodedString(dfa_312s);
    static final short[] dfa_313 = DFA.unpackEncodedString(dfa_313s);
    static final char[] dfa_314 = DFA.unpackEncodedStringToUnsignedChars(dfa_314s);
    static final char[] dfa_315 = DFA.unpackEncodedStringToUnsignedChars(dfa_315s);
    static final short[] dfa_316 = DFA.unpackEncodedString(dfa_316s);
    static final short[] dfa_317 = DFA.unpackEncodedString(dfa_317s);
    static final short[][] dfa_318 = unpackEncodedStringArray(dfa_318s);
    class DFA456 extends DFA {
        public DFA456(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 456;
            this.eot = dfa_312;
            this.eof = dfa_313;
            this.min = dfa_314;
            this.max = dfa_315;
            this.accept = dfa_316;
            this.special = dfa_317;
            this.transition = dfa_318;
        }
        public String getDescription() {
            return "29468:3: ( ( ( ruleNoWhiteSpace[null] )=>this_NoWhiteSpace_1= ruleNoWhiteSpace[$current] ) otherlv_2= LeftParenthesis ( ( (lv_args_3_0= ruleAnnotationArgument ) ) (otherlv_4= Comma ( (lv_args_5_0= ruleAnnotationArgument ) ) )* )? otherlv_6= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA456_0 = input.LA(1);
                        int index456_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA456_0==RULE_NO_WHITE_SPACE) && (synpred289_InternalN4JSParser())) {s = 1;}
                        else if ( (LA456_0==LeftParenthesis) ) {s = 2;}
                        else if ( (LA456_0==EOF||(LA456_0>=Intersection && LA456_0<=With)||LA456_0==FullStopFullStopFullStop||(LA456_0>=For && LA456_0<=Var)||LA456_0==PlusSignPlusSign||(LA456_0>=HyphenMinusHyphenMinus && LA456_0<=SolidusEqualsSign)||LA456_0==CommercialAtCommercialAt||(LA456_0>=As && LA456_0<=Of)||LA456_0==ExclamationMark||(LA456_0>=Asterisk && LA456_0<=PlusSign)||LA456_0==HyphenMinus||LA456_0==Solidus||(LA456_0>=Semicolon && LA456_0<=LessThanSign)||(LA456_0>=CommercialAt && LA456_0<=LeftSquareBracket)||LA456_0==LeftCurlyBracket||LA456_0==Tilde||(LA456_0>=RULE_TEMPLATE_HEAD && LA456_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA456_0==RULE_IDENTIFIER||LA456_0==RULE_INT||LA456_0==RULE_DOUBLE||(LA456_0>=RULE_BINARY_INT && LA456_0<=RULE_SCIENTIFIC_INT)||LA456_0==RULE_STRING) ) {s = 3;}
                        input.seek(index456_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA456_2 = input.LA(1);
                        int index456_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 1;}
                        else if ( (true) ) {s = 3;}
                        input.seek(index456_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 456, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_319s = "\1\4\12\0\4\uffff";
    static final String dfa_320s = "\1\u0096\12\0\4\uffff";
    static final String dfa_321s = "\13\uffff\3\1\1\2";
    static final String dfa_322s = "\1\1\1\11\1\2\1\5\1\4\1\3\1\0\1\10\1\12\1\6\1\7\4\uffff}>";
    static final String[] dfa_323s = {
            "\2\16\2\uffff\1\16\10\uffff\1\16\13\uffff\1\16\2\uffff\1\16\4\uffff\1\11\2\uffff\1\16\2\uffff\1\16\4\uffff\1\13\1\16\1\10\2\16\25\uffff\1\15\21\uffff\1\16\2\uffff\1\16\1\uffff\1\16\1\uffff\1\14\5\uffff\1\16\1\uffff\1\16\2\uffff\1\16\2\uffff\1\16\25\uffff\1\16\1\uffff\1\2\2\uffff\1\1\1\uffff\1\3\1\4\1\5\1\6\1\7\3\uffff\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_319 = DFA.unpackEncodedStringToUnsignedChars(dfa_319s);
    static final char[] dfa_320 = DFA.unpackEncodedStringToUnsignedChars(dfa_320s);
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final short[] dfa_322 = DFA.unpackEncodedString(dfa_322s);
    static final short[][] dfa_323 = unpackEncodedStringArray(dfa_323s);
    class DFA457 extends DFA {
        public DFA457(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 457;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_319;
            this.max = dfa_320;
            this.accept = dfa_321;
            this.special = dfa_322;
            this.transition = dfa_323;
        }
        public String getDescription() {
            return "29556:2: ( ( ( ruleLiteralAnnotationArgument )=>this_LiteralAnnotationArgument_0= ruleLiteralAnnotationArgument ) | this_TypeRefAnnotationArgument_1= ruleTypeRefAnnotationArgument )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA457_6 = input.LA(1);
                        int index457_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA457_0 = input.LA(1);
                        int index457_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA457_0>=37 && LA457_0<=150 && (s=T2S.M_43[LA457_0-(37)])>=0)) { /* 10 cases */ }
                        else if ( (LA457_0==Null) && (synpred290_InternalN4JSParser())) {s = 11;}
                        else if ( (LA457_0==Solidus) && (synpred290_InternalN4JSParser())) {s = 12;}
                        else if ( (LA457_0==SolidusEqualsSign) && (synpred290_InternalN4JSParser())) {s = 13;}
                        else if ( ((LA457_0>=Intersection && LA457_0<=Constructor)||LA457_0==Promisify||LA457_0==Default||LA457_0==Target||LA457_0==Await||LA457_0==Union||LA457_0==This||LA457_0==This_1||(LA457_0>=Type && LA457_0<=Void)||LA457_0==LeftParenthesis||LA457_0==PlusSign||LA457_0==HyphenMinus||LA457_0==QuestionMark||LA457_0==LeftSquareBracket||LA457_0==LeftCurlyBracket||LA457_0==Tilde||LA457_0==RULE_IDENTIFIER) ) {s = 14;}
                        input.seek(index457_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA457_2 = input.LA(1);
                        int index457_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA457_5 = input.LA(1);
                        int index457_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA457_4 = input.LA(1);
                        int index457_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA457_3 = input.LA(1);
                        int index457_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA457_9 = input.LA(1);
                        int index457_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA457_10 = input.LA(1);
                        int index457_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA457_7 = input.LA(1);
                        int index457_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA457_1 = input.LA(1);
                        int index457_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_1);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA457_8 = input.LA(1);
                        int index457_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 14;}
                        input.seek(index457_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 457, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_324s = "\1\4\1\uffff\14\0\1\uffff\75\0\4\uffff";
    static final String dfa_325s = "\1\u0096\1\uffff\14\0\1\uffff\75\0\4\uffff";
    static final String dfa_326s = "\1\uffff\1\1\14\uffff\1\4\75\uffff\1\5\1\2\1\3\1\6";
    static final String dfa_327s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\4\uffff}>";
    static final String[] dfa_328s = {
            "\1\74\1\67\1\100\1\42\1\76\1\101\1\103\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\15\1\77\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\102\1\13\1\51\1\53\20\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\114\1\uffff\1\16\7\uffff\1\14\3\uffff\1\1\1\113\33\uffff\1\17\1\uffff\1\106\2\uffff\1\105\1\uffff\1\107\1\110\1\uffff\1\111\1\112\3\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_324 = DFA.unpackEncodedStringToUnsignedChars(dfa_324s);
    static final char[] dfa_325 = DFA.unpackEncodedStringToUnsignedChars(dfa_325s);
    static final short[] dfa_326 = DFA.unpackEncodedString(dfa_326s);
    static final short[] dfa_327 = DFA.unpackEncodedString(dfa_327s);
    static final short[][] dfa_328 = unpackEncodedStringArray(dfa_328s);
    class DFA515 extends DFA {
        public DFA515(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 515;
            this.eot = dfa_104;
            this.eof = dfa_104;
            this.min = dfa_324;
            this.max = dfa_325;
            this.accept = dfa_326;
            this.special = dfa_327;
            this.transition = dfa_328;
        }
        public String getDescription() {
            return "31703:2: (this_AnnotatedN4MemberDeclaration_0= ruleAnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=>this_N4GetterDeclaration_1= ruleN4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= ruleN4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeParameters[null] )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= ruleN4MethodDeclaration ) | this_N4CallSignatureDeclaration_4= ruleN4CallSignatureDeclaration | this_N4FieldDeclaration_5= ruleN4FieldDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA515_0 = input.LA(1);
                        int index515_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA515_0>=11 && LA515_0<=106 && (s=T2S.M_44[LA515_0-(11)])>=0)) { /* 13 cases */ }
                        else if ( (LA515_0==Asterisk) && (synpred305_InternalN4JSParser())) {s = 14;}
                        else if ((LA515_0>=4 && LA515_0<=150 && (s=T2S.M_45[LA515_0-(4)])>=0)) { /* 63 cases */ }
                        input.seek(index515_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA515_2 = input.LA(1);
                        int index515_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA515_3 = input.LA(1);
                        int index515_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA515_4 = input.LA(1);
                        int index515_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA515_5 = input.LA(1);
                        int index515_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA515_6 = input.LA(1);
                        int index515_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA515_7 = input.LA(1);
                        int index515_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA515_8 = input.LA(1);
                        int index515_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA515_9 = input.LA(1);
                        int index515_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA515_10 = input.LA(1);
                        int index515_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA515_11 = input.LA(1);
                        int index515_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA515_12 = input.LA(1);
                        int index515_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index515_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA515_13 = input.LA(1);
                        int index515_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA515_15 = input.LA(1);
                        int index515_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA515_16 = input.LA(1);
                        int index515_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA515_17 = input.LA(1);
                        int index515_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA515_18 = input.LA(1);
                        int index515_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA515_19 = input.LA(1);
                        int index515_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA515_20 = input.LA(1);
                        int index515_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA515_21 = input.LA(1);
                        int index515_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA515_22 = input.LA(1);
                        int index515_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA515_23 = input.LA(1);
                        int index515_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA515_24 = input.LA(1);
                        int index515_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA515_25 = input.LA(1);
                        int index515_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA515_26 = input.LA(1);
                        int index515_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA515_27 = input.LA(1);
                        int index515_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA515_28 = input.LA(1);
                        int index515_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA515_29 = input.LA(1);
                        int index515_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA515_30 = input.LA(1);
                        int index515_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA515_31 = input.LA(1);
                        int index515_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA515_32 = input.LA(1);
                        int index515_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA515_33 = input.LA(1);
                        int index515_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA515_34 = input.LA(1);
                        int index515_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA515_35 = input.LA(1);
                        int index515_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA515_36 = input.LA(1);
                        int index515_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA515_37 = input.LA(1);
                        int index515_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA515_38 = input.LA(1);
                        int index515_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA515_39 = input.LA(1);
                        int index515_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA515_40 = input.LA(1);
                        int index515_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA515_41 = input.LA(1);
                        int index515_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA515_42 = input.LA(1);
                        int index515_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA515_43 = input.LA(1);
                        int index515_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA515_44 = input.LA(1);
                        int index515_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA515_45 = input.LA(1);
                        int index515_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA515_46 = input.LA(1);
                        int index515_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA515_47 = input.LA(1);
                        int index515_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA515_48 = input.LA(1);
                        int index515_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA515_49 = input.LA(1);
                        int index515_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA515_50 = input.LA(1);
                        int index515_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA515_51 = input.LA(1);
                        int index515_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA515_52 = input.LA(1);
                        int index515_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA515_53 = input.LA(1);
                        int index515_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA515_54 = input.LA(1);
                        int index515_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA515_55 = input.LA(1);
                        int index515_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA515_56 = input.LA(1);
                        int index515_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA515_57 = input.LA(1);
                        int index515_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA515_58 = input.LA(1);
                        int index515_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA515_59 = input.LA(1);
                        int index515_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA515_60 = input.LA(1);
                        int index515_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA515_61 = input.LA(1);
                        int index515_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA515_62 = input.LA(1);
                        int index515_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA515_63 = input.LA(1);
                        int index515_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA515_64 = input.LA(1);
                        int index515_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA515_65 = input.LA(1);
                        int index515_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA515_66 = input.LA(1);
                        int index515_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA515_67 = input.LA(1);
                        int index515_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA515_68 = input.LA(1);
                        int index515_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA515_69 = input.LA(1);
                        int index515_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA515_70 = input.LA(1);
                        int index515_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA515_71 = input.LA(1);
                        int index515_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA515_72 = input.LA(1);
                        int index515_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA515_73 = input.LA(1);
                        int index515_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA515_74 = input.LA(1);
                        int index515_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_74);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA515_75 = input.LA(1);
                        int index515_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred305_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index515_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 515, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA516 extends DFA {
        public DFA516(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 516;
            this.eot = dfa_104;
            this.eof = dfa_104;
            this.min = dfa_324;
            this.max = dfa_325;
            this.accept = dfa_326;
            this.special = dfa_327;
            this.transition = dfa_328;
        }
        public String getDescription() {
            return "31980:2: (this_AnnotatedN4MemberDeclaration_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=>this_N4GetterDeclaration_1= norm1_N4GetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>this_N4SetterDeclaration_2= norm1_N4SetterDeclaration ) | ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeParameters[null] )? ruleAsyncNoTrailingLineBreak[null] ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>this_N4MethodDeclaration_3= norm1_N4MethodDeclaration ) | this_N4CallSignatureDeclaration_4= norm1_N4CallSignatureDeclaration | this_N4FieldDeclaration_5= norm1_N4FieldDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA516_0 = input.LA(1);
                        int index516_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA516_0>=11 && LA516_0<=106 && (s=T2S.M_44[LA516_0-(11)])>=0)) { /* 13 cases */ }
                        else if ( (LA516_0==Asterisk) && (synpred308_InternalN4JSParser())) {s = 14;}
                        else if ((LA516_0>=4 && LA516_0<=150 && (s=T2S.M_45[LA516_0-(4)])>=0)) { /* 63 cases */ }
                        input.seek(index516_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA516_2 = input.LA(1);
                        int index516_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA516_3 = input.LA(1);
                        int index516_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA516_4 = input.LA(1);
                        int index516_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA516_5 = input.LA(1);
                        int index516_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA516_6 = input.LA(1);
                        int index516_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA516_7 = input.LA(1);
                        int index516_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA516_8 = input.LA(1);
                        int index516_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA516_9 = input.LA(1);
                        int index516_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA516_10 = input.LA(1);
                        int index516_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA516_11 = input.LA(1);
                        int index516_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred307_InternalN4JSParser()) ) {s = 78;}
                        else if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA516_12 = input.LA(1);
                        int index516_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 76;}
                        input.seek(index516_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA516_13 = input.LA(1);
                        int index516_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA516_15 = input.LA(1);
                        int index516_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA516_16 = input.LA(1);
                        int index516_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA516_17 = input.LA(1);
                        int index516_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA516_18 = input.LA(1);
                        int index516_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA516_19 = input.LA(1);
                        int index516_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA516_20 = input.LA(1);
                        int index516_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA516_21 = input.LA(1);
                        int index516_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA516_22 = input.LA(1);
                        int index516_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA516_23 = input.LA(1);
                        int index516_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA516_24 = input.LA(1);
                        int index516_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA516_25 = input.LA(1);
                        int index516_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA516_26 = input.LA(1);
                        int index516_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA516_27 = input.LA(1);
                        int index516_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA516_28 = input.LA(1);
                        int index516_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA516_29 = input.LA(1);
                        int index516_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA516_30 = input.LA(1);
                        int index516_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA516_31 = input.LA(1);
                        int index516_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA516_32 = input.LA(1);
                        int index516_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA516_33 = input.LA(1);
                        int index516_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA516_34 = input.LA(1);
                        int index516_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA516_35 = input.LA(1);
                        int index516_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA516_36 = input.LA(1);
                        int index516_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA516_37 = input.LA(1);
                        int index516_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA516_38 = input.LA(1);
                        int index516_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA516_39 = input.LA(1);
                        int index516_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA516_40 = input.LA(1);
                        int index516_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA516_41 = input.LA(1);
                        int index516_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA516_42 = input.LA(1);
                        int index516_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA516_43 = input.LA(1);
                        int index516_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA516_44 = input.LA(1);
                        int index516_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA516_45 = input.LA(1);
                        int index516_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA516_46 = input.LA(1);
                        int index516_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA516_47 = input.LA(1);
                        int index516_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA516_48 = input.LA(1);
                        int index516_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA516_49 = input.LA(1);
                        int index516_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA516_50 = input.LA(1);
                        int index516_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA516_51 = input.LA(1);
                        int index516_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA516_52 = input.LA(1);
                        int index516_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA516_53 = input.LA(1);
                        int index516_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA516_54 = input.LA(1);
                        int index516_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA516_55 = input.LA(1);
                        int index516_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA516_56 = input.LA(1);
                        int index516_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA516_57 = input.LA(1);
                        int index516_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA516_58 = input.LA(1);
                        int index516_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA516_59 = input.LA(1);
                        int index516_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA516_60 = input.LA(1);
                        int index516_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA516_61 = input.LA(1);
                        int index516_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA516_62 = input.LA(1);
                        int index516_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA516_63 = input.LA(1);
                        int index516_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA516_64 = input.LA(1);
                        int index516_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA516_65 = input.LA(1);
                        int index516_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA516_66 = input.LA(1);
                        int index516_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA516_67 = input.LA(1);
                        int index516_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA516_68 = input.LA(1);
                        int index516_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA516_69 = input.LA(1);
                        int index516_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA516_70 = input.LA(1);
                        int index516_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA516_71 = input.LA(1);
                        int index516_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_71);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA516_72 = input.LA(1);
                        int index516_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_72);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA516_73 = input.LA(1);
                        int index516_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_73);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA516_74 = input.LA(1);
                        int index516_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_74);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA516_75 = input.LA(1);
                        int index516_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 79;}
                        input.seek(index516_75);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 516, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_329s = "\117\uffff";
    static final String dfa_330s = "\1\4\13\0\1\uffff\76\0\4\uffff";
    static final String dfa_331s = "\1\u0096\13\0\1\uffff\76\0\4\uffff";
    static final String dfa_332s = "\14\uffff\1\3\76\uffff\1\4\1\1\1\2\1\5";
    static final String dfa_333s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\4\uffff}>";
    static final String[] dfa_334s = {
            "\1\73\1\66\1\77\1\41\1\75\1\100\1\102\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\15\1\76\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\101\1\12\1\50\1\52\20\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\113\1\uffff\1\14\7\uffff\1\13\4\uffff\1\112\33\uffff\1\16\1\uffff\1\105\2\uffff\1\104\1\uffff\1\106\1\107\1\uffff\1\110\1\111\3\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_329 = DFA.unpackEncodedString(dfa_329s);
    static final char[] dfa_330 = DFA.unpackEncodedStringToUnsignedChars(dfa_330s);
    static final char[] dfa_331 = DFA.unpackEncodedStringToUnsignedChars(dfa_331s);
    static final short[] dfa_332 = DFA.unpackEncodedString(dfa_332s);
    static final short[] dfa_333 = DFA.unpackEncodedString(dfa_333s);
    static final short[][] dfa_334 = unpackEncodedStringArray(dfa_334s);
    class DFA530 extends DFA {
        public DFA530(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 530;
            this.eot = dfa_329;
            this.eof = dfa_329;
            this.min = dfa_330;
            this.max = dfa_331;
            this.accept = dfa_332;
            this.special = dfa_333;
            this.transition = dfa_334;
        }
        public String getDescription() {
            return "32272:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* ruleGetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= ruleGetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= ruleBlock ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= ruleFormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= ruleBlock ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeParameters[null] )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeParameters_18= ruleTypeParameters[$current] )? ( ( ( (lv_generator_19_0= Asterisk ) ) ( (lv_declaredName_20_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_21= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_22= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_23_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_24= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( ( ( ( () ( ruleTypeParameters[null] )? LeftParenthesis ) )=> ( () (this_TypeParameters_27= ruleTypeParameters[$current] )? ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_28= ruleMethodParamsReturnAndBody[$current] ) ) ) (otherlv_29= Semicolon )? ) | ( () this_FieldDeclarationImpl_31= ruleFieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA530_0 = input.LA(1);
                        int index530_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA530_0>=11 && LA530_0<=102 && (s=T2S.M_48[LA530_0-(11)])>=0)) { /* 11 cases */ }
                        else if ( (LA530_0==Asterisk) && (synpred314_InternalN4JSParser())) {s = 12;}
                        else if ((LA530_0>=4 && LA530_0<=150 && (s=T2S.M_49[LA530_0-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA530_0==LeftParenthesis) && (synpred317_InternalN4JSParser())) {s = 75;}
                        input.seek(index530_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA530_1 = input.LA(1);
                        int index530_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA530_2 = input.LA(1);
                        int index530_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA530_3 = input.LA(1);
                        int index530_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA530_4 = input.LA(1);
                        int index530_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA530_5 = input.LA(1);
                        int index530_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA530_6 = input.LA(1);
                        int index530_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA530_7 = input.LA(1);
                        int index530_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA530_8 = input.LA(1);
                        int index530_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA530_9 = input.LA(1);
                        int index530_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA530_10 = input.LA(1);
                        int index530_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA530_11 = input.LA(1);
                        int index530_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred317_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index530_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA530_13 = input.LA(1);
                        int index530_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA530_14 = input.LA(1);
                        int index530_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA530_15 = input.LA(1);
                        int index530_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA530_16 = input.LA(1);
                        int index530_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA530_17 = input.LA(1);
                        int index530_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA530_18 = input.LA(1);
                        int index530_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA530_19 = input.LA(1);
                        int index530_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA530_20 = input.LA(1);
                        int index530_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA530_21 = input.LA(1);
                        int index530_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA530_22 = input.LA(1);
                        int index530_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA530_23 = input.LA(1);
                        int index530_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA530_24 = input.LA(1);
                        int index530_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA530_25 = input.LA(1);
                        int index530_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA530_26 = input.LA(1);
                        int index530_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA530_27 = input.LA(1);
                        int index530_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA530_28 = input.LA(1);
                        int index530_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA530_29 = input.LA(1);
                        int index530_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA530_30 = input.LA(1);
                        int index530_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA530_31 = input.LA(1);
                        int index530_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA530_32 = input.LA(1);
                        int index530_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA530_33 = input.LA(1);
                        int index530_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA530_34 = input.LA(1);
                        int index530_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA530_35 = input.LA(1);
                        int index530_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA530_36 = input.LA(1);
                        int index530_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA530_37 = input.LA(1);
                        int index530_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA530_38 = input.LA(1);
                        int index530_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA530_39 = input.LA(1);
                        int index530_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA530_40 = input.LA(1);
                        int index530_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA530_41 = input.LA(1);
                        int index530_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA530_42 = input.LA(1);
                        int index530_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA530_43 = input.LA(1);
                        int index530_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA530_44 = input.LA(1);
                        int index530_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA530_45 = input.LA(1);
                        int index530_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA530_46 = input.LA(1);
                        int index530_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA530_47 = input.LA(1);
                        int index530_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA530_48 = input.LA(1);
                        int index530_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA530_49 = input.LA(1);
                        int index530_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA530_50 = input.LA(1);
                        int index530_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA530_51 = input.LA(1);
                        int index530_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA530_52 = input.LA(1);
                        int index530_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA530_53 = input.LA(1);
                        int index530_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA530_54 = input.LA(1);
                        int index530_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA530_55 = input.LA(1);
                        int index530_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA530_56 = input.LA(1);
                        int index530_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA530_57 = input.LA(1);
                        int index530_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA530_58 = input.LA(1);
                        int index530_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA530_59 = input.LA(1);
                        int index530_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA530_60 = input.LA(1);
                        int index530_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA530_61 = input.LA(1);
                        int index530_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA530_62 = input.LA(1);
                        int index530_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA530_63 = input.LA(1);
                        int index530_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA530_64 = input.LA(1);
                        int index530_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA530_65 = input.LA(1);
                        int index530_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA530_66 = input.LA(1);
                        int index530_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA530_67 = input.LA(1);
                        int index530_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA530_68 = input.LA(1);
                        int index530_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA530_69 = input.LA(1);
                        int index530_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA530_70 = input.LA(1);
                        int index530_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA530_71 = input.LA(1);
                        int index530_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA530_72 = input.LA(1);
                        int index530_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA530_73 = input.LA(1);
                        int index530_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_73);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA530_74 = input.LA(1);
                        int index530_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index530_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 530, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_335s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_336s = "\1\u0096\1\uffff\10\u0096\1\uffff";
    static final String dfa_337s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_338s = {
            "\7\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\20\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\33\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\2\1\3\uffff\1\1",
            "",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\33\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\33\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\33\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\33\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\33\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\33\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\33\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            "\62\12\4\uffff\10\12\20\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\33\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12",
            ""
    };
    static final char[] dfa_335 = DFA.unpackEncodedStringToUnsignedChars(dfa_335s);
    static final char[] dfa_336 = DFA.unpackEncodedStringToUnsignedChars(dfa_336s);
    static final short[] dfa_337 = DFA.unpackEncodedString(dfa_337s);
    static final short[][] dfa_338 = unpackEncodedStringArray(dfa_338s);
    class DFA524 extends DFA {
        public DFA524(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 524;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "()* loopback of 32692:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }
    class DFA544 extends DFA {
        public DFA544(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 544;
            this.eot = dfa_329;
            this.eof = dfa_329;
            this.min = dfa_330;
            this.max = dfa_331;
            this.accept = dfa_332;
            this.special = dfa_333;
            this.transition = dfa_334;
        }
        public String getDescription() {
            return "32930:3: ( ( ( ( ( () ( ( ruleN4Modifier ) )* norm1_GetterHeader[null] ) )=> ( () ( (lv_declaredModifiers_2_0= ruleN4Modifier ) )* this_GetterHeader_3= norm1_GetterHeader[$current] ) ) ( ( ( () LeftCurlyBracket ) )=> (lv_body_4_0= norm1_Block ) )? (otherlv_5= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( () ( (lv_declaredModifiers_7_0= ruleN4Modifier ) )* otherlv_8= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (lv_declaredName_9_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (lv_declaredOptional_10_0= QuestionMark ) )? otherlv_11= LeftParenthesis ( (lv_fpar_12_0= norm1_FormalParameter ) ) otherlv_13= RightParenthesis ( ( ( () LeftCurlyBracket ) )=> (lv_body_14_0= norm1_Block ) )? (otherlv_15= Semicolon )? ) | ( ( ( ( () ( ( ruleN4Modifier ) )* ( ruleTypeParameters[null] )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak[null] ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( () ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )* (this_TypeParameters_18= ruleTypeParameters[$current] )? ( ( ( (lv_generator_19_0= Asterisk ) ) ( (lv_declaredName_20_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_21= norm1_MethodParamsReturnAndBody[$current] ) ) | (this_AsyncNoTrailingLineBreak_22= ruleAsyncNoTrailingLineBreak[$current] ( (lv_declaredName_23_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_24= ruleMethodParamsReturnAndBody[$current] ) ) ) ) ) (otherlv_25= Semicolon )? ) | ( ( ( ( () ( ruleTypeParameters[null] )? LeftParenthesis ) )=> ( () (this_TypeParameters_27= ruleTypeParameters[$current] )? ( ( LeftParenthesis )=>this_MethodParamsReturnAndBody_28= ruleMethodParamsReturnAndBody[$current] ) ) ) (otherlv_29= Semicolon )? ) | ( () this_FieldDeclarationImpl_31= norm1_FieldDeclarationImpl[$current] ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA544_0 = input.LA(1);
                        int index544_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA544_0>=11 && LA544_0<=102 && (s=T2S.M_48[LA544_0-(11)])>=0)) { /* 11 cases */ }
                        else if ( (LA544_0==Asterisk) && (synpred324_InternalN4JSParser())) {s = 12;}
                        else if ((LA544_0>=4 && LA544_0<=150 && (s=T2S.M_49[LA544_0-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA544_0==LeftParenthesis) && (synpred327_InternalN4JSParser())) {s = 75;}
                        input.seek(index544_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA544_1 = input.LA(1);
                        int index544_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA544_2 = input.LA(1);
                        int index544_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA544_3 = input.LA(1);
                        int index544_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA544_4 = input.LA(1);
                        int index544_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA544_5 = input.LA(1);
                        int index544_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA544_6 = input.LA(1);
                        int index544_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA544_7 = input.LA(1);
                        int index544_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA544_8 = input.LA(1);
                        int index544_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA544_9 = input.LA(1);
                        int index544_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred319_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA544_10 = input.LA(1);
                        int index544_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA544_11 = input.LA(1);
                        int index544_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred327_InternalN4JSParser()) ) {s = 75;}
                        input.seek(index544_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA544_13 = input.LA(1);
                        int index544_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA544_14 = input.LA(1);
                        int index544_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA544_15 = input.LA(1);
                        int index544_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA544_16 = input.LA(1);
                        int index544_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA544_17 = input.LA(1);
                        int index544_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA544_18 = input.LA(1);
                        int index544_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA544_19 = input.LA(1);
                        int index544_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA544_20 = input.LA(1);
                        int index544_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA544_21 = input.LA(1);
                        int index544_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA544_22 = input.LA(1);
                        int index544_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA544_23 = input.LA(1);
                        int index544_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA544_24 = input.LA(1);
                        int index544_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA544_25 = input.LA(1);
                        int index544_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA544_26 = input.LA(1);
                        int index544_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA544_27 = input.LA(1);
                        int index544_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA544_28 = input.LA(1);
                        int index544_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA544_29 = input.LA(1);
                        int index544_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA544_30 = input.LA(1);
                        int index544_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA544_31 = input.LA(1);
                        int index544_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA544_32 = input.LA(1);
                        int index544_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA544_33 = input.LA(1);
                        int index544_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA544_34 = input.LA(1);
                        int index544_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA544_35 = input.LA(1);
                        int index544_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA544_36 = input.LA(1);
                        int index544_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA544_37 = input.LA(1);
                        int index544_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA544_38 = input.LA(1);
                        int index544_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA544_39 = input.LA(1);
                        int index544_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA544_40 = input.LA(1);
                        int index544_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA544_41 = input.LA(1);
                        int index544_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA544_42 = input.LA(1);
                        int index544_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA544_43 = input.LA(1);
                        int index544_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA544_44 = input.LA(1);
                        int index544_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA544_45 = input.LA(1);
                        int index544_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA544_46 = input.LA(1);
                        int index544_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA544_47 = input.LA(1);
                        int index544_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA544_48 = input.LA(1);
                        int index544_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA544_49 = input.LA(1);
                        int index544_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA544_50 = input.LA(1);
                        int index544_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA544_51 = input.LA(1);
                        int index544_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA544_52 = input.LA(1);
                        int index544_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA544_53 = input.LA(1);
                        int index544_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA544_54 = input.LA(1);
                        int index544_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA544_55 = input.LA(1);
                        int index544_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA544_56 = input.LA(1);
                        int index544_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA544_57 = input.LA(1);
                        int index544_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA544_58 = input.LA(1);
                        int index544_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA544_59 = input.LA(1);
                        int index544_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA544_60 = input.LA(1);
                        int index544_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA544_61 = input.LA(1);
                        int index544_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA544_62 = input.LA(1);
                        int index544_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA544_63 = input.LA(1);
                        int index544_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA544_64 = input.LA(1);
                        int index544_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA544_65 = input.LA(1);
                        int index544_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA544_66 = input.LA(1);
                        int index544_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA544_67 = input.LA(1);
                        int index544_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA544_68 = input.LA(1);
                        int index544_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA544_69 = input.LA(1);
                        int index544_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA544_70 = input.LA(1);
                        int index544_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_70);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA544_71 = input.LA(1);
                        int index544_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_71);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA544_72 = input.LA(1);
                        int index544_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_72);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA544_73 = input.LA(1);
                        int index544_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_73);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA544_74 = input.LA(1);
                        int index544_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 78;}
                        input.seek(index544_74);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 544, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA538 extends DFA {
        public DFA538(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 538;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "()* loopback of 33350:7: ( (lv_declaredModifiers_17_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_339s = "\2\uffff\10\1\1\uffff";
    static final String dfa_340s = "\1\u0096\1\uffff\10\u009a\1\uffff";
    static final String[] dfa_341s = {
            "\7\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\20\uffff\5\1\24\uffff\1\1\33\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\1\uffff\2\1\3\uffff\1\1",
            "",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\26\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\26\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\26\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\26\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\26\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\26\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\26\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\62\12\4\uffff\10\12\20\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\26\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\2\12\1\uffff\2\12\3\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_339 = DFA.unpackEncodedString(dfa_339s);
    static final char[] dfa_340 = DFA.unpackEncodedStringToUnsignedChars(dfa_340s);
    static final short[][] dfa_341 = unpackEncodedStringArray(dfa_341s);
    class DFA545 extends DFA {
        public DFA545(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 545;
            this.eot = dfa_27;
            this.eof = dfa_339;
            this.min = dfa_335;
            this.max = dfa_340;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_341;
        }
        public String getDescription() {
            return "()* loopback of 33580:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }
    class DFA549 extends DFA {
        public DFA549(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 549;
            this.eot = dfa_27;
            this.eof = dfa_339;
            this.min = dfa_335;
            this.max = dfa_340;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_341;
        }
        public String getDescription() {
            return "()* loopback of 33690:3: ( (lv_declaredModifiers_0_0= ruleN4Modifier ) )*";
        }
    }
    class DFA553 extends DFA {
        public DFA553(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 553;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "()* loopback of 33921:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    class DFA557 extends DFA {
        public DFA557(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 557;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "()* loopback of 34119:5: ( (lv_declaredModifiers_1_0= ruleN4Modifier ) )*";
        }
    }
    static final String dfa_342s = "\1\154\1\u0087\1\uffff\1\u0087\1\uffff";
    static final String[] dfa_343s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\5\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\22\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\30\uffff\1\4",
            "",
            "\3\4\1\uffff\5\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\22\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\30\uffff\1\4",
            ""
    };
    static final char[] dfa_342 = DFA.unpackEncodedStringToUnsignedChars(dfa_342s);
    static final short[][] dfa_343 = unpackEncodedStringArray(dfa_343s);
    class DFA597 extends DFA {
        public DFA597(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 597;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_177;
            this.max = dfa_342;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_343;
        }
        public String getDescription() {
            return "()* loopback of 35798:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_344s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\5\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\22\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\30\uffff\1\4",
            "",
            "\3\4\1\uffff\5\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\22\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\30\uffff\1\4",
            ""
    };
    static final short[][] dfa_344 = unpackEncodedStringArray(dfa_344s);
    class DFA603 extends DFA {
        public DFA603(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 603;
            this.eot = dfa_176;
            this.eof = dfa_176;
            this.min = dfa_177;
            this.max = dfa_342;
            this.accept = dfa_179;
            this.special = dfa_180;
            this.transition = dfa_344;
        }
        public String getDescription() {
            return "()* loopback of 35935:4: (otherlv_4= Comma ( (lv_elements_5_0= ruleElision ) )* ( (lv_elements_6_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_345s = "\113\uffff";
    static final String dfa_346s = "\1\uffff\1\111\40\uffff\1\111\4\uffff\32\111\12\uffff";
    static final String dfa_347s = "\1\4\1\140\40\uffff\1\140\4\uffff\32\140\12\uffff";
    static final String dfa_348s = "\1\u0096\1\160\40\uffff\1\160\4\uffff\32\160\12\uffff";
    static final String dfa_349s = "\2\uffff\40\1\1\uffff\4\1\32\uffff\10\1\1\2\1\1";
    static final String dfa_350s = "\1\23\1\14\40\uffff\1\4\4\uffff\1\0\1\5\1\11\1\15\1\20\1\24\1\27\1\32\1\1\1\6\1\12\1\16\1\21\1\25\1\30\1\33\1\2\1\7\1\13\1\17\1\22\1\26\1\31\1\34\1\3\1\10\12\uffff}>";
    static final String[] dfa_351s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\100\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\20\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\111\1\110\33\uffff\1\1\1\uffff\1\103\2\uffff\1\102\1\uffff\1\104\1\105\1\uffff\1\106\1\107\3\uffff\1\101",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_345 = DFA.unpackEncodedString(dfa_345s);
    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final char[] dfa_347 = DFA.unpackEncodedStringToUnsignedChars(dfa_347s);
    static final char[] dfa_348 = DFA.unpackEncodedStringToUnsignedChars(dfa_348s);
    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final short[] dfa_350 = DFA.unpackEncodedString(dfa_350s);
    static final short[][] dfa_351 = unpackEncodedStringArray(dfa_351s);
    class DFA607 extends DFA {
        public DFA607(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 607;
            this.eot = dfa_345;
            this.eof = dfa_346;
            this.min = dfa_347;
            this.max = dfa_348;
            this.accept = dfa_349;
            this.special = dfa_350;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "36027:2: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= ruleLiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= ruleBindingElement ) ) ) | ( (lv_value_3_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA607_39 = input.LA(1);
                        int index607_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_39==EOF||LA607_39==Comma||LA607_39==EqualsSign||LA607_39==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA607_39==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        input.seek(index607_39);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA607_47 = input.LA(1);
                        int index607_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_47==EOF||LA607_47==Comma||LA607_47==EqualsSign||LA607_47==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA607_47==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        input.seek(index607_47);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA607_55 = input.LA(1);
                        int index607_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_55==EOF||LA607_55==Comma||LA607_55==EqualsSign||LA607_55==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA607_55==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        input.seek(index607_55);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA607_63 = input.LA(1);
                        int index607_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_63==EOF||LA607_63==Comma||LA607_63==EqualsSign||LA607_63==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA607_63==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        input.seek(index607_63);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA607_34 = input.LA(1);
                        int index607_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_34==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_34==EOF||LA607_34==Comma||LA607_34==EqualsSign||LA607_34==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_34);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA607_40 = input.LA(1);
                        int index607_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_40==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_40==EOF||LA607_40==Comma||LA607_40==EqualsSign||LA607_40==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_40);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA607_48 = input.LA(1);
                        int index607_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_48==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_48==EOF||LA607_48==Comma||LA607_48==EqualsSign||LA607_48==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_48);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA607_56 = input.LA(1);
                        int index607_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_56==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_56==EOF||LA607_56==Comma||LA607_56==EqualsSign||LA607_56==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_56);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA607_64 = input.LA(1);
                        int index607_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_64==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_64==EOF||LA607_64==Comma||LA607_64==EqualsSign||LA607_64==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_64);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA607_41 = input.LA(1);
                        int index607_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_41==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_41==EOF||LA607_41==Comma||LA607_41==EqualsSign||LA607_41==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_41);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA607_49 = input.LA(1);
                        int index607_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_49==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_49==EOF||LA607_49==Comma||LA607_49==EqualsSign||LA607_49==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_49);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA607_57 = input.LA(1);
                        int index607_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_57==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_57==EOF||LA607_57==Comma||LA607_57==EqualsSign||LA607_57==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_57);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA607_1 = input.LA(1);
                        int index607_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_1==EOF||LA607_1==Comma||LA607_1==EqualsSign||LA607_1==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA607_1==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        input.seek(index607_1);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA607_42 = input.LA(1);
                        int index607_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_42==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_42==EOF||LA607_42==Comma||LA607_42==EqualsSign||LA607_42==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_42);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA607_50 = input.LA(1);
                        int index607_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_50==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_50==EOF||LA607_50==Comma||LA607_50==EqualsSign||LA607_50==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_50);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA607_58 = input.LA(1);
                        int index607_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_58==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_58==EOF||LA607_58==Comma||LA607_58==EqualsSign||LA607_58==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_58);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA607_43 = input.LA(1);
                        int index607_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_43==EOF||LA607_43==Comma||LA607_43==EqualsSign||LA607_43==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA607_43==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        input.seek(index607_43);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA607_51 = input.LA(1);
                        int index607_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_51==EOF||LA607_51==Comma||LA607_51==EqualsSign||LA607_51==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA607_51==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        input.seek(index607_51);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA607_59 = input.LA(1);
                        int index607_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_59==EOF||LA607_59==Comma||LA607_59==EqualsSign||LA607_59==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA607_59==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        input.seek(index607_59);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA607_0 = input.LA(1);
                        int index607_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA607_0>=7 && LA607_0<=135 && (s=T2S.M_52[LA607_0-(7)])>=0) && (synpred351_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA607_0==Yield) ) {s = 34;}
                        else if ( (LA607_0==Null) && (synpred351_InternalN4JSParser())) {s = 35;}
                        else if ( (LA607_0==True) && (synpred351_InternalN4JSParser())) {s = 36;}
                        else if ( (LA607_0==False) && (synpred351_InternalN4JSParser())) {s = 37;}
                        else if ( (LA607_0==Enum) && (synpred351_InternalN4JSParser())) {s = 38;}
                        else if ((LA607_0>=4 && LA607_0<=86 && (s=T2S.M_53[LA607_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA607_0==RULE_STRING) && (synpred351_InternalN4JSParser())) {s = 65;}
                        else if ( (LA607_0==RULE_DOUBLE) && (synpred351_InternalN4JSParser())) {s = 66;}
                        else if ( (LA607_0==RULE_INT) && (synpred351_InternalN4JSParser())) {s = 67;}
                        else if ( (LA607_0==RULE_BINARY_INT) && (synpred351_InternalN4JSParser())) {s = 68;}
                        else if ( (LA607_0==RULE_OCTAL_INT) && (synpred351_InternalN4JSParser())) {s = 69;}
                        else if ( (LA607_0==RULE_HEX_INT) && (synpred351_InternalN4JSParser())) {s = 70;}
                        else if ( (LA607_0==RULE_SCIENTIFIC_INT) && (synpred351_InternalN4JSParser())) {s = 71;}
                        else if ( (LA607_0==LeftSquareBracket) && (synpred351_InternalN4JSParser())) {s = 72;}
                        else if ( (LA607_0==CommercialAt) ) {s = 73;}
                        input.seek(index607_0);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA607_44 = input.LA(1);
                        int index607_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_44==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_44==EOF||LA607_44==Comma||LA607_44==EqualsSign||LA607_44==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_44);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA607_52 = input.LA(1);
                        int index607_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_52==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_52==EOF||LA607_52==Comma||LA607_52==EqualsSign||LA607_52==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_52);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA607_60 = input.LA(1);
                        int index607_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_60==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_60==EOF||LA607_60==Comma||LA607_60==EqualsSign||LA607_60==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA607_45 = input.LA(1);
                        int index607_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_45==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_45==EOF||LA607_45==Comma||LA607_45==EqualsSign||LA607_45==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_45);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA607_53 = input.LA(1);
                        int index607_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_53==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_53==EOF||LA607_53==Comma||LA607_53==EqualsSign||LA607_53==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_53);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA607_61 = input.LA(1);
                        int index607_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_61==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_61==EOF||LA607_61==Comma||LA607_61==EqualsSign||LA607_61==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_61);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA607_46 = input.LA(1);
                        int index607_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_46==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_46==EOF||LA607_46==Comma||LA607_46==EqualsSign||LA607_46==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_46);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA607_54 = input.LA(1);
                        int index607_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_54==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_54==EOF||LA607_54==Comma||LA607_54==EqualsSign||LA607_54==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_54);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA607_62 = input.LA(1);
                        int index607_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA607_62==Colon) && (synpred351_InternalN4JSParser())) {s = 74;}
                        else if ( (LA607_62==EOF||LA607_62==Comma||LA607_62==EqualsSign||LA607_62==RightCurlyBracket) ) {s = 73;}
                        input.seek(index607_62);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 607, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_352s = "\1\4\1\140\45\uffff\32\140\12\uffff";
    static final String dfa_353s = "\1\u0096\1\160\45\uffff\32\160\12\uffff";
    static final String dfa_354s = "\2\uffff\45\1\32\uffff\10\1\1\2\1\1";
    static final String dfa_355s = "\1\30\1\13\45\uffff\1\3\1\7\1\14\1\17\1\22\1\25\1\31\1\0\1\4\1\10\1\15\1\20\1\23\1\26\1\32\1\1\1\5\1\11\1\16\1\21\1\24\1\27\1\33\1\2\1\6\1\12\12\uffff}>";
    static final String[] dfa_356s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\100\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\20\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\111\1\110\33\uffff\1\1\1\uffff\1\103\2\uffff\1\102\1\uffff\1\104\1\105\1\uffff\1\106\1\107\3\uffff\1\101",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "\1\111\3\uffff\1\112\2\uffff\1\111\10\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_352 = DFA.unpackEncodedStringToUnsignedChars(dfa_352s);
    static final char[] dfa_353 = DFA.unpackEncodedStringToUnsignedChars(dfa_353s);
    static final short[] dfa_354 = DFA.unpackEncodedString(dfa_354s);
    static final short[] dfa_355 = DFA.unpackEncodedString(dfa_355s);
    static final short[][] dfa_356 = unpackEncodedStringArray(dfa_356s);
    class DFA608 extends DFA {
        public DFA608(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 608;
            this.eot = dfa_345;
            this.eof = dfa_345;
            this.min = dfa_352;
            this.max = dfa_353;
            this.accept = dfa_354;
            this.special = dfa_355;
            this.transition = dfa_356;
        }
        public String getDescription() {
            return "36117:2: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (lv_declaredName_0_0= norm1_LiteralOrComputedPropertyName ) ) otherlv_1= Colon ) ) ( (lv_value_2_0= norm1_BindingElement ) ) ) | ( (lv_value_3_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA608_46 = input.LA(1);
                        int index608_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_46==Comma||LA608_46==EqualsSign||LA608_46==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_46==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_46);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA608_54 = input.LA(1);
                        int index608_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_54==Comma||LA608_54==EqualsSign||LA608_54==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_54==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_54);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA608_62 = input.LA(1);
                        int index608_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_62==Comma||LA608_62==EqualsSign||LA608_62==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_62==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_62);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA608_39 = input.LA(1);
                        int index608_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_39==Comma||LA608_39==EqualsSign||LA608_39==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_39==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_39);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA608_47 = input.LA(1);
                        int index608_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_47==Comma||LA608_47==EqualsSign||LA608_47==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_47==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_47);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA608_55 = input.LA(1);
                        int index608_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_55==Comma||LA608_55==EqualsSign||LA608_55==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_55==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_55);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA608_63 = input.LA(1);
                        int index608_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_63==Comma||LA608_63==EqualsSign||LA608_63==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_63==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_63);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA608_40 = input.LA(1);
                        int index608_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_40==Comma||LA608_40==EqualsSign||LA608_40==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_40==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA608_48 = input.LA(1);
                        int index608_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_48==Comma||LA608_48==EqualsSign||LA608_48==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_48==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA608_56 = input.LA(1);
                        int index608_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_56==Comma||LA608_56==EqualsSign||LA608_56==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_56==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_56);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA608_64 = input.LA(1);
                        int index608_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_64==Comma||LA608_64==EqualsSign||LA608_64==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_64==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_64);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA608_1 = input.LA(1);
                        int index608_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_1==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        else if ( (LA608_1==Comma||LA608_1==EqualsSign||LA608_1==RightCurlyBracket) ) {s = 73;}
                        input.seek(index608_1);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA608_41 = input.LA(1);
                        int index608_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_41==Comma||LA608_41==EqualsSign||LA608_41==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_41==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_41);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA608_49 = input.LA(1);
                        int index608_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_49==Comma||LA608_49==EqualsSign||LA608_49==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_49==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_49);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA608_57 = input.LA(1);
                        int index608_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_57==Comma||LA608_57==EqualsSign||LA608_57==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_57==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_57);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA608_42 = input.LA(1);
                        int index608_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_42==Comma||LA608_42==EqualsSign||LA608_42==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_42==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_42);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA608_50 = input.LA(1);
                        int index608_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_50==Comma||LA608_50==EqualsSign||LA608_50==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_50==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_50);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA608_58 = input.LA(1);
                        int index608_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_58==Comma||LA608_58==EqualsSign||LA608_58==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_58==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_58);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA608_43 = input.LA(1);
                        int index608_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_43==Comma||LA608_43==EqualsSign||LA608_43==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_43==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_43);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA608_51 = input.LA(1);
                        int index608_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_51==Comma||LA608_51==EqualsSign||LA608_51==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_51==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_51);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA608_59 = input.LA(1);
                        int index608_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_59==Comma||LA608_59==EqualsSign||LA608_59==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_59==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_59);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA608_44 = input.LA(1);
                        int index608_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_44==Comma||LA608_44==EqualsSign||LA608_44==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_44==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_44);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA608_52 = input.LA(1);
                        int index608_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_52==Comma||LA608_52==EqualsSign||LA608_52==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_52==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_52);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA608_60 = input.LA(1);
                        int index608_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_60==Comma||LA608_60==EqualsSign||LA608_60==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_60==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_60);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA608_0 = input.LA(1);
                        int index608_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA608_0>=7 && LA608_0<=135 && (s=T2S.M_54[LA608_0-(7)])>=0) && (synpred352_InternalN4JSParser())) { /* 38 cases */ }
                        else if ((LA608_0>=4 && LA608_0<=86 && (s=T2S.M_53[LA608_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA608_0==RULE_STRING) && (synpred352_InternalN4JSParser())) {s = 65;}
                        else if ( (LA608_0==RULE_DOUBLE) && (synpred352_InternalN4JSParser())) {s = 66;}
                        else if ( (LA608_0==RULE_INT) && (synpred352_InternalN4JSParser())) {s = 67;}
                        else if ( (LA608_0==RULE_BINARY_INT) && (synpred352_InternalN4JSParser())) {s = 68;}
                        else if ( (LA608_0==RULE_OCTAL_INT) && (synpred352_InternalN4JSParser())) {s = 69;}
                        else if ( (LA608_0==RULE_HEX_INT) && (synpred352_InternalN4JSParser())) {s = 70;}
                        else if ( (LA608_0==RULE_SCIENTIFIC_INT) && (synpred352_InternalN4JSParser())) {s = 71;}
                        else if ( (LA608_0==LeftSquareBracket) && (synpred352_InternalN4JSParser())) {s = 72;}
                        else if ( (LA608_0==CommercialAt) ) {s = 73;}
                        input.seek(index608_0);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA608_45 = input.LA(1);
                        int index608_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_45==Comma||LA608_45==EqualsSign||LA608_45==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_45==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_45);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA608_53 = input.LA(1);
                        int index608_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_53==Comma||LA608_53==EqualsSign||LA608_53==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_53==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_53);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA608_61 = input.LA(1);
                        int index608_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA608_61==Comma||LA608_61==EqualsSign||LA608_61==RightCurlyBracket) ) {s = 73;}
                        else if ( (LA608_61==Colon) && (synpred352_InternalN4JSParser())) {s = 74;}
                        input.seek(index608_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 608, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_357s = "\110\uffff";
    static final String dfa_358s = "\1\107\107\uffff";
    static final String dfa_359s = "\1\4\6\uffff\100\0\1\uffff";
    static final String dfa_360s = "\1\u0092\6\uffff\100\0\1\uffff";
    static final String dfa_361s = "\1\uffff\6\1\100\uffff\1\2";
    static final String dfa_362s = "\1\71\6\uffff\1\11\1\1\1\13\1\24\1\34\1\43\1\53\1\62\1\72\1\0\1\12\1\23\1\33\1\44\1\54\1\63\1\73\1\2\1\14\1\25\1\35\1\45\1\55\1\64\1\74\1\3\1\15\1\26\1\36\1\46\1\56\1\65\1\75\1\4\1\16\1\27\1\37\1\47\1\5\1\17\1\30\1\40\1\50\1\57\1\66\1\76\1\6\1\20\1\31\1\41\1\51\1\60\1\67\1\77\1\7\1\21\1\32\1\42\1\52\1\61\1\70\1\100\1\10\1\22\1\uffff}>";
    static final String[] dfa_363s = {
            "\1\73\1\66\1\100\1\33\1\75\1\101\1\106\1\103\1\62\1\15\1\16\1\61\1\27\1\17\1\24\1\25\1\102\1\60\1\20\1\23\1\31\1\104\1\35\1\63\1\37\1\70\1\43\1\77\1\76\1\10\1\12\1\13\1\14\1\53\1\36\1\41\1\72\1\46\1\50\1\74\1\11\1\22\1\54\1\65\1\51\1\40\1\52\1\71\1\45\1\47\4\uffff\1\26\1\55\1\57\1\34\1\105\1\56\1\42\1\44\7\uffff\1\107\10\uffff\1\64\1\21\1\30\1\32\1\67\12\uffff\1\107\1\uffff\1\107\3\uffff\2\107\5\uffff\1\107\30\uffff\1\7\1\uffff\1\1\4\uffff\1\3\1\4\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final short[] dfa_358 = DFA.unpackEncodedString(dfa_358s);
    static final char[] dfa_359 = DFA.unpackEncodedStringToUnsignedChars(dfa_359s);
    static final char[] dfa_360 = DFA.unpackEncodedStringToUnsignedChars(dfa_360s);
    static final short[] dfa_361 = DFA.unpackEncodedString(dfa_361s);
    static final short[] dfa_362 = DFA.unpackEncodedString(dfa_362s);
    static final short[][] dfa_363 = unpackEncodedStringArray(dfa_363s);
    class DFA626 extends DFA {
        public DFA626(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 626;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_363;
        }
        public String getDescription() {
            return "37363:4: ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | Namespace | RULE_INT | RULE_HEX_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_SCIENTIFIC_INT | RULE_LEGACY_OCTAL_INT | RULE_IDENTIFIER )=> (this_INT_3= RULE_INT | this_HEX_INT_4= RULE_HEX_INT | this_BINARY_INT_5= RULE_BINARY_INT | this_OCTAL_INT_6= RULE_OCTAL_INT | this_SCIENTIFIC_INT_7= RULE_SCIENTIFIC_INT | this_LEGACY_OCTAL_INT_8= RULE_LEGACY_OCTAL_INT | this_IdentifierName_9= ruleIdentifierName ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA626_16 = input.LA(1);
                        int index626_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA626_8 = input.LA(1);
                        int index626_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA626_24 = input.LA(1);
                        int index626_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_24);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA626_32 = input.LA(1);
                        int index626_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_32);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA626_40 = input.LA(1);
                        int index626_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_40);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA626_45 = input.LA(1);
                        int index626_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA626_53 = input.LA(1);
                        int index626_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_53);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA626_61 = input.LA(1);
                        int index626_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_61);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA626_69 = input.LA(1);
                        int index626_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_69);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA626_7 = input.LA(1);
                        int index626_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA626_17 = input.LA(1);
                        int index626_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA626_9 = input.LA(1);
                        int index626_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_9);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA626_25 = input.LA(1);
                        int index626_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_25);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA626_33 = input.LA(1);
                        int index626_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_33);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA626_41 = input.LA(1);
                        int index626_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_41);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA626_46 = input.LA(1);
                        int index626_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_46);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA626_54 = input.LA(1);
                        int index626_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA626_62 = input.LA(1);
                        int index626_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_62);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA626_70 = input.LA(1);
                        int index626_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_70);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA626_18 = input.LA(1);
                        int index626_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_18);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA626_10 = input.LA(1);
                        int index626_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_10);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA626_26 = input.LA(1);
                        int index626_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_26);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA626_34 = input.LA(1);
                        int index626_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_34);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA626_42 = input.LA(1);
                        int index626_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_42);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA626_47 = input.LA(1);
                        int index626_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_47);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA626_55 = input.LA(1);
                        int index626_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_55);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA626_63 = input.LA(1);
                        int index626_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_63);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA626_19 = input.LA(1);
                        int index626_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_19);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA626_11 = input.LA(1);
                        int index626_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_11);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA626_27 = input.LA(1);
                        int index626_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_27);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA626_35 = input.LA(1);
                        int index626_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_35);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA626_43 = input.LA(1);
                        int index626_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_43);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA626_48 = input.LA(1);
                        int index626_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_48);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA626_56 = input.LA(1);
                        int index626_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_56);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA626_64 = input.LA(1);
                        int index626_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_64);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA626_12 = input.LA(1);
                        int index626_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_12);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA626_20 = input.LA(1);
                        int index626_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_20);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA626_28 = input.LA(1);
                        int index626_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_28);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA626_36 = input.LA(1);
                        int index626_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_36);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA626_44 = input.LA(1);
                        int index626_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_44);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA626_49 = input.LA(1);
                        int index626_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_49);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA626_57 = input.LA(1);
                        int index626_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_57);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA626_65 = input.LA(1);
                        int index626_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_65);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA626_13 = input.LA(1);
                        int index626_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_13);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA626_21 = input.LA(1);
                        int index626_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_21);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA626_29 = input.LA(1);
                        int index626_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_29);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA626_37 = input.LA(1);
                        int index626_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_37);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA626_50 = input.LA(1);
                        int index626_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA626_58 = input.LA(1);
                        int index626_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_58);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA626_66 = input.LA(1);
                        int index626_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_66);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA626_14 = input.LA(1);
                        int index626_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_14);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA626_22 = input.LA(1);
                        int index626_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_22);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA626_30 = input.LA(1);
                        int index626_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_30);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA626_38 = input.LA(1);
                        int index626_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_38);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA626_51 = input.LA(1);
                        int index626_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_51);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA626_59 = input.LA(1);
                        int index626_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_59);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA626_67 = input.LA(1);
                        int index626_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_67);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA626_0 = input.LA(1);
                        int index626_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA626_0==RULE_INT) && (synpred355_InternalN4JSParser())) {s = 1;}
                        else if ( (LA626_0==RULE_HEX_INT) && (synpred355_InternalN4JSParser())) {s = 2;}
                        else if ( (LA626_0==RULE_BINARY_INT) && (synpred355_InternalN4JSParser())) {s = 3;}
                        else if ( (LA626_0==RULE_OCTAL_INT) && (synpred355_InternalN4JSParser())) {s = 4;}
                        else if ( (LA626_0==RULE_SCIENTIFIC_INT) && (synpred355_InternalN4JSParser())) {s = 5;}
                        else if ( (LA626_0==RULE_LEGACY_OCTAL_INT) && (synpred355_InternalN4JSParser())) {s = 6;}
                        else if ((LA626_0>=4 && LA626_0<=135 && (s=T2S.M_56[LA626_0-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA626_0==EOF||LA626_0==HyphenMinusHyphenMinus||LA626_0==HyphenMinus||LA626_0==Solidus||(LA626_0>=EqualsSign && LA626_0<=GreaterThanSign)||LA626_0==LeftCurlyBracket) ) {s = 71;}
                        input.seek(index626_0);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA626_15 = input.LA(1);
                        int index626_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_15);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA626_23 = input.LA(1);
                        int index626_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_23);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA626_31 = input.LA(1);
                        int index626_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_31);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA626_39 = input.LA(1);
                        int index626_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_39);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA626_52 = input.LA(1);
                        int index626_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_52);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA626_60 = input.LA(1);
                        int index626_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_60);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA626_68 = input.LA(1);
                        int index626_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred355_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index626_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 626, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_364s = "\1\4\14\uffff\1\0\21\uffff";
    static final String dfa_365s = "\1\u0096\14\uffff\1\0\21\uffff";
    static final String dfa_366s = "\1\uffff\1\1\14\uffff\1\3\1\4\15\uffff\1\2\1\5";
    static final String dfa_367s = "\15\uffff\1\0\21\uffff}>";
    static final String[] dfa_368s = {
            "\2\17\2\uffff\1\17\10\uffff\1\17\13\uffff\1\17\2\uffff\1\17\4\uffff\1\1\2\uffff\1\17\2\uffff\1\17\5\uffff\1\17\1\1\2\17\47\uffff\1\15\2\uffff\1\1\1\uffff\1\1\11\uffff\1\16\2\uffff\1\17\2\uffff\1\17\25\uffff\1\17\1\uffff\1\1\2\uffff\1\1\1\uffff\5\1\3\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_364 = DFA.unpackEncodedStringToUnsignedChars(dfa_364s);
    static final char[] dfa_365 = DFA.unpackEncodedStringToUnsignedChars(dfa_365s);
    static final short[] dfa_366 = DFA.unpackEncodedString(dfa_366s);
    static final short[] dfa_367 = DFA.unpackEncodedString(dfa_367s);
    static final short[][] dfa_368 = unpackEncodedStringArray(dfa_368s);
    class DFA638 extends DFA {
        public DFA638(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 638;
            this.eot = dfa_66;
            this.eof = dfa_66;
            this.min = dfa_364;
            this.max = dfa_365;
            this.accept = dfa_366;
            this.special = dfa_367;
            this.transition = dfa_368;
        }
        public String getDescription() {
            return "37950:2: (this_LiteralTypeRef_0= ruleLiteralTypeRef | ( ( ( () LeftParenthesis ruleTAnonymousFormalParameterList[null] RightParenthesis ruleArrow ) )=>this_ArrowFunctionTypeExpression_1= ruleArrowFunctionTypeExpression ) | this_ArrayNTypeExpression_2= ruleArrayNTypeExpression | this_TypeRefWithModifiers_3= ruleTypeRefWithModifiers | (otherlv_4= LeftParenthesis this_TypeRef_5= ruleTypeRef otherlv_6= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA638_13 = input.LA(1);
                        int index638_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_InternalN4JSParser()) ) {s = 29;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index638_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 638, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_369s = "\172\uffff";
    static final String dfa_370s = "\1\2\171\uffff";
    static final String dfa_371s = "\1\4\1\0\170\uffff";
    static final String dfa_372s = "\1\u009a\1\0\170\uffff";
    static final String dfa_373s = "\2\uffff\1\2\166\uffff\1\1";
    static final String dfa_374s = "\1\uffff\1\0\170\uffff}>";
    static final String[] dfa_375s = {
            "\63\2\1\uffff\26\2\1\uffff\23\2\1\uffff\6\2\1\1\10\2\12\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_369 = DFA.unpackEncodedString(dfa_369s);
    static final short[] dfa_370 = DFA.unpackEncodedString(dfa_370s);
    static final char[] dfa_371 = DFA.unpackEncodedStringToUnsignedChars(dfa_371s);
    static final char[] dfa_372 = DFA.unpackEncodedStringToUnsignedChars(dfa_372s);
    static final short[] dfa_373 = DFA.unpackEncodedString(dfa_373s);
    static final short[] dfa_374 = DFA.unpackEncodedString(dfa_374s);
    static final short[][] dfa_375 = unpackEncodedStringArray(dfa_375s);
    class DFA639 extends DFA {
        public DFA639(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 639;
            this.eot = dfa_369;
            this.eof = dfa_370;
            this.min = dfa_371;
            this.max = dfa_372;
            this.accept = dfa_373;
            this.special = dfa_374;
            this.transition = dfa_375;
        }
        public String getDescription() {
            return "38043:3: ( ( ( QuestionMark ) )=> (lv_followedByQuestionMark_1_0= QuestionMark ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA639_1 = input.LA(1);
                        int index639_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred360_InternalN4JSParser()) ) {s = 121;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index639_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 639, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_376s = {
            "\63\2\1\uffff\26\2\1\uffff\20\2\1\1\2\2\1\uffff\17\2\12\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_376 = unpackEncodedStringArray(dfa_376s);
    class DFA641 extends DFA {
        public DFA641(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 641;
            this.eot = dfa_369;
            this.eof = dfa_370;
            this.min = dfa_371;
            this.max = dfa_372;
            this.accept = dfa_373;
            this.special = dfa_374;
            this.transition = dfa_376;
        }
        public String getDescription() {
            return "38100:4: ( ( ( PlusSign ) )=> (lv_dynamic_2_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA641_1 = input.LA(1);
                        int index641_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred361_InternalN4JSParser()) ) {s = 121;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index641_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 641, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_377s = "\1\uffff\1\35\14\uffff\1\35\3\uffff\3\35\12\uffff";
    static final String dfa_378s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\12\uffff";
    static final String dfa_379s = "\1\u0096\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\12\uffff";
    static final String dfa_380s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\10\1\1\2\1\1";
    static final String dfa_381s = "\1\4\1\3\12\uffff\1\5\1\uffff\1\6\1\0\1\1\1\11\1\2\1\7\1\10\12\uffff}>";
    static final String[] dfa_382s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\34\1\31\1\10\2\uffff\1\7\1\uffff\1\35\2\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\4\uffff\1\35\2\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\2\35\1\17\1\35\6\uffff\1\3\1\5\1\uffff\1\33\1\4\22\uffff\1\12\3\uffff\1\15\5\uffff\1\35\2\uffff\1\35\1\uffff\1\35\7\uffff\1\35\1\uffff\1\35\2\uffff\1\35\2\uffff\1\35\25\uffff\1\1\1\uffff\1\35\2\uffff\1\35\1\uffff\5\35\3\uffff\1\35",
            "\1\35\1\uffff\1\35\1\uffff\2\35\1\uffff\1\35\1\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\36\11\uffff\1\35",
            "",
            "\1\35\1\uffff\1\35\1\uffff\2\35\1\uffff\1\35\1\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "\1\36\11\uffff\1\35",
            "\1\36\11\uffff\1\35",
            "\1\36\11\uffff\1\35",
            "\1\35\1\uffff\1\35\1\uffff\2\35\1\uffff\1\35\1\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "\1\35\1\uffff\1\35\1\uffff\2\35\1\uffff\1\35\1\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "\1\35\1\uffff\1\35\1\uffff\2\35\1\uffff\1\35\1\uffff\1\36\1\uffff\2\35\1\uffff\1\35\1\uffff\1\35\3\uffff\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_377 = DFA.unpackEncodedString(dfa_377s);
    static final char[] dfa_378 = DFA.unpackEncodedStringToUnsignedChars(dfa_378s);
    static final char[] dfa_379 = DFA.unpackEncodedStringToUnsignedChars(dfa_379s);
    static final short[] dfa_380 = DFA.unpackEncodedString(dfa_380s);
    static final short[] dfa_381 = DFA.unpackEncodedString(dfa_381s);
    static final short[][] dfa_382 = unpackEncodedStringArray(dfa_382s);
    class DFA658 extends DFA {
        public DFA658(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 658;
            this.eot = dfa_66;
            this.eof = dfa_377;
            this.min = dfa_378;
            this.max = dfa_379;
            this.accept = dfa_380;
            this.special = dfa_381;
            this.transition = dfa_382;
        }
        public String getDescription() {
            return "39038:3: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (lv_name_1_0= ruleBindingIdentifier ) ) ( ( Colon )=>this_ColonSepTypeRef_2= ruleColonSepTypeRef[$current] ) ) ) | ( (lv_typeRef_3_0= ruleTypeRef ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA658_15 = input.LA(1);
                        int index658_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_15==LeftCurlyBracket) ) {s = 29;}
                        else if ( (LA658_15==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        input.seek(index658_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA658_16 = input.LA(1);
                        int index658_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_16==LeftCurlyBracket) ) {s = 29;}
                        else if ( (LA658_16==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        input.seek(index658_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA658_18 = input.LA(1);
                        int index658_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_18==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        else if ( (LA658_18==EOF||LA658_18==Ampersand||LA658_18==RightParenthesis||(LA658_18>=PlusSign && LA658_18<=Comma)||LA658_18==FullStop||(LA658_18>=LessThanSign && LA658_18<=EqualsSign)||LA658_18==QuestionMark||LA658_18==LeftSquareBracket||LA658_18==VerticalLine) ) {s = 29;}
                        input.seek(index658_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA658_1 = input.LA(1);
                        int index658_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_1==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        else if ( (LA658_1==EOF||LA658_1==Ampersand||LA658_1==RightParenthesis||(LA658_1>=PlusSign && LA658_1<=Comma)||LA658_1==FullStop||(LA658_1>=LessThanSign && LA658_1<=EqualsSign)||LA658_1==QuestionMark||LA658_1==LeftSquareBracket||LA658_1==VerticalLine) ) {s = 29;}
                        input.seek(index658_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA658_0 = input.LA(1);
                        int index658_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA658_0>=12 && LA658_0<=135 && (s=T2S.M_57[LA658_0-(12)])>=0) && (synpred364_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA658_0==Constructor) ) {s = 12;}
                        else if ( (LA658_0==Of) && (synpred364_InternalN4JSParser())) {s = 13;}
                        else if ( (LA658_0==Target) ) {s = 14;}
                        else if ( (LA658_0==Type) ) {s = 15;}
                        else if ( (LA658_0==Union) ) {s = 16;}
                        else if ( (LA658_0==Intersection) ) {s = 17;}
                        else if ( (LA658_0==This) ) {s = 18;}
                        else if ( (LA658_0==Promisify) ) {s = 19;}
                        else if ( (LA658_0==Await) ) {s = 20;}
                        else if ( (LA658_0==Async) && (synpred364_InternalN4JSParser())) {s = 21;}
                        else if ( (LA658_0==Implements) && (synpred364_InternalN4JSParser())) {s = 22;}
                        else if ( (LA658_0==Interface) && (synpred364_InternalN4JSParser())) {s = 23;}
                        else if ( (LA658_0==Private) && (synpred364_InternalN4JSParser())) {s = 24;}
                        else if ( (LA658_0==Protected) && (synpred364_InternalN4JSParser())) {s = 25;}
                        else if ( (LA658_0==Public) && (synpred364_InternalN4JSParser())) {s = 26;}
                        else if ( (LA658_0==Out) && (synpred364_InternalN4JSParser())) {s = 27;}
                        else if ( (LA658_0==Namespace) && (synpred364_InternalN4JSParser())) {s = 28;}
                        else if ( (LA658_0==Default||LA658_0==False||(LA658_0>=This_1 && LA658_0<=True)||LA658_0==Void||LA658_0==LeftParenthesis||LA658_0==PlusSign||LA658_0==HyphenMinus||LA658_0==QuestionMark||LA658_0==LeftSquareBracket||LA658_0==LeftCurlyBracket||LA658_0==Tilde||LA658_0==RULE_INT||LA658_0==RULE_DOUBLE||(LA658_0>=RULE_BINARY_INT && LA658_0<=RULE_SCIENTIFIC_INT)||LA658_0==RULE_STRING) ) {s = 29;}
                        input.seek(index658_0);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA658_12 = input.LA(1);
                        int index658_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_12==LeftCurlyBracket) ) {s = 29;}
                        else if ( (LA658_12==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        input.seek(index658_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA658_14 = input.LA(1);
                        int index658_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_14==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        else if ( (LA658_14==EOF||LA658_14==Ampersand||LA658_14==RightParenthesis||(LA658_14>=PlusSign && LA658_14<=Comma)||LA658_14==FullStop||(LA658_14>=LessThanSign && LA658_14<=EqualsSign)||LA658_14==QuestionMark||LA658_14==LeftSquareBracket||LA658_14==VerticalLine) ) {s = 29;}
                        input.seek(index658_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA658_19 = input.LA(1);
                        int index658_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_19==EOF||LA658_19==Ampersand||LA658_19==RightParenthesis||(LA658_19>=PlusSign && LA658_19<=Comma)||LA658_19==FullStop||(LA658_19>=LessThanSign && LA658_19<=EqualsSign)||LA658_19==QuestionMark||LA658_19==LeftSquareBracket||LA658_19==VerticalLine) ) {s = 29;}
                        else if ( (LA658_19==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        input.seek(index658_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA658_20 = input.LA(1);
                        int index658_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_20==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        else if ( (LA658_20==EOF||LA658_20==Ampersand||LA658_20==RightParenthesis||(LA658_20>=PlusSign && LA658_20<=Comma)||LA658_20==FullStop||(LA658_20>=LessThanSign && LA658_20<=EqualsSign)||LA658_20==QuestionMark||LA658_20==LeftSquareBracket||LA658_20==VerticalLine) ) {s = 29;}
                        input.seek(index658_20);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA658_17 = input.LA(1);
                        int index658_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA658_17==LeftCurlyBracket) ) {s = 29;}
                        else if ( (LA658_17==Colon) && (synpred364_InternalN4JSParser())) {s = 30;}
                        input.seek(index658_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 658, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_383s = {
            "\63\2\1\uffff\26\2\1\uffff\23\2\1\uffff\3\2\1\1\13\2\12\uffff\2\2\11\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\5\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_383 = unpackEncodedStringArray(dfa_383s);
    class DFA664 extends DFA {
        public DFA664(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 664;
            this.eot = dfa_369;
            this.eof = dfa_370;
            this.min = dfa_371;
            this.max = dfa_372;
            this.accept = dfa_373;
            this.special = dfa_374;
            this.transition = dfa_383;
        }
        public String getDescription() {
            return "39393:3: ( ( LessThanSign )=>this_TypeArguments_1= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA664_1 = input.LA(1);
                        int index664_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_InternalN4JSParser()) ) {s = 121;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index664_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 664, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA665 extends DFA {
        public DFA665(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 665;
            this.eot = dfa_369;
            this.eof = dfa_370;
            this.min = dfa_371;
            this.max = dfa_372;
            this.accept = dfa_373;
            this.special = dfa_374;
            this.transition = dfa_383;
        }
        public String getDescription() {
            return "39456:3: ( ( LessThanSign )=>this_TypeArguments_2= ruleTypeArguments[$current] )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA665_1 = input.LA(1);
                        int index665_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred367_InternalN4JSParser()) ) {s = 121;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index665_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 665, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_384s = "\u0081\uffff";
    static final String dfa_385s = "\1\uffff\7\12\171\uffff";
    static final String dfa_386s = "\1\10\7\4\171\uffff";
    static final String dfa_387s = "\1\u0087\7\u009a\171\uffff";
    static final String dfa_388s = "\10\uffff\1\1\170\2";
    static final String dfa_389s = "\1\uffff\1\3\1\4\1\5\1\6\1\0\1\1\1\2\171\uffff}>";
    static final String[] dfa_390s = {
            "\1\4\10\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\122\uffff\1\7",
            "\1\105\1\100\1\13\1\45\1\107\1\112\1\117\1\114\1\74\1\30\1\31\1\73\1\41\1\32\1\16\1\37\1\113\1\72\1\33\1\36\1\43\1\115\1\47\1\75\1\51\1\102\1\55\1\111\1\110\1\23\1\25\1\26\1\27\1\65\1\50\1\53\1\104\1\60\1\62\1\106\1\24\1\35\1\66\1\77\1\63\1\52\1\64\1\103\1\57\1\61\1\140\1\uffff\1\156\1\137\1\40\1\67\1\71\1\46\1\116\1\70\1\54\1\56\1\142\1\154\1\146\1\157\1\152\1\175\1\155\1\176\1\153\1\135\1\136\1\141\1\uffff\1\150\1\167\1\160\1\76\1\34\1\42\1\44\1\101\1\161\1\147\1\u0080\1\132\1\143\1\171\1\164\1\130\1\20\1\15\1\133\1\10\1\131\1\166\1\162\1\11\1\151\1\134\1\21\1\170\1\127\1\165\1\144\1\14\1\145\1\17\1\177\12\uffff\1\174\1\173\11\uffff\1\22\1\uffff\1\122\2\uffff\1\121\1\uffff\1\123\1\124\1\172\1\125\1\126\3\uffff\1\120\1\uffff\1\163\1\uffff\1\163",
            "\1\105\1\100\1\13\1\45\1\107\1\112\1\117\1\114\1\74\1\30\1\31\1\73\1\41\1\32\1\16\1\37\1\113\1\72\1\33\1\36\1\43\1\115\1\47\1\75\1\51\1\102\1\55\1\111\1\110\1\23\1\25\1\26\1\27\1\65\1\50\1\53\1\104\1\60\1\62\1\106\1\24\1\35\1\66\1\77\1\63\1\52\1\64\1\103\1\57\1\61\1\140\1\uffff\1\156\1\137\1\40\1\67\1\71\1\46\1\116\1\70\1\54\1\56\1\142\1\154\1\146\1\157\1\152\1\175\1\155\1\176\1\153\1\135\1\136\1\141\1\uffff\1\150\1\167\1\160\1\76\1\34\1\42\1\44\1\101\1\161\1\147\1\u0080\1\132\1\143\1\171\1\164\1\130\1\20\1\15\1\133\1\10\1\131\1\166\1\162\1\11\1\151\1\134\1\21\1\170\1\127\1\165\1\144\1\14\1\145\1\17\1\177\12\uffff\1\174\1\173\11\uffff\1\22\1\uffff\1\122\2\uffff\1\121\1\uffff\1\123\1\124\1\172\1\125\1\126\3\uffff\1\120\1\uffff\1\163\1\uffff\1\163",
            "\1\105\1\100\1\13\1\45\1\107\1\112\1\117\1\114\1\74\1\30\1\31\1\73\1\41\1\32\1\16\1\37\1\113\1\72\1\33\1\36\1\43\1\115\1\47\1\75\1\51\1\102\1\55\1\111\1\110\1\23\1\25\1\26\1\27\1\65\1\50\1\53\1\104\1\60\1\62\1\106\1\24\1\35\1\66\1\77\1\63\1\52\1\64\1\103\1\57\1\61\1\140\1\uffff\1\156\1\137\1\40\1\67\1\71\1\46\1\116\1\70\1\54\1\56\1\142\1\154\1\146\1\157\1\152\1\175\1\155\1\176\1\153\1\135\1\136\1\141\1\uffff\1\150\1\167\1\160\1\76\1\34\1\42\1\44\1\101\1\161\1\147\1\u0080\1\132\1\143\1\171\1\164\1\130\1\20\1\15\1\133\1\10\1\131\1\166\1\162\1\11\1\151\1\134\1\21\1\170\1\127\1\165\1\144\1\14\1\145\1\17\1\177\12\uffff\1\174\1\173\11\uffff\1\22\1\uffff\1\122\2\uffff\1\121\1\uffff\1\123\1\124\1\172\1\125\1\126\3\uffff\1\120\1\uffff\1\163\1\uffff\1\163",
            "\1\105\1\100\1\13\1\45\1\107\1\112\1\117\1\114\1\74\1\30\1\31\1\73\1\41\1\32\1\16\1\37\1\113\1\72\1\33\1\36\1\43\1\115\1\47\1\75\1\51\1\102\1\55\1\111\1\110\1\23\1\25\1\26\1\27\1\65\1\50\1\53\1\104\1\60\1\62\1\106\1\24\1\35\1\66\1\77\1\63\1\52\1\64\1\103\1\57\1\61\1\140\1\uffff\1\156\1\137\1\40\1\67\1\71\1\46\1\116\1\70\1\54\1\56\1\142\1\154\1\146\1\157\1\152\1\175\1\155\1\176\1\153\1\135\1\136\1\141\1\uffff\1\150\1\167\1\160\1\76\1\34\1\42\1\44\1\101\1\161\1\147\1\u0080\1\132\1\143\1\171\1\164\1\130\1\20\1\15\1\133\1\10\1\131\1\166\1\162\1\11\1\151\1\134\1\21\1\170\1\127\1\165\1\144\1\14\1\145\1\17\1\177\12\uffff\1\174\1\173\11\uffff\1\22\1\uffff\1\122\2\uffff\1\121\1\uffff\1\123\1\124\1\172\1\125\1\126\3\uffff\1\120\1\uffff\1\163\1\uffff\1\163",
            "\1\105\1\100\1\13\1\45\1\107\1\112\1\117\1\114\1\74\1\30\1\31\1\73\1\41\1\32\1\16\1\37\1\113\1\72\1\33\1\36\1\43\1\115\1\47\1\75\1\51\1\102\1\55\1\111\1\110\1\23\1\25\1\26\1\27\1\65\1\50\1\53\1\104\1\60\1\62\1\106\1\24\1\35\1\66\1\77\1\63\1\52\1\64\1\103\1\57\1\61\1\140\1\uffff\1\156\1\137\1\40\1\67\1\71\1\46\1\116\1\70\1\54\1\56\1\142\1\154\1\146\1\157\1\152\1\175\1\155\1\176\1\153\1\135\1\136\1\141\1\uffff\1\150\1\167\1\160\1\76\1\34\1\42\1\44\1\101\1\161\1\147\1\u0080\1\132\1\143\1\171\1\164\1\130\1\20\1\15\1\133\1\10\1\131\1\166\1\162\1\11\1\151\1\134\1\21\1\170\1\127\1\165\1\144\1\14\1\145\1\17\1\177\12\uffff\1\174\1\173\11\uffff\1\22\1\uffff\1\122\2\uffff\1\121\1\uffff\1\123\1\124\1\172\1\125\1\126\3\uffff\1\120\1\uffff\1\163\1\uffff\1\163",
            "\1\105\1\100\1\13\1\45\1\107\1\112\1\117\1\114\1\74\1\30\1\31\1\73\1\41\1\32\1\16\1\37\1\113\1\72\1\33\1\36\1\43\1\115\1\47\1\75\1\51\1\102\1\55\1\111\1\110\1\23\1\25\1\26\1\27\1\65\1\50\1\53\1\104\1\60\1\62\1\106\1\24\1\35\1\66\1\77\1\63\1\52\1\64\1\103\1\57\1\61\1\140\1\uffff\1\156\1\137\1\40\1\67\1\71\1\46\1\116\1\70\1\54\1\56\1\142\1\154\1\146\1\157\1\152\1\175\1\155\1\176\1\153\1\135\1\136\1\141\1\uffff\1\150\1\167\1\160\1\76\1\34\1\42\1\44\1\101\1\161\1\147\1\u0080\1\132\1\143\1\171\1\164\1\130\1\20\1\15\1\133\1\10\1\131\1\166\1\162\1\11\1\151\1\134\1\21\1\170\1\127\1\165\1\144\1\14\1\145\1\17\1\177\12\uffff\1\174\1\173\11\uffff\1\22\1\uffff\1\122\2\uffff\1\121\1\uffff\1\123\1\124\1\172\1\125\1\126\3\uffff\1\120\1\uffff\1\163\1\uffff\1\163",
            "\1\105\1\100\1\13\1\45\1\107\1\112\1\117\1\114\1\74\1\30\1\31\1\73\1\41\1\32\1\16\1\37\1\113\1\72\1\33\1\36\1\43\1\115\1\47\1\75\1\51\1\102\1\55\1\111\1\110\1\23\1\25\1\26\1\27\1\65\1\50\1\53\1\104\1\60\1\62\1\106\1\24\1\35\1\66\1\77\1\63\1\52\1\64\1\103\1\57\1\61\1\140\1\uffff\1\156\1\137\1\40\1\67\1\71\1\46\1\116\1\70\1\54\1\56\1\142\1\154\1\146\1\157\1\152\1\175\1\155\1\176\1\153\1\135\1\136\1\141\1\uffff\1\150\1\167\1\160\1\76\1\34\1\42\1\44\1\101\1\161\1\147\1\u0080\1\132\1\143\1\171\1\164\1\130\1\20\1\15\1\133\1\10\1\131\1\166\1\162\1\11\1\151\1\134\1\21\1\170\1\127\1\165\1\144\1\14\1\145\1\17\1\177\12\uffff\1\174\1\173\11\uffff\1\22\1\uffff\1\122\2\uffff\1\121\1\uffff\1\123\1\124\1\172\1\125\1\126\3\uffff\1\120\1\uffff\1\163\1\uffff\1\163",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_384 = DFA.unpackEncodedString(dfa_384s);
    static final short[] dfa_385 = DFA.unpackEncodedString(dfa_385s);
    static final char[] dfa_386 = DFA.unpackEncodedStringToUnsignedChars(dfa_386s);
    static final char[] dfa_387 = DFA.unpackEncodedStringToUnsignedChars(dfa_387s);
    static final short[] dfa_388 = DFA.unpackEncodedString(dfa_388s);
    static final short[] dfa_389 = DFA.unpackEncodedString(dfa_389s);
    static final short[][] dfa_390 = unpackEncodedStringArray(dfa_390s);
    class DFA669 extends DFA {
        public DFA669(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 669;
            this.eot = dfa_384;
            this.eof = dfa_385;
            this.min = dfa_386;
            this.max = dfa_387;
            this.accept = dfa_388;
            this.special = dfa_389;
            this.transition = dfa_390;
        }
        public String getDescription() {
            return "()* loopback of 39635:3: ( ( (lv_astNamespaceLikeRefs_0_0= ruleNamespaceLikeRef ) ) otherlv_1= FullStop )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA669_5 = input.LA(1);
                        int index669_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA669_5==FullStop) ) {s = 8;}
                        else if ((LA669_5>=-1 && LA669_5<=150 && (s=T2S.M_58[LA669_5-(-1)])>=0) && (synpred368_InternalN4JSParser())) { /* 107 cases */ }
                        else if ( (LA669_5==RULE_ML_COMMENT||LA669_5==RULE_EOL) && (synpred368_InternalN4JSParser())) {s = 115;}
                        else if ( (LA669_5==RightParenthesis) && (synpred368_InternalN4JSParser())) {s = 116;}
                        else if ( (LA669_5==RightSquareBracket) && (synpred368_InternalN4JSParser())) {s = 117;}
                        else if ( (LA669_5==Colon) && (synpred368_InternalN4JSParser())) {s = 118;}
                        else if ( (LA669_5==CommercialAtCommercialAt) && (synpred368_InternalN4JSParser())) {s = 119;}
                        else if ( (LA669_5==CommercialAt) && (synpred368_InternalN4JSParser())) {s = 120;}
                        else if ( (LA669_5==LeftParenthesis) && (synpred368_InternalN4JSParser())) {s = 121;}
                        else if ( (LA669_5==RULE_LEGACY_OCTAL_INT) && (synpred368_InternalN4JSParser())) {s = 122;}
                        else if ( (LA669_5==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred368_InternalN4JSParser())) {s = 123;}
                        else if ( (LA669_5==RULE_TEMPLATE_HEAD) && (synpred368_InternalN4JSParser())) {s = 124;}
                        else if ( (LA669_5==PlusSignPlusSign) && (synpred368_InternalN4JSParser())) {s = 125;}
                        else if ( (LA669_5==HyphenMinusHyphenMinus) && (synpred368_InternalN4JSParser())) {s = 126;}
                        else if ( (LA669_5==Tilde) && (synpred368_InternalN4JSParser())) {s = 127;}
                        else if ( (LA669_5==ExclamationMark) && (synpred368_InternalN4JSParser())) {s = 128;}
                        input.seek(index669_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA669_6 = input.LA(1);
                        int index669_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA669_6==FullStop) ) {s = 8;}
                        else if ((LA669_6>=-1 && LA669_6<=150 && (s=T2S.M_58[LA669_6-(-1)])>=0) && (synpred368_InternalN4JSParser())) { /* 107 cases */ }
                        else if ( (LA669_6==RULE_ML_COMMENT||LA669_6==RULE_EOL) && (synpred368_InternalN4JSParser())) {s = 115;}
                        else if ( (LA669_6==RightParenthesis) && (synpred368_InternalN4JSParser())) {s = 116;}
                        else if ( (LA669_6==RightSquareBracket) && (synpred368_InternalN4JSParser())) {s = 117;}
                        else if ( (LA669_6==Colon) && (synpred368_InternalN4JSParser())) {s = 118;}
                        else if ( (LA669_6==CommercialAtCommercialAt) && (synpred368_InternalN4JSParser())) {s = 119;}
                        else if ( (LA669_6==CommercialAt) && (synpred368_InternalN4JSParser())) {s = 120;}
                        else if ( (LA669_6==LeftParenthesis) && (synpred368_InternalN4JSParser())) {s = 121;}
                        else if ( (LA669_6==RULE_LEGACY_OCTAL_INT) && (synpred368_InternalN4JSParser())) {s = 122;}
                        else if ( (LA669_6==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred368_InternalN4JSParser())) {s = 123;}
                        else if ( (LA669_6==RULE_TEMPLATE_HEAD) && (synpred368_InternalN4JSParser())) {s = 124;}
                        else if ( (LA669_6==PlusSignPlusSign) && (synpred368_InternalN4JSParser())) {s = 125;}
                        else if ( (LA669_6==HyphenMinusHyphenMinus) && (synpred368_InternalN4JSParser())) {s = 126;}
                        else if ( (LA669_6==Tilde) && (synpred368_InternalN4JSParser())) {s = 127;}
                        else if ( (LA669_6==ExclamationMark) && (synpred368_InternalN4JSParser())) {s = 128;}
                        input.seek(index669_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA669_7 = input.LA(1);
                        int index669_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA669_7==FullStop) ) {s = 8;}
                        else if ((LA669_7>=-1 && LA669_7<=150 && (s=T2S.M_58[LA669_7-(-1)])>=0) && (synpred368_InternalN4JSParser())) { /* 107 cases */ }
                        else if ( (LA669_7==RULE_ML_COMMENT||LA669_7==RULE_EOL) && (synpred368_InternalN4JSParser())) {s = 115;}
                        else if ( (LA669_7==RightParenthesis) && (synpred368_InternalN4JSParser())) {s = 116;}
                        else if ( (LA669_7==RightSquareBracket) && (synpred368_InternalN4JSParser())) {s = 117;}
                        else if ( (LA669_7==Colon) && (synpred368_InternalN4JSParser())) {s = 118;}
                        else if ( (LA669_7==CommercialAtCommercialAt) && (synpred368_InternalN4JSParser())) {s = 119;}
                        else if ( (LA669_7==CommercialAt) && (synpred368_InternalN4JSParser())) {s = 120;}
                        else if ( (LA669_7==LeftParenthesis) && (synpred368_InternalN4JSParser())) {s = 121;}
                        else if ( (LA669_7==RULE_LEGACY_OCTAL_INT) && (synpred368_InternalN4JSParser())) {s = 122;}
                        else if ( (LA669_7==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred368_InternalN4JSParser())) {s = 123;}
                        else if ( (LA669_7==RULE_TEMPLATE_HEAD) && (synpred368_InternalN4JSParser())) {s = 124;}
                        else if ( (LA669_7==PlusSignPlusSign) && (synpred368_InternalN4JSParser())) {s = 125;}
                        else if ( (LA669_7==HyphenMinusHyphenMinus) && (synpred368_InternalN4JSParser())) {s = 126;}
                        else if ( (LA669_7==Tilde) && (synpred368_InternalN4JSParser())) {s = 127;}
                        else if ( (LA669_7==ExclamationMark) && (synpred368_InternalN4JSParser())) {s = 128;}
                        input.seek(index669_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA669_1 = input.LA(1);
                        int index669_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA669_1==FullStop) ) {s = 8;}
                        else if ((LA669_1>=-1 && LA669_1<=150 && (s=T2S.M_58[LA669_1-(-1)])>=0) && (synpred368_InternalN4JSParser())) { /* 107 cases */ }
                        else if ( (LA669_1==RULE_ML_COMMENT||LA669_1==RULE_EOL) && (synpred368_InternalN4JSParser())) {s = 115;}
                        else if ( (LA669_1==RightParenthesis) && (synpred368_InternalN4JSParser())) {s = 116;}
                        else if ( (LA669_1==RightSquareBracket) && (synpred368_InternalN4JSParser())) {s = 117;}
                        else if ( (LA669_1==Colon) && (synpred368_InternalN4JSParser())) {s = 118;}
                        else if ( (LA669_1==CommercialAtCommercialAt) && (synpred368_InternalN4JSParser())) {s = 119;}
                        else if ( (LA669_1==CommercialAt) && (synpred368_InternalN4JSParser())) {s = 120;}
                        else if ( (LA669_1==LeftParenthesis) && (synpred368_InternalN4JSParser())) {s = 121;}
                        else if ( (LA669_1==RULE_LEGACY_OCTAL_INT) && (synpred368_InternalN4JSParser())) {s = 122;}
                        else if ( (LA669_1==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred368_InternalN4JSParser())) {s = 123;}
                        else if ( (LA669_1==RULE_TEMPLATE_HEAD) && (synpred368_InternalN4JSParser())) {s = 124;}
                        else if ( (LA669_1==PlusSignPlusSign) && (synpred368_InternalN4JSParser())) {s = 125;}
                        else if ( (LA669_1==HyphenMinusHyphenMinus) && (synpred368_InternalN4JSParser())) {s = 126;}
                        else if ( (LA669_1==Tilde) && (synpred368_InternalN4JSParser())) {s = 127;}
                        else if ( (LA669_1==ExclamationMark) && (synpred368_InternalN4JSParser())) {s = 128;}
                        input.seek(index669_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA669_2 = input.LA(1);
                        int index669_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA669_2==FullStop) ) {s = 8;}
                        else if ((LA669_2>=-1 && LA669_2<=150 && (s=T2S.M_58[LA669_2-(-1)])>=0) && (synpred368_InternalN4JSParser())) { /* 107 cases */ }
                        else if ( (LA669_2==RULE_ML_COMMENT||LA669_2==RULE_EOL) && (synpred368_InternalN4JSParser())) {s = 115;}
                        else if ( (LA669_2==RightParenthesis) && (synpred368_InternalN4JSParser())) {s = 116;}
                        else if ( (LA669_2==RightSquareBracket) && (synpred368_InternalN4JSParser())) {s = 117;}
                        else if ( (LA669_2==Colon) && (synpred368_InternalN4JSParser())) {s = 118;}
                        else if ( (LA669_2==CommercialAtCommercialAt) && (synpred368_InternalN4JSParser())) {s = 119;}
                        else if ( (LA669_2==CommercialAt) && (synpred368_InternalN4JSParser())) {s = 120;}
                        else if ( (LA669_2==LeftParenthesis) && (synpred368_InternalN4JSParser())) {s = 121;}
                        else if ( (LA669_2==RULE_LEGACY_OCTAL_INT) && (synpred368_InternalN4JSParser())) {s = 122;}
                        else if ( (LA669_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred368_InternalN4JSParser())) {s = 123;}
                        else if ( (LA669_2==RULE_TEMPLATE_HEAD) && (synpred368_InternalN4JSParser())) {s = 124;}
                        else if ( (LA669_2==PlusSignPlusSign) && (synpred368_InternalN4JSParser())) {s = 125;}
                        else if ( (LA669_2==HyphenMinusHyphenMinus) && (synpred368_InternalN4JSParser())) {s = 126;}
                        else if ( (LA669_2==Tilde) && (synpred368_InternalN4JSParser())) {s = 127;}
                        else if ( (LA669_2==ExclamationMark) && (synpred368_InternalN4JSParser())) {s = 128;}
                        input.seek(index669_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA669_3 = input.LA(1);
                        int index669_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA669_3==FullStop) ) {s = 8;}
                        else if ((LA669_3>=-1 && LA669_3<=150 && (s=T2S.M_58[LA669_3-(-1)])>=0) && (synpred368_InternalN4JSParser())) { /* 107 cases */ }
                        else if ( (LA669_3==RULE_ML_COMMENT||LA669_3==RULE_EOL) && (synpred368_InternalN4JSParser())) {s = 115;}
                        else if ( (LA669_3==RightParenthesis) && (synpred368_InternalN4JSParser())) {s = 116;}
                        else if ( (LA669_3==RightSquareBracket) && (synpred368_InternalN4JSParser())) {s = 117;}
                        else if ( (LA669_3==Colon) && (synpred368_InternalN4JSParser())) {s = 118;}
                        else if ( (LA669_3==CommercialAtCommercialAt) && (synpred368_InternalN4JSParser())) {s = 119;}
                        else if ( (LA669_3==CommercialAt) && (synpred368_InternalN4JSParser())) {s = 120;}
                        else if ( (LA669_3==LeftParenthesis) && (synpred368_InternalN4JSParser())) {s = 121;}
                        else if ( (LA669_3==RULE_LEGACY_OCTAL_INT) && (synpred368_InternalN4JSParser())) {s = 122;}
                        else if ( (LA669_3==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred368_InternalN4JSParser())) {s = 123;}
                        else if ( (LA669_3==RULE_TEMPLATE_HEAD) && (synpred368_InternalN4JSParser())) {s = 124;}
                        else if ( (LA669_3==PlusSignPlusSign) && (synpred368_InternalN4JSParser())) {s = 125;}
                        else if ( (LA669_3==HyphenMinusHyphenMinus) && (synpred368_InternalN4JSParser())) {s = 126;}
                        else if ( (LA669_3==Tilde) && (synpred368_InternalN4JSParser())) {s = 127;}
                        else if ( (LA669_3==ExclamationMark) && (synpred368_InternalN4JSParser())) {s = 128;}
                        input.seek(index669_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA669_4 = input.LA(1);
                        int index669_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA669_4==FullStop) ) {s = 8;}
                        else if ((LA669_4>=-1 && LA669_4<=150 && (s=T2S.M_58[LA669_4-(-1)])>=0) && (synpred368_InternalN4JSParser())) { /* 107 cases */ }
                        else if ( (LA669_4==RULE_ML_COMMENT||LA669_4==RULE_EOL) && (synpred368_InternalN4JSParser())) {s = 115;}
                        else if ( (LA669_4==RightParenthesis) && (synpred368_InternalN4JSParser())) {s = 116;}
                        else if ( (LA669_4==RightSquareBracket) && (synpred368_InternalN4JSParser())) {s = 117;}
                        else if ( (LA669_4==Colon) && (synpred368_InternalN4JSParser())) {s = 118;}
                        else if ( (LA669_4==CommercialAtCommercialAt) && (synpred368_InternalN4JSParser())) {s = 119;}
                        else if ( (LA669_4==CommercialAt) && (synpred368_InternalN4JSParser())) {s = 120;}
                        else if ( (LA669_4==LeftParenthesis) && (synpred368_InternalN4JSParser())) {s = 121;}
                        else if ( (LA669_4==RULE_LEGACY_OCTAL_INT) && (synpred368_InternalN4JSParser())) {s = 122;}
                        else if ( (LA669_4==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred368_InternalN4JSParser())) {s = 123;}
                        else if ( (LA669_4==RULE_TEMPLATE_HEAD) && (synpred368_InternalN4JSParser())) {s = 124;}
                        else if ( (LA669_4==PlusSignPlusSign) && (synpred368_InternalN4JSParser())) {s = 125;}
                        else if ( (LA669_4==HyphenMinusHyphenMinus) && (synpred368_InternalN4JSParser())) {s = 126;}
                        else if ( (LA669_4==Tilde) && (synpred368_InternalN4JSParser())) {s = 127;}
                        else if ( (LA669_4==ExclamationMark) && (synpred368_InternalN4JSParser())) {s = 128;}
                        input.seek(index669_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 669, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_391s = "\u00c4\uffff";
    static final String dfa_392s = "\3\4\1\uffff\76\0\u0082\uffff";
    static final String dfa_393s = "\3\u0087\1\uffff\76\0\u0082\uffff";
    static final String dfa_394s = "\3\uffff\1\3\76\uffff\1\3\100\1\1\4\100\2";
    static final String dfa_395s = "\1\41\1\43\1\66\1\uffff\1\34\1\2\1\5\1\10\1\12\1\14\1\16\1\17\1\63\1\64\1\65\1\67\1\71\1\73\1\75\1\77\1\42\1\45\1\47\1\51\1\53\1\55\1\57\1\61\1\20\1\22\1\24\1\26\1\30\1\32\1\35\1\37\1\0\1\3\1\6\1\11\1\13\1\15\1\70\1\72\1\74\1\76\1\100\1\44\1\46\1\50\1\52\1\54\1\56\1\60\1\62\1\21\1\23\1\25\1\27\1\31\1\33\1\36\1\40\1\1\1\4\1\7\u0082\uffff}>";
    static final String[] dfa_396s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\101\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\20\uffff\1\57\1\16\1\25\1\27\1\62\5\uffff\1\102\11\uffff\1\3\40\uffff\1\4",
            "\1\167\1\162\1\174\1\127\1\171\1\175\1\u0082\1\177\1\156\1\111\1\112\1\155\1\123\1\113\1\120\1\121\1\176\1\154\1\114\1\117\1\125\1\u0080\1\131\1\157\1\133\1\164\1\137\1\173\1\172\1\104\1\106\1\107\1\110\1\147\1\132\1\135\1\166\1\142\1\144\1\170\1\105\1\116\1\150\1\161\1\145\1\134\1\146\1\165\1\141\1\143\4\uffff\1\122\1\151\1\153\1\130\1\u0081\1\152\1\136\1\140\20\uffff\1\160\1\115\1\124\1\126\1\163\60\uffff\1\103",
            "\1\u00b8\1\u00b3\1\u00bd\1\u009a\1\u00ba\1\u00be\1\u00c3\1\u00c0\1\u00af\1\u008c\1\u008d\1\u00ae\1\u0096\1\u008e\1\u0093\1\u0094\1\u00bf\1\u00ad\1\u008f\1\u0092\1\u0098\1\u00c1\1\u009c\1\u00b0\1\u009e\1\u00b5\1\u00a2\1\u00bc\1\u00bb\1\u0087\1\u0089\1\u008a\1\u008b\1\u00aa\1\u009d\1\u00a0\1\u00b7\1\u00a5\1\u00a7\1\u00b9\1\u0088\1\u0091\1\u00ab\1\u00b2\1\u00a8\1\u009f\1\u00a9\1\u00b6\1\u00a4\1\u00a6\4\uffff\1\u0095\1\u0084\1\u00ac\1\u009b\1\u00c2\1\u0085\1\u00a1\1\u00a3\20\uffff\1\u00b1\1\u0090\1\u0097\1\u0099\1\u00b4\60\uffff\1\u0086",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_391 = DFA.unpackEncodedString(dfa_391s);
    static final char[] dfa_392 = DFA.unpackEncodedStringToUnsignedChars(dfa_392s);
    static final char[] dfa_393 = DFA.unpackEncodedStringToUnsignedChars(dfa_393s);
    static final short[] dfa_394 = DFA.unpackEncodedString(dfa_394s);
    static final short[] dfa_395 = DFA.unpackEncodedString(dfa_395s);
    static final short[][] dfa_396 = unpackEncodedStringArray(dfa_396s);
    class DFA673 extends DFA {
        public DFA673(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 673;
            this.eot = dfa_391;
            this.eof = dfa_391;
            this.min = dfa_392;
            this.max = dfa_393;
            this.accept = dfa_394;
            this.special = dfa_395;
            this.transition = dfa_396;
        }
        public String getDescription() {
            return "39849:2: ( ( ( ( () Get ( ( ruleIdentifierName ) ) ) )=>this_TStructGetter_0= ruleTStructGetter ) | ( ( ( () Set ( ( ruleIdentifierName ) ) ) )=>this_TStructSetter_1= ruleTStructSetter ) | ( ( ( () ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) )? LeftParenthesis ) )=>this_TStructMethod_2= ruleTStructMethod ) | this_TStructField_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA673_36 = input.LA(1);
                        int index673_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_36);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA673_63 = input.LA(1);
                        int index673_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_63);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA673_5 = input.LA(1);
                        int index673_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA673_37 = input.LA(1);
                        int index673_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_37);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA673_64 = input.LA(1);
                        int index673_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_64);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA673_6 = input.LA(1);
                        int index673_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA673_38 = input.LA(1);
                        int index673_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_38);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA673_65 = input.LA(1);
                        int index673_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_65);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA673_7 = input.LA(1);
                        int index673_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA673_39 = input.LA(1);
                        int index673_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_39);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA673_8 = input.LA(1);
                        int index673_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_8);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA673_40 = input.LA(1);
                        int index673_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_40);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA673_9 = input.LA(1);
                        int index673_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_9);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA673_41 = input.LA(1);
                        int index673_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_41);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA673_10 = input.LA(1);
                        int index673_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_10);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA673_11 = input.LA(1);
                        int index673_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_11);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA673_28 = input.LA(1);
                        int index673_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_28);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA673_55 = input.LA(1);
                        int index673_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA673_29 = input.LA(1);
                        int index673_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_29);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA673_56 = input.LA(1);
                        int index673_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_56);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA673_30 = input.LA(1);
                        int index673_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA673_57 = input.LA(1);
                        int index673_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_57);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA673_31 = input.LA(1);
                        int index673_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_31);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA673_58 = input.LA(1);
                        int index673_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_58);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA673_32 = input.LA(1);
                        int index673_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_32);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA673_59 = input.LA(1);
                        int index673_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_59);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA673_33 = input.LA(1);
                        int index673_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_33);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA673_60 = input.LA(1);
                        int index673_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_60);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA673_4 = input.LA(1);
                        int index673_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_4);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA673_34 = input.LA(1);
                        int index673_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_34);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA673_61 = input.LA(1);
                        int index673_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_61);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA673_35 = input.LA(1);
                        int index673_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_35);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA673_62 = input.LA(1);
                        int index673_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_62);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA673_0 = input.LA(1);
                        int index673_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA673_0==Get) ) {s = 1;}
                        else if ( (LA673_0==Set) ) {s = 2;}
                        else if ( (LA673_0==LessThanSign) && (synpred371_InternalN4JSParser())) {s = 3;}
                        else if ((LA673_0>=4 && LA673_0<=135 && (s=T2S.M_65[LA673_0-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA673_0==LeftParenthesis) && (synpred371_InternalN4JSParser())) {s = 66;}
                        input.seek(index673_0);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA673_20 = input.LA(1);
                        int index673_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_20);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA673_1 = input.LA(1);
                        int index673_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA673_1>=4 && LA673_1<=135 && (s=T2S.M_66[LA673_1-(4)])>=0) && (synpred369_InternalN4JSParser())) { /* 64 cases */ }
                        else if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_1);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA673_47 = input.LA(1);
                        int index673_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_47);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA673_21 = input.LA(1);
                        int index673_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_21);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA673_48 = input.LA(1);
                        int index673_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_48);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA673_22 = input.LA(1);
                        int index673_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_22);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA673_49 = input.LA(1);
                        int index673_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_49);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA673_23 = input.LA(1);
                        int index673_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_23);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA673_50 = input.LA(1);
                        int index673_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_50);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA673_24 = input.LA(1);
                        int index673_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_24);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA673_51 = input.LA(1);
                        int index673_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_51);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA673_25 = input.LA(1);
                        int index673_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_25);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA673_52 = input.LA(1);
                        int index673_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA673_26 = input.LA(1);
                        int index673_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_26);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA673_53 = input.LA(1);
                        int index673_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_53);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA673_27 = input.LA(1);
                        int index673_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_27);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA673_54 = input.LA(1);
                        int index673_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_54);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA673_12 = input.LA(1);
                        int index673_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_12);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA673_13 = input.LA(1);
                        int index673_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_13);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA673_14 = input.LA(1);
                        int index673_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_14);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA673_2 = input.LA(1);
                        int index673_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA673_2>=4 && LA673_2<=135 && (s=T2S.M_67[LA673_2-(4)])>=0) && (synpred370_InternalN4JSParser())) { /* 64 cases */ }
                        else if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_2);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA673_15 = input.LA(1);
                        int index673_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_15);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA673_42 = input.LA(1);
                        int index673_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_42);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA673_16 = input.LA(1);
                        int index673_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_16);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA673_43 = input.LA(1);
                        int index673_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_43);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA673_17 = input.LA(1);
                        int index673_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_17);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA673_44 = input.LA(1);
                        int index673_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_44);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA673_18 = input.LA(1);
                        int index673_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_18);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA673_45 = input.LA(1);
                        int index673_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_45);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA673_19 = input.LA(1);
                        int index673_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_19);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA673_46 = input.LA(1);
                        int index673_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 131;}
                        input.seek(index673_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 673, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA781 extends DFA {
        public DFA781(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 781;
            this.eot = dfa_206;
            this.eof = dfa_206;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "15748:5: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA784 extends DFA {
        public DFA784(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 784;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "15962:5: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA786 extends DFA {
        public DFA786(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 786;
            this.eot = dfa_206;
            this.eof = dfa_206;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "16047:5: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA789 extends DFA {
        public DFA789(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 789;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "16261:5: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA791 extends DFA {
        public DFA791(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 791;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "16353:7: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA793 extends DFA {
        public DFA793(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 793;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "16758:7: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA795 extends DFA {
        public DFA795(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 795;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_193;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_197;
        }
        public String getDescription() {
            return "17034:7: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA797 extends DFA {
        public DFA797(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 797;
            this.eot = dfa_192;
            this.eof = dfa_192;
            this.min = dfa_198;
            this.max = dfa_194;
            this.accept = dfa_195;
            this.special = dfa_196;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "17439:7: ( ( ruleTypeReferenceWithModifiersNode ) )?";
        }
    }
    class DFA843 extends DFA {
        public DFA843(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 843;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "()* loopback of 31906:5: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA848 extends DFA {
        public DFA848(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 848;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "()* loopback of 32183:5: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA853 extends DFA {
        public DFA853(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 853;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "()* loopback of 32649:7: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA859 extends DFA {
        public DFA859(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 859;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_335;
            this.max = dfa_336;
            this.accept = dfa_337;
            this.special = dfa_31;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "()* loopback of 33307:7: ( ( ruleN4Modifier ) )*";
        }
    }
    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFC3FCFFBFFF1FF72L,0x30024C6A925D0683L,0x000000000047D280L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x000000100A309C00L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000000000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x100840188AB19E00L,0x0001040000000002L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x000840188BB19A00L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x000000108A319800L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x000000180A309800L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0002000000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000040040L,0x0000404000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x000000100A309A00L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x000040100A309800L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00000000007C0003L,0x0000000000000080L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x000800000A309800L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x001E092120020130L,0x00024A0290000000L,0x000000000047D280L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x000840188A319A00L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x100840188A339E00L,0x0000440040000002L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000800000000000L,0x0001002000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0xF81FCD79EB719F70L,0x30024C4A92440682L,0x000000000047D280L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0001000000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x100840188A319A00L,0x0000000000000002L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x100000100A309800L,0x0000000000000002L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0xD8088D01AA309F70L,0x00004C0000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000400040440000L,0x0000000000400080L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000400040440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00010000007C0003L,0x0000000000000080L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000004050440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000004010440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000000010440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30024C4A92440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0xFC3FCFFBFFF1FF70L,0x30034C6A925D0683L,0x000000000047D280L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000004010440000L,0x0000000000000088L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0xD8888D01AA309F70L,0x00004C0020440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0xD8888D01AA309F70L,0x00004C0000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000880010000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0xD8088D01AA349F70L,0x0000404000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0xD8088D01AA349F70L,0x0000400000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000080020000100L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000040002L,0x0000008000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x001E092120020132L,0x00024A0290000000L,0x000000000047D280L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0xD8888D01AA309F70L,0x0000040000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0xF81F8D69EB719F72L,0x30024C4A92440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000040000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_24;
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0xFC3FCFFBFFF1FF70L,0x30024C6A925D0683L,0x000000000047D280L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000100000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0xF81F8D79EB719F70L,0x30024C6A92440682L,0x000000000047D280L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30024C4AB2440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30024C6A92440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0001002000440000L,0x0000000005000080L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30034C6A92440680L,0x000000000547D280L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000100000020000L,0x0001000000000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000100000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000400080000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000400080002L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000480000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0xF89F8D69EB719F70L,0x30025C4B92440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0xF89F8D69EB719F70L,0x30024C4B92440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0xFCBFFFFFFFFFFFF0L,0x00034E42D07C0003L,0x000000000047D280L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0xFCBFFFFFFFFFFFF0L,0x00024E42D07C0003L,0x000000000047D280L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0xFCBFFFFFFFFFFFF0L,0x00024A42D07C0003L,0x000000000047D280L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024800007C0003L,0x000000000046D280L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024800407C0003L,0x000000000046D280L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0xD81E8D21AA329F70L,0x00024A0290440000L,0x000000000047D280L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000000010004000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0xF80F8D69AB319F72L,0x30004C4C10444400L,0x000000000047D280L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0xF80F8D69AB319F70L,0x30004C4810440400L,0x000000000047D280L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0xF89F8D69EB719F70L,0x30024C4AB2440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0xF89F8D69EB719F70L,0x30024C4A92440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00000040007C0003L,0x0000000000000080L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000280L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000082L,0x0000014000001000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000082L,0x0000014000201000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0240000000000002L,0x0000000000002004L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0100000000000002L,0x0000018200820568L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0xF81F8D69EB719F72L,0x30024C4AD2440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0xF81F8D69EB719F70L,0x30034C4A92440680L,0x000000000047D280L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000080020000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x001F092120020130L,0x00024A0AB0000400L,0x000000000047D280L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x001F092120020130L,0x00024A0A90000400L,0x000000000047D280L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0xD8088D01AA349F70L,0x0002404000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x4000080020000100L,0x0000000000200000L,0x0000000000000080L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00034C40507C0003L,0x000000000046D280L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0000000000040042L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0xF81F8D69AB339F70L,0x30004C4810440400L,0x000000000047D280L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0010080120020100L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0xD8088D01AA309F70L,0x0000400000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0xD8088D01AA309F70L,0x000000C000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024C40507C0003L,0x000000000046D280L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x080000100A309800L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x800000100A309800L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024840407C0003L,0x000000000046D280L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x0000000000000000L,0x000102B000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000005000000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00034C00007C0003L,0x000000000046D280L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00024C00007C0003L,0x000000000046D280L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0xD8888D01AA309F70L,0x00005C0100440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0xD8888D01AA309F70L,0x00004C0100440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00004108007C0003L,0x0000000000000080L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0000000000000002L,0x0000000400004000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000200L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF2L,0x00000002007C0203L,0x000000000007C280L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x4000000000000000L,0x0000020000200000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000007D200L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x0000000000010000L,0x0000040000000000L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x001A090120020130L,0x0002480000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x4000000000000000L,0x0000000000200000L,0x0000000000000080L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0xD89E8D21AA329F70L,0x00024A02B0440000L,0x000000000047D280L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_188 = new BitSet(new long[]{0xD89E8D21AA329F70L,0x00024A0290440000L,0x000000000047D280L});
    public static final BitSet FOLLOW_189 = new BitSet(new long[]{0x0010080120020102L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_190 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_191 = new BitSet(new long[]{0x0020000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_192 = new BitSet(new long[]{0x401E092120020130L,0x00025A0290200000L,0x000000000047D280L});
    public static final BitSet FOLLOW_193 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00010040107C0003L,0x0000000000000080L});
    public static final BitSet FOLLOW_194 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00010061107C0003L,0x0000000000000080L});
    public static final BitSet FOLLOW_195 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00000000107C0003L,0x0000000000000080L});
    public static final BitSet FOLLOW_196 = new BitSet(new long[]{0x0000000000000002L,0x0000021000000000L});
    public static final BitSet FOLLOW_197 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_198 = new BitSet(new long[]{0x0012080120020100L,0x0000020000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199 = new BitSet(new long[]{0x0000004000040002L});
    public static final BitSet FOLLOW_200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_201 = new BitSet(new long[]{0xD8088D01AA309F72L,0x0002000000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_202 = new BitSet(new long[]{0xD8088D01AA309F72L,0x0000000000440000L,0x0000000000000080L});
    public static final BitSet FOLLOW_203 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x00000800007C0003L,0x000000000046D280L});
    public static final BitSet FOLLOW_204 = new BitSet(new long[]{0xF81F8969EB719F70L,0x30024C4A92440680L,0x000000000047D280L});
}
final class T2S{
	final static int[] M_0 = { 12, 10, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 11, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 80, 75, 85, -1, 82, 86, 91, 88, 71, -1, -1, 70, -1, -1, 93, -1, 87, 69, -1, -1, -1, 89, -1, 72, -1, 77, -1, 84, 83, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, 81, -1, -1, -1, 74, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, 66, 68, -1, 90, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65};
	final static int[] M_2 = { 52, 47, 57, -1, 54, 58, 63, 60, 43, -1, -1, 42, -1, -1, 65, -1, 59, 41, -1, -1, -1, 61, -1, 44, -1, 49, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, 51, -1, 37, 53, -1, -1, -1, 46, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, 38, 40, -1, 62, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_3 = { 25, -1, 20, 23, -1, -1, 22, -1, -1, -1, -1, 18, 19, -1, -1, -1, 21, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13};
	final static int[] M_4 = { 6, -1, -1, -1, -1, 41, 37, 45, -1, 43, 19, 17, 11, 14, 81, 88, 13, 23, 90, -1, -1, 9, 10, 68, 26, 28, 12, 83, 15, 85, 39, 70, 22, 44, 82, -1, 18, 16, 60, 50, 86, 40, 79, 32, 42, 91, 89, 20, 36, 62, 49, 59, 21, 69, 84, -1, -1, -1, -1, 80, 33, 25, 48, 46, 34, 87, 24, -1, -1, -1, -1, -1, 71, -1, 72, 64, -1, -1, -1, -1, -1, 27, -1, 35, 78, 77, -1, 38, -1, -1, 76, -1, -1, 47, -1, -1, 73, -1, 74, -1, 63, -1, 30, 51, -1, -1, -1, 8, 65, -1, -1, 29, -1, 7, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, 53, -1, -1, 52, -1, 54, 55, 56, 57, 58, -1, -1, -1, 61};
	final static int[] M_5 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_6 = { 26, 21, 30, -1, 28, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 25, 20, 29, -1, 27, 30, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_9 = { 17, 12, 22, -1, 19, 23, 28, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_11 = { 16, 11, 21, -1, 18, 22, 27, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_17 = { 6, -1, -1, -1, -1, 40, 36, 44, -1, 42, 19, 17, 11, 14, 80, 87, 13, 26, 90, -1, -1, 9, 10, 67, 23, 22, 12, 82, 15, 84, 38, 69, 25, 43, 81, -1, 18, 16, 59, 49, 85, 39, 78, 31, 41, 91, 89, 20, 35, 61, 48, 58, 21, 68, 83, -1, -1, -1, -1, 79, 32, 28, 47, 45, 33, 86, 27, -1, -1, -1, -1, -1, 70, -1, 71, 63, -1, -1, -1, -1, -1, 7, -1, 34, 77, 76, -1, 37, -1, -1, 75, -1, -1, 46, -1, -1, 72, -1, 73, -1, 62, -1, 29, 50, -1, -1, -1, 8, 64, -1, -1, 24, -1, 88, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, 52, -1, -1, 51, -1, 53, 54, 55, 56, 57, -1, -1, -1, 60};
	final static int[] M_18 = { 21, 16, 24, -1, 23, 25, 30, 27, 12, -1, -1, 11, 51, -1, -1, -1, 26, 10, 55, -1, 35, 28, -1, 13, -1, 18, 57, 4, 1, -1, -1, 52, -1, 44, 33, -1, 20, -1, 6, 22, -1, -1, -1, 15, 46, 32, 43, 19, 56, -1, -1, -1, -1, -1, -1, 7, 9, 31, 29, 8, -1, -1, -1, -1, -1, -1, -1, 58, -1, 59, 48, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 63, -1, -1, 3, -1, -1, 60, -1, 61, -1, 47, -1, -1, 34, -1, -1, -1, 2, 49, -1, -1, 50, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_19 = { 20, 15, 23, -1, 22, 24, 29, 26, 11, -1, -1, 10, 51, -1, -1, -1, 25, 9, 55, -1, 35, 27, -1, 12, -1, 17, 57, 4, 1, -1, -1, 52, -1, 44, 33, -1, 19, -1, 30, 21, -1, -1, -1, 14, 46, 32, 43, 18, 56, -1, -1, -1, -1, -1, -1, 6, 8, 31, 28, 7, -1, -1, -1, -1, -1, -1, -1, 58, -1, 59, 48, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 63, -1, -1, 3, -1, -1, 60, -1, 61, -1, 47, -1, -1, 34, -1, -1, -1, 2, 49, -1, -1, 50, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_20 = { 19, 14, 24, -1, 21, 25, 30, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 18, 13, 23, -1, 20, 24, 29, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_22 = { 15, 12, 61, 34, 5, 62, 67, 64, 55, 21, 22, 54, 30, 7, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 6, 41, 60, 4, 16, 18, 19, 20, 48, 37, 39, 14, 43, 45, 3, 17, 25, 49, 58, 46, 10, 47, 11, 2, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 75, -1, -1, 13, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 70, -1, -1, 69, -1, 71, 72, -1, 73, 74, -1, -1, -1, 68};
	final static int[] M_24 = { 14, 11, 60, 33, 4, 61, 66, 63, 54, 20, 21, 53, 29, 6, 26, 27, 62, 52, 22, 25, 31, 64, 35, 55, 37, 5, 40, 59, 3, 15, 17, 18, 19, 47, 36, 38, 13, 42, 44, 2, 16, 24, 48, 57, 45, 9, 46, 10, 1, 43, -1, -1, -1, -1, 28, 49, 51, 34, 65, 50, 39, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 23, 30, 32, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 69, -1, -1, 68, -1, 70, 71, -1, 72, 73, -1, -1, -1, 67};
	final static int[] M_26 = { 22, 17, 27, -1, 24, 28, 33, 30, 13, -1, -1, 12, 53, -1, -1, -1, 29, 11, -1, -1, 35, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 54, -1, 44, 5, -1, 21, -1, 7, 23, -1, -1, -1, 16, 46, 4, 43, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 3, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, 47, -1, -1, 34, -1, -1, -1, 52, 49, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_27 = { 22, 17, 27, -1, 24, 28, 33, 30, 13, -1, -1, 12, 53, -1, -1, -1, 29, 11, -1, -1, 35, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 54, -1, 44, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 46, 5, 43, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, 3, 47, -1, -1, 34, -1, -1, -1, 52, 49, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_28 = { 23, 18, 28, -1, 25, 29, 34, 31, 14, -1, -1, 13, 54, -1, -1, -1, 30, 12, 58, -1, 36, 32, -1, 15, -1, 20, 60, 27, 26, -1, -1, 55, -1, 45, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 47, 5, 44, 21, 59, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, 1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 38, -1, -1, 37, -1, 39, 40, 41, 42, 43, -1, -1, -1, 46};
	final static int[] M_29 = { 22, 17, 27, -1, 24, 28, 33, 30, 13, -1, -1, 12, 53, -1, -1, -1, 29, 11, 57, -1, 35, 31, -1, 14, -1, 19, 59, 26, 25, -1, -1, 54, -1, 44, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 46, 5, 43, 20, 58, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, 48, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 34, 1, -1, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_30 = { 25, 20, 30, -1, 27, 31, 36, 33, 16, -1, -1, 15, 56, -1, -1, -1, 32, 14, 60, -1, 38, 34, -1, 17, -1, 22, 62, 29, 28, -1, -1, 57, -1, 47, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 49, 7, 46, 23, 61, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 40, -1, -1, 39, -1, 41, 42, 43, 44, 45, -1, -1, -1, 48};
	final static int[] M_31 = { 25, 20, 30, -1, 27, 31, 36, 33, 16, -1, -1, 15, 56, -1, -1, -1, 32, 14, 60, -1, 38, 34, -1, 17, -1, 22, 62, 29, 28, -1, -1, 57, -1, 47, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 49, 7, 46, 23, 61, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 40, -1, -1, 39, -1, 41, 42, 43, 44, 45, -1, -1, -1, 48};
	final static int[] M_32 = { 24, 19, 29, -1, 26, 30, 35, 32, 15, -1, -1, 14, 55, -1, -1, -1, 31, 13, 59, -1, 37, 33, -1, 16, -1, 21, 61, 28, 27, -1, -1, 56, -1, 46, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 48, 7, 45, 22, 60, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 39, -1, -1, 38, -1, 40, 41, 42, 43, 44, -1, -1, -1, 47};
	final static int[] M_33 = { 24, 19, 29, -1, 26, 30, 35, 32, 15, -1, -1, 14, 55, -1, -1, -1, 31, 13, 59, -1, 37, 33, -1, 16, -1, 21, 61, 28, 27, -1, -1, 56, -1, 46, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 48, 7, 45, 22, 60, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, 39, -1, -1, 38, -1, 40, 41, 42, 43, 44, -1, -1, -1, 47};
	final static int[] M_34 = { 26, 21, 31, -1, 28, 32, 37, 34, 17, -1, -1, 16, 57, -1, -1, -1, 33, 15, 61, -1, 39, 35, -1, 18, -1, 23, 63, 30, 29, -1, -1, 58, -1, 48, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 50, 8, 47, 24, 62, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 64, -1, 65, 52, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 69, -1, -1, 55, -1, -1, 66, -1, 67, -1, 51, -1, -1, 38, 6, 1, -1, 56, 53, -1, -1, 54, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 41, -1, -1, 40, -1, 42, 43, 44, 45, 46, -1, -1, -1, 49};
	final static int[] M_35 = { 27, 22, 32, -1, 29, 33, 38, 35, 18, -1, -1, 17, 58, -1, -1, -1, 34, 16, 62, -1, 40, 36, -1, 19, -1, 24, 64, 31, 30, -1, -1, 59, -1, 49, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 51, 9, 48, 25, 63, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 65, -1, 66, 53, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 70, -1, -1, 56, -1, -1, 67, -1, 68, -1, 52, -1, -1, 39, 7, 1, -1, 57, 54, -1, -1, 55, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 42, -1, -1, 41, -1, 43, 44, 45, 46, 47, -1, -1, -1, 50};
	final static int[] M_36 = { 25, 20, 30, -1, 27, 31, 36, 33, 16, -1, -1, 15, 56, -1, -1, -1, 32, 14, 60, -1, 38, 34, -1, 17, -1, 22, 62, 29, 28, -1, -1, 57, -1, 47, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 49, 8, 46, 23, 61, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 6, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 40, -1, -1, 39, -1, 41, 42, 43, 44, 45, -1, -1, -1, 48};
	final static int[] M_37 = { 26, 21, 31, -1, 28, 32, 37, 34, 17, -1, -1, 16, 57, -1, -1, -1, 33, 15, 61, -1, 39, 35, -1, 18, -1, 23, 63, 30, 29, -1, -1, 58, -1, 48, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 50, 9, 47, 24, 62, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 64, -1, 65, 52, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 69, -1, -1, 55, -1, -1, 66, -1, 67, -1, 51, -1, -1, 38, 7, 1, -1, 56, 53, -1, -1, 54, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 41, -1, -1, 40, -1, 42, 43, 44, 45, 46, -1, -1, -1, 49};
	final static int[] M_38 = { 15, -1, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_39 = { 20, -1, 23, -1, 22, 24, 29, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 35, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 44, 33, -1, 19, -1, 30, 21, -1, -1, -1, -1, 46, 32, 43, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_40 = { 51, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, 59, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53};
	final static int[] M_41 = { 20, 15, 23, -1, 22, 24, 29, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, 35, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 44, 33, -1, 19, -1, 30, 21, -1, -1, -1, 14, 46, 32, 43, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 31, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 47, -1, -1, 34, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, 37, -1, -1, 36, -1, 38, 39, 40, 41, 42, -1, -1, -1, 45};
	final static int[] M_43 = { 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 1, -1, 3, 4, 5, 6, 7, -1, -1, -1, 10};
	final static int[] M_44 = { 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 13, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 1};
	final static int[] M_45 = { 60, 55, 64, 34, 62, 65, 67, -1, -1, 20, 21, -1, 30, 22, 27, 28, -1, -1, 23, 26, 32, -1, 36, -1, 38, 57, 42, -1, 63, 16, 18, 19, -1, 50, 37, 40, 59, 45, 47, 61, 17, 25, 51, 54, 48, 39, 49, 58, 44, 46, -1, -1, -1, -1, 29, -1, 52, 35, 66, -1, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 24, 31, 33, 56, -1, -1, -1, -1, -1, 76, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, 70, -1, -1, 69, -1, 71, 72, -1, 73, 74, -1, -1, -1, 68};
	final static int[] M_48 = { 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11};
	final static int[] M_49 = { 59, 54, 63, 33, 61, 64, 66, -1, -1, 19, 20, -1, 29, 21, 26, 27, -1, -1, 22, 25, 31, -1, 35, -1, 37, 56, 41, 13, 62, 15, 17, 18, -1, 49, 36, 39, 58, 44, 46, 60, 16, 24, 50, 53, 47, 38, 48, 57, 43, 45, -1, -1, -1, -1, 28, -1, 51, 34, 65, -1, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 23, 30, 32, 55, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, 69, -1, -1, 68, -1, 70, 71, -1, 72, 73, -1, -1, -1, 67};
	final static int[] M_52 = { 21, -1, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_53 = { 53, 48, 58, -1, 55, 59, 64, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_54 = { 21, -1, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_56 = { 59, 54, 64, 27, 61, 65, 70, 67, 50, 13, 14, 49, 23, 15, 20, 21, 66, 48, 16, 19, 25, 68, 29, 51, 31, 56, 35, 63, 62, 8, 10, 11, 12, 43, 30, 33, 58, 38, 40, 60, 9, 18, 44, 53, 41, 32, 42, 57, 37, 39, -1, -1, -1, -1, 22, 45, 47, 28, 69, 46, 34, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 17, 24, 26, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
	final static int[] M_57 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_58 = { 10, -1, -1, -1, -1, 69, 64, 11, 37, 71, 74, 79, 76, 60, 24, 25, 59, 33, 26, 14, 31, 75, 58, 27, 30, 35, 77, 39, 61, 41, 66, 45, 73, 72, 19, 21, 22, 23, 53, 40, 43, 68, 48, 50, 70, 20, 29, 54, 63, 51, 42, 52, 67, 47, 49, 96, -1, 110, 95, 32, 55, 57, 38, 78, 56, 44, 46, 98, 108, 102, 111, 106, -1, 109, -1, 107, 93, 94, 97, -1, 104, -1, 112, 62, 28, 34, 36, 65, 113, 103, -1, 90, 99, -1, -1, 88, 16, 13, 91, 8, 89, -1, 114, 9, 105, 92, 17, -1, 87, -1, 100, 12, 101, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 82, -1, -1, 81, -1, 83, 84, -1, 85, 86, -1, -1, -1, 80};
	final static int[] M_65 = { 54, 49, 59, 24, 56, 60, 65, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
	final static int[] M_66 = { 119, 114, 124, 87, 121, 125, 130, 127, 110, 73, 74, 109, 83, 75, 80, 81, 126, 108, 76, 79, 85, 128, 89, 111, 91, 116, 95, 123, 122, 68, 70, 71, 72, 103, 90, 93, 118, 98, 100, 120, 69, 78, 104, 113, 101, 92, 102, 117, 97, 99, -1, -1, -1, -1, 82, 105, 107, 88, 129, 106, 94, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112, 77, 84, 86, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67};
	final static int[] M_67 = { 184, 179, 189, 154, 186, 190, 195, 192, 175, 140, 141, 174, 150, 142, 147, 148, 191, 173, 143, 146, 152, 193, 156, 176, 158, 181, 162, 188, 187, 135, 137, 138, 139, 170, 157, 160, 183, 165, 167, 185, 136, 145, 171, 178, 168, 159, 169, 182, 164, 166, -1, -1, -1, -1, 149, 132, 172, 155, 194, 133, 161, 163, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 177, 144, 151, 153, 180, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134};
}