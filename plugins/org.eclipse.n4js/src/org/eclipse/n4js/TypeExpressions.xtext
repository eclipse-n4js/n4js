/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
grammar org.eclipse.n4js.TypeExpressions with org.eclipse.n4js.common.unicode.Unicode hidden(WS, ML_COMMENT, SL_COMMENT, EOL)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/n4js/ts/Types"
import "http://www.eclipse.org/n4js/ts/TypeRefs"

// ****************************************************************************************************
// N4JS versions of type references and expressions, also used by Types.xtext
//
// References:
//
// [ECM15]	ECMAScript 2015 Language Specification / ISO/IEC (ECMA-262, 6th Edition).
//			International Standard.
//			http://www.ecma-international.org/publications/ files/ECMA-ST/Ecma-262.pdf
//
// ****************************************************************************************************

/*
 * cf. N4JSSec ยง4
 * Depending on where the type references is used, not all possible variants are allowed.
 * This is however checked by the validator in order to
 * 1) provide better error messages
 * 2) simplify grammar
 *
 * Constraints:
 * UnionElementTypeRef: no AnyType, no Void, union itself must not be dynamic
 * FParTypeRef: no Void
 * ReturnTypeRef: everything, but no dynamic
 * // in N4JS:
 * VarTypeRef: no Void, i.e.
 * AttributeTypeRef: no Void
 */
TypeRef returns TypeRef:
	IntersectionTypeExpression ({UnionTypeExpression.typeRefs+=current} ("|" typeRefs+=IntersectionTypeExpression)+)?;

IntersectionTypeExpression returns TypeRef:
	ArrayTypeExpression ({IntersectionTypeExpression.typeRefs+=current} ("&" typeRefs+=ArrayTypeExpression)+)?;

ArrayTypeExpression returns TypeRef:
	  ({ParameterizedTypeRef} typeArgs+=WildcardOldNotationWithoutBound arrayTypeExpression?='[' ']' =>({ParameterizedTypeRef.typeArgs+=current} arrayTypeExpression?='[' ']')*)
	| ({ParameterizedTypeRef} '(' typeArgs+=Wildcard ')' arrayTypeExpression?='[' ']' =>({ParameterizedTypeRef.typeArgs+=current} arrayTypeExpression?='[' ']')*)
	| PrimaryTypeExpression =>({ParameterizedTypeRef.typeArgs+=current} arrayTypeExpression?='[' ']')*;

PrimaryTypeExpression returns TypeRef:
	( LiteralTypeRef
	| ArrowFunctionTypeExpression
	| ArrayNTypeExpression
	| TypeRefWithModifiers
	| "(" TypeRef ")"
	);

TypeRefWithModifiers returns StaticBaseTypeRef:
	TypeRefWithoutModifiers =>followedByQuestionMark?='?'?;

TypeRefWithoutModifiers returns StaticBaseTypeRef:
	  ((ParameterizedTypeRef | ThisTypeRef) => dynamic?='+'?)
	| TypeTypeRef
	| FunctionTypeExpressionOLD
	| UnionTypeExpressionOLD
	| IntersectionTypeExpressionOLD;

TypeRefFunctionTypeExpression returns StaticBaseTypeRef:
	  ParameterizedTypeRef
	| ArrayNTypeExpression
	| TypeTypeRef
	| UnionTypeExpressionOLD
	| IntersectionTypeExpressionOLD;

TypeArgInTypeTypeRef returns TypeArgument:
	  ParameterizedTypeRefNominal
	| ThisTypeRefNominal
	| WildcardOldNotation;


LiteralTypeRef returns LiteralTypeRef:
	  BooleanLiteralTypeRef
	| NumericLiteralTypeRef
	| StringLiteralTypeRef;
	// note: EnumLiteralTypeRefs are not available in type expressions

BooleanLiteralTypeRef returns BooleanLiteralTypeRef:
	{BooleanLiteralTypeRef} astValue=('true' | 'false');

NumericLiteralTypeRef returns NumericLiteralTypeRef:
	('+' | astNegated?='-')?
	(
		  astValue=INT
		| astValue=DOUBLE
		| astValue=OCTAL_INT
		| astValue=LEGACY_OCTAL_INT
		| astValue=HEX_INT
		| astValue=BINARY_INT
		| astValue=SCIENTIFIC_INT
	);

StringLiteralTypeRef returns StringLiteralTypeRef:
	astValue=STRING;


ThisTypeRef returns ThisTypeRef:
	ThisTypeRefNominal | ThisTypeRefStructural;

ThisTypeRefNominal returns ThisTypeRefNominal:
	{ThisTypeRefNominal} 'this';

ThisTypeRefStructural returns ThisTypeRefStructural:
	definedTypingStrategy=TypingStrategyUseSiteOperator
	'this'
	('with' TStructMemberList)?;

FunctionTypeExpressionOLD returns FunctionTypeExpression:
	{FunctionTypeExpression}
	'{'
	('@' 'This' '(' declaredThisType=TypeRefFunctionTypeExpression ')')?
	'function'
	('<' ownedTypeVars+=TypeVariable (',' ownedTypeVars+=TypeVariable)* '>')?
	'(' TAnonymousFormalParameterList ')' ColonSepReturnTypeRef?
	'}';

ArrowFunctionTypeExpression returns FunctionTypeExpression:
	=>({FunctionTypeExpression} '(' TAnonymousFormalParameterList ')' '=>') returnTypeRef=PrimaryTypeExpression;

// TODO extract FormalParameterContainer and use returns FormalParameterContainer instead of wildcard
fragment TAnonymousFormalParameterList* :
	(fpars+=TAnonymousFormalParameter (',' fpars+=TAnonymousFormalParameter)*)?
;

/**
 * Used in type expressions, name is optional.
 */
TAnonymousFormalParameter:
	variadic?='...'? (=>(name=BindingIdentifier<Yield=false> ->ColonSepTypeRef) | typeRef=TypeRef)
	DefaultFormalParameter
;

/**
 * Used in Types language only.
 */
TFormalParameter:
	variadic?='...'? name=BindingIdentifier<Yield=false> ColonSepTypeRef
	DefaultFormalParameter
;

/**
 * Default initializers in FunctionTypeExpressions or TFunctions
 * are necessary to specify optional formal parameters. Hence, their
 * initializer expression is rather uninteresting and limited by validations
 * to 'undefined'. The shorthand form, that is omitting the initializer, is supported.
 */
fragment DefaultFormalParameter*:
	(hasInitializerAssignment?='=' astInitializer=TypeReferenceName?)?
;

UnionTypeExpressionOLD returns UnionTypeExpression:
	{UnionTypeExpression}
	'union' '{' typeRefs+=TypeRef (',' typeRefs+=TypeRef)* '}';

IntersectionTypeExpressionOLD returns IntersectionTypeExpression:
	{IntersectionTypeExpression}
	'intersection' '{' typeRefs+=TypeRef (',' typeRefs+=TypeRef)* '}';

ParameterizedTypeRef returns ParameterizedTypeRef:
	ParameterizedTypeRefNominal | ParameterizedTypeRefStructural;

ParameterizedTypeRefNominal returns ParameterizedTypeRef:
	(
		TypeReference
	|	{VersionedParameterizedTypeRef}
		TypeReference VersionRequest
	)
	(-> TypeArguments)?
;

ParameterizedTypeRefStructural returns ParameterizedTypeRefStructural:
	(
		definedTypingStrategy=TypingStrategyUseSiteOperator TypeReference
	|	{VersionedParameterizedTypeRefStructural}
		definedTypingStrategy=TypingStrategyUseSiteOperator TypeReference VersionRequest
	)
	(-> TypeArguments)?
	('with' TStructMemberList)?
;

ArrayNTypeExpression returns ParameterizedTypeRef:
	arrayNTypeExpression?='['
	(
		typeArgs+=EmptyIterableTypeExpressionTail
	|	typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* ']'
	);

EmptyIterableTypeExpressionTail returns Wildcard:
	{Wildcard} ']';

fragment VersionRequest*: requestedVersion=VERSION;

fragment TypeReference *:
	declaredType=[Type|TypeReferenceName]
;

fragment TypeArguments *:
	'<' typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* '>'
;

fragment TStructMemberList*:  '{' (astStructuralMembers+=TStructMember (';'|',')?)*  '}';

/**
 * All TMembers here are only used in ParameterizedTypeRefStructural references
 * Most type references are optional.
 */
TStructMember:
	  TStructGetter
	| TStructSetter
	| TStructMethod
	| TStructField;

TStructMethod:
	=>
	({TStructMethod}
		TypeVariables?
	    name=IdentifierName '('
	)
	TAnonymousFormalParameterList ')' ColonSepReturnTypeRef?
;

fragment TypeVariables*:
	'<' typeVars+=TypeVariable (',' typeVars+=TypeVariable)* '>'
;

fragment ColonSepTypeRef*:
	':' typeRef=TypeRef
;

fragment ColonSepReturnTypeRef*:
	':' returnTypeRef=TypeRef
;

TStructField:
	name=IdentifierName (optional?='?')? ColonSepTypeRef?
;

TStructGetter:
	=> ({TStructGetter}
	'get'
	name=IdentifierName)
	(optional?='?')?
	'(' ')' ColonSepTypeRef?
;

TStructSetter:
	=> ({TStructSetter}
	'set'
	name=IdentifierName)
	(optional?='?')?
	'(' fpar=TAnonymousFormalParameter ')'
;

TypingStrategyUseSiteOperator returns TypingStrategy:
	'~' ('~' | STRUCTMODSUFFIX)?;

TypingStrategyDefSiteOperator returns TypingStrategy:
	'~';

terminal STRUCTMODSUFFIX:
	('r' | 'i' | 'w' | '\u2205') '~'
;

TypeTypeRef returns TypeTypeRef:
	{TypeTypeRef}
	('type' | constructorRef?='constructor')
	'{' typeArg=TypeArgInTypeTypeRef '}';

TypeReferenceName:
	IDENTIFIER ('.' IDENTIFIER)*;

TypeArgument returns TypeArgument:
	Wildcard | TypeRef;

Wildcard:
	WildcardOldNotation
|	WildcardNewNotation;

WildcardOldNotation returns Wildcard:
	=> ({Wildcard} '?') (('extends' declaredUpperBound=TypeRef) | ('super'
	declaredLowerBound=TypeRef))?;

WildcardOldNotationWithoutBound returns Wildcard:
	{Wildcard} '?';

WildcardNewNotation returns Wildcard:
	(usingInOutNotation?='out' declaredUpperBound=TypeRef)
|	(usingInOutNotation?='in' declaredLowerBound=TypeRef);

TypeVariable returns TypeVariable:
	(declaredCovariant?='out' | declaredContravariant?='in')?
	name=IDENTIFIER ('extends' declaredUpperBound=TypeRef)?;

/*
 * [ECM11] (7.6, pp. 17)
 * Identifier :: IdentifierName but not ReservedWord
 * ReservedWord :: Keyword | FutureReservedWord | NullLiteral | BooleanLiteral
 */
BindingIdentifier <Yield>:
	IDENTIFIER
	// yield as identifier as of [ECM15] (11.6.2, pp. 165)
	| <!Yield> 'yield'
	| N4Keyword
;

IdentifierName:
	IDENTIFIER | ReservedWord | N4Keyword
;

ReservedWord:
	// Keywords as of [ECM15] (11.6.2, pp. 165)
	'break' | 'case' | 'catch' | 'class' | 'const' | 'continue' | 'debugger' | 'default' | 'delete'
	| 'do' | 'else' | 'export' | 'extends' | 'finally' | 'for' | 'function' | 'if' | 'import'
	| 'in' | 'instanceof' | 'new' | 'return' | 'super' | 'switch' | 'this' | 'throw' | 'try'
	| 'typeof' | 'var' | 'void' | 'while' | 'with' | 'yield'
	// null literal
	| 'null'
	// boolean literal
	| 'true' | 'false'
	// Future Reserved Word as of [ECM15] (11.6.2.2, pp. 166)
	// | 'await' /* reserved word only if parse goal is module - compromise: allow as identifier and validate */
	| 'enum';

N4Keyword:
	'get' | 'set'
	| 'let'
	| 'project'
	| 'external' | 'abstract' | 'static'
	| 'as' | 'from' | 'constructor' | 'of' | 'target'
	| 'type' | 'union' | 'intersection'
	| 'This' | 'Promisify'
	// future reserved keyword in [ECM15] only in modules, we add additional validation
	| 'await'
	// async is not a reserved keyword, i.e. it can be used as a variable name
	| 'async'
	// future reserved keywords in [ECM15], restricted via static semantic in [ECM15]
	| 'implements' | 'interface'
	| 'private' | 'protected' | 'public' // package not used in N4JS
	// definition-site variance
	| 'out'
;

terminal IDENTIFIER:
	IDENTIFIER_START IDENTIFIER_PART*;

/**
 * The terminal rules to represent number literals are listed below.
 *
 * They implement the constraint
 * 'The source character immediately following a NumericLiteral must not be an IdentifierStart or DecimalDigit.'
 * in the value converter. That is, the terminals consume a trailing identifier and
 * later on, a meaningful error will be attached.
 */
terminal INT returns ecore::EBigDecimal: DECIMAL_INTEGER_LITERAL_FRAGMENT;

terminal DOUBLE returns ecore::EBigDecimal:
	'.' DECIMAL_DIGIT_FRAGMENT+ EXPONENT_PART?
	| DECIMAL_INTEGER_LITERAL_FRAGMENT '.' DECIMAL_DIGIT_FRAGMENT* EXPONENT_PART?
;

terminal BINARY_INT returns ecore::EBigDecimal: '0' ('b' | 'B') INT_SUFFIX;

terminal OCTAL_INT returns ecore::EBigDecimal: '0' ('o' | 'O') INT_SUFFIX;

terminal LEGACY_OCTAL_INT returns ecore::EBigDecimal: '0' DECIMAL_DIGIT_FRAGMENT INT_SUFFIX;

terminal HEX_INT returns ecore::EBigDecimal: '0' ('x' | 'X') INT_SUFFIX;

/**
 * This terminal fragment includes the decimal digits '0'..'9' and also all other identifier part chars
 * to have a relaxed grammar and better error messages from the value converter.
 */
terminal fragment INT_SUFFIX: IDENTIFIER_PART*;

terminal SCIENTIFIC_INT returns ecore::EBigDecimal:
	DECIMAL_INTEGER_LITERAL_FRAGMENT EXPONENT_PART
;

terminal fragment EXPONENT_PART:
	  ('e' | 'E') SIGNED_INT
	| IDENTIFIER
;

terminal fragment SIGNED_INT:
	('+' | '-') DECIMAL_DIGIT_FRAGMENT+ IDENTIFIER?
;

/* This terminal rule is not as strict as the ECMA spec because we want to
 * provide better error messages than the lexer does.
 * Therefore, an unclosed string literal is consumed to the end of line
 * and validated in the JSStringValueConverter afterwards.
 */
terminal STRING:
	  '"' DOUBLE_STRING_CHAR* '"'?
	| "'" SINGLE_STRING_CHAR* "'"?
;

terminal fragment DOUBLE_STRING_CHAR:
	  !(LINE_TERMINATOR_FRAGMENT | '"' | '\\')
	| '\\' (LINE_TERMINATOR_SEQUENCE_FRAGMENT | !LINE_TERMINATOR_FRAGMENT)?
;

terminal fragment SINGLE_STRING_CHAR:
	  !(LINE_TERMINATOR_FRAGMENT | "'" | '\\')
	| '\\' (LINE_TERMINATOR_SEQUENCE_FRAGMENT | !LINE_TERMINATOR_FRAGMENT)?
;

terminal ML_COMMENT:
	ML_COMMENT_FRAGMENT;

terminal SL_COMMENT:
	'//' (!LINE_TERMINATOR_FRAGMENT)*;

terminal EOL:
	LINE_TERMINATOR_SEQUENCE_FRAGMENT;

terminal WS:
	WHITESPACE_FRAGMENT+;

terminal fragment UNICODE_ESCAPE_FRAGMENT:
	'\\' ('u' (
		HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
	  | '{' HEX_DIGIT* '}'?
	)?)?;

terminal fragment IDENTIFIER_START:
	  UNICODE_LETTER_FRAGMENT
	| '$'
	| '_'
	| UNICODE_ESCAPE_FRAGMENT;

terminal fragment IDENTIFIER_PART:
	  UNICODE_LETTER_FRAGMENT
	| UNICODE_ESCAPE_FRAGMENT
	| '$'
	| UNICODE_COMBINING_MARK_FRAGMENT
	| UNICODE_DIGIT_FRAGMENT
	| UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT
	| ZWNJ
	| ZWJ;

// Intentionally unused to get rid of bogus lexer errors when
// the input contains an incomplete variadic?='...' keyword, e.g. ..)
terminal DOT_DOT:
	'..'
;

terminal VERSION returns ecore::EBigDecimal:
	'#' WS* INT
;
