/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
module org.eclipse.n4js.GenerateN4JS

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

import org.eclipse.n4js.generation.*

var rootPath = ".."
var runtimeProjectName = "org.eclipse.n4js"
var runtimeProjectPath = "${rootPath}/${runtimeProjectName}"

var options = org.eclipse.xtext.xtext.generator.parser.antlr.AntlrOptions {
	keptBitSetName = "FOLLOW_ruleExpression_in_ruleExpressionStatement"
	keptBitSetsPattern = "FOLLOW_norm1_Expression_in_ruleExpressionStatement.*"
	skipUnusedRules = false
	stripAllComments = true
}

Workflow {
	component = XtextGenerator {
		configuration = N4JSGeneratorModule {
			project = StandardProjectConfig {
				baseName = runtimeProjectName
				rootPath = rootPath
				genericIde = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = false
			}
			code = {
				encoding = "UTF-8"
				// same as org.eclipse.n4js.releng.utils.license.LicenseTemplate.COPYRIGHT_HEADER
				// should re-use in the long run
				fileHeader = "/**\n * Copyright (c) 2017 NumberFour AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   NumberFour AG - Initial API and implementation\n */"
				preferXtendStubs = false
			}
		}

		language = XtextGeneratorLanguage {
			name = "org.eclipse.n4js.N4JS"
			fileExtensions = "n4js,n4jsx,js,jsx,n4jsd,n4idl"

			referencedResource = "platform:/resource/org.eclipse.emf.ecore.xcore.lib/model/XcoreLang.xcore"
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
			referencedResource = "platform:/resource/org.eclipse.n4js.ts.model/model/Types.xcore"
			referencedResource = "platform:/resource/org.eclipse.n4js.ts.model/model/TypeRefs.xcore"
			referencedResource = "platform:/resource/org.eclipse.n4js.model/model/N4JS.xcore"

			fragment = grammarAccess.GrammarAccessFragment2 {}

			fragment = ecore.EMFGeneratorFragment2 {}

			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			fragment = resourceFactory.ResourceFactoryFragment2 {}

			fragment = org.eclipse.n4js.antlr.N4JSAntlrGeneratorFragment2 auto-inject {
				combinedGrammar = false
				debugGrammar = true
				antlrParam = "-Xconversiontimeout"
				antlrParam = "30000"
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 auto-inject {
				inheritImplementation = false
				generateXtendStub = true
			}

			fragment = exporting.SimpleNamesFragment2 {}

			fragment = builder.BuilderIntegrationFragment2 {}

			// generator API
			fragment = generator.GeneratorFragment2 {
				generateMwe = false
				generateJavaMain = false
				generateStub = false
			}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {
				generateXtendStub = true
			}

			// labeling API
			fragment = ui.labeling.LabelProviderFragment2 {
				generateXtendStub = true
			}

			// outline API
			fragment = ui.outline.OutlineTreeProviderFragment2 {
				generateXtendStub = true
			}

			fragment = ui.outline.QuickOutlineFragment2 {}

			// quickfix API
			fragment = ui.quickfix.QuickfixProviderFragment2 {
				inheritImplementation = false
				generateXtendStub = true
			}

			// content assist API
			fragment = ui.contentAssist.ContentAssistFragment2 {
				generateXtendStub = true
			}

			// rename refactoring
			fragment = ui.refactoring.RefactorElementNameFragment2 {}

			// provides a preference page for template proposals
			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}

			// provides a compare view
			fragment = ui.compare.CompareFragment2 {}

			// create a parser that will perform token id rewrites to treat keywords as ids in some situations
			fragment = org.eclipse.n4js.antlr.syntaxcoloring.N4JSHighlightingParserGeneratorFragment2 auto-inject {
				antlrParam = "-Xconversiontimeout"
				antlrParam = "30000"
			}

			fragment = org.eclipse.n4js.antlr.compressor.ParserCompressorFragment2 auto-inject {
				// enable this flag if you need to debug the content assist parser
				joinLinesEagerly = false
				grammarFile = "${runtimeProjectPath}.ui/src-gen/org/eclipse/n4js/ui/editor/syntaxcoloring/InternalN4JSParser.java"
				grammarFile = "${runtimeProjectPath}.ide/src-gen/org/eclipse/n4js/ide/contentassist/antlr/internal/InternalN4JSParser.java"
				grammarFile = "${runtimeProjectPath}/src-gen/org/eclipse/n4js/parser/antlr/internal/InternalN4JSParser.java"
			}
		}
	}
}
